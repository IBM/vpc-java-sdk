/*
 * (C) Copyright IBM Corp. 2023, 2024, 2025.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

package com.ibm.cloud.is.vpc.v1;

import com.ibm.cloud.is.vpc.v1.Vpc;
import com.ibm.cloud.is.vpc.v1.model.AccountIdentity;
import com.ibm.cloud.is.vpc.v1.model.AccountIdentityById;
import com.ibm.cloud.is.vpc.v1.model.AccountReference;
import com.ibm.cloud.is.vpc.v1.model.ActivateReservationOptions;
import com.ibm.cloud.is.vpc.v1.model.AddBareMetalServerNetworkInterfaceFloatingIpOptions;
import com.ibm.cloud.is.vpc.v1.model.AddEndpointGatewayIpOptions;
import com.ibm.cloud.is.vpc.v1.model.AddInstanceNetworkInterfaceFloatingIpOptions;
import com.ibm.cloud.is.vpc.v1.model.AddNetworkInterfaceFloatingIpOptions;
import com.ibm.cloud.is.vpc.v1.model.AddVirtualNetworkInterfaceIpOptions;
import com.ibm.cloud.is.vpc.v1.model.AddVpnGatewayConnectionsLocalCidrOptions;
import com.ibm.cloud.is.vpc.v1.model.AddVpnGatewayConnectionsPeerCidrOptions;
import com.ibm.cloud.is.vpc.v1.model.AddressPrefix;
import com.ibm.cloud.is.vpc.v1.model.AddressPrefixCollection;
import com.ibm.cloud.is.vpc.v1.model.AddressPrefixPatch;
import com.ibm.cloud.is.vpc.v1.model.BackupPoliciesPager;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicy;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyCollection;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyHealthReason;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyJob;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyJobCollection;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyJobSource;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyJobSourceInstanceReference;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyJobSourceShareReference;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyJobSourceVolumeReference;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyJobStatusReason;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyJobsPager;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyMatchResourceTypeInstance;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyMatchResourceTypeShare;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyMatchResourceTypeVolume;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyPatch;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyPlan;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyPlanClonePolicy;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyPlanClonePolicyPatch;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyPlanClonePolicyPrototype;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyPlanCollection;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyPlanDeletionTrigger;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyPlanDeletionTriggerPatch;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyPlanDeletionTriggerPrototype;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyPlanPatch;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyPlanPrototype;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyPlanReference;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyPlanRemote;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyPlanRemoteRegionPolicy;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyPlanRemoteRegionPolicyPrototype;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyPrototype;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyPrototypeBackupPolicyMatchResourceTypeInstancePrototype;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyPrototypeBackupPolicyMatchResourceTypeSharePrototype;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyPrototypeBackupPolicyMatchResourceTypeVolumePrototype;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyScope;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyScopeAccountReference;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyScopeEnterpriseReference;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyScopePrototype;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyScopePrototypeEnterpriseIdentity;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyScopePrototypeEnterpriseIdentityEnterpriseIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyTargetSnapshot;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyTargetSnapshotShareSnapshotReference;
import com.ibm.cloud.is.vpc.v1.model.BackupPolicyTargetSnapshotSnapshotReference;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServer;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerBootTarget;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerBootTargetBareMetalServerDiskReference;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerCPU;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerCollection;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerConsoleAccessToken;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerDisk;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerDiskCollection;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerDiskPatch;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerFirmware;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerHealthReason;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerInitialization;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerInitializationPrototype;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerInitializationUserAccount;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerInitializationUserAccountBareMetalServerInitializationHostUserAccount;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerLifecycleReason;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkAttachment;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkAttachmentByPCI;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkAttachmentByVLAN;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkAttachmentCollection;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkAttachmentPatch;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkAttachmentPrototype;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkAttachmentPrototypeBareMetalServerNetworkAttachmentByPCIPrototype;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkAttachmentPrototypeBareMetalServerNetworkAttachmentByVLANPrototype;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkAttachmentPrototypeVirtualNetworkInterface;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkAttachmentPrototypeVirtualNetworkInterfaceVirtualNetworkInterfaceIdentity;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkAttachmentPrototypeVirtualNetworkInterfaceVirtualNetworkInterfaceIdentityVirtualNetworkInterfaceIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkAttachmentPrototypeVirtualNetworkInterfaceVirtualNetworkInterfaceIdentityVirtualNetworkInterfaceIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkAttachmentPrototypeVirtualNetworkInterfaceVirtualNetworkInterfaceIdentityVirtualNetworkInterfaceIdentityById;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkAttachmentPrototypeVirtualNetworkInterfaceVirtualNetworkInterfacePrototypeBareMetalServerNetworkAttachmentContext;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkAttachmentReference;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkAttachmentsPager;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkInterface;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkInterfaceByHiperSocket;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkInterfaceByPCI;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkInterfaceByVLAN;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkInterfaceCollection;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkInterfacePatch;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkInterfacePrototype;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkInterfacePrototypeBareMetalServerNetworkInterfaceByHiperSocketPrototype;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkInterfacePrototypeBareMetalServerNetworkInterfaceByPCIPrototype;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkInterfacePrototypeBareMetalServerNetworkInterfaceByVLANPrototype;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerNetworkInterfacesPager;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerPatch;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerPrimaryNetworkAttachmentPrototype;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerPrimaryNetworkAttachmentPrototypeBareMetalServerPrimaryNetworkAttachmentByPCIPrototype;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerPrimaryNetworkInterfacePrototype;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfile;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileBandwidth;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileBandwidthDependent;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileBandwidthEnum;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileBandwidthFixed;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileBandwidthRange;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileCPUArchitecture;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileCPUCoreCount;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileCPUCoreCountDependent;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileCPUCoreCountEnum;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileCPUCoreCountFixed;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileCPUCoreCountRange;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileCPUSocketCount;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileCPUSocketCountDependent;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileCPUSocketCountEnum;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileCPUSocketCountFixed;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileCPUSocketCountRange;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileCollection;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileConsoleTypes;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileDisk;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileDiskQuantity;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileDiskQuantityDependent;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileDiskQuantityEnum;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileDiskQuantityFixed;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileDiskQuantityRange;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileDiskSize;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileDiskSizeDependent;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileDiskSizeEnum;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileDiskSizeFixed;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileDiskSizeRange;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileDiskSupportedInterfaces;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileIdentity;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileIdentityByName;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileMemory;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileMemoryDependent;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileMemoryEnum;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileMemoryFixed;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileMemoryRange;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileNetworkAttachmentCount;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileNetworkAttachmentCountDependent;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileNetworkAttachmentCountRange;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileNetworkInterfaceCount;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileNetworkInterfaceCountDependent;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileNetworkInterfaceCountRange;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileOSArchitecture;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileReference;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileReservationTerms;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileSupportedTrustedPlatformModuleModes;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfileVirtualNetworkInterfacesSupported;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerProfilesPager;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerPrototype;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerPrototypeBareMetalServerByNetworkAttachment;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerPrototypeBareMetalServerByNetworkInterface;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerReservationAffinity;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerReservationAffinityPatch;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerReservationAffinityPrototype;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerStatusReason;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerTrustedPlatformModule;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerTrustedPlatformModulePatch;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServerTrustedPlatformModulePrototype;
import com.ibm.cloud.is.vpc.v1.model.BareMetalServersPager;
import com.ibm.cloud.is.vpc.v1.model.CatalogOfferingIdentity;
import com.ibm.cloud.is.vpc.v1.model.CatalogOfferingIdentityCatalogOfferingByCRN;
import com.ibm.cloud.is.vpc.v1.model.CatalogOfferingVersionIdentity;
import com.ibm.cloud.is.vpc.v1.model.CatalogOfferingVersionIdentityCatalogOfferingVersionByCRN;
import com.ibm.cloud.is.vpc.v1.model.CatalogOfferingVersionPlanIdentity;
import com.ibm.cloud.is.vpc.v1.model.CatalogOfferingVersionPlanIdentityCatalogOfferingVersionPlanByCRN;
import com.ibm.cloud.is.vpc.v1.model.CatalogOfferingVersionPlanReference;
import com.ibm.cloud.is.vpc.v1.model.CatalogOfferingVersionReference;
import com.ibm.cloud.is.vpc.v1.model.CertificateInstanceIdentity;
import com.ibm.cloud.is.vpc.v1.model.CertificateInstanceIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.CertificateInstanceReference;
import com.ibm.cloud.is.vpc.v1.model.CheckVpnGatewayConnectionsLocalCidrOptions;
import com.ibm.cloud.is.vpc.v1.model.CheckVpnGatewayConnectionsPeerCidrOptions;
import com.ibm.cloud.is.vpc.v1.model.CloudObjectStorageBucketIdentity;
import com.ibm.cloud.is.vpc.v1.model.CloudObjectStorageBucketIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.CloudObjectStorageBucketIdentityCloudObjectStorageBucketIdentityByName;
import com.ibm.cloud.is.vpc.v1.model.CloudObjectStorageBucketReference;
import com.ibm.cloud.is.vpc.v1.model.CloudObjectStorageObjectReference;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetwork;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkCollection;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkInterface;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkInterfaceCollection;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkInterfaceLifecycleReason;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkInterfacePatch;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkInterfacePrimaryIPPrototype;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkInterfacePrimaryIPPrototypeClusterNetworkSubnetReservedIPIdentityClusterNetworkInterfacePrimaryIPContext;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkInterfacePrimaryIPPrototypeClusterNetworkSubnetReservedIPIdentityClusterNetworkInterfacePrimaryIPContextByHref;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkInterfacePrimaryIPPrototypeClusterNetworkSubnetReservedIPIdentityClusterNetworkInterfacePrimaryIPContextById;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkInterfacePrimaryIPPrototypeClusterNetworkSubnetReservedIPPrototypeClusterNetworkInterfacePrimaryIPContext;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkInterfaceReference;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkInterfaceTarget;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkInterfaceTargetInstanceClusterNetworkAttachmentReferenceClusterNetworkInterfaceContext;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkInterfacesPager;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkLifecycleReason;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkPatch;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkProfile;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkProfileCollection;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkProfileIdentity;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkProfileIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkProfileIdentityByName;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkProfileReference;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkProfilesPager;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkReference;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkSubnet;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkSubnetCollection;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkSubnetIdentity;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkSubnetIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkSubnetIdentityById;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkSubnetLifecycleReason;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkSubnetPatch;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkSubnetPrefix;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkSubnetPrefixPrototype;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkSubnetPrototype;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkSubnetPrototypeClusterNetworkSubnetByIPv4CIDRBlockPrototype;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkSubnetPrototypeClusterNetworkSubnetByTotalCountPrototype;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkSubnetReference;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkSubnetReservedIP;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkSubnetReservedIPCollection;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkSubnetReservedIPLifecycleReason;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkSubnetReservedIPPatch;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkSubnetReservedIPReference;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkSubnetReservedIPTarget;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkSubnetReservedIPTargetClusterNetworkInterfaceReferenceClusterNetworkSubnetReservedIPTargetContext;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkSubnetReservedIpsPager;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworkSubnetsPager;
import com.ibm.cloud.is.vpc.v1.model.ClusterNetworksPager;
import com.ibm.cloud.is.vpc.v1.model.CreateBackupPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateBackupPolicyPlanOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateBareMetalServerConsoleAccessTokenOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateBareMetalServerNetworkAttachmentOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateBareMetalServerNetworkInterfaceOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateBareMetalServerOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateClusterNetworkAttachmentOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateClusterNetworkInterfaceOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateClusterNetworkOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateClusterNetworkSubnetOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateClusterNetworkSubnetReservedIpOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateDedicatedHostGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateDedicatedHostOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateEndpointGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateFloatingIpOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateFlowLogCollectorOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateIkePolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateImageExportJobOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateImageOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateInstanceActionOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateInstanceConsoleAccessTokenOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateInstanceGroupManagerActionOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateInstanceGroupManagerOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateInstanceGroupManagerPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateInstanceGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateInstanceNetworkAttachmentOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateInstanceNetworkInterfaceOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateInstanceOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateInstanceTemplateOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateInstanceVolumeAttachmentOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateIpsecPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateKeyOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateLoadBalancerListenerOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateLoadBalancerListenerPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateLoadBalancerListenerPolicyRuleOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateLoadBalancerOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateLoadBalancerPoolMemberOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateLoadBalancerPoolOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateNetworkAclOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateNetworkAclRuleOptions;
import com.ibm.cloud.is.vpc.v1.model.CreatePlacementGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.CreatePrivatePathServiceGatewayAccountPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.CreatePrivatePathServiceGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.CreatePublicGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateReservationOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateSecurityGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateSecurityGroupRuleOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateSecurityGroupTargetBindingOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateShareMountTargetOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateShareOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateShareSnapshotOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateSnapshotCloneOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateSnapshotConsistencyGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateSnapshotOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateSubnetOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateSubnetReservedIpOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateVirtualNetworkInterfaceOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateVolumeOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateVpcAddressPrefixOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateVpcDnsResolutionBindingOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateVpcOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateVpcRouteOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateVpcRoutingTableOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateVpcRoutingTableRouteOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateVpnGatewayConnectionOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateVpnGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateVpnServerOptions;
import com.ibm.cloud.is.vpc.v1.model.CreateVpnServerRouteOptions;
import com.ibm.cloud.is.vpc.v1.model.DNSInstanceIdentity;
import com.ibm.cloud.is.vpc.v1.model.DNSInstanceIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.DNSInstanceReferenceLoadBalancerDNSContext;
import com.ibm.cloud.is.vpc.v1.model.DNSServer;
import com.ibm.cloud.is.vpc.v1.model.DNSServerPrototype;
import com.ibm.cloud.is.vpc.v1.model.DNSZoneIdentity;
import com.ibm.cloud.is.vpc.v1.model.DNSZoneIdentityById;
import com.ibm.cloud.is.vpc.v1.model.DNSZoneReference;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHost;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostCollection;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostDisk;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostDiskCollection;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostDiskPatch;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostGroup;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostGroupCollection;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostGroupIdentity;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostGroupIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostGroupIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostGroupIdentityById;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostGroupPatch;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostGroupPrototypeDedicatedHostByZoneContext;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostGroupReference;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostGroupsPager;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostNUMA;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostNUMANode;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostPatch;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfile;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileCollection;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileDisk;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileDiskInterface;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileDiskQuantity;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileDiskSize;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileDiskSupportedInterfaces;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileIdentity;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileIdentityByName;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileMemory;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileMemoryDependent;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileMemoryEnum;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileMemoryFixed;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileMemoryRange;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileReference;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileSocket;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileSocketDependent;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileSocketEnum;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileSocketFixed;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileSocketRange;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileVCPU;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileVCPUArchitecture;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileVCPUDependent;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileVCPUEnum;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileVCPUFixed;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileVCPUManufacturer;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfileVCPURange;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostProfilesPager;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostPrototype;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostPrototypeDedicatedHostByGroup;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostPrototypeDedicatedHostByZone;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostReference;
import com.ibm.cloud.is.vpc.v1.model.DedicatedHostsPager;
import com.ibm.cloud.is.vpc.v1.model.DefaultNetworkACL;
import com.ibm.cloud.is.vpc.v1.model.DefaultRoutingTable;
import com.ibm.cloud.is.vpc.v1.model.DefaultSecurityGroup;
import com.ibm.cloud.is.vpc.v1.model.DeleteBackupPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteBackupPolicyPlanOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteBareMetalServerNetworkAttachmentOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteBareMetalServerNetworkInterfaceOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteBareMetalServerOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteClusterNetworkInterfaceOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteClusterNetworkOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteClusterNetworkSubnetOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteClusterNetworkSubnetReservedIpOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteDedicatedHostGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteDedicatedHostOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteEndpointGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteFloatingIpOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteFlowLogCollectorOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteIkePolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteImageExportJobOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteImageOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteInstanceClusterNetworkAttachmentOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteInstanceGroupLoadBalancerOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteInstanceGroupManagerActionOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteInstanceGroupManagerOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteInstanceGroupManagerPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteInstanceGroupMembershipOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteInstanceGroupMembershipsOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteInstanceGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteInstanceNetworkAttachmentOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteInstanceNetworkInterfaceOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteInstanceOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteInstanceTemplateOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteInstanceVolumeAttachmentOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteIpsecPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteKeyOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteLoadBalancerListenerOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteLoadBalancerListenerPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteLoadBalancerListenerPolicyRuleOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteLoadBalancerOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteLoadBalancerPoolMemberOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteLoadBalancerPoolOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteNetworkAclOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteNetworkAclRuleOptions;
import com.ibm.cloud.is.vpc.v1.model.DeletePlacementGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.DeletePrivatePathServiceGatewayAccountPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.DeletePrivatePathServiceGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.DeletePublicGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteReservationOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteSecurityGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteSecurityGroupRuleOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteSecurityGroupTargetBindingOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteShareAccessorBindingOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteShareMountTargetOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteShareOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteShareSnapshotOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteShareSourceOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteSnapshotCloneOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteSnapshotConsistencyGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteSnapshotOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteSnapshotsOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteSubnetOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteSubnetReservedIpOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteVirtualNetworkInterfacesOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteVolumeOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteVpcAddressPrefixOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteVpcDnsResolutionBindingOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteVpcOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteVpcRouteOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteVpcRoutingTableOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteVpcRoutingTableRouteOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteVpnGatewayConnectionOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteVpnGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteVpnServerClientOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteVpnServerOptions;
import com.ibm.cloud.is.vpc.v1.model.DeleteVpnServerRouteOptions;
import com.ibm.cloud.is.vpc.v1.model.Deleted;
import com.ibm.cloud.is.vpc.v1.model.DenyPrivatePathServiceGatewayEndpointGatewayBindingOptions;
import com.ibm.cloud.is.vpc.v1.model.DeprecateImageOptions;
import com.ibm.cloud.is.vpc.v1.model.DisconnectVpnClientOptions;
import com.ibm.cloud.is.vpc.v1.model.EncryptionKeyIdentity;
import com.ibm.cloud.is.vpc.v1.model.EncryptionKeyIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.EncryptionKeyReference;
import com.ibm.cloud.is.vpc.v1.model.EndpointGateway;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayCollection;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayIpsPager;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayLifecycleReason;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayPatch;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayReferenceRemote;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayRemote;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayReservedIP;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayReservedIPReservedIPIdentity;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayReservedIPReservedIPIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayReservedIPReservedIPIdentityById;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayReservedIPReservedIPPrototypeTargetContext;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayTarget;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayTargetPrivatePathServiceGatewayReference;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayTargetPrototype;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayTargetPrototypeEndpointGatewayTargetResourceTypePrivatePathServiceGatewayPrototype;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayTargetPrototypeEndpointGatewayTargetResourceTypeProviderCloudServicePrototype;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayTargetPrototypeEndpointGatewayTargetResourceTypeProviderInfrastructureServicePrototype;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayTargetProviderCloudServiceReference;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewayTargetProviderInfrastructureServiceReference;
import com.ibm.cloud.is.vpc.v1.model.EndpointGatewaysPager;
import com.ibm.cloud.is.vpc.v1.model.FailoverShareOptions;
import com.ibm.cloud.is.vpc.v1.model.FloatingIP;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPCollection;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPCollectionVirtualNetworkInterfaceContext;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPPatch;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPPrototype;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPPrototypeFloatingIPByTarget;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPPrototypeFloatingIPByZone;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPReference;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPTarget;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPTargetBareMetalServerNetworkInterfaceReference;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPTargetNetworkInterfaceReference;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPTargetPatch;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPTargetPatchBareMetalServerNetworkInterfaceIdentity;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPTargetPatchBareMetalServerNetworkInterfaceIdentityBareMetalServerNetworkInterfaceIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPTargetPatchBareMetalServerNetworkInterfaceIdentityBareMetalServerNetworkInterfaceIdentityById;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPTargetPatchNetworkInterfaceIdentity;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPTargetPatchNetworkInterfaceIdentityNetworkInterfaceIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPTargetPatchNetworkInterfaceIdentityNetworkInterfaceIdentityById;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPTargetPatchVirtualNetworkInterfaceIdentity;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPTargetPatchVirtualNetworkInterfaceIdentityVirtualNetworkInterfaceIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPTargetPatchVirtualNetworkInterfaceIdentityVirtualNetworkInterfaceIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPTargetPatchVirtualNetworkInterfaceIdentityVirtualNetworkInterfaceIdentityById;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPTargetPrototype;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPTargetPrototypeBareMetalServerNetworkInterfaceIdentity;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPTargetPrototypeBareMetalServerNetworkInterfaceIdentityBareMetalServerNetworkInterfaceIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPTargetPrototypeBareMetalServerNetworkInterfaceIdentityBareMetalServerNetworkInterfaceIdentityById;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPTargetPrototypeNetworkInterfaceIdentity;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPTargetPrototypeNetworkInterfaceIdentityNetworkInterfaceIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPTargetPrototypeNetworkInterfaceIdentityNetworkInterfaceIdentityById;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPTargetPrototypeVirtualNetworkInterfaceIdentity;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPTargetPrototypeVirtualNetworkInterfaceIdentityVirtualNetworkInterfaceIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPTargetPrototypeVirtualNetworkInterfaceIdentityVirtualNetworkInterfaceIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPTargetPrototypeVirtualNetworkInterfaceIdentityVirtualNetworkInterfaceIdentityById;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPTargetPublicGatewayReference;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPTargetVirtualNetworkInterfaceReference;
import com.ibm.cloud.is.vpc.v1.model.FloatingIPUnpaginatedCollection;
import com.ibm.cloud.is.vpc.v1.model.FloatingIpsPager;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollector;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorCollection;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorPatch;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTarget;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetInstanceNetworkAttachmentReference;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetInstanceReference;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetNetworkInterfaceReferenceTargetContext;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototype;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeInstanceIdentity;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeInstanceIdentityInstanceIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeInstanceIdentityInstanceIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeInstanceIdentityInstanceIdentityById;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeInstanceNetworkAttachmentIdentity;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeInstanceNetworkAttachmentIdentityInstanceNetworkAttachmentIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeInstanceNetworkAttachmentIdentityInstanceNetworkAttachmentIdentityById;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeNetworkInterfaceIdentity;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeNetworkInterfaceIdentityNetworkInterfaceIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeNetworkInterfaceIdentityNetworkInterfaceIdentityById;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeSubnetIdentity;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeSubnetIdentitySubnetIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeSubnetIdentitySubnetIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeSubnetIdentitySubnetIdentityById;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeVPCIdentity;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeVPCIdentityVPCIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeVPCIdentityVPCIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeVPCIdentityVPCIdentityById;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeVirtualNetworkInterfaceIdentity;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeVirtualNetworkInterfaceIdentityVirtualNetworkInterfaceIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeVirtualNetworkInterfaceIdentityVirtualNetworkInterfaceIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetPrototypeVirtualNetworkInterfaceIdentityVirtualNetworkInterfaceIdentityById;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetSubnetReference;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetVPCReference;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorTargetVirtualNetworkInterfaceReferenceAttachmentContext;
import com.ibm.cloud.is.vpc.v1.model.FlowLogCollectorsPager;
import com.ibm.cloud.is.vpc.v1.model.GetBackupPolicyJobOptions;
import com.ibm.cloud.is.vpc.v1.model.GetBackupPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.GetBackupPolicyPlanOptions;
import com.ibm.cloud.is.vpc.v1.model.GetBareMetalServerDiskOptions;
import com.ibm.cloud.is.vpc.v1.model.GetBareMetalServerInitializationOptions;
import com.ibm.cloud.is.vpc.v1.model.GetBareMetalServerNetworkAttachmentOptions;
import com.ibm.cloud.is.vpc.v1.model.GetBareMetalServerNetworkInterfaceFloatingIpOptions;
import com.ibm.cloud.is.vpc.v1.model.GetBareMetalServerNetworkInterfaceIpOptions;
import com.ibm.cloud.is.vpc.v1.model.GetBareMetalServerNetworkInterfaceOptions;
import com.ibm.cloud.is.vpc.v1.model.GetBareMetalServerOptions;
import com.ibm.cloud.is.vpc.v1.model.GetBareMetalServerProfileOptions;
import com.ibm.cloud.is.vpc.v1.model.GetClusterNetworkInterfaceOptions;
import com.ibm.cloud.is.vpc.v1.model.GetClusterNetworkOptions;
import com.ibm.cloud.is.vpc.v1.model.GetClusterNetworkProfileOptions;
import com.ibm.cloud.is.vpc.v1.model.GetClusterNetworkSubnetOptions;
import com.ibm.cloud.is.vpc.v1.model.GetClusterNetworkSubnetReservedIpOptions;
import com.ibm.cloud.is.vpc.v1.model.GetDedicatedHostDiskOptions;
import com.ibm.cloud.is.vpc.v1.model.GetDedicatedHostGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.GetDedicatedHostOptions;
import com.ibm.cloud.is.vpc.v1.model.GetDedicatedHostProfileOptions;
import com.ibm.cloud.is.vpc.v1.model.GetEndpointGatewayIpOptions;
import com.ibm.cloud.is.vpc.v1.model.GetEndpointGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.GetFloatingIpOptions;
import com.ibm.cloud.is.vpc.v1.model.GetFlowLogCollectorOptions;
import com.ibm.cloud.is.vpc.v1.model.GetIkePolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.GetImageExportJobOptions;
import com.ibm.cloud.is.vpc.v1.model.GetImageOptions;
import com.ibm.cloud.is.vpc.v1.model.GetInstanceClusterNetworkAttachmentOptions;
import com.ibm.cloud.is.vpc.v1.model.GetInstanceDiskOptions;
import com.ibm.cloud.is.vpc.v1.model.GetInstanceGroupManagerActionOptions;
import com.ibm.cloud.is.vpc.v1.model.GetInstanceGroupManagerOptions;
import com.ibm.cloud.is.vpc.v1.model.GetInstanceGroupManagerPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.GetInstanceGroupMembershipOptions;
import com.ibm.cloud.is.vpc.v1.model.GetInstanceGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.GetInstanceInitializationOptions;
import com.ibm.cloud.is.vpc.v1.model.GetInstanceNetworkAttachmentOptions;
import com.ibm.cloud.is.vpc.v1.model.GetInstanceNetworkInterfaceFloatingIpOptions;
import com.ibm.cloud.is.vpc.v1.model.GetInstanceNetworkInterfaceIpOptions;
import com.ibm.cloud.is.vpc.v1.model.GetInstanceNetworkInterfaceOptions;
import com.ibm.cloud.is.vpc.v1.model.GetInstanceOptions;
import com.ibm.cloud.is.vpc.v1.model.GetInstanceProfileOptions;
import com.ibm.cloud.is.vpc.v1.model.GetInstanceTemplateOptions;
import com.ibm.cloud.is.vpc.v1.model.GetInstanceVolumeAttachmentOptions;
import com.ibm.cloud.is.vpc.v1.model.GetIpsecPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.GetKeyOptions;
import com.ibm.cloud.is.vpc.v1.model.GetLoadBalancerListenerOptions;
import com.ibm.cloud.is.vpc.v1.model.GetLoadBalancerListenerPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.GetLoadBalancerListenerPolicyRuleOptions;
import com.ibm.cloud.is.vpc.v1.model.GetLoadBalancerOptions;
import com.ibm.cloud.is.vpc.v1.model.GetLoadBalancerPoolMemberOptions;
import com.ibm.cloud.is.vpc.v1.model.GetLoadBalancerPoolOptions;
import com.ibm.cloud.is.vpc.v1.model.GetLoadBalancerProfileOptions;
import com.ibm.cloud.is.vpc.v1.model.GetLoadBalancerStatisticsOptions;
import com.ibm.cloud.is.vpc.v1.model.GetNetworkAclOptions;
import com.ibm.cloud.is.vpc.v1.model.GetNetworkAclRuleOptions;
import com.ibm.cloud.is.vpc.v1.model.GetNetworkInterfaceFloatingIpOptions;
import com.ibm.cloud.is.vpc.v1.model.GetOperatingSystemOptions;
import com.ibm.cloud.is.vpc.v1.model.GetPlacementGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.GetPrivatePathServiceGatewayAccountPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.GetPrivatePathServiceGatewayEndpointGatewayBindingOptions;
import com.ibm.cloud.is.vpc.v1.model.GetPrivatePathServiceGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.GetPublicGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.GetRegionOptions;
import com.ibm.cloud.is.vpc.v1.model.GetRegionZoneOptions;
import com.ibm.cloud.is.vpc.v1.model.GetReservationOptions;
import com.ibm.cloud.is.vpc.v1.model.GetSecurityGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.GetSecurityGroupRuleOptions;
import com.ibm.cloud.is.vpc.v1.model.GetSecurityGroupTargetOptions;
import com.ibm.cloud.is.vpc.v1.model.GetShareAccessorBindingOptions;
import com.ibm.cloud.is.vpc.v1.model.GetShareMountTargetOptions;
import com.ibm.cloud.is.vpc.v1.model.GetShareOptions;
import com.ibm.cloud.is.vpc.v1.model.GetShareProfileOptions;
import com.ibm.cloud.is.vpc.v1.model.GetShareSnapshotOptions;
import com.ibm.cloud.is.vpc.v1.model.GetShareSourceOptions;
import com.ibm.cloud.is.vpc.v1.model.GetSnapshotCloneOptions;
import com.ibm.cloud.is.vpc.v1.model.GetSnapshotConsistencyGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.GetSnapshotOptions;
import com.ibm.cloud.is.vpc.v1.model.GetSubnetNetworkAclOptions;
import com.ibm.cloud.is.vpc.v1.model.GetSubnetOptions;
import com.ibm.cloud.is.vpc.v1.model.GetSubnetPublicGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.GetSubnetReservedIpOptions;
import com.ibm.cloud.is.vpc.v1.model.GetSubnetRoutingTableOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVirtualNetworkInterfaceIpOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVirtualNetworkInterfaceOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVolumeOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVolumeProfileOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVpcAddressPrefixOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVpcDefaultNetworkAclOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVpcDefaultRoutingTableOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVpcDefaultSecurityGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVpcDnsResolutionBindingOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVpcOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVpcRouteOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVpcRoutingTableOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVpcRoutingTableRouteOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVpnGatewayConnectionOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVpnGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVpnServerClientConfigurationOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVpnServerClientOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVpnServerOptions;
import com.ibm.cloud.is.vpc.v1.model.GetVpnServerRouteOptions;
import com.ibm.cloud.is.vpc.v1.model.IKEPolicy;
import com.ibm.cloud.is.vpc.v1.model.IKEPolicyCollection;
import com.ibm.cloud.is.vpc.v1.model.IKEPolicyConnectionCollection;
import com.ibm.cloud.is.vpc.v1.model.IKEPolicyPatch;
import com.ibm.cloud.is.vpc.v1.model.IKEPolicyReference;
import com.ibm.cloud.is.vpc.v1.model.IP;
import com.ibm.cloud.is.vpc.v1.model.IPsecPolicy;
import com.ibm.cloud.is.vpc.v1.model.IPsecPolicyCollection;
import com.ibm.cloud.is.vpc.v1.model.IPsecPolicyConnectionCollection;
import com.ibm.cloud.is.vpc.v1.model.IPsecPolicyPatch;
import com.ibm.cloud.is.vpc.v1.model.IPsecPolicyReference;
import com.ibm.cloud.is.vpc.v1.model.IkePoliciesPager;
import com.ibm.cloud.is.vpc.v1.model.IkePolicyConnectionsPager;
import com.ibm.cloud.is.vpc.v1.model.Image;
import com.ibm.cloud.is.vpc.v1.model.ImageCatalogOffering;
import com.ibm.cloud.is.vpc.v1.model.ImageCollection;
import com.ibm.cloud.is.vpc.v1.model.ImageExportJob;
import com.ibm.cloud.is.vpc.v1.model.ImageExportJobPatch;
import com.ibm.cloud.is.vpc.v1.model.ImageExportJobStatusReason;
import com.ibm.cloud.is.vpc.v1.model.ImageExportJobUnpaginatedCollection;
import com.ibm.cloud.is.vpc.v1.model.ImageFile;
import com.ibm.cloud.is.vpc.v1.model.ImageFileChecksums;
import com.ibm.cloud.is.vpc.v1.model.ImageFilePrototype;
import com.ibm.cloud.is.vpc.v1.model.ImageIdentity;
import com.ibm.cloud.is.vpc.v1.model.ImageIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.ImageIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.ImageIdentityById;
import com.ibm.cloud.is.vpc.v1.model.ImagePatch;
import com.ibm.cloud.is.vpc.v1.model.ImagePrototype;
import com.ibm.cloud.is.vpc.v1.model.ImagePrototypeImageByFile;
import com.ibm.cloud.is.vpc.v1.model.ImagePrototypeImageBySourceVolume;
import com.ibm.cloud.is.vpc.v1.model.ImageReference;
import com.ibm.cloud.is.vpc.v1.model.ImageRemote;
import com.ibm.cloud.is.vpc.v1.model.ImageRemoteContextImageReference;
import com.ibm.cloud.is.vpc.v1.model.ImageStatusReason;
import com.ibm.cloud.is.vpc.v1.model.ImagesPager;
import com.ibm.cloud.is.vpc.v1.model.Instance;
import com.ibm.cloud.is.vpc.v1.model.InstanceAction;
import com.ibm.cloud.is.vpc.v1.model.InstanceAvailabilityPolicy;
import com.ibm.cloud.is.vpc.v1.model.InstanceAvailabilityPolicyPatch;
import com.ibm.cloud.is.vpc.v1.model.InstanceAvailabilityPolicyPrototype;
import com.ibm.cloud.is.vpc.v1.model.InstanceCatalogOffering;
import com.ibm.cloud.is.vpc.v1.model.InstanceCatalogOfferingPrototype;
import com.ibm.cloud.is.vpc.v1.model.InstanceCatalogOfferingPrototypeCatalogOfferingByOffering;
import com.ibm.cloud.is.vpc.v1.model.InstanceCatalogOfferingPrototypeCatalogOfferingByVersion;
import com.ibm.cloud.is.vpc.v1.model.InstanceClusterNetworkAttachment;
import com.ibm.cloud.is.vpc.v1.model.InstanceClusterNetworkAttachmentBefore;
import com.ibm.cloud.is.vpc.v1.model.InstanceClusterNetworkAttachmentBeforePrototype;
import com.ibm.cloud.is.vpc.v1.model.InstanceClusterNetworkAttachmentBeforePrototypeInstanceClusterNetworkAttachmentIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.InstanceClusterNetworkAttachmentBeforePrototypeInstanceClusterNetworkAttachmentIdentityById;
import com.ibm.cloud.is.vpc.v1.model.InstanceClusterNetworkAttachmentCollection;
import com.ibm.cloud.is.vpc.v1.model.InstanceClusterNetworkAttachmentLifecycleReason;
import com.ibm.cloud.is.vpc.v1.model.InstanceClusterNetworkAttachmentPatch;
import com.ibm.cloud.is.vpc.v1.model.InstanceClusterNetworkAttachmentPrototypeClusterNetworkInterface;
import com.ibm.cloud.is.vpc.v1.model.InstanceClusterNetworkAttachmentPrototypeClusterNetworkInterfaceClusterNetworkInterfaceIdentity;
import com.ibm.cloud.is.vpc.v1.model.InstanceClusterNetworkAttachmentPrototypeClusterNetworkInterfaceClusterNetworkInterfaceIdentityClusterNetworkInterfaceIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.InstanceClusterNetworkAttachmentPrototypeClusterNetworkInterfaceClusterNetworkInterfaceIdentityClusterNetworkInterfaceIdentityById;
import com.ibm.cloud.is.vpc.v1.model.InstanceClusterNetworkAttachmentPrototypeClusterNetworkInterfaceInstanceClusterNetworkInterfacePrototypeInstanceClusterNetworkAttachment;
import com.ibm.cloud.is.vpc.v1.model.InstanceClusterNetworkAttachmentPrototypeInstanceContext;
import com.ibm.cloud.is.vpc.v1.model.InstanceClusterNetworkAttachmentReference;
import com.ibm.cloud.is.vpc.v1.model.InstanceClusterNetworkAttachmentsPager;
import com.ibm.cloud.is.vpc.v1.model.InstanceCollection;
import com.ibm.cloud.is.vpc.v1.model.InstanceConsoleAccessToken;
import com.ibm.cloud.is.vpc.v1.model.InstanceDefaultTrustedProfilePrototype;
import com.ibm.cloud.is.vpc.v1.model.InstanceDisk;
import com.ibm.cloud.is.vpc.v1.model.InstanceDiskCollection;
import com.ibm.cloud.is.vpc.v1.model.InstanceDiskPatch;
import com.ibm.cloud.is.vpc.v1.model.InstanceDiskReference;
import com.ibm.cloud.is.vpc.v1.model.InstanceGPU;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroup;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupCollection;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupLifecycleReason;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManager;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerAction;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionGroupPatch;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionManagerPatch;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionPatch;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionPrototype;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionPrototypeScheduledActionPrototype;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionPrototypeScheduledActionPrototypeByCronSpec;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionPrototypeScheduledActionPrototypeByCronSpecByGroup;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionPrototypeScheduledActionPrototypeByCronSpecByManager;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionPrototypeScheduledActionPrototypeByRunAt;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionPrototypeScheduledActionPrototypeByRunAtByGroup;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionPrototypeScheduledActionPrototypeByRunAtByManager;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionReference;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionScheduledAction;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionScheduledActionGroupTarget;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionScheduledActionManagerTarget;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionsCollection;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerActionsPager;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerAutoScale;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerCollection;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerPatch;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerPoliciesPager;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerPolicy;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerPolicyCollection;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerPolicyInstanceGroupManagerTargetPolicy;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerPolicyPatch;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerPolicyPrototype;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerPolicyReference;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerPrototype;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerPrototypeInstanceGroupManagerScheduledPrototype;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerReference;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerScheduled;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerScheduledActionGroup;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerScheduledActionGroupPrototype;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerScheduledActionManager;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerScheduledActionManagerAutoScale;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerScheduledActionManagerPrototype;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerScheduledActionManagerPrototypeAutoScalePrototype;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerScheduledActionManagerPrototypeAutoScalePrototypeByHref;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagerScheduledActionManagerPrototypeAutoScalePrototypeById;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupManagersPager;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupMembership;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupMembershipCollection;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupMembershipPatch;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupMembershipsPager;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupPatch;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupReference;
import com.ibm.cloud.is.vpc.v1.model.InstanceGroupsPager;
import com.ibm.cloud.is.vpc.v1.model.InstanceHealthReason;
import com.ibm.cloud.is.vpc.v1.model.InstanceInitialization;
import com.ibm.cloud.is.vpc.v1.model.InstanceInitializationDefaultTrustedProfile;
import com.ibm.cloud.is.vpc.v1.model.InstanceInitializationPassword;
import com.ibm.cloud.is.vpc.v1.model.InstanceLifecycleReason;
import com.ibm.cloud.is.vpc.v1.model.InstanceMetadataService;
import com.ibm.cloud.is.vpc.v1.model.InstanceMetadataServicePatch;
import com.ibm.cloud.is.vpc.v1.model.InstanceMetadataServicePrototype;
import com.ibm.cloud.is.vpc.v1.model.InstanceNetworkAttachment;
import com.ibm.cloud.is.vpc.v1.model.InstanceNetworkAttachmentCollection;
import com.ibm.cloud.is.vpc.v1.model.InstanceNetworkAttachmentPatch;
import com.ibm.cloud.is.vpc.v1.model.InstanceNetworkAttachmentPrototype;
import com.ibm.cloud.is.vpc.v1.model.InstanceNetworkAttachmentPrototypeVirtualNetworkInterface;
import com.ibm.cloud.is.vpc.v1.model.InstanceNetworkAttachmentPrototypeVirtualNetworkInterfaceVirtualNetworkInterfaceIdentity;
import com.ibm.cloud.is.vpc.v1.model.InstanceNetworkAttachmentPrototypeVirtualNetworkInterfaceVirtualNetworkInterfaceIdentityVirtualNetworkInterfaceIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.InstanceNetworkAttachmentPrototypeVirtualNetworkInterfaceVirtualNetworkInterfaceIdentityVirtualNetworkInterfaceIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.InstanceNetworkAttachmentPrototypeVirtualNetworkInterfaceVirtualNetworkInterfaceIdentityVirtualNetworkInterfaceIdentityById;
import com.ibm.cloud.is.vpc.v1.model.InstanceNetworkAttachmentPrototypeVirtualNetworkInterfaceVirtualNetworkInterfacePrototypeInstanceNetworkAttachmentContext;
import com.ibm.cloud.is.vpc.v1.model.InstanceNetworkAttachmentReference;
import com.ibm.cloud.is.vpc.v1.model.InstanceNetworkInterfaceIpsPager;
import com.ibm.cloud.is.vpc.v1.model.InstancePatch;
import com.ibm.cloud.is.vpc.v1.model.InstancePatchProfile;
import com.ibm.cloud.is.vpc.v1.model.InstancePatchProfileInstanceProfileIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.InstancePatchProfileInstanceProfileIdentityByName;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTarget;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetDedicatedHostGroupReference;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetDedicatedHostReference;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPatch;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPatchDedicatedHostGroupIdentity;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPatchDedicatedHostGroupIdentityDedicatedHostGroupIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPatchDedicatedHostGroupIdentityDedicatedHostGroupIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPatchDedicatedHostGroupIdentityDedicatedHostGroupIdentityById;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPatchDedicatedHostIdentity;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPatchDedicatedHostIdentityDedicatedHostIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPatchDedicatedHostIdentityDedicatedHostIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPatchDedicatedHostIdentityDedicatedHostIdentityById;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPlacementGroupReference;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPrototype;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPrototypeDedicatedHostGroupIdentity;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPrototypeDedicatedHostGroupIdentityDedicatedHostGroupIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPrototypeDedicatedHostGroupIdentityDedicatedHostGroupIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPrototypeDedicatedHostGroupIdentityDedicatedHostGroupIdentityById;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPrototypeDedicatedHostIdentity;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityById;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPrototypePlacementGroupIdentity;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPrototypePlacementGroupIdentityPlacementGroupIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPrototypePlacementGroupIdentityPlacementGroupIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.InstancePlacementTargetPrototypePlacementGroupIdentityPlacementGroupIdentityById;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfile;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileBandwidth;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileBandwidthDependent;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileBandwidthEnum;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileBandwidthFixed;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileBandwidthRange;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileClusterNetworkAttachmentCount;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileClusterNetworkAttachmentCountDependent;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileClusterNetworkAttachmentCountEnum;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileClusterNetworkAttachmentCountRange;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileCollection;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileDisk;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileDiskQuantity;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileDiskQuantityDependent;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileDiskQuantityEnum;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileDiskQuantityFixed;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileDiskQuantityRange;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileDiskSize;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileDiskSizeDependent;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileDiskSizeEnum;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileDiskSizeFixed;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileDiskSizeRange;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileDiskSupportedInterfaces;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileGPU;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileGPUDependent;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileGPUEnum;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileGPUFixed;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileGPUManufacturer;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileGPUMemory;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileGPUMemoryDependent;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileGPUMemoryEnum;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileGPUMemoryFixed;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileGPUMemoryRange;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileGPUModel;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileGPURange;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileIdentity;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileIdentityByName;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileMemory;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileMemoryDependent;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileMemoryEnum;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileMemoryFixed;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileMemoryRange;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileNUMACount;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileNUMACountDependent;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileNUMACountFixed;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileNetworkAttachmentCount;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileNetworkAttachmentCountDependent;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileNetworkAttachmentCountRange;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileNetworkInterfaceCount;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileNetworkInterfaceCountDependent;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileNetworkInterfaceCountRange;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileOSArchitecture;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfilePortSpeed;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfilePortSpeedDependent;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfilePortSpeedFixed;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileReference;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileReservationTerms;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileSupportedConfidentialComputeModes;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileSupportedSecureBootModes;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileVCPU;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileVCPUArchitecture;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileVCPUDependent;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileVCPUEnum;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileVCPUFixed;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileVCPUManufacturer;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileVCPUManufacturerDependent;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileVCPUManufacturerFixed;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileVCPURange;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileVolumeBandwidth;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileVolumeBandwidthDependent;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileVolumeBandwidthEnum;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileVolumeBandwidthFixed;
import com.ibm.cloud.is.vpc.v1.model.InstanceProfileVolumeBandwidthRange;
import com.ibm.cloud.is.vpc.v1.model.InstancePrototype;
import com.ibm.cloud.is.vpc.v1.model.InstancePrototypeInstanceByCatalogOffering;
import com.ibm.cloud.is.vpc.v1.model.InstancePrototypeInstanceByCatalogOfferingInstanceByCatalogOfferingInstanceByNetworkAttachment;
import com.ibm.cloud.is.vpc.v1.model.InstancePrototypeInstanceByCatalogOfferingInstanceByCatalogOfferingInstanceByNetworkInterface;
import com.ibm.cloud.is.vpc.v1.model.InstancePrototypeInstanceByImage;
import com.ibm.cloud.is.vpc.v1.model.InstancePrototypeInstanceByImageInstanceByImageInstanceByNetworkAttachment;
import com.ibm.cloud.is.vpc.v1.model.InstancePrototypeInstanceByImageInstanceByImageInstanceByNetworkInterface;
import com.ibm.cloud.is.vpc.v1.model.InstancePrototypeInstanceBySourceSnapshot;
import com.ibm.cloud.is.vpc.v1.model.InstancePrototypeInstanceBySourceSnapshotInstanceBySourceSnapshotInstanceByNetworkAttachment;
import com.ibm.cloud.is.vpc.v1.model.InstancePrototypeInstanceBySourceSnapshotInstanceBySourceSnapshotInstanceByNetworkInterface;
import com.ibm.cloud.is.vpc.v1.model.InstancePrototypeInstanceBySourceTemplate;
import com.ibm.cloud.is.vpc.v1.model.InstancePrototypeInstanceByVolume;
import com.ibm.cloud.is.vpc.v1.model.InstancePrototypeInstanceByVolumeInstanceByVolumeInstanceByNetworkAttachment;
import com.ibm.cloud.is.vpc.v1.model.InstancePrototypeInstanceByVolumeInstanceByVolumeInstanceByNetworkInterface;
import com.ibm.cloud.is.vpc.v1.model.InstanceReference;
import com.ibm.cloud.is.vpc.v1.model.InstanceReservationAffinity;
import com.ibm.cloud.is.vpc.v1.model.InstanceReservationAffinityPatch;
import com.ibm.cloud.is.vpc.v1.model.InstanceReservationAffinityPrototype;
import com.ibm.cloud.is.vpc.v1.model.InstanceStatusReason;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplate;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplateCollection;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplateIdentity;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplateIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplateIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplateIdentityById;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplateInstanceByCatalogOfferingInstanceTemplateContext;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplateInstanceByCatalogOfferingInstanceTemplateContextInstanceByCatalogOfferingInstanceTemplateContextInstanceByNetworkAttachment;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplateInstanceByCatalogOfferingInstanceTemplateContextInstanceByCatalogOfferingInstanceTemplateContextInstanceByNetworkInterface;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplateInstanceByImageInstanceTemplateContext;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplateInstanceByImageInstanceTemplateContextInstanceByImageInstanceTemplateContextInstanceByNetworkAttachment;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplateInstanceByImageInstanceTemplateContextInstanceByImageInstanceTemplateContextInstanceByNetworkInterface;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplateInstanceBySourceSnapshotInstanceTemplateContext;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplateInstanceBySourceSnapshotInstanceTemplateContextInstanceBySourceSnapshotInstanceTemplateContextInstanceByNetworkAttachment;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplateInstanceBySourceSnapshotInstanceTemplateContextInstanceBySourceSnapshotInstanceTemplateContextInstanceByNetworkInterface;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplatePatch;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplatePrototype;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplatePrototypeInstanceTemplateByCatalogOffering;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplatePrototypeInstanceTemplateByCatalogOfferingInstanceTemplateByCatalogOfferingInstanceByNetworkAttachment;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplatePrototypeInstanceTemplateByCatalogOfferingInstanceTemplateByCatalogOfferingInstanceByNetworkInterface;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplatePrototypeInstanceTemplateByImage;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplatePrototypeInstanceTemplateByImageInstanceTemplateByImageInstanceByNetworkAttachment;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplatePrototypeInstanceTemplateByImageInstanceTemplateByImageInstanceByNetworkInterface;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplatePrototypeInstanceTemplateBySourceSnapshot;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplatePrototypeInstanceTemplateBySourceSnapshotInstanceTemplateBySourceSnapshotInstanceByNetworkAttachment;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplatePrototypeInstanceTemplateBySourceSnapshotInstanceTemplateBySourceSnapshotInstanceByNetworkInterface;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplatePrototypeInstanceTemplateBySourceTemplate;
import com.ibm.cloud.is.vpc.v1.model.InstanceTemplateReference;
import com.ibm.cloud.is.vpc.v1.model.InstanceVCPU;
import com.ibm.cloud.is.vpc.v1.model.InstancesPager;
import com.ibm.cloud.is.vpc.v1.model.IpsecPoliciesPager;
import com.ibm.cloud.is.vpc.v1.model.IpsecPolicyConnectionsPager;
import com.ibm.cloud.is.vpc.v1.model.Key;
import com.ibm.cloud.is.vpc.v1.model.KeyCollection;
import com.ibm.cloud.is.vpc.v1.model.KeyIdentity;
import com.ibm.cloud.is.vpc.v1.model.KeyIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.KeyIdentityByFingerprint;
import com.ibm.cloud.is.vpc.v1.model.KeyIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.KeyIdentityById;
import com.ibm.cloud.is.vpc.v1.model.KeyPatch;
import com.ibm.cloud.is.vpc.v1.model.KeyReference;
import com.ibm.cloud.is.vpc.v1.model.KeysPager;
import com.ibm.cloud.is.vpc.v1.model.LegacyCloudObjectStorageBucketIdentity;
import com.ibm.cloud.is.vpc.v1.model.LegacyCloudObjectStorageBucketIdentityCloudObjectStorageBucketIdentityByName;
import com.ibm.cloud.is.vpc.v1.model.LegacyCloudObjectStorageBucketReference;
import com.ibm.cloud.is.vpc.v1.model.ListBackupPoliciesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListBackupPolicyJobsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListBackupPolicyPlansOptions;
import com.ibm.cloud.is.vpc.v1.model.ListBareMetalServerDisksOptions;
import com.ibm.cloud.is.vpc.v1.model.ListBareMetalServerNetworkAttachmentsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListBareMetalServerNetworkInterfaceFloatingIpsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListBareMetalServerNetworkInterfaceIpsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListBareMetalServerNetworkInterfacesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListBareMetalServerProfilesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListBareMetalServersOptions;
import com.ibm.cloud.is.vpc.v1.model.ListClusterNetworkInterfacesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListClusterNetworkProfilesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListClusterNetworkSubnetReservedIpsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListClusterNetworkSubnetsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListClusterNetworksOptions;
import com.ibm.cloud.is.vpc.v1.model.ListDedicatedHostDisksOptions;
import com.ibm.cloud.is.vpc.v1.model.ListDedicatedHostGroupsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListDedicatedHostProfilesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListDedicatedHostsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListEndpointGatewayIpsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListEndpointGatewaysOptions;
import com.ibm.cloud.is.vpc.v1.model.ListFloatingIpsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListFlowLogCollectorsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListIkePoliciesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListIkePolicyConnectionsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListImageExportJobsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListImagesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListInstanceClusterNetworkAttachmentsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListInstanceDisksOptions;
import com.ibm.cloud.is.vpc.v1.model.ListInstanceGroupManagerActionsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListInstanceGroupManagerPoliciesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListInstanceGroupManagersOptions;
import com.ibm.cloud.is.vpc.v1.model.ListInstanceGroupMembershipsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListInstanceGroupsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListInstanceNetworkAttachmentsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListInstanceNetworkInterfaceFloatingIpsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListInstanceNetworkInterfaceIpsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListInstanceNetworkInterfacesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListInstanceProfilesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListInstanceTemplatesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListInstanceVolumeAttachmentsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListInstancesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListIpsecPoliciesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListIpsecPolicyConnectionsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListKeysOptions;
import com.ibm.cloud.is.vpc.v1.model.ListLoadBalancerListenerPoliciesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListLoadBalancerListenerPolicyRulesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListLoadBalancerListenersOptions;
import com.ibm.cloud.is.vpc.v1.model.ListLoadBalancerPoolMembersOptions;
import com.ibm.cloud.is.vpc.v1.model.ListLoadBalancerPoolsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListLoadBalancerProfilesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListLoadBalancersOptions;
import com.ibm.cloud.is.vpc.v1.model.ListNetworkAclRulesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListNetworkAclsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListNetworkInterfaceFloatingIpsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListOperatingSystemsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListPlacementGroupsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListPrivatePathServiceGatewayAccountPoliciesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListPrivatePathServiceGatewayEndpointGatewayBindingsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListPrivatePathServiceGatewaysOptions;
import com.ibm.cloud.is.vpc.v1.model.ListPublicGatewaysOptions;
import com.ibm.cloud.is.vpc.v1.model.ListRegionZonesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListRegionsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListReservationsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListSecurityGroupRulesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListSecurityGroupTargetsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListSecurityGroupsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListShareAccessorBindingsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListShareMountTargetsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListShareProfilesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListShareSnapshotsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListSharesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListSnapshotClonesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListSnapshotConsistencyGroupsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListSnapshotsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListSubnetReservedIpsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListSubnetsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListVirtualNetworkInterfaceIpsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListVirtualNetworkInterfacesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListVolumeProfilesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListVolumesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListVpcAddressPrefixesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListVpcDnsResolutionBindingsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListVpcRoutesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListVpcRoutingTableRoutesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListVpcRoutingTablesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListVpcsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListVpnGatewayConnectionsLocalCidrsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListVpnGatewayConnectionsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListVpnGatewayConnectionsPeerCidrsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListVpnGatewaysOptions;
import com.ibm.cloud.is.vpc.v1.model.ListVpnServerClientsOptions;
import com.ibm.cloud.is.vpc.v1.model.ListVpnServerRoutesOptions;
import com.ibm.cloud.is.vpc.v1.model.ListVpnServersOptions;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancer;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerCollection;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerDNS;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerDNSPatch;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerDNSPrototype;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerIdentity;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerIdentityById;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListener;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerCollection;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerDefaultPoolPatch;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerDefaultPoolPatchLoadBalancerPoolIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerDefaultPoolPatchLoadBalancerPoolIdentityById;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerHTTPSRedirect;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerHTTPSRedirectPatch;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerHTTPSRedirectPrototype;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerIdentity;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerIdentityById;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPatch;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicy;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyCollection;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyPatch;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyPrototype;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyReference;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyRule;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyRuleCollection;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyRulePatch;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyRulePrototype;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyRuleReference;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTarget;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetLoadBalancerListenerPolicyHTTPSRedirect;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetLoadBalancerListenerPolicyRedirectURL;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetLoadBalancerListenerReference;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetLoadBalancerPoolReference;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetPatch;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetPatchLoadBalancerListenerIdentity;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetPatchLoadBalancerListenerIdentityLoadBalancerListenerIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetPatchLoadBalancerListenerIdentityLoadBalancerListenerIdentityById;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetPatchLoadBalancerListenerPolicyHTTPSRedirectPatch;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetPatchLoadBalancerListenerPolicyRedirectURLPatch;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetPatchLoadBalancerPoolIdentity;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetPatchLoadBalancerPoolIdentityLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetPatchLoadBalancerPoolIdentityLoadBalancerPoolIdentityLoadBalancerPoolIdentityById;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetPrototype;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetPrototypeLoadBalancerListenerIdentity;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetPrototypeLoadBalancerListenerIdentityLoadBalancerListenerIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetPrototypeLoadBalancerListenerIdentityLoadBalancerListenerIdentityById;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetPrototypeLoadBalancerListenerPolicyHTTPSRedirectPrototype;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetPrototypeLoadBalancerListenerPolicyRedirectURLPrototype;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentity;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityLoadBalancerPoolIdentityById;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerPrototypeLoadBalancerContext;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerListenerReference;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerLogging;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerLoggingDatapath;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerLoggingDatapathPatch;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerLoggingDatapathPrototype;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerLoggingPatch;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerLoggingPrototype;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPatch;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPool;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolCollection;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolFailsafePolicy;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolFailsafePolicyPatch;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolFailsafePolicyPrototype;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolFailsafePolicyTargetPatch;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolFailsafePolicyTargetPatchLoadBalancerPoolIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolFailsafePolicyTargetPatchLoadBalancerPoolIdentityById;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolHealthMonitor;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolHealthMonitorPatch;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolHealthMonitorPrototype;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolHealthMonitorPrototypeLoadBalancerPoolHealthMonitorTypeHTTPHTTPSPrototype;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolHealthMonitorPrototypeLoadBalancerPoolHealthMonitorTypeTCPPrototype;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolHealthMonitorTypeHTTPHTTPS;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolHealthMonitorTypeTCP;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolIdentity;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolIdentityByName;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolIdentityLoadBalancerPoolIdentityById;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMember;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMemberCollection;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMemberPatch;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMemberPrototype;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMemberReference;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMemberTarget;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMemberTargetIP;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMemberTargetInstanceReference;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMemberTargetLoadBalancerReference;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMemberTargetPrototype;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMemberTargetPrototypeIP;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMemberTargetPrototypeInstanceIdentity;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMemberTargetPrototypeLoadBalancerIdentity;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMemberTargetPrototypeLoadBalancerIdentityLoadBalancerIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMemberTargetPrototypeLoadBalancerIdentityLoadBalancerIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolMemberTargetPrototypeLoadBalancerIdentityLoadBalancerIdentityById;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolPatch;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolPrototypeLoadBalancerContext;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolReference;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolSessionPersistence;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolSessionPersistencePatch;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerPoolSessionPersistencePrototype;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfile;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileAccessModes;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileAvailability;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileAvailabilityDependent;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileAvailabilityFixed;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileCollection;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileFailsafePolicyActions;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileFailsafePolicyActionsDependent;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileFailsafePolicyActionsEnum;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileIdentity;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileIdentityByName;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileInstanceGroupsSupported;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileInstanceGroupsSupportedDependent;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileInstanceGroupsSupportedFixed;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileLoggingSupported;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileReference;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileRouteModeSupported;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileRouteModeSupportedDependent;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileRouteModeSupportedFixed;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileSecurityGroupsSupported;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileSecurityGroupsSupportedDependent;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileSecurityGroupsSupportedFixed;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileSourceIPSessionPersistenceSupported;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileSourceIPSessionPersistenceSupportedDependent;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileSourceIPSessionPersistenceSupportedFixed;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileUDPSupported;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileUDPSupportedDependent;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfileUDPSupportedFixed;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerProfilesPager;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerReference;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancerStatistics;
import com.ibm.cloud.is.vpc.v1.model.LoadBalancersPager;
import com.ibm.cloud.is.vpc.v1.model.NetworkACL;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLCollection;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLIdentity;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLIdentityById;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLPatch;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLPrototype;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLPrototypeNetworkACLByRules;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLPrototypeNetworkACLBySourceNetworkACL;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLReference;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRule;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRuleBeforePatch;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRuleBeforePatchNetworkACLRuleIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRuleBeforePatchNetworkACLRuleIdentityById;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRuleBeforePrototype;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRuleBeforePrototypeNetworkACLRuleIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRuleBeforePrototypeNetworkACLRuleIdentityById;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRuleCollection;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRuleItem;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRuleItemNetworkACLRuleProtocolAll;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRuleItemNetworkACLRuleProtocolICMP;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRuleItemNetworkACLRuleProtocolTCPUDP;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRuleNetworkACLRuleProtocolAll;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRuleNetworkACLRuleProtocolICMP;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRuleNetworkACLRuleProtocolTCPUDP;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRulePatch;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRulePrototype;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRulePrototypeNetworkACLContext;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAllPrototype;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolICMPPrototype;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolTCPUDPPrototype;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRulePrototypeNetworkACLRuleProtocolAllPrototype;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRulePrototypeNetworkACLRuleProtocolICMPPrototype;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRulePrototypeNetworkACLRuleProtocolTCPUDPPrototype;
import com.ibm.cloud.is.vpc.v1.model.NetworkACLRuleReference;
import com.ibm.cloud.is.vpc.v1.model.NetworkAclRulesPager;
import com.ibm.cloud.is.vpc.v1.model.NetworkAclsPager;
import com.ibm.cloud.is.vpc.v1.model.NetworkInterface;
import com.ibm.cloud.is.vpc.v1.model.NetworkInterfaceBareMetalServerContextReference;
import com.ibm.cloud.is.vpc.v1.model.NetworkInterfaceFloatingIpsPager;
import com.ibm.cloud.is.vpc.v1.model.NetworkInterfaceIPPrototype;
import com.ibm.cloud.is.vpc.v1.model.NetworkInterfaceIPPrototypeReservedIPIdentity;
import com.ibm.cloud.is.vpc.v1.model.NetworkInterfaceIPPrototypeReservedIPIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.NetworkInterfaceIPPrototypeReservedIPIdentityById;
import com.ibm.cloud.is.vpc.v1.model.NetworkInterfaceIPPrototypeReservedIPPrototypeNetworkInterfaceContext;
import com.ibm.cloud.is.vpc.v1.model.NetworkInterfaceInstanceContextReference;
import com.ibm.cloud.is.vpc.v1.model.NetworkInterfacePatch;
import com.ibm.cloud.is.vpc.v1.model.NetworkInterfacePrototype;
import com.ibm.cloud.is.vpc.v1.model.NetworkInterfaceUnpaginatedCollection;
import com.ibm.cloud.is.vpc.v1.model.ObsoleteImageOptions;
import com.ibm.cloud.is.vpc.v1.model.OperatingSystem;
import com.ibm.cloud.is.vpc.v1.model.OperatingSystemCollection;
import com.ibm.cloud.is.vpc.v1.model.OperatingSystemIdentity;
import com.ibm.cloud.is.vpc.v1.model.OperatingSystemIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.OperatingSystemIdentityByName;
import com.ibm.cloud.is.vpc.v1.model.OperatingSystemsPager;
import com.ibm.cloud.is.vpc.v1.model.PageLink;
import com.ibm.cloud.is.vpc.v1.model.PermitPrivatePathServiceGatewayEndpointGatewayBindingOptions;
import com.ibm.cloud.is.vpc.v1.model.PlacementGroup;
import com.ibm.cloud.is.vpc.v1.model.PlacementGroupCollection;
import com.ibm.cloud.is.vpc.v1.model.PlacementGroupPatch;
import com.ibm.cloud.is.vpc.v1.model.PlacementGroupsPager;
import com.ibm.cloud.is.vpc.v1.model.PrivatePathServiceGateway;
import com.ibm.cloud.is.vpc.v1.model.PrivatePathServiceGatewayAccountPoliciesPager;
import com.ibm.cloud.is.vpc.v1.model.PrivatePathServiceGatewayAccountPolicy;
import com.ibm.cloud.is.vpc.v1.model.PrivatePathServiceGatewayAccountPolicyCollection;
import com.ibm.cloud.is.vpc.v1.model.PrivatePathServiceGatewayAccountPolicyPatch;
import com.ibm.cloud.is.vpc.v1.model.PrivatePathServiceGatewayCollection;
import com.ibm.cloud.is.vpc.v1.model.PrivatePathServiceGatewayEndpointGatewayBinding;
import com.ibm.cloud.is.vpc.v1.model.PrivatePathServiceGatewayEndpointGatewayBindingCollection;
import com.ibm.cloud.is.vpc.v1.model.PrivatePathServiceGatewayEndpointGatewayBindingsPager;
import com.ibm.cloud.is.vpc.v1.model.PrivatePathServiceGatewayPatch;
import com.ibm.cloud.is.vpc.v1.model.PrivatePathServiceGatewayRemote;
import com.ibm.cloud.is.vpc.v1.model.PrivatePathServiceGatewaysPager;
import com.ibm.cloud.is.vpc.v1.model.PublicGateway;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewayCollection;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewayFloatingIPPrototype;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewayFloatingIPPrototypeFloatingIPIdentity;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityByAddress;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityById;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewayFloatingIPPrototypeFloatingIPPrototypeTargetContext;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewayFloatingIp;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewayIdentity;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewayIdentityPublicGatewayIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewayIdentityPublicGatewayIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewayIdentityPublicGatewayIdentityById;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewayPatch;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewayReference;
import com.ibm.cloud.is.vpc.v1.model.PublicGatewaysPager;
import com.ibm.cloud.is.vpc.v1.model.PublishPrivatePathServiceGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.Region;
import com.ibm.cloud.is.vpc.v1.model.RegionCollection;
import com.ibm.cloud.is.vpc.v1.model.RegionIdentity;
import com.ibm.cloud.is.vpc.v1.model.RegionIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.RegionIdentityByName;
import com.ibm.cloud.is.vpc.v1.model.RegionReference;
import com.ibm.cloud.is.vpc.v1.model.RemoveBareMetalServerNetworkInterfaceFloatingIpOptions;
import com.ibm.cloud.is.vpc.v1.model.RemoveEndpointGatewayIpOptions;
import com.ibm.cloud.is.vpc.v1.model.RemoveInstanceNetworkInterfaceFloatingIpOptions;
import com.ibm.cloud.is.vpc.v1.model.RemoveNetworkInterfaceFloatingIpOptions;
import com.ibm.cloud.is.vpc.v1.model.RemoveVirtualNetworkInterfaceIpOptions;
import com.ibm.cloud.is.vpc.v1.model.RemoveVpnGatewayConnectionsLocalCidrOptions;
import com.ibm.cloud.is.vpc.v1.model.RemoveVpnGatewayConnectionsPeerCidrOptions;
import com.ibm.cloud.is.vpc.v1.model.ReplaceBareMetalServerInitializationOptions;
import com.ibm.cloud.is.vpc.v1.model.ReplaceLoadBalancerPoolMembersOptions;
import com.ibm.cloud.is.vpc.v1.model.ReplaceSubnetNetworkAclOptions;
import com.ibm.cloud.is.vpc.v1.model.ReplaceSubnetRoutingTableOptions;
import com.ibm.cloud.is.vpc.v1.model.Reservation;
import com.ibm.cloud.is.vpc.v1.model.ReservationCapacity;
import com.ibm.cloud.is.vpc.v1.model.ReservationCapacityPatch;
import com.ibm.cloud.is.vpc.v1.model.ReservationCapacityPrototype;
import com.ibm.cloud.is.vpc.v1.model.ReservationCollection;
import com.ibm.cloud.is.vpc.v1.model.ReservationCommittedUse;
import com.ibm.cloud.is.vpc.v1.model.ReservationCommittedUsePatch;
import com.ibm.cloud.is.vpc.v1.model.ReservationCommittedUsePrototype;
import com.ibm.cloud.is.vpc.v1.model.ReservationIdentity;
import com.ibm.cloud.is.vpc.v1.model.ReservationIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.ReservationIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.ReservationIdentityById;
import com.ibm.cloud.is.vpc.v1.model.ReservationPatch;
import com.ibm.cloud.is.vpc.v1.model.ReservationProfile;
import com.ibm.cloud.is.vpc.v1.model.ReservationProfileBareMetalServerProfileReference;
import com.ibm.cloud.is.vpc.v1.model.ReservationProfileInstanceProfileReference;
import com.ibm.cloud.is.vpc.v1.model.ReservationProfilePatch;
import com.ibm.cloud.is.vpc.v1.model.ReservationProfilePrototype;
import com.ibm.cloud.is.vpc.v1.model.ReservationReference;
import com.ibm.cloud.is.vpc.v1.model.ReservationStatusReason;
import com.ibm.cloud.is.vpc.v1.model.ReservationsPager;
import com.ibm.cloud.is.vpc.v1.model.ReservedIP;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPCollection;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPCollectionBareMetalServerNetworkInterfaceContext;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPCollectionEndpointGatewayContext;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPCollectionInstanceNetworkInterfaceContext;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPCollectionVirtualNetworkInterfaceContext;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPPatch;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPReference;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPTarget;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPTargetBareMetalServerNetworkInterfaceReferenceTargetContext;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPTargetEndpointGatewayReference;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPTargetGenericResourceReference;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPTargetLoadBalancerReference;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPTargetNetworkInterfaceReferenceTargetContext;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPTargetPrototype;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPTargetPrototypeEndpointGatewayIdentity;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPTargetPrototypeEndpointGatewayIdentityEndpointGatewayIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPTargetPrototypeEndpointGatewayIdentityEndpointGatewayIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPTargetPrototypeEndpointGatewayIdentityEndpointGatewayIdentityById;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPTargetPrototypeVirtualNetworkInterfaceIdentity;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPTargetPrototypeVirtualNetworkInterfaceIdentityVirtualNetworkInterfaceIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPTargetPrototypeVirtualNetworkInterfaceIdentityVirtualNetworkInterfaceIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPTargetPrototypeVirtualNetworkInterfaceIdentityVirtualNetworkInterfaceIdentityById;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPTargetVPNGatewayReference;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPTargetVPNServerReference;
import com.ibm.cloud.is.vpc.v1.model.ReservedIPTargetVirtualNetworkInterfaceReferenceReservedIPTargetContext;
import com.ibm.cloud.is.vpc.v1.model.ResourceFilter;
import com.ibm.cloud.is.vpc.v1.model.ResourceGroupIdentity;
import com.ibm.cloud.is.vpc.v1.model.ResourceGroupIdentityById;
import com.ibm.cloud.is.vpc.v1.model.ResourceGroupReference;
import com.ibm.cloud.is.vpc.v1.model.RestartBareMetalServerOptions;
import com.ibm.cloud.is.vpc.v1.model.RevokeAccountForPrivatePathServiceGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.Route;
import com.ibm.cloud.is.vpc.v1.model.RouteCollection;
import com.ibm.cloud.is.vpc.v1.model.RouteCollectionVPCContext;
import com.ibm.cloud.is.vpc.v1.model.RouteCreator;
import com.ibm.cloud.is.vpc.v1.model.RouteCreatorVPNGatewayReference;
import com.ibm.cloud.is.vpc.v1.model.RouteCreatorVPNServerReference;
import com.ibm.cloud.is.vpc.v1.model.RouteNextHop;
import com.ibm.cloud.is.vpc.v1.model.RouteNextHopIP;
import com.ibm.cloud.is.vpc.v1.model.RouteNextHopPatch;
import com.ibm.cloud.is.vpc.v1.model.RouteNextHopPatchRouteNextHopIP;
import com.ibm.cloud.is.vpc.v1.model.RouteNextHopPatchRouteNextHopIPRouteNextHopIPSentinelIP;
import com.ibm.cloud.is.vpc.v1.model.RouteNextHopPatchRouteNextHopIPRouteNextHopIPUnicastIP;
import com.ibm.cloud.is.vpc.v1.model.RouteNextHopPatchVPNGatewayConnectionIdentity;
import com.ibm.cloud.is.vpc.v1.model.RouteNextHopPatchVPNGatewayConnectionIdentityVPNGatewayConnectionIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.RouteNextHopPatchVPNGatewayConnectionIdentityVPNGatewayConnectionIdentityById;
import com.ibm.cloud.is.vpc.v1.model.RouteNextHopPrototype;
import com.ibm.cloud.is.vpc.v1.model.RouteNextHopPrototypeRouteNextHopIP;
import com.ibm.cloud.is.vpc.v1.model.RouteNextHopPrototypeRouteNextHopIPRouteNextHopIPSentinelIP;
import com.ibm.cloud.is.vpc.v1.model.RouteNextHopPrototypeRouteNextHopIPRouteNextHopIPUnicastIP;
import com.ibm.cloud.is.vpc.v1.model.RouteNextHopPrototypeVPNGatewayConnectionIdentity;
import com.ibm.cloud.is.vpc.v1.model.RouteNextHopPrototypeVPNGatewayConnectionIdentityVPNGatewayConnectionIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.RouteNextHopPrototypeVPNGatewayConnectionIdentityVPNGatewayConnectionIdentityById;
import com.ibm.cloud.is.vpc.v1.model.RouteNextHopVPNGatewayConnectionReference;
import com.ibm.cloud.is.vpc.v1.model.RoutePatch;
import com.ibm.cloud.is.vpc.v1.model.RoutePrototype;
import com.ibm.cloud.is.vpc.v1.model.RouteReference;
import com.ibm.cloud.is.vpc.v1.model.RoutingTable;
import com.ibm.cloud.is.vpc.v1.model.RoutingTableCollection;
import com.ibm.cloud.is.vpc.v1.model.RoutingTableIdentity;
import com.ibm.cloud.is.vpc.v1.model.RoutingTableIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.RoutingTableIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.RoutingTableIdentityById;
import com.ibm.cloud.is.vpc.v1.model.RoutingTablePatch;
import com.ibm.cloud.is.vpc.v1.model.RoutingTableReference;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroup;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupCollection;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupIdentity;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupIdentityById;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupPatch;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupReference;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRule;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleCollection;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleLocal;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleLocalCIDR;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleLocalIP;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleLocalPatch;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleLocalPatchCIDR;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleLocalPatchIP;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleLocalPrototype;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleLocalPrototypeCIDR;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleLocalPrototypeIP;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRulePatch;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRulePrototype;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRulePrototypeSecurityGroupRuleProtocolAll;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRulePrototypeSecurityGroupRuleProtocolICMP;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRulePrototypeSecurityGroupRuleProtocolTCPUDP;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemote;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemoteCIDR;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemoteIP;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemotePatch;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemotePatchCIDR;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemotePatchIP;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemotePatchSecurityGroupIdentity;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemotePatchSecurityGroupIdentitySecurityGroupIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemotePatchSecurityGroupIdentitySecurityGroupIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemotePatchSecurityGroupIdentitySecurityGroupIdentityById;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemotePrototype;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemotePrototypeCIDR;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemotePrototypeIP;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemotePrototypeSecurityGroupIdentity;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemotePrototypeSecurityGroupIdentitySecurityGroupIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemotePrototypeSecurityGroupIdentitySecurityGroupIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemotePrototypeSecurityGroupIdentitySecurityGroupIdentityById;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleRemoteSecurityGroupReference;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleSecurityGroupRuleProtocolAll;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleSecurityGroupRuleProtocolICMP;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupRuleSecurityGroupRuleProtocolTCPUDP;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupTargetCollection;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupTargetReference;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupTargetReferenceBareMetalServerNetworkInterfaceReferenceTargetContext;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupTargetReferenceEndpointGatewayReference;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupTargetReferenceLoadBalancerReference;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupTargetReferenceNetworkInterfaceReferenceTargetContext;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupTargetReferenceVPNServerReference;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupTargetReferenceVirtualNetworkInterfaceReference;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupTargetsPager;
import com.ibm.cloud.is.vpc.v1.model.SecurityGroupsPager;
import com.ibm.cloud.is.vpc.v1.model.SetSubnetPublicGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.Share;
import com.ibm.cloud.is.vpc.v1.model.ShareAccessorBinding;
import com.ibm.cloud.is.vpc.v1.model.ShareAccessorBindingAccessor;
import com.ibm.cloud.is.vpc.v1.model.ShareAccessorBindingAccessorShareReference;
import com.ibm.cloud.is.vpc.v1.model.ShareAccessorBindingAccessorWatsonxMachineLearningReference;
import com.ibm.cloud.is.vpc.v1.model.ShareAccessorBindingCollection;
import com.ibm.cloud.is.vpc.v1.model.ShareAccessorBindingReference;
import com.ibm.cloud.is.vpc.v1.model.ShareAccessorBindingsPager;
import com.ibm.cloud.is.vpc.v1.model.ShareCollection;
import com.ibm.cloud.is.vpc.v1.model.ShareIdentity;
import com.ibm.cloud.is.vpc.v1.model.ShareIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.ShareIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.ShareIdentityById;
import com.ibm.cloud.is.vpc.v1.model.ShareInitialOwner;
import com.ibm.cloud.is.vpc.v1.model.ShareJob;
import com.ibm.cloud.is.vpc.v1.model.ShareJobStatusReason;
import com.ibm.cloud.is.vpc.v1.model.ShareLatestSync;
import com.ibm.cloud.is.vpc.v1.model.ShareLifecycleReason;
import com.ibm.cloud.is.vpc.v1.model.ShareMountTarget;
import com.ibm.cloud.is.vpc.v1.model.ShareMountTargetCollection;
import com.ibm.cloud.is.vpc.v1.model.ShareMountTargetPatch;
import com.ibm.cloud.is.vpc.v1.model.ShareMountTargetPrototype;
import com.ibm.cloud.is.vpc.v1.model.ShareMountTargetPrototypeShareMountTargetByAccessControlModeSecurityGroup;
import com.ibm.cloud.is.vpc.v1.model.ShareMountTargetPrototypeShareMountTargetByAccessControlModeVPC;
import com.ibm.cloud.is.vpc.v1.model.ShareMountTargetReference;
import com.ibm.cloud.is.vpc.v1.model.ShareMountTargetVirtualNetworkInterfacePrototype;
import com.ibm.cloud.is.vpc.v1.model.ShareMountTargetVirtualNetworkInterfacePrototypeVirtualNetworkInterfaceIdentity;
import com.ibm.cloud.is.vpc.v1.model.ShareMountTargetVirtualNetworkInterfacePrototypeVirtualNetworkInterfaceIdentityVirtualNetworkInterfaceIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.ShareMountTargetVirtualNetworkInterfacePrototypeVirtualNetworkInterfaceIdentityVirtualNetworkInterfaceIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.ShareMountTargetVirtualNetworkInterfacePrototypeVirtualNetworkInterfaceIdentityVirtualNetworkInterfaceIdentityById;
import com.ibm.cloud.is.vpc.v1.model.ShareMountTargetVirtualNetworkInterfacePrototypeVirtualNetworkInterfacePrototypeShareMountTargetContext;
import com.ibm.cloud.is.vpc.v1.model.ShareMountTargetsPager;
import com.ibm.cloud.is.vpc.v1.model.SharePatch;
import com.ibm.cloud.is.vpc.v1.model.ShareProfile;
import com.ibm.cloud.is.vpc.v1.model.ShareProfileCapacity;
import com.ibm.cloud.is.vpc.v1.model.ShareProfileCapacityDependentRange;
import com.ibm.cloud.is.vpc.v1.model.ShareProfileCapacityEnum;
import com.ibm.cloud.is.vpc.v1.model.ShareProfileCapacityFixed;
import com.ibm.cloud.is.vpc.v1.model.ShareProfileCapacityRange;
import com.ibm.cloud.is.vpc.v1.model.ShareProfileCollection;
import com.ibm.cloud.is.vpc.v1.model.ShareProfileIOPS;
import com.ibm.cloud.is.vpc.v1.model.ShareProfileIOPSDependent;
import com.ibm.cloud.is.vpc.v1.model.ShareProfileIOPSDependentRange;
import com.ibm.cloud.is.vpc.v1.model.ShareProfileIOPSEnum;
import com.ibm.cloud.is.vpc.v1.model.ShareProfileIOPSFixed;
import com.ibm.cloud.is.vpc.v1.model.ShareProfileIOPSRange;
import com.ibm.cloud.is.vpc.v1.model.ShareProfileIdentity;
import com.ibm.cloud.is.vpc.v1.model.ShareProfileIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.ShareProfileIdentityByName;
import com.ibm.cloud.is.vpc.v1.model.ShareProfileReference;
import com.ibm.cloud.is.vpc.v1.model.ShareProfilesPager;
import com.ibm.cloud.is.vpc.v1.model.SharePrototype;
import com.ibm.cloud.is.vpc.v1.model.SharePrototypeShareByOriginShare;
import com.ibm.cloud.is.vpc.v1.model.SharePrototypeShareBySize;
import com.ibm.cloud.is.vpc.v1.model.SharePrototypeShareBySourceShare;
import com.ibm.cloud.is.vpc.v1.model.SharePrototypeShareBySourceSnapshot;
import com.ibm.cloud.is.vpc.v1.model.SharePrototypeShareContext;
import com.ibm.cloud.is.vpc.v1.model.ShareReference;
import com.ibm.cloud.is.vpc.v1.model.ShareRemote;
import com.ibm.cloud.is.vpc.v1.model.ShareReplicationStatusReason;
import com.ibm.cloud.is.vpc.v1.model.ShareSnapshot;
import com.ibm.cloud.is.vpc.v1.model.ShareSnapshotCollection;
import com.ibm.cloud.is.vpc.v1.model.ShareSnapshotLifecycleReason;
import com.ibm.cloud.is.vpc.v1.model.ShareSnapshotPatch;
import com.ibm.cloud.is.vpc.v1.model.ShareSnapshotStatusReason;
import com.ibm.cloud.is.vpc.v1.model.ShareSnapshotsPager;
import com.ibm.cloud.is.vpc.v1.model.ShareSourceSnapshot;
import com.ibm.cloud.is.vpc.v1.model.ShareSourceSnapshotPrototype;
import com.ibm.cloud.is.vpc.v1.model.ShareSourceSnapshotPrototypeShareSnapshotIdentity;
import com.ibm.cloud.is.vpc.v1.model.ShareSourceSnapshotPrototypeShareSnapshotIdentityShareSnapshotIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.ShareSourceSnapshotPrototypeShareSnapshotIdentityShareSnapshotIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.ShareSourceSnapshotPrototypeShareSnapshotIdentityShareSnapshotIdentityById;
import com.ibm.cloud.is.vpc.v1.model.ShareSourceSnapshotShareSnapshotReference;
import com.ibm.cloud.is.vpc.v1.model.SharesPager;
import com.ibm.cloud.is.vpc.v1.model.Snapshot;
import com.ibm.cloud.is.vpc.v1.model.SnapshotCatalogOffering;
import com.ibm.cloud.is.vpc.v1.model.SnapshotClone;
import com.ibm.cloud.is.vpc.v1.model.SnapshotCloneCollection;
import com.ibm.cloud.is.vpc.v1.model.SnapshotClonePrototype;
import com.ibm.cloud.is.vpc.v1.model.SnapshotCollection;
import com.ibm.cloud.is.vpc.v1.model.SnapshotConsistencyGroup;
import com.ibm.cloud.is.vpc.v1.model.SnapshotConsistencyGroupCollection;
import com.ibm.cloud.is.vpc.v1.model.SnapshotConsistencyGroupPatch;
import com.ibm.cloud.is.vpc.v1.model.SnapshotConsistencyGroupPrototype;
import com.ibm.cloud.is.vpc.v1.model.SnapshotConsistencyGroupPrototypeSnapshotConsistencyGroupBySnapshots;
import com.ibm.cloud.is.vpc.v1.model.SnapshotConsistencyGroupReference;
import com.ibm.cloud.is.vpc.v1.model.SnapshotConsistencyGroupsPager;
import com.ibm.cloud.is.vpc.v1.model.SnapshotCopiesItem;
import com.ibm.cloud.is.vpc.v1.model.SnapshotIdentity;
import com.ibm.cloud.is.vpc.v1.model.SnapshotIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.SnapshotIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.SnapshotIdentityById;
import com.ibm.cloud.is.vpc.v1.model.SnapshotPatch;
import com.ibm.cloud.is.vpc.v1.model.SnapshotPrototype;
import com.ibm.cloud.is.vpc.v1.model.SnapshotPrototypeSnapshotBySourceSnapshot;
import com.ibm.cloud.is.vpc.v1.model.SnapshotPrototypeSnapshotBySourceVolume;
import com.ibm.cloud.is.vpc.v1.model.SnapshotPrototypeSnapshotConsistencyGroupContext;
import com.ibm.cloud.is.vpc.v1.model.SnapshotReference;
import com.ibm.cloud.is.vpc.v1.model.SnapshotRemote;
import com.ibm.cloud.is.vpc.v1.model.SnapshotSourceSnapshot;
import com.ibm.cloud.is.vpc.v1.model.SnapshotsPager;
import com.ibm.cloud.is.vpc.v1.model.StartBareMetalServerOptions;
import com.ibm.cloud.is.vpc.v1.model.StopBareMetalServerOptions;
import com.ibm.cloud.is.vpc.v1.model.Subnet;
import com.ibm.cloud.is.vpc.v1.model.SubnetCollection;
import com.ibm.cloud.is.vpc.v1.model.SubnetIdentity;
import com.ibm.cloud.is.vpc.v1.model.SubnetIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.SubnetIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.SubnetIdentityById;
import com.ibm.cloud.is.vpc.v1.model.SubnetPatch;
import com.ibm.cloud.is.vpc.v1.model.SubnetPrototype;
import com.ibm.cloud.is.vpc.v1.model.SubnetPrototypeSubnetByCIDR;
import com.ibm.cloud.is.vpc.v1.model.SubnetPrototypeSubnetByTotalCount;
import com.ibm.cloud.is.vpc.v1.model.SubnetPublicGatewayPatch;
import com.ibm.cloud.is.vpc.v1.model.SubnetPublicGatewayPatchPublicGatewayIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.SubnetPublicGatewayPatchPublicGatewayIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.SubnetPublicGatewayPatchPublicGatewayIdentityById;
import com.ibm.cloud.is.vpc.v1.model.SubnetReference;
import com.ibm.cloud.is.vpc.v1.model.SubnetReservedIpsPager;
import com.ibm.cloud.is.vpc.v1.model.SubnetsPager;
import com.ibm.cloud.is.vpc.v1.model.TrustedProfileIdentity;
import com.ibm.cloud.is.vpc.v1.model.TrustedProfileIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.TrustedProfileIdentityById;
import com.ibm.cloud.is.vpc.v1.model.TrustedProfileReference;
import com.ibm.cloud.is.vpc.v1.model.UnpublishPrivatePathServiceGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.UnsetSubnetPublicGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateBackupPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateBackupPolicyPlanOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateBareMetalServerDiskOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateBareMetalServerNetworkAttachmentOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateBareMetalServerNetworkInterfaceOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateBareMetalServerOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateClusterNetworkInterfaceOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateClusterNetworkOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateClusterNetworkSubnetOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateClusterNetworkSubnetReservedIpOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateDedicatedHostDiskOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateDedicatedHostGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateDedicatedHostOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateEndpointGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateFirmwareForBareMetalServerOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateFloatingIpOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateFlowLogCollectorOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateIkePolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateImageExportJobOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateImageOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateInstanceClusterNetworkAttachmentOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateInstanceDiskOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateInstanceGroupManagerActionOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateInstanceGroupManagerOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateInstanceGroupManagerPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateInstanceGroupMembershipOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateInstanceGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateInstanceNetworkAttachmentOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateInstanceNetworkInterfaceOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateInstanceOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateInstanceTemplateOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateInstanceVolumeAttachmentOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateIpsecPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateKeyOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateLoadBalancerListenerOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateLoadBalancerListenerPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateLoadBalancerListenerPolicyRuleOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateLoadBalancerOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateLoadBalancerPoolMemberOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateLoadBalancerPoolOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateNetworkAclOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateNetworkAclRuleOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdatePlacementGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdatePrivatePathServiceGatewayAccountPolicyOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdatePrivatePathServiceGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdatePublicGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateReservationOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateSecurityGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateSecurityGroupRuleOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateShareMountTargetOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateShareOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateShareSnapshotOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateSnapshotConsistencyGroupOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateSnapshotOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateSubnetOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateSubnetReservedIpOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateVirtualNetworkInterfaceOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateVolumeOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateVpcAddressPrefixOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateVpcDnsResolutionBindingOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateVpcOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateVpcRouteOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateVpcRoutingTableOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateVpcRoutingTableRouteOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateVpnGatewayConnectionOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateVpnGatewayOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateVpnServerOptions;
import com.ibm.cloud.is.vpc.v1.model.UpdateVpnServerRouteOptions;
import com.ibm.cloud.is.vpc.v1.model.VCPU;
import com.ibm.cloud.is.vpc.v1.model.VPC;
import com.ibm.cloud.is.vpc.v1.model.VPCCSESourceIP;
import com.ibm.cloud.is.vpc.v1.model.VPCCollection;
import com.ibm.cloud.is.vpc.v1.model.VPCDNS;
import com.ibm.cloud.is.vpc.v1.model.VPCDNSPatch;
import com.ibm.cloud.is.vpc.v1.model.VPCDNSPrototype;
import com.ibm.cloud.is.vpc.v1.model.VPCDNSResolutionBinding;
import com.ibm.cloud.is.vpc.v1.model.VPCDNSResolutionBindingCollection;
import com.ibm.cloud.is.vpc.v1.model.VPCDNSResolutionBindingHealthReason;
import com.ibm.cloud.is.vpc.v1.model.VPCDNSResolutionBindingPatch;
import com.ibm.cloud.is.vpc.v1.model.VPCDNSResolver;
import com.ibm.cloud.is.vpc.v1.model.VPCDNSResolverPatch;
import com.ibm.cloud.is.vpc.v1.model.VPCDNSResolverPrototype;
import com.ibm.cloud.is.vpc.v1.model.VPCDNSResolverPrototypeVPCDNSResolverTypeManualPrototype;
import com.ibm.cloud.is.vpc.v1.model.VPCDNSResolverPrototypeVPCDNSResolverTypeSystemPrototype;
import com.ibm.cloud.is.vpc.v1.model.VPCDNSResolverTypeDelegated;
import com.ibm.cloud.is.vpc.v1.model.VPCDNSResolverTypeManual;
import com.ibm.cloud.is.vpc.v1.model.VPCDNSResolverTypeSystem;
import com.ibm.cloud.is.vpc.v1.model.VPCDNSResolverVPCPatch;
import com.ibm.cloud.is.vpc.v1.model.VPCDNSResolverVPCPatchVPCIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.VPCDNSResolverVPCPatchVPCIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.VPCDNSResolverVPCPatchVPCIdentityById;
import com.ibm.cloud.is.vpc.v1.model.VPCHealthReason;
import com.ibm.cloud.is.vpc.v1.model.VPCIdentity;
import com.ibm.cloud.is.vpc.v1.model.VPCIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.VPCIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.VPCIdentityById;
import com.ibm.cloud.is.vpc.v1.model.VPCPatch;
import com.ibm.cloud.is.vpc.v1.model.VPCReference;
import com.ibm.cloud.is.vpc.v1.model.VPCReferenceDNSResolverContext;
import com.ibm.cloud.is.vpc.v1.model.VPCReferenceRemote;
import com.ibm.cloud.is.vpc.v1.model.VPCRemote;
import com.ibm.cloud.is.vpc.v1.model.VPNGateway;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayCollection;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnection;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionCIDRs;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionCollection;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionDPD;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionDPDPatch;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionDPDPrototype;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIKEIdentity;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIKEIdentityPrototype;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIKEIdentityPrototypeVPNGatewayConnectionIKEIdentityFQDN;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIKEIdentityPrototypeVPNGatewayConnectionIKEIdentityHostname;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIKEIdentityPrototypeVPNGatewayConnectionIKEIdentityIPv4;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIKEIdentityPrototypeVPNGatewayConnectionIKEIdentityKeyID;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIKEIdentityVPNGatewayConnectionIKEIdentityFQDN;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIKEIdentityVPNGatewayConnectionIKEIdentityHostname;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIKEIdentityVPNGatewayConnectionIKEIdentityIPv4;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIKEIdentityVPNGatewayConnectionIKEIdentityKeyID;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIKEPolicyPatch;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIKEPolicyPatchIKEPolicyIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIKEPolicyPatchIKEPolicyIdentityById;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIKEPolicyPrototype;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIKEPolicyPrototypeIKEPolicyIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIKEPolicyPrototypeIKEPolicyIdentityById;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIPsecPolicyPatch;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIPsecPolicyPatchIPsecPolicyIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIPsecPolicyPatchIPsecPolicyIdentityById;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIPsecPolicyPrototype;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIPsecPolicyPrototypeIPsecPolicyIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionIPsecPolicyPrototypeIPsecPolicyIdentityById;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionPatch;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionPeerPatch;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionPeerPatchVPNGatewayConnectionPolicyModePeerPatch;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionPeerPatchVPNGatewayConnectionPolicyModePeerPatchVPNGatewayConnectionPolicyModePeerPatchVPNGatewayConnectionPeerAddressPatch;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionPeerPatchVPNGatewayConnectionPolicyModePeerPatchVPNGatewayConnectionPolicyModePeerPatchVPNGatewayConnectionPeerFQDNPatch;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionPeerPatchVPNGatewayConnectionStaticRouteModePeerPatch;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionPeerPatchVPNGatewayConnectionStaticRouteModePeerPatchVPNGatewayConnectionStaticRouteModePeerPatchVPNGatewayConnectionPeerAddressPatch;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionPeerPatchVPNGatewayConnectionStaticRouteModePeerPatchVPNGatewayConnectionStaticRouteModePeerPatchVPNGatewayConnectionPeerFQDNPatch;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionPolicyMode;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionPolicyModeLocal;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionPolicyModeLocalPrototype;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionPolicyModePeer;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionPolicyModePeerPrototype;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionPolicyModePeerPrototypeVPNGatewayConnectionPeerByAddress;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionPolicyModePeerPrototypeVPNGatewayConnectionPeerByFQDN;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionPolicyModePeerVPNGatewayConnectionPeerByAddress;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionPolicyModePeerVPNGatewayConnectionPeerByFQDN;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionPrototype;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionPrototypeVPNGatewayConnectionPolicyModePrototype;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionPrototypeVPNGatewayConnectionStaticRouteModePrototype;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionReference;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionRouteMode;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionRouteModeVPNGatewayConnectionStaticRouteMode;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionStaticRouteModeLocal;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionStaticRouteModeLocalPrototype;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionStaticRouteModePeer;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionStaticRouteModePeerPrototype;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionStaticRouteModePeerPrototypeVPNGatewayConnectionPeerByAddress;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionStaticRouteModePeerPrototypeVPNGatewayConnectionPeerByFQDN;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionStaticRouteModePeerVPNGatewayConnectionPeerByAddress;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionStaticRouteModePeerVPNGatewayConnectionPeerByFQDN;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionStaticRouteModeTunnel;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionStatusReason;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayConnectionTunnelStatusReason;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayHealthReason;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayLifecycleReason;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayMember;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayMemberHealthReason;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayMemberLifecycleReason;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayPatch;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayPolicyMode;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayPrototype;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayPrototypeVPNGatewayPolicyModePrototype;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayPrototypeVPNGatewayRouteModePrototype;
import com.ibm.cloud.is.vpc.v1.model.VPNGatewayRouteMode;
import com.ibm.cloud.is.vpc.v1.model.VPNServer;
import com.ibm.cloud.is.vpc.v1.model.VPNServerAuthentication;
import com.ibm.cloud.is.vpc.v1.model.VPNServerAuthenticationByCertificate;
import com.ibm.cloud.is.vpc.v1.model.VPNServerAuthenticationByUsername;
import com.ibm.cloud.is.vpc.v1.model.VPNServerAuthenticationByUsernameIdProvider;
import com.ibm.cloud.is.vpc.v1.model.VPNServerAuthenticationByUsernameIdProviderByIAM;
import com.ibm.cloud.is.vpc.v1.model.VPNServerAuthenticationPrototype;
import com.ibm.cloud.is.vpc.v1.model.VPNServerAuthenticationPrototypeVPNServerAuthenticationByCertificatePrototype;
import com.ibm.cloud.is.vpc.v1.model.VPNServerAuthenticationPrototypeVPNServerAuthenticationByUsernamePrototype;
import com.ibm.cloud.is.vpc.v1.model.VPNServerClient;
import com.ibm.cloud.is.vpc.v1.model.VPNServerClientCollection;
import com.ibm.cloud.is.vpc.v1.model.VPNServerCollection;
import com.ibm.cloud.is.vpc.v1.model.VPNServerHealthReason;
import com.ibm.cloud.is.vpc.v1.model.VPNServerLifecycleReason;
import com.ibm.cloud.is.vpc.v1.model.VPNServerPatch;
import com.ibm.cloud.is.vpc.v1.model.VPNServerRoute;
import com.ibm.cloud.is.vpc.v1.model.VPNServerRouteCollection;
import com.ibm.cloud.is.vpc.v1.model.VPNServerRouteHealthReason;
import com.ibm.cloud.is.vpc.v1.model.VPNServerRouteLifecycleReason;
import com.ibm.cloud.is.vpc.v1.model.VPNServerRoutePatch;
import com.ibm.cloud.is.vpc.v1.model.VirtualNetworkInterface;
import com.ibm.cloud.is.vpc.v1.model.VirtualNetworkInterfaceCollection;
import com.ibm.cloud.is.vpc.v1.model.VirtualNetworkInterfaceIPPrototype;
import com.ibm.cloud.is.vpc.v1.model.VirtualNetworkInterfaceIPPrototypeReservedIPIdentityVirtualNetworkInterfaceIPsContext;
import com.ibm.cloud.is.vpc.v1.model.VirtualNetworkInterfaceIPPrototypeReservedIPIdentityVirtualNetworkInterfaceIPsContextByHref;
import com.ibm.cloud.is.vpc.v1.model.VirtualNetworkInterfaceIPPrototypeReservedIPIdentityVirtualNetworkInterfaceIPsContextById;
import com.ibm.cloud.is.vpc.v1.model.VirtualNetworkInterfaceIPPrototypeReservedIPPrototypeVirtualNetworkInterfaceIPsContext;
import com.ibm.cloud.is.vpc.v1.model.VirtualNetworkInterfaceIpsPager;
import com.ibm.cloud.is.vpc.v1.model.VirtualNetworkInterfacePatch;
import com.ibm.cloud.is.vpc.v1.model.VirtualNetworkInterfacePrimaryIPPrototype;
import com.ibm.cloud.is.vpc.v1.model.VirtualNetworkInterfacePrimaryIPPrototypeReservedIPIdentityVirtualNetworkInterfacePrimaryIPContext;
import com.ibm.cloud.is.vpc.v1.model.VirtualNetworkInterfacePrimaryIPPrototypeReservedIPIdentityVirtualNetworkInterfacePrimaryIPContextByHref;
import com.ibm.cloud.is.vpc.v1.model.VirtualNetworkInterfacePrimaryIPPrototypeReservedIPIdentityVirtualNetworkInterfacePrimaryIPContextById;
import com.ibm.cloud.is.vpc.v1.model.VirtualNetworkInterfacePrimaryIPPrototypeReservedIPPrototypeVirtualNetworkInterfacePrimaryIPContext;
import com.ibm.cloud.is.vpc.v1.model.VirtualNetworkInterfaceReferenceAttachmentContext;
import com.ibm.cloud.is.vpc.v1.model.VirtualNetworkInterfaceTarget;
import com.ibm.cloud.is.vpc.v1.model.VirtualNetworkInterfaceTargetBareMetalServerNetworkAttachmentReferenceVirtualNetworkInterfaceContext;
import com.ibm.cloud.is.vpc.v1.model.VirtualNetworkInterfaceTargetInstanceNetworkAttachmentReferenceVirtualNetworkInterfaceContext;
import com.ibm.cloud.is.vpc.v1.model.VirtualNetworkInterfaceTargetShareMountTargetReference;
import com.ibm.cloud.is.vpc.v1.model.VirtualNetworkInterfacesPager;
import com.ibm.cloud.is.vpc.v1.model.Volume;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachment;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentCollection;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentDevice;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentPatch;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentPrototype;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentPrototypeInstanceByImageContext;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentPrototypeInstanceBySourceSnapshotContext;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentPrototypeInstanceByVolumeContext;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentPrototypeVolume;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentPrototypeVolumeVolumeIdentity;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentPrototypeVolumeVolumeIdentityVolumeIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentPrototypeVolumeVolumeIdentityVolumeIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentPrototypeVolumeVolumeIdentityVolumeIdentityById;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentPrototypeVolumeVolumePrototypeInstanceContext;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentPrototypeVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentPrototypeVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeBySourceSnapshot;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentReferenceInstanceContext;
import com.ibm.cloud.is.vpc.v1.model.VolumeAttachmentReferenceVolumeContext;
import com.ibm.cloud.is.vpc.v1.model.VolumeCatalogOffering;
import com.ibm.cloud.is.vpc.v1.model.VolumeCollection;
import com.ibm.cloud.is.vpc.v1.model.VolumeHealthReason;
import com.ibm.cloud.is.vpc.v1.model.VolumeIdentity;
import com.ibm.cloud.is.vpc.v1.model.VolumeIdentityByCRN;
import com.ibm.cloud.is.vpc.v1.model.VolumeIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.VolumeIdentityById;
import com.ibm.cloud.is.vpc.v1.model.VolumePatch;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfile;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileAdjustableCapacityStates;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileAdjustableIOPSStates;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileBandwidth;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileBandwidthDependent;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileBandwidthDependentRange;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileBandwidthEnum;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileBandwidthFixed;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileBandwidthRange;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileBootCapacity;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileBootCapacityDependentRange;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileBootCapacityEnum;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileBootCapacityFixed;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileBootCapacityRange;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileCapacity;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileCapacityDependentRange;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileCapacityEnum;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileCapacityFixed;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileCapacityRange;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileCollection;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileIOPS;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileIOPSDependentRange;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileIOPSEnum;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileIOPSFixed;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileIOPSRange;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileIdentity;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileIdentityByName;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileReference;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfileStorageGenerationFixed;
import com.ibm.cloud.is.vpc.v1.model.VolumeProfilesPager;
import com.ibm.cloud.is.vpc.v1.model.VolumePrototype;
import com.ibm.cloud.is.vpc.v1.model.VolumePrototypeInstanceByImageContext;
import com.ibm.cloud.is.vpc.v1.model.VolumePrototypeInstanceBySourceSnapshotContext;
import com.ibm.cloud.is.vpc.v1.model.VolumePrototypeVolumeByCapacity;
import com.ibm.cloud.is.vpc.v1.model.VolumePrototypeVolumeBySourceSnapshot;
import com.ibm.cloud.is.vpc.v1.model.VolumeReference;
import com.ibm.cloud.is.vpc.v1.model.VolumeReferenceVolumeAttachmentContext;
import com.ibm.cloud.is.vpc.v1.model.VolumeRemote;
import com.ibm.cloud.is.vpc.v1.model.VolumeStatusReason;
import com.ibm.cloud.is.vpc.v1.model.VolumesPager;
import com.ibm.cloud.is.vpc.v1.model.VpcAddressPrefixesPager;
import com.ibm.cloud.is.vpc.v1.model.VpcDnsResolutionBindingsPager;
import com.ibm.cloud.is.vpc.v1.model.VpcRoutesPager;
import com.ibm.cloud.is.vpc.v1.model.VpcRoutingTableRoutesPager;
import com.ibm.cloud.is.vpc.v1.model.VpcRoutingTablesPager;
import com.ibm.cloud.is.vpc.v1.model.VpcsPager;
import com.ibm.cloud.is.vpc.v1.model.VpnGatewayConnectionsPager;
import com.ibm.cloud.is.vpc.v1.model.VpnGatewaysPager;
import com.ibm.cloud.is.vpc.v1.model.VpnServerClientsPager;
import com.ibm.cloud.is.vpc.v1.model.VpnServerRoutesPager;
import com.ibm.cloud.is.vpc.v1.model.VpnServersPager;
import com.ibm.cloud.is.vpc.v1.model.Zone;
import com.ibm.cloud.is.vpc.v1.model.ZoneCollection;
import com.ibm.cloud.is.vpc.v1.model.ZoneIdentity;
import com.ibm.cloud.is.vpc.v1.model.ZoneIdentityByHref;
import com.ibm.cloud.is.vpc.v1.model.ZoneIdentityByName;
import com.ibm.cloud.is.vpc.v1.model.ZoneReference;
import com.ibm.cloud.is.vpc.v1.utils.TestUtilities;
import com.ibm.cloud.sdk.core.http.Response;
import com.ibm.cloud.sdk.core.security.Authenticator;
import com.ibm.cloud.sdk.core.security.NoAuthAuthenticator;
import com.ibm.cloud.sdk.core.service.model.FileWithMetadata;
import com.ibm.cloud.sdk.core.util.DateUtils;
import com.ibm.cloud.sdk.core.util.RequestUtils;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import okhttp3.mockwebserver.MockResponse;
import okhttp3.mockwebserver.MockWebServer;
import okhttp3.mockwebserver.RecordedRequest;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;
import static org.testng.Assert.*;

/**
 * Unit test class for the Vpc service.
 */
public class VpcTest {

  final HashMap<String, InputStream> mockStreamMap = TestUtilities.createMockStreamMap();
  final List<FileWithMetadata> mockListFileWithMetadata = TestUtilities.creatMockListFileWithMetadata();

  protected MockWebServer server;
  protected Vpc vpcService;

  // Construct the service with a null authenticator (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testConstructorWithNullAuthenticator() throws Throwable {
    final String serviceName = "testService";
    new Vpc(serviceName, null);
  }

  // Test the getServiceUrlForRegion() method
  @Test
  public void testGetServiceUrlForRegion() throws Throwable {
    assertNull(Vpc.getServiceUrlForRegion("INVALID_REGION"));
    assertEquals(Vpc.getServiceUrlForRegion("au-syd"), "https://au-syd.iaas.cloud.ibm.com/v1");
    assertEquals(Vpc.getServiceUrlForRegion("br-sao"), "https://br-sao.iaas.cloud.ibm.com/v1");
    assertEquals(Vpc.getServiceUrlForRegion("ca-mon"), "https://ca-mon.iaas.cloud.ibm.com/v1");
    assertEquals(Vpc.getServiceUrlForRegion("ca-tor"), "https://ca-tor.iaas.cloud.ibm.com/v1");
    assertEquals(Vpc.getServiceUrlForRegion("eu-de"), "https://eu-de.iaas.cloud.ibm.com/v1");
    assertEquals(Vpc.getServiceUrlForRegion("eu-es"), "https://eu-es.iaas.cloud.ibm.com/v1");
    assertEquals(Vpc.getServiceUrlForRegion("eu-gb"), "https://eu-gb.iaas.cloud.ibm.com/v1");
    assertEquals(Vpc.getServiceUrlForRegion("jp-osa"), "https://jp-osa.iaas.cloud.ibm.com/v1");
    assertEquals(Vpc.getServiceUrlForRegion("jp-tok"), "https://jp-tok.iaas.cloud.ibm.com/v1");
    assertEquals(Vpc.getServiceUrlForRegion("us-east"), "https://us-east.iaas.cloud.ibm.com/v1");
    assertEquals(Vpc.getServiceUrlForRegion("us-south"), "https://us-south.iaas.cloud.ibm.com/v1");
  }


  // Test the getter for the version global parameter
  @Test
  public void testGetVersion() throws Throwable {
    assertEquals(vpcService.getVersion(), "2025-07-08");
  }

  // Test the listVpcs operation with a valid options model parameter
  @Test
  public void testListVpcsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132, \"vpcs\": [{\"classic_access\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"cse_source_ips\": [{\"ip\": {\"address\": \"192.168.3.4\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"default_network_acl\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::network-acl:r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"id\": \"r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"name\": \"my-network-acl\"}, \"default_routing_table\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc-routing-table:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"id\": \"r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"name\": \"my-routing-table-1\", \"resource_type\": \"routing_table\"}, \"default_security_group\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}, \"dns\": {\"enable_hub\": false, \"resolution_binding_count\": 0, \"resolver\": {\"servers\": [{\"address\": \"192.168.3.4\", \"zone_affinity\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"type\": \"delegated\", \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"vpc\"}}}, \"health_reasons\": [{\"code\": \"dns_resolution_binding_failed\", \"message\": \"The VPC specified in the DNS resolution binding has been disconnected.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-troubleshoot-hub-1\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"vpc\", \"status\": \"available\"}]}";
    String listVpcsPath = "/vpcs";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListVpcsOptions model
    ListVpcsOptions listVpcsOptionsModel = new ListVpcsOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .classicAccess(true)
      .build();

    // Invoke listVpcs() with a valid options model and verify the result
    Response<VPCCollection> response = vpcService.listVpcs(listVpcsOptionsModel).execute();
    assertNotNull(response);
    VPCCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listVpcsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
    assertEquals(Boolean.valueOf(query.get("classic_access")), Boolean.valueOf(true));
  }

  // Test the listVpcs operation with and without retries enabled
  @Test
  public void testListVpcsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListVpcsWOptions();

    vpcService.disableRetries();
    testListVpcsWOptions();
  }

  // Test the listVpcs operation using the VpcsPager.getNext() method
  @Test
  public void testListVpcsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"vpcs\":[{\"classic_access\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"cse_source_ips\":[{\"ip\":{\"address\":\"192.168.3.4\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"default_network_acl\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::network-acl:r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"id\":\"r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"name\":\"my-network-acl\"},\"default_routing_table\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc-routing-table:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"id\":\"r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"name\":\"my-routing-table-1\",\"resource_type\":\"routing_table\"},\"default_security_group\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"},\"dns\":{\"enable_hub\":false,\"resolution_binding_count\":0,\"resolver\":{\"servers\":[{\"address\":\"192.168.3.4\",\"zone_affinity\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"type\":\"delegated\",\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"vpc\"}}},\"health_reasons\":[{\"code\":\"dns_resolution_binding_failed\",\"message\":\"The VPC specified in the DNS resolution binding has been disconnected.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-troubleshoot-hub-1\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"vpc\",\"status\":\"available\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"vpcs\":[{\"classic_access\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"cse_source_ips\":[{\"ip\":{\"address\":\"192.168.3.4\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"default_network_acl\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::network-acl:r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"id\":\"r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"name\":\"my-network-acl\"},\"default_routing_table\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc-routing-table:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"id\":\"r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"name\":\"my-routing-table-1\",\"resource_type\":\"routing_table\"},\"default_security_group\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"},\"dns\":{\"enable_hub\":false,\"resolution_binding_count\":0,\"resolver\":{\"servers\":[{\"address\":\"192.168.3.4\",\"zone_affinity\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"type\":\"delegated\",\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"vpc\"}}},\"health_reasons\":[{\"code\":\"dns_resolution_binding_failed\",\"message\":\"The VPC specified in the DNS resolution binding has been disconnected.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-troubleshoot-hub-1\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"vpc\",\"status\":\"available\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpcsOptions listVpcsOptions = new ListVpcsOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .classicAccess(true)
      .build();

    List<VPC> allResults = new ArrayList<>();
    VpcsPager pager = new VpcsPager(vpcService, listVpcsOptions);
    while (pager.hasNext()) {
      List<VPC> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listVpcs operation using the VpcsPager.getAll() method
  @Test
  public void testListVpcsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"vpcs\":[{\"classic_access\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"cse_source_ips\":[{\"ip\":{\"address\":\"192.168.3.4\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"default_network_acl\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::network-acl:r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"id\":\"r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"name\":\"my-network-acl\"},\"default_routing_table\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc-routing-table:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"id\":\"r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"name\":\"my-routing-table-1\",\"resource_type\":\"routing_table\"},\"default_security_group\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"},\"dns\":{\"enable_hub\":false,\"resolution_binding_count\":0,\"resolver\":{\"servers\":[{\"address\":\"192.168.3.4\",\"zone_affinity\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"type\":\"delegated\",\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"vpc\"}}},\"health_reasons\":[{\"code\":\"dns_resolution_binding_failed\",\"message\":\"The VPC specified in the DNS resolution binding has been disconnected.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-troubleshoot-hub-1\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"vpc\",\"status\":\"available\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"vpcs\":[{\"classic_access\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"cse_source_ips\":[{\"ip\":{\"address\":\"192.168.3.4\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"default_network_acl\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::network-acl:r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"id\":\"r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"name\":\"my-network-acl\"},\"default_routing_table\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc-routing-table:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"id\":\"r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"name\":\"my-routing-table-1\",\"resource_type\":\"routing_table\"},\"default_security_group\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"},\"dns\":{\"enable_hub\":false,\"resolution_binding_count\":0,\"resolver\":{\"servers\":[{\"address\":\"192.168.3.4\",\"zone_affinity\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"type\":\"delegated\",\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"vpc\"}}},\"health_reasons\":[{\"code\":\"dns_resolution_binding_failed\",\"message\":\"The VPC specified in the DNS resolution binding has been disconnected.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-troubleshoot-hub-1\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"vpc\",\"status\":\"available\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpcsOptions listVpcsOptions = new ListVpcsOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .classicAccess(true)
      .build();

    VpcsPager pager = new VpcsPager(vpcService, listVpcsOptions);
    List<VPC> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createVpc operation with a valid options model parameter
  @Test
  public void testCreateVpcWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"classic_access\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"cse_source_ips\": [{\"ip\": {\"address\": \"192.168.3.4\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"default_network_acl\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::network-acl:r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"id\": \"r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"name\": \"my-network-acl\"}, \"default_routing_table\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc-routing-table:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"id\": \"r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"name\": \"my-routing-table-1\", \"resource_type\": \"routing_table\"}, \"default_security_group\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}, \"dns\": {\"enable_hub\": false, \"resolution_binding_count\": 0, \"resolver\": {\"servers\": [{\"address\": \"192.168.3.4\", \"zone_affinity\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"type\": \"delegated\", \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"vpc\"}}}, \"health_reasons\": [{\"code\": \"dns_resolution_binding_failed\", \"message\": \"The VPC specified in the DNS resolution binding has been disconnected.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-troubleshoot-hub-1\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"vpc\", \"status\": \"available\"}";
    String createVpcPath = "/vpcs";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ZoneIdentityByName model
    ZoneIdentityByName zoneIdentityModel = new ZoneIdentityByName.Builder()
      .name("us-south-1")
      .build();

    // Construct an instance of the DNSServerPrototype model
    DNSServerPrototype dnsServerPrototypeModel = new DNSServerPrototype.Builder()
      .address("192.168.3.4")
      .zoneAffinity(zoneIdentityModel)
      .build();

    // Construct an instance of the VPCDNSResolverPrototypeVPCDNSResolverTypeManualPrototype model
    VPCDNSResolverPrototypeVPCDNSResolverTypeManualPrototype vpcdnsResolverPrototypeModel = new VPCDNSResolverPrototypeVPCDNSResolverTypeManualPrototype.Builder()
      .manualServers(java.util.Arrays.asList(dnsServerPrototypeModel))
      .type("manual")
      .build();

    // Construct an instance of the VPCDNSPrototype model
    VPCDNSPrototype vpcdnsPrototypeModel = new VPCDNSPrototype.Builder()
      .enableHub(false)
      .resolver(vpcdnsResolverPrototypeModel)
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the CreateVpcOptions model
    CreateVpcOptions createVpcOptionsModel = new CreateVpcOptions.Builder()
      .addressPrefixManagement("auto")
      .classicAccess(false)
      .dns(vpcdnsPrototypeModel)
      .name("my-vpc")
      .resourceGroup(resourceGroupIdentityModel)
      .build();

    // Invoke createVpc() with a valid options model and verify the result
    Response<VPC> response = vpcService.createVpc(createVpcOptionsModel).execute();
    assertNotNull(response);
    VPC responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createVpcPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createVpc operation with and without retries enabled
  @Test
  public void testCreateVpcWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateVpcWOptions();

    vpcService.disableRetries();
    testCreateVpcWOptions();
  }

  // Test the deleteVpc operation with a valid options model parameter
  @Test
  public void testDeleteVpcWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteVpcPath = "/vpcs/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteVpcOptions model
    DeleteVpcOptions deleteVpcOptionsModel = new DeleteVpcOptions.Builder()
      .id("testString")
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke deleteVpc() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteVpc(deleteVpcOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteVpcPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteVpc operation with and without retries enabled
  @Test
  public void testDeleteVpcWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteVpcWOptions();

    vpcService.disableRetries();
    testDeleteVpcWOptions();
  }

  // Test the deleteVpc operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteVpcNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteVpc(null).execute();
  }

  // Test the getVpc operation with a valid options model parameter
  @Test
  public void testGetVpcWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"classic_access\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"cse_source_ips\": [{\"ip\": {\"address\": \"192.168.3.4\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"default_network_acl\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::network-acl:r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"id\": \"r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"name\": \"my-network-acl\"}, \"default_routing_table\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc-routing-table:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"id\": \"r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"name\": \"my-routing-table-1\", \"resource_type\": \"routing_table\"}, \"default_security_group\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}, \"dns\": {\"enable_hub\": false, \"resolution_binding_count\": 0, \"resolver\": {\"servers\": [{\"address\": \"192.168.3.4\", \"zone_affinity\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"type\": \"delegated\", \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"vpc\"}}}, \"health_reasons\": [{\"code\": \"dns_resolution_binding_failed\", \"message\": \"The VPC specified in the DNS resolution binding has been disconnected.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-troubleshoot-hub-1\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"vpc\", \"status\": \"available\"}";
    String getVpcPath = "/vpcs/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVpcOptions model
    GetVpcOptions getVpcOptionsModel = new GetVpcOptions.Builder()
      .id("testString")
      .build();

    // Invoke getVpc() with a valid options model and verify the result
    Response<VPC> response = vpcService.getVpc(getVpcOptionsModel).execute();
    assertNotNull(response);
    VPC responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVpcPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVpc operation with and without retries enabled
  @Test
  public void testGetVpcWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVpcWOptions();

    vpcService.disableRetries();
    testGetVpcWOptions();
  }

  // Test the getVpc operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVpcNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVpc(null).execute();
  }

  // Test the updateVpc operation with a valid options model parameter
  @Test
  public void testUpdateVpcWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"classic_access\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"cse_source_ips\": [{\"ip\": {\"address\": \"192.168.3.4\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"default_network_acl\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::network-acl:r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"id\": \"r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"name\": \"my-network-acl\"}, \"default_routing_table\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc-routing-table:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"id\": \"r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"name\": \"my-routing-table-1\", \"resource_type\": \"routing_table\"}, \"default_security_group\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}, \"dns\": {\"enable_hub\": false, \"resolution_binding_count\": 0, \"resolver\": {\"servers\": [{\"address\": \"192.168.3.4\", \"zone_affinity\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"type\": \"delegated\", \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"vpc\"}}}, \"health_reasons\": [{\"code\": \"dns_resolution_binding_failed\", \"message\": \"The VPC specified in the DNS resolution binding has been disconnected.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-troubleshoot-hub-1\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"vpc\", \"status\": \"available\"}";
    String updateVpcPath = "/vpcs/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ZoneIdentityByName model
    ZoneIdentityByName zoneIdentityModel = new ZoneIdentityByName.Builder()
      .name("us-south-1")
      .build();

    // Construct an instance of the DNSServerPrototype model
    DNSServerPrototype dnsServerPrototypeModel = new DNSServerPrototype.Builder()
      .address("192.168.3.4")
      .zoneAffinity(zoneIdentityModel)
      .build();

    // Construct an instance of the VPCDNSResolverVPCPatchVPCIdentityById model
    VPCDNSResolverVPCPatchVPCIdentityById vpcdnsResolverVpcPatchModel = new VPCDNSResolverVPCPatchVPCIdentityById.Builder()
      .id("r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .build();

    // Construct an instance of the VPCDNSResolverPatch model
    VPCDNSResolverPatch vpcdnsResolverPatchModel = new VPCDNSResolverPatch.Builder()
      .manualServers(java.util.Arrays.asList(dnsServerPrototypeModel))
      .type("delegated")
      .vpc(vpcdnsResolverVpcPatchModel)
      .build();

    // Construct an instance of the VPCDNSPatch model
    VPCDNSPatch vpcdnsPatchModel = new VPCDNSPatch.Builder()
      .enableHub(true)
      .resolver(vpcdnsResolverPatchModel)
      .build();

    // Construct an instance of the VPCPatch model
    VPCPatch vpcPatchModel = new VPCPatch.Builder()
      .dns(vpcdnsPatchModel)
      .name("my-vpc")
      .build();
    Map<String, Object> vpcPatchModelAsPatch = vpcPatchModel.asPatch();

    // Construct an instance of the UpdateVpcOptions model
    UpdateVpcOptions updateVpcOptionsModel = new UpdateVpcOptions.Builder()
      .id("testString")
      .vpcPatch(vpcPatchModelAsPatch)
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke updateVpc() with a valid options model and verify the result
    Response<VPC> response = vpcService.updateVpc(updateVpcOptionsModel).execute();
    assertNotNull(response);
    VPC responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateVpcPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateVpc operation with and without retries enabled
  @Test
  public void testUpdateVpcWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateVpcWOptions();

    vpcService.disableRetries();
    testUpdateVpcWOptions();
  }

  // Test the updateVpc operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateVpcNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateVpc(null).execute();
  }

  // Test the getVpcDefaultNetworkAcl operation with a valid options model parameter
  @Test
  public void testGetVpcDefaultNetworkAclWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::network-acl:r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"id\": \"r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"name\": \"mnemonic-ersatz-eatery-mythology\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"rules\": [{\"action\": \"allow\", \"before\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"name\": \"my-network-acl-rule\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"destination\": \"192.168.3.0/24\", \"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"ip_version\": \"ipv4\", \"name\": \"my-network-acl-rule\", \"source\": \"192.168.3.0/24\", \"protocol\": \"all\"}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String getVpcDefaultNetworkAclPath = "/vpcs/testString/default_network_acl";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVpcDefaultNetworkAclOptions model
    GetVpcDefaultNetworkAclOptions getVpcDefaultNetworkAclOptionsModel = new GetVpcDefaultNetworkAclOptions.Builder()
      .id("testString")
      .build();

    // Invoke getVpcDefaultNetworkAcl() with a valid options model and verify the result
    Response<DefaultNetworkACL> response = vpcService.getVpcDefaultNetworkAcl(getVpcDefaultNetworkAclOptionsModel).execute();
    assertNotNull(response);
    DefaultNetworkACL responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVpcDefaultNetworkAclPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVpcDefaultNetworkAcl operation with and without retries enabled
  @Test
  public void testGetVpcDefaultNetworkAclWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVpcDefaultNetworkAclWOptions();

    vpcService.disableRetries();
    testGetVpcDefaultNetworkAclWOptions();
  }

  // Test the getVpcDefaultNetworkAcl operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVpcDefaultNetworkAclNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVpcDefaultNetworkAcl(null).execute();
  }

  // Test the getVpcDefaultRoutingTable operation with a valid options model parameter
  @Test
  public void testGetVpcDefaultRoutingTableWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"accept_routes_from\": [{\"resource_type\": \"vpn_server\"}], \"advertise_routes_to\": [\"transit_gateway\"], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc-routing-table:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"id\": \"r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"is_default\": false, \"lifecycle_state\": \"stable\", \"name\": \"milled-easy-equine-machines\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"routing_table\", \"route_direct_link_ingress\": true, \"route_internet_ingress\": true, \"route_transit_gateway_ingress\": true, \"route_vpc_zone_ingress\": false, \"routes\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840/routes/r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\", \"id\": \"r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\", \"name\": \"my-vpc-routing-table-route\"}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}]}";
    String getVpcDefaultRoutingTablePath = "/vpcs/testString/default_routing_table";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVpcDefaultRoutingTableOptions model
    GetVpcDefaultRoutingTableOptions getVpcDefaultRoutingTableOptionsModel = new GetVpcDefaultRoutingTableOptions.Builder()
      .id("testString")
      .build();

    // Invoke getVpcDefaultRoutingTable() with a valid options model and verify the result
    Response<DefaultRoutingTable> response = vpcService.getVpcDefaultRoutingTable(getVpcDefaultRoutingTableOptionsModel).execute();
    assertNotNull(response);
    DefaultRoutingTable responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVpcDefaultRoutingTablePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVpcDefaultRoutingTable operation with and without retries enabled
  @Test
  public void testGetVpcDefaultRoutingTableWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVpcDefaultRoutingTableWOptions();

    vpcService.disableRetries();
    testGetVpcDefaultRoutingTableWOptions();
  }

  // Test the getVpcDefaultRoutingTable operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVpcDefaultRoutingTableNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVpcDefaultRoutingTable(null).execute();
  }

  // Test the getVpcDefaultSecurityGroup operation with a valid options model parameter
  @Test
  public void testGetVpcDefaultSecurityGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"observant-chip-emphatic-engraver\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"rules\": [{\"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/r006-6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"id\": \"r006-6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"ip_version\": \"ipv4\", \"local\": {\"address\": \"192.168.3.4\"}, \"remote\": {\"address\": \"192.168.3.4\"}, \"protocol\": \"all\"}], \"targets\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"id\": \"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"name\": \"my-bare-metal-server-network-interface\", \"resource_type\": \"network_interface\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String getVpcDefaultSecurityGroupPath = "/vpcs/testString/default_security_group";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVpcDefaultSecurityGroupOptions model
    GetVpcDefaultSecurityGroupOptions getVpcDefaultSecurityGroupOptionsModel = new GetVpcDefaultSecurityGroupOptions.Builder()
      .id("testString")
      .build();

    // Invoke getVpcDefaultSecurityGroup() with a valid options model and verify the result
    Response<DefaultSecurityGroup> response = vpcService.getVpcDefaultSecurityGroup(getVpcDefaultSecurityGroupOptionsModel).execute();
    assertNotNull(response);
    DefaultSecurityGroup responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVpcDefaultSecurityGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVpcDefaultSecurityGroup operation with and without retries enabled
  @Test
  public void testGetVpcDefaultSecurityGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVpcDefaultSecurityGroupWOptions();

    vpcService.disableRetries();
    testGetVpcDefaultSecurityGroupWOptions();
  }

  // Test the getVpcDefaultSecurityGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVpcDefaultSecurityGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVpcDefaultSecurityGroup(null).execute();
  }

  // Test the listVpcAddressPrefixes operation with a valid options model parameter
  @Test
  public void testListVpcAddressPrefixesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address_prefixes\": [{\"cidr\": \"192.168.3.0/24\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"has_subnets\": true, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/address_prefixes/r006-68574057-c5e0-4675-ada4-99377d8f4789\", \"id\": \"r006-68574057-c5e0-4675-ada4-99377d8f4789\", \"is_default\": false, \"name\": \"my-vpc-address-prefix-zone-1\", \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listVpcAddressPrefixesPath = "/vpcs/testString/address_prefixes";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListVpcAddressPrefixesOptions model
    ListVpcAddressPrefixesOptions listVpcAddressPrefixesOptionsModel = new ListVpcAddressPrefixesOptions.Builder()
      .vpcId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listVpcAddressPrefixes() with a valid options model and verify the result
    Response<AddressPrefixCollection> response = vpcService.listVpcAddressPrefixes(listVpcAddressPrefixesOptionsModel).execute();
    assertNotNull(response);
    AddressPrefixCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listVpcAddressPrefixesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listVpcAddressPrefixes operation with and without retries enabled
  @Test
  public void testListVpcAddressPrefixesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListVpcAddressPrefixesWOptions();

    vpcService.disableRetries();
    testListVpcAddressPrefixesWOptions();
  }

  // Test the listVpcAddressPrefixes operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListVpcAddressPrefixesNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listVpcAddressPrefixes(null).execute();
  }

  // Test the listVpcAddressPrefixes operation using the VpcAddressPrefixesPager.getNext() method
  @Test
  public void testListVpcAddressPrefixesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"address_prefixes\":[{\"cidr\":\"192.168.3.0/24\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"has_subnets\":true,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/address_prefixes/r006-68574057-c5e0-4675-ada4-99377d8f4789\",\"id\":\"r006-68574057-c5e0-4675-ada4-99377d8f4789\",\"is_default\":false,\"name\":\"my-vpc-address-prefix-zone-1\",\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"address_prefixes\":[{\"cidr\":\"192.168.3.0/24\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"has_subnets\":true,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/address_prefixes/r006-68574057-c5e0-4675-ada4-99377d8f4789\",\"id\":\"r006-68574057-c5e0-4675-ada4-99377d8f4789\",\"is_default\":false,\"name\":\"my-vpc-address-prefix-zone-1\",\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpcAddressPrefixesOptions listVpcAddressPrefixesOptions = new ListVpcAddressPrefixesOptions.Builder()
      .vpcId("testString")
      .limit(Long.valueOf("10"))
      .build();

    List<AddressPrefix> allResults = new ArrayList<>();
    VpcAddressPrefixesPager pager = new VpcAddressPrefixesPager(vpcService, listVpcAddressPrefixesOptions);
    while (pager.hasNext()) {
      List<AddressPrefix> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listVpcAddressPrefixes operation using the VpcAddressPrefixesPager.getAll() method
  @Test
  public void testListVpcAddressPrefixesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"address_prefixes\":[{\"cidr\":\"192.168.3.0/24\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"has_subnets\":true,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/address_prefixes/r006-68574057-c5e0-4675-ada4-99377d8f4789\",\"id\":\"r006-68574057-c5e0-4675-ada4-99377d8f4789\",\"is_default\":false,\"name\":\"my-vpc-address-prefix-zone-1\",\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"address_prefixes\":[{\"cidr\":\"192.168.3.0/24\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"has_subnets\":true,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/address_prefixes/r006-68574057-c5e0-4675-ada4-99377d8f4789\",\"id\":\"r006-68574057-c5e0-4675-ada4-99377d8f4789\",\"is_default\":false,\"name\":\"my-vpc-address-prefix-zone-1\",\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpcAddressPrefixesOptions listVpcAddressPrefixesOptions = new ListVpcAddressPrefixesOptions.Builder()
      .vpcId("testString")
      .limit(Long.valueOf("10"))
      .build();

    VpcAddressPrefixesPager pager = new VpcAddressPrefixesPager(vpcService, listVpcAddressPrefixesOptions);
    List<AddressPrefix> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createVpcAddressPrefix operation with a valid options model parameter
  @Test
  public void testCreateVpcAddressPrefixWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"cidr\": \"192.168.3.0/24\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"has_subnets\": true, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/address_prefixes/r006-68574057-c5e0-4675-ada4-99377d8f4789\", \"id\": \"r006-68574057-c5e0-4675-ada4-99377d8f4789\", \"is_default\": false, \"name\": \"my-vpc-address-prefix-zone-1\", \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String createVpcAddressPrefixPath = "/vpcs/testString/address_prefixes";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ZoneIdentityByName model
    ZoneIdentityByName zoneIdentityModel = new ZoneIdentityByName.Builder()
      .name("us-south-1")
      .build();

    // Construct an instance of the CreateVpcAddressPrefixOptions model
    CreateVpcAddressPrefixOptions createVpcAddressPrefixOptionsModel = new CreateVpcAddressPrefixOptions.Builder()
      .vpcId("testString")
      .cidr("10.240.0.0/18")
      .zone(zoneIdentityModel)
      .isDefault(true)
      .name("my-vpc-address-prefix-zone-1")
      .build();

    // Invoke createVpcAddressPrefix() with a valid options model and verify the result
    Response<AddressPrefix> response = vpcService.createVpcAddressPrefix(createVpcAddressPrefixOptionsModel).execute();
    assertNotNull(response);
    AddressPrefix responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createVpcAddressPrefixPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createVpcAddressPrefix operation with and without retries enabled
  @Test
  public void testCreateVpcAddressPrefixWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateVpcAddressPrefixWOptions();

    vpcService.disableRetries();
    testCreateVpcAddressPrefixWOptions();
  }

  // Test the createVpcAddressPrefix operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateVpcAddressPrefixNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createVpcAddressPrefix(null).execute();
  }

  // Test the deleteVpcAddressPrefix operation with a valid options model parameter
  @Test
  public void testDeleteVpcAddressPrefixWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteVpcAddressPrefixPath = "/vpcs/testString/address_prefixes/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteVpcAddressPrefixOptions model
    DeleteVpcAddressPrefixOptions deleteVpcAddressPrefixOptionsModel = new DeleteVpcAddressPrefixOptions.Builder()
      .vpcId("testString")
      .id("testString")
      .build();

    // Invoke deleteVpcAddressPrefix() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteVpcAddressPrefix(deleteVpcAddressPrefixOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteVpcAddressPrefixPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteVpcAddressPrefix operation with and without retries enabled
  @Test
  public void testDeleteVpcAddressPrefixWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteVpcAddressPrefixWOptions();

    vpcService.disableRetries();
    testDeleteVpcAddressPrefixWOptions();
  }

  // Test the deleteVpcAddressPrefix operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteVpcAddressPrefixNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteVpcAddressPrefix(null).execute();
  }

  // Test the getVpcAddressPrefix operation with a valid options model parameter
  @Test
  public void testGetVpcAddressPrefixWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"cidr\": \"192.168.3.0/24\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"has_subnets\": true, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/address_prefixes/r006-68574057-c5e0-4675-ada4-99377d8f4789\", \"id\": \"r006-68574057-c5e0-4675-ada4-99377d8f4789\", \"is_default\": false, \"name\": \"my-vpc-address-prefix-zone-1\", \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getVpcAddressPrefixPath = "/vpcs/testString/address_prefixes/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVpcAddressPrefixOptions model
    GetVpcAddressPrefixOptions getVpcAddressPrefixOptionsModel = new GetVpcAddressPrefixOptions.Builder()
      .vpcId("testString")
      .id("testString")
      .build();

    // Invoke getVpcAddressPrefix() with a valid options model and verify the result
    Response<AddressPrefix> response = vpcService.getVpcAddressPrefix(getVpcAddressPrefixOptionsModel).execute();
    assertNotNull(response);
    AddressPrefix responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVpcAddressPrefixPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVpcAddressPrefix operation with and without retries enabled
  @Test
  public void testGetVpcAddressPrefixWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVpcAddressPrefixWOptions();

    vpcService.disableRetries();
    testGetVpcAddressPrefixWOptions();
  }

  // Test the getVpcAddressPrefix operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVpcAddressPrefixNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVpcAddressPrefix(null).execute();
  }

  // Test the updateVpcAddressPrefix operation with a valid options model parameter
  @Test
  public void testUpdateVpcAddressPrefixWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"cidr\": \"192.168.3.0/24\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"has_subnets\": true, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/address_prefixes/r006-68574057-c5e0-4675-ada4-99377d8f4789\", \"id\": \"r006-68574057-c5e0-4675-ada4-99377d8f4789\", \"is_default\": false, \"name\": \"my-vpc-address-prefix-zone-1\", \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String updateVpcAddressPrefixPath = "/vpcs/testString/address_prefixes/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the AddressPrefixPatch model
    AddressPrefixPatch addressPrefixPatchModel = new AddressPrefixPatch.Builder()
      .isDefault(false)
      .name("my-vpc-address-prefix-updated")
      .build();
    Map<String, Object> addressPrefixPatchModelAsPatch = addressPrefixPatchModel.asPatch();

    // Construct an instance of the UpdateVpcAddressPrefixOptions model
    UpdateVpcAddressPrefixOptions updateVpcAddressPrefixOptionsModel = new UpdateVpcAddressPrefixOptions.Builder()
      .vpcId("testString")
      .id("testString")
      .addressPrefixPatch(addressPrefixPatchModelAsPatch)
      .build();

    // Invoke updateVpcAddressPrefix() with a valid options model and verify the result
    Response<AddressPrefix> response = vpcService.updateVpcAddressPrefix(updateVpcAddressPrefixOptionsModel).execute();
    assertNotNull(response);
    AddressPrefix responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateVpcAddressPrefixPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateVpcAddressPrefix operation with and without retries enabled
  @Test
  public void testUpdateVpcAddressPrefixWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateVpcAddressPrefixWOptions();

    vpcService.disableRetries();
    testUpdateVpcAddressPrefixWOptions();
  }

  // Test the updateVpcAddressPrefix operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateVpcAddressPrefixNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateVpcAddressPrefix(null).execute();
  }

  // Test the listVpcDnsResolutionBindings operation with a valid options model parameter
  @Test
  public void testListVpcDnsResolutionBindingsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"dns_resolution_bindings\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"endpoint_gateways\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"id\": \"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"name\": \"my-endpoint-gateway\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"endpoint_gateway\"}], \"health_reasons\": [{\"code\": \"disconnected_from_bound_vpc\", \"message\": \"The VPC specified in the DNS resolution binding has been disconnected.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-troubleshoot-hub-1\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-982d72b7-db1b-4606-afb2-ed6bd4b0bed1/dns_resolution_bindings/r006-8a524686-fcf6-4947-a59b-188c1ed78ad1\", \"id\": \"r006-8a524686-fcf6-4947-a59b-188c1ed78ad1\", \"lifecycle_state\": \"stable\", \"name\": \"my-dns-resolution-binding\", \"resource_type\": \"vpc_dns_resolution_binding\", \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"vpc\"}}], \"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listVpcDnsResolutionBindingsPath = "/vpcs/testString/dns_resolution_bindings";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListVpcDnsResolutionBindingsOptions model
    ListVpcDnsResolutionBindingsOptions listVpcDnsResolutionBindingsOptionsModel = new ListVpcDnsResolutionBindingsOptions.Builder()
      .vpcId("testString")
      .sort("name")
      .start("testString")
      .limit(Long.valueOf("10"))
      .name("my-name")
      .vpcCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .vpcName("my-vpc")
      .accountId("bb1b52262f7441a586f49068482f1e60")
      .build();

    // Invoke listVpcDnsResolutionBindings() with a valid options model and verify the result
    Response<VPCDNSResolutionBindingCollection> response = vpcService.listVpcDnsResolutionBindings(listVpcDnsResolutionBindingsOptionsModel).execute();
    assertNotNull(response);
    VPCDNSResolutionBindingCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listVpcDnsResolutionBindingsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("sort"), "name");
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("name"), "my-name");
    assertEquals(query.get("vpc.crn"), "crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b");
    assertEquals(query.get("vpc.name"), "my-vpc");
    assertEquals(query.get("account.id"), "bb1b52262f7441a586f49068482f1e60");
  }

  // Test the listVpcDnsResolutionBindings operation with and without retries enabled
  @Test
  public void testListVpcDnsResolutionBindingsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListVpcDnsResolutionBindingsWOptions();

    vpcService.disableRetries();
    testListVpcDnsResolutionBindingsWOptions();
  }

  // Test the listVpcDnsResolutionBindings operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListVpcDnsResolutionBindingsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listVpcDnsResolutionBindings(null).execute();
  }

  // Test the listVpcDnsResolutionBindings operation using the VpcDnsResolutionBindingsPager.getNext() method
  @Test
  public void testListVpcDnsResolutionBindingsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"dns_resolution_bindings\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"endpoint_gateways\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"id\":\"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"name\":\"my-endpoint-gateway\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"endpoint_gateway\"}],\"health_reasons\":[{\"code\":\"disconnected_from_bound_vpc\",\"message\":\"The VPC specified in the DNS resolution binding has been disconnected.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-troubleshoot-hub-1\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-982d72b7-db1b-4606-afb2-ed6bd4b0bed1/dns_resolution_bindings/r006-8a524686-fcf6-4947-a59b-188c1ed78ad1\",\"id\":\"r006-8a524686-fcf6-4947-a59b-188c1ed78ad1\",\"lifecycle_state\":\"stable\",\"name\":\"my-dns-resolution-binding\",\"resource_type\":\"vpc_dns_resolution_binding\",\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"vpc\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"dns_resolution_bindings\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"endpoint_gateways\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"id\":\"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"name\":\"my-endpoint-gateway\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"endpoint_gateway\"}],\"health_reasons\":[{\"code\":\"disconnected_from_bound_vpc\",\"message\":\"The VPC specified in the DNS resolution binding has been disconnected.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-troubleshoot-hub-1\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-982d72b7-db1b-4606-afb2-ed6bd4b0bed1/dns_resolution_bindings/r006-8a524686-fcf6-4947-a59b-188c1ed78ad1\",\"id\":\"r006-8a524686-fcf6-4947-a59b-188c1ed78ad1\",\"lifecycle_state\":\"stable\",\"name\":\"my-dns-resolution-binding\",\"resource_type\":\"vpc_dns_resolution_binding\",\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"vpc\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpcDnsResolutionBindingsOptions listVpcDnsResolutionBindingsOptions = new ListVpcDnsResolutionBindingsOptions.Builder()
      .vpcId("testString")
      .sort("name")
      .limit(Long.valueOf("10"))
      .name("my-name")
      .vpcCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .vpcName("my-vpc")
      .accountId("bb1b52262f7441a586f49068482f1e60")
      .build();

    List<VPCDNSResolutionBinding> allResults = new ArrayList<>();
    VpcDnsResolutionBindingsPager pager = new VpcDnsResolutionBindingsPager(vpcService, listVpcDnsResolutionBindingsOptions);
    while (pager.hasNext()) {
      List<VPCDNSResolutionBinding> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listVpcDnsResolutionBindings operation using the VpcDnsResolutionBindingsPager.getAll() method
  @Test
  public void testListVpcDnsResolutionBindingsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"dns_resolution_bindings\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"endpoint_gateways\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"id\":\"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"name\":\"my-endpoint-gateway\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"endpoint_gateway\"}],\"health_reasons\":[{\"code\":\"disconnected_from_bound_vpc\",\"message\":\"The VPC specified in the DNS resolution binding has been disconnected.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-troubleshoot-hub-1\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-982d72b7-db1b-4606-afb2-ed6bd4b0bed1/dns_resolution_bindings/r006-8a524686-fcf6-4947-a59b-188c1ed78ad1\",\"id\":\"r006-8a524686-fcf6-4947-a59b-188c1ed78ad1\",\"lifecycle_state\":\"stable\",\"name\":\"my-dns-resolution-binding\",\"resource_type\":\"vpc_dns_resolution_binding\",\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"vpc\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"dns_resolution_bindings\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"endpoint_gateways\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"id\":\"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"name\":\"my-endpoint-gateway\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"endpoint_gateway\"}],\"health_reasons\":[{\"code\":\"disconnected_from_bound_vpc\",\"message\":\"The VPC specified in the DNS resolution binding has been disconnected.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-troubleshoot-hub-1\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-982d72b7-db1b-4606-afb2-ed6bd4b0bed1/dns_resolution_bindings/r006-8a524686-fcf6-4947-a59b-188c1ed78ad1\",\"id\":\"r006-8a524686-fcf6-4947-a59b-188c1ed78ad1\",\"lifecycle_state\":\"stable\",\"name\":\"my-dns-resolution-binding\",\"resource_type\":\"vpc_dns_resolution_binding\",\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"vpc\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpcDnsResolutionBindingsOptions listVpcDnsResolutionBindingsOptions = new ListVpcDnsResolutionBindingsOptions.Builder()
      .vpcId("testString")
      .sort("name")
      .limit(Long.valueOf("10"))
      .name("my-name")
      .vpcCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .vpcName("my-vpc")
      .accountId("bb1b52262f7441a586f49068482f1e60")
      .build();

    VpcDnsResolutionBindingsPager pager = new VpcDnsResolutionBindingsPager(vpcService, listVpcDnsResolutionBindingsOptions);
    List<VPCDNSResolutionBinding> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createVpcDnsResolutionBinding operation with a valid options model parameter
  @Test
  public void testCreateVpcDnsResolutionBindingWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"endpoint_gateways\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"id\": \"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"name\": \"my-endpoint-gateway\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"endpoint_gateway\"}], \"health_reasons\": [{\"code\": \"disconnected_from_bound_vpc\", \"message\": \"The VPC specified in the DNS resolution binding has been disconnected.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-troubleshoot-hub-1\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-982d72b7-db1b-4606-afb2-ed6bd4b0bed1/dns_resolution_bindings/r006-8a524686-fcf6-4947-a59b-188c1ed78ad1\", \"id\": \"r006-8a524686-fcf6-4947-a59b-188c1ed78ad1\", \"lifecycle_state\": \"stable\", \"name\": \"my-dns-resolution-binding\", \"resource_type\": \"vpc_dns_resolution_binding\", \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"vpc\"}}";
    String createVpcDnsResolutionBindingPath = "/vpcs/testString/dns_resolution_bindings";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the VPCIdentityById model
    VPCIdentityById vpcIdentityModel = new VPCIdentityById.Builder()
      .id("r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .build();

    // Construct an instance of the CreateVpcDnsResolutionBindingOptions model
    CreateVpcDnsResolutionBindingOptions createVpcDnsResolutionBindingOptionsModel = new CreateVpcDnsResolutionBindingOptions.Builder()
      .vpcId("testString")
      .vpc(vpcIdentityModel)
      .name("my-dns-resolution-binding")
      .build();

    // Invoke createVpcDnsResolutionBinding() with a valid options model and verify the result
    Response<VPCDNSResolutionBinding> response = vpcService.createVpcDnsResolutionBinding(createVpcDnsResolutionBindingOptionsModel).execute();
    assertNotNull(response);
    VPCDNSResolutionBinding responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createVpcDnsResolutionBindingPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createVpcDnsResolutionBinding operation with and without retries enabled
  @Test
  public void testCreateVpcDnsResolutionBindingWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateVpcDnsResolutionBindingWOptions();

    vpcService.disableRetries();
    testCreateVpcDnsResolutionBindingWOptions();
  }

  // Test the createVpcDnsResolutionBinding operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateVpcDnsResolutionBindingNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createVpcDnsResolutionBinding(null).execute();
  }

  // Test the deleteVpcDnsResolutionBinding operation with a valid options model parameter
  @Test
  public void testDeleteVpcDnsResolutionBindingWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"endpoint_gateways\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"id\": \"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"name\": \"my-endpoint-gateway\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"endpoint_gateway\"}], \"health_reasons\": [{\"code\": \"disconnected_from_bound_vpc\", \"message\": \"The VPC specified in the DNS resolution binding has been disconnected.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-troubleshoot-hub-1\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-982d72b7-db1b-4606-afb2-ed6bd4b0bed1/dns_resolution_bindings/r006-8a524686-fcf6-4947-a59b-188c1ed78ad1\", \"id\": \"r006-8a524686-fcf6-4947-a59b-188c1ed78ad1\", \"lifecycle_state\": \"stable\", \"name\": \"my-dns-resolution-binding\", \"resource_type\": \"vpc_dns_resolution_binding\", \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"vpc\"}}";
    String deleteVpcDnsResolutionBindingPath = "/vpcs/testString/dns_resolution_bindings/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteVpcDnsResolutionBindingOptions model
    DeleteVpcDnsResolutionBindingOptions deleteVpcDnsResolutionBindingOptionsModel = new DeleteVpcDnsResolutionBindingOptions.Builder()
      .vpcId("testString")
      .id("testString")
      .build();

    // Invoke deleteVpcDnsResolutionBinding() with a valid options model and verify the result
    Response<VPCDNSResolutionBinding> response = vpcService.deleteVpcDnsResolutionBinding(deleteVpcDnsResolutionBindingOptionsModel).execute();
    assertNotNull(response);
    VPCDNSResolutionBinding responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteVpcDnsResolutionBindingPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteVpcDnsResolutionBinding operation with and without retries enabled
  @Test
  public void testDeleteVpcDnsResolutionBindingWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteVpcDnsResolutionBindingWOptions();

    vpcService.disableRetries();
    testDeleteVpcDnsResolutionBindingWOptions();
  }

  // Test the deleteVpcDnsResolutionBinding operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteVpcDnsResolutionBindingNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteVpcDnsResolutionBinding(null).execute();
  }

  // Test the getVpcDnsResolutionBinding operation with a valid options model parameter
  @Test
  public void testGetVpcDnsResolutionBindingWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"endpoint_gateways\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"id\": \"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"name\": \"my-endpoint-gateway\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"endpoint_gateway\"}], \"health_reasons\": [{\"code\": \"disconnected_from_bound_vpc\", \"message\": \"The VPC specified in the DNS resolution binding has been disconnected.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-troubleshoot-hub-1\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-982d72b7-db1b-4606-afb2-ed6bd4b0bed1/dns_resolution_bindings/r006-8a524686-fcf6-4947-a59b-188c1ed78ad1\", \"id\": \"r006-8a524686-fcf6-4947-a59b-188c1ed78ad1\", \"lifecycle_state\": \"stable\", \"name\": \"my-dns-resolution-binding\", \"resource_type\": \"vpc_dns_resolution_binding\", \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"vpc\"}}";
    String getVpcDnsResolutionBindingPath = "/vpcs/testString/dns_resolution_bindings/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVpcDnsResolutionBindingOptions model
    GetVpcDnsResolutionBindingOptions getVpcDnsResolutionBindingOptionsModel = new GetVpcDnsResolutionBindingOptions.Builder()
      .vpcId("testString")
      .id("testString")
      .build();

    // Invoke getVpcDnsResolutionBinding() with a valid options model and verify the result
    Response<VPCDNSResolutionBinding> response = vpcService.getVpcDnsResolutionBinding(getVpcDnsResolutionBindingOptionsModel).execute();
    assertNotNull(response);
    VPCDNSResolutionBinding responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVpcDnsResolutionBindingPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVpcDnsResolutionBinding operation with and without retries enabled
  @Test
  public void testGetVpcDnsResolutionBindingWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVpcDnsResolutionBindingWOptions();

    vpcService.disableRetries();
    testGetVpcDnsResolutionBindingWOptions();
  }

  // Test the getVpcDnsResolutionBinding operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVpcDnsResolutionBindingNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVpcDnsResolutionBinding(null).execute();
  }

  // Test the updateVpcDnsResolutionBinding operation with a valid options model parameter
  @Test
  public void testUpdateVpcDnsResolutionBindingWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"endpoint_gateways\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"id\": \"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"name\": \"my-endpoint-gateway\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"endpoint_gateway\"}], \"health_reasons\": [{\"code\": \"disconnected_from_bound_vpc\", \"message\": \"The VPC specified in the DNS resolution binding has been disconnected.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-troubleshoot-hub-1\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-982d72b7-db1b-4606-afb2-ed6bd4b0bed1/dns_resolution_bindings/r006-8a524686-fcf6-4947-a59b-188c1ed78ad1\", \"id\": \"r006-8a524686-fcf6-4947-a59b-188c1ed78ad1\", \"lifecycle_state\": \"stable\", \"name\": \"my-dns-resolution-binding\", \"resource_type\": \"vpc_dns_resolution_binding\", \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"vpc\"}}";
    String updateVpcDnsResolutionBindingPath = "/vpcs/testString/dns_resolution_bindings/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the VPCDNSResolutionBindingPatch model
    VPCDNSResolutionBindingPatch vpcdnsResolutionBindingPatchModel = new VPCDNSResolutionBindingPatch.Builder()
      .name("my-dns-resolution-binding-updated")
      .build();
    Map<String, Object> vpcdnsResolutionBindingPatchModelAsPatch = vpcdnsResolutionBindingPatchModel.asPatch();

    // Construct an instance of the UpdateVpcDnsResolutionBindingOptions model
    UpdateVpcDnsResolutionBindingOptions updateVpcDnsResolutionBindingOptionsModel = new UpdateVpcDnsResolutionBindingOptions.Builder()
      .vpcId("testString")
      .id("testString")
      .vpcdnsResolutionBindingPatch(vpcdnsResolutionBindingPatchModelAsPatch)
      .build();

    // Invoke updateVpcDnsResolutionBinding() with a valid options model and verify the result
    Response<VPCDNSResolutionBinding> response = vpcService.updateVpcDnsResolutionBinding(updateVpcDnsResolutionBindingOptionsModel).execute();
    assertNotNull(response);
    VPCDNSResolutionBinding responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateVpcDnsResolutionBindingPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateVpcDnsResolutionBinding operation with and without retries enabled
  @Test
  public void testUpdateVpcDnsResolutionBindingWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateVpcDnsResolutionBindingWOptions();

    vpcService.disableRetries();
    testUpdateVpcDnsResolutionBindingWOptions();
  }

  // Test the updateVpcDnsResolutionBinding operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateVpcDnsResolutionBindingNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateVpcDnsResolutionBinding(null).execute();
  }

  // Test the listVpcRoutes operation with a valid options model parameter
  @Test
  public void testListVpcRoutesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"routes\": [{\"action\": \"delegate\", \"advertise\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"creator\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpn:0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"name\": \"my-vpn-gateway\", \"resource_type\": \"vpn_gateway\"}, \"destination\": \"192.168.3.0/24\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840/routes/r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\", \"id\": \"r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\", \"lifecycle_state\": \"stable\", \"name\": \"my-vpc-routing-table-route\", \"next_hop\": {\"address\": \"192.168.3.4\"}, \"origin\": \"service\", \"priority\": 1, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"total_count\": 132}";
    String listVpcRoutesPath = "/vpcs/testString/routes";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListVpcRoutesOptions model
    ListVpcRoutesOptions listVpcRoutesOptionsModel = new ListVpcRoutesOptions.Builder()
      .vpcId("testString")
      .zoneName("us-south-1")
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listVpcRoutes() with a valid options model and verify the result
    Response<RouteCollectionVPCContext> response = vpcService.listVpcRoutes(listVpcRoutesOptionsModel).execute();
    assertNotNull(response);
    RouteCollectionVPCContext responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listVpcRoutesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("zone.name"), "us-south-1");
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listVpcRoutes operation with and without retries enabled
  @Test
  public void testListVpcRoutesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListVpcRoutesWOptions();

    vpcService.disableRetries();
    testListVpcRoutesWOptions();
  }

  // Test the listVpcRoutes operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListVpcRoutesNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listVpcRoutes(null).execute();
  }

  // Test the listVpcRoutes operation using the VpcRoutesPager.getNext() method
  @Test
  public void testListVpcRoutesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"routes\":[{\"action\":\"delegate\",\"advertise\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"creator\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpn:0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"id\":\"0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"name\":\"my-vpn-gateway\",\"resource_type\":\"vpn_gateway\"},\"destination\":\"192.168.3.0/24\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840/routes/r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\",\"id\":\"r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\",\"lifecycle_state\":\"stable\",\"name\":\"my-vpc-routing-table-route\",\"next_hop\":{\"address\":\"192.168.3.4\"},\"origin\":\"service\",\"priority\":1,\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"routes\":[{\"action\":\"delegate\",\"advertise\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"creator\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpn:0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"id\":\"0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"name\":\"my-vpn-gateway\",\"resource_type\":\"vpn_gateway\"},\"destination\":\"192.168.3.0/24\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840/routes/r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\",\"id\":\"r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\",\"lifecycle_state\":\"stable\",\"name\":\"my-vpc-routing-table-route\",\"next_hop\":{\"address\":\"192.168.3.4\"},\"origin\":\"service\",\"priority\":1,\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpcRoutesOptions listVpcRoutesOptions = new ListVpcRoutesOptions.Builder()
      .vpcId("testString")
      .zoneName("us-south-1")
      .limit(Long.valueOf("10"))
      .build();

    List<Route> allResults = new ArrayList<>();
    VpcRoutesPager pager = new VpcRoutesPager(vpcService, listVpcRoutesOptions);
    while (pager.hasNext()) {
      List<Route> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listVpcRoutes operation using the VpcRoutesPager.getAll() method
  @Test
  public void testListVpcRoutesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"routes\":[{\"action\":\"delegate\",\"advertise\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"creator\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpn:0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"id\":\"0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"name\":\"my-vpn-gateway\",\"resource_type\":\"vpn_gateway\"},\"destination\":\"192.168.3.0/24\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840/routes/r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\",\"id\":\"r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\",\"lifecycle_state\":\"stable\",\"name\":\"my-vpc-routing-table-route\",\"next_hop\":{\"address\":\"192.168.3.4\"},\"origin\":\"service\",\"priority\":1,\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"routes\":[{\"action\":\"delegate\",\"advertise\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"creator\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpn:0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"id\":\"0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"name\":\"my-vpn-gateway\",\"resource_type\":\"vpn_gateway\"},\"destination\":\"192.168.3.0/24\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840/routes/r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\",\"id\":\"r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\",\"lifecycle_state\":\"stable\",\"name\":\"my-vpc-routing-table-route\",\"next_hop\":{\"address\":\"192.168.3.4\"},\"origin\":\"service\",\"priority\":1,\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpcRoutesOptions listVpcRoutesOptions = new ListVpcRoutesOptions.Builder()
      .vpcId("testString")
      .zoneName("us-south-1")
      .limit(Long.valueOf("10"))
      .build();

    VpcRoutesPager pager = new VpcRoutesPager(vpcService, listVpcRoutesOptions);
    List<Route> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createVpcRoute operation with a valid options model parameter
  @Test
  public void testCreateVpcRouteWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"action\": \"delegate\", \"advertise\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"creator\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpn:0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"name\": \"my-vpn-gateway\", \"resource_type\": \"vpn_gateway\"}, \"destination\": \"192.168.3.0/24\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840/routes/r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\", \"id\": \"r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\", \"lifecycle_state\": \"stable\", \"name\": \"my-vpc-routing-table-route\", \"next_hop\": {\"address\": \"192.168.3.4\"}, \"origin\": \"service\", \"priority\": 1, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String createVpcRoutePath = "/vpcs/testString/routes";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ZoneIdentityByName model
    ZoneIdentityByName zoneIdentityModel = new ZoneIdentityByName.Builder()
      .name("us-south-1")
      .build();

    // Construct an instance of the RouteNextHopPrototypeRouteNextHopIPRouteNextHopIPSentinelIP model
    RouteNextHopPrototypeRouteNextHopIPRouteNextHopIPSentinelIP routeNextHopPrototypeModel = new RouteNextHopPrototypeRouteNextHopIPRouteNextHopIPSentinelIP.Builder()
      .address("0.0.0.0")
      .build();

    // Construct an instance of the CreateVpcRouteOptions model
    CreateVpcRouteOptions createVpcRouteOptionsModel = new CreateVpcRouteOptions.Builder()
      .vpcId("testString")
      .destination("192.168.3.0/24")
      .zone(zoneIdentityModel)
      .action("deliver")
      .advertise(false)
      .name("my-vpc-routing-table-route")
      .nextHop(routeNextHopPrototypeModel)
      .priority(Long.valueOf("1"))
      .build();

    // Invoke createVpcRoute() with a valid options model and verify the result
    Response<Route> response = vpcService.createVpcRoute(createVpcRouteOptionsModel).execute();
    assertNotNull(response);
    Route responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createVpcRoutePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createVpcRoute operation with and without retries enabled
  @Test
  public void testCreateVpcRouteWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateVpcRouteWOptions();

    vpcService.disableRetries();
    testCreateVpcRouteWOptions();
  }

  // Test the createVpcRoute operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateVpcRouteNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createVpcRoute(null).execute();
  }

  // Test the deleteVpcRoute operation with a valid options model parameter
  @Test
  public void testDeleteVpcRouteWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteVpcRoutePath = "/vpcs/testString/routes/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteVpcRouteOptions model
    DeleteVpcRouteOptions deleteVpcRouteOptionsModel = new DeleteVpcRouteOptions.Builder()
      .vpcId("testString")
      .id("testString")
      .build();

    // Invoke deleteVpcRoute() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteVpcRoute(deleteVpcRouteOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteVpcRoutePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteVpcRoute operation with and without retries enabled
  @Test
  public void testDeleteVpcRouteWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteVpcRouteWOptions();

    vpcService.disableRetries();
    testDeleteVpcRouteWOptions();
  }

  // Test the deleteVpcRoute operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteVpcRouteNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteVpcRoute(null).execute();
  }

  // Test the getVpcRoute operation with a valid options model parameter
  @Test
  public void testGetVpcRouteWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"action\": \"delegate\", \"advertise\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"creator\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpn:0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"name\": \"my-vpn-gateway\", \"resource_type\": \"vpn_gateway\"}, \"destination\": \"192.168.3.0/24\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840/routes/r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\", \"id\": \"r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\", \"lifecycle_state\": \"stable\", \"name\": \"my-vpc-routing-table-route\", \"next_hop\": {\"address\": \"192.168.3.4\"}, \"origin\": \"service\", \"priority\": 1, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getVpcRoutePath = "/vpcs/testString/routes/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVpcRouteOptions model
    GetVpcRouteOptions getVpcRouteOptionsModel = new GetVpcRouteOptions.Builder()
      .vpcId("testString")
      .id("testString")
      .build();

    // Invoke getVpcRoute() with a valid options model and verify the result
    Response<Route> response = vpcService.getVpcRoute(getVpcRouteOptionsModel).execute();
    assertNotNull(response);
    Route responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVpcRoutePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVpcRoute operation with and without retries enabled
  @Test
  public void testGetVpcRouteWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVpcRouteWOptions();

    vpcService.disableRetries();
    testGetVpcRouteWOptions();
  }

  // Test the getVpcRoute operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVpcRouteNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVpcRoute(null).execute();
  }

  // Test the updateVpcRoute operation with a valid options model parameter
  @Test
  public void testUpdateVpcRouteWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"action\": \"delegate\", \"advertise\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"creator\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpn:0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"name\": \"my-vpn-gateway\", \"resource_type\": \"vpn_gateway\"}, \"destination\": \"192.168.3.0/24\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840/routes/r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\", \"id\": \"r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\", \"lifecycle_state\": \"stable\", \"name\": \"my-vpc-routing-table-route\", \"next_hop\": {\"address\": \"192.168.3.4\"}, \"origin\": \"service\", \"priority\": 1, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String updateVpcRoutePath = "/vpcs/testString/routes/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the RouteNextHopPatchRouteNextHopIPRouteNextHopIPSentinelIP model
    RouteNextHopPatchRouteNextHopIPRouteNextHopIPSentinelIP routeNextHopPatchModel = new RouteNextHopPatchRouteNextHopIPRouteNextHopIPSentinelIP.Builder()
      .address("10.240.0.12")
      .build();

    // Construct an instance of the RoutePatch model
    RoutePatch routePatchModel = new RoutePatch.Builder()
      .advertise(true)
      .name("my-vpc-routing-table-route")
      .nextHop(routeNextHopPatchModel)
      .priority(Long.valueOf("1"))
      .build();
    Map<String, Object> routePatchModelAsPatch = routePatchModel.asPatch();

    // Construct an instance of the UpdateVpcRouteOptions model
    UpdateVpcRouteOptions updateVpcRouteOptionsModel = new UpdateVpcRouteOptions.Builder()
      .vpcId("testString")
      .id("testString")
      .routePatch(routePatchModelAsPatch)
      .build();

    // Invoke updateVpcRoute() with a valid options model and verify the result
    Response<Route> response = vpcService.updateVpcRoute(updateVpcRouteOptionsModel).execute();
    assertNotNull(response);
    Route responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateVpcRoutePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateVpcRoute operation with and without retries enabled
  @Test
  public void testUpdateVpcRouteWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateVpcRouteWOptions();

    vpcService.disableRetries();
    testUpdateVpcRouteWOptions();
  }

  // Test the updateVpcRoute operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateVpcRouteNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateVpcRoute(null).execute();
  }

  // Test the listVpcRoutingTables operation with a valid options model parameter
  @Test
  public void testListVpcRoutingTablesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"routing_tables\": [{\"accept_routes_from\": [{\"resource_type\": \"vpn_server\"}], \"advertise_routes_to\": [\"transit_gateway\"], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc-routing-table:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"id\": \"r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"is_default\": false, \"lifecycle_state\": \"stable\", \"name\": \"my-routing-table-1\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"routing_table\", \"route_direct_link_ingress\": true, \"route_internet_ingress\": true, \"route_transit_gateway_ingress\": true, \"route_vpc_zone_ingress\": false, \"routes\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840/routes/r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\", \"id\": \"r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\", \"name\": \"my-vpc-routing-table-route\"}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}]}], \"total_count\": 132}";
    String listVpcRoutingTablesPath = "/vpcs/testString/routing_tables";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListVpcRoutingTablesOptions model
    ListVpcRoutingTablesOptions listVpcRoutingTablesOptionsModel = new ListVpcRoutingTablesOptions.Builder()
      .vpcId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .isDefault(true)
      .build();

    // Invoke listVpcRoutingTables() with a valid options model and verify the result
    Response<RoutingTableCollection> response = vpcService.listVpcRoutingTables(listVpcRoutingTablesOptionsModel).execute();
    assertNotNull(response);
    RoutingTableCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listVpcRoutingTablesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(Boolean.valueOf(query.get("is_default")), Boolean.valueOf(true));
  }

  // Test the listVpcRoutingTables operation with and without retries enabled
  @Test
  public void testListVpcRoutingTablesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListVpcRoutingTablesWOptions();

    vpcService.disableRetries();
    testListVpcRoutingTablesWOptions();
  }

  // Test the listVpcRoutingTables operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListVpcRoutingTablesNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listVpcRoutingTables(null).execute();
  }

  // Test the listVpcRoutingTables operation using the VpcRoutingTablesPager.getNext() method
  @Test
  public void testListVpcRoutingTablesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"routing_tables\":[{\"accept_routes_from\":[{\"resource_type\":\"vpn_server\"}],\"advertise_routes_to\":[\"transit_gateway\"],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc-routing-table:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"id\":\"r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"is_default\":false,\"lifecycle_state\":\"stable\",\"name\":\"my-routing-table-1\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"routing_table\",\"route_direct_link_ingress\":true,\"route_internet_ingress\":true,\"route_transit_gateway_ingress\":true,\"route_vpc_zone_ingress\":false,\"routes\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840/routes/r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\",\"id\":\"r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\",\"name\":\"my-vpc-routing-table-route\"}],\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}]}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"routing_tables\":[{\"accept_routes_from\":[{\"resource_type\":\"vpn_server\"}],\"advertise_routes_to\":[\"transit_gateway\"],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc-routing-table:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"id\":\"r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"is_default\":false,\"lifecycle_state\":\"stable\",\"name\":\"my-routing-table-1\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"routing_table\",\"route_direct_link_ingress\":true,\"route_internet_ingress\":true,\"route_transit_gateway_ingress\":true,\"route_vpc_zone_ingress\":false,\"routes\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840/routes/r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\",\"id\":\"r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\",\"name\":\"my-vpc-routing-table-route\"}],\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}]}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpcRoutingTablesOptions listVpcRoutingTablesOptions = new ListVpcRoutingTablesOptions.Builder()
      .vpcId("testString")
      .limit(Long.valueOf("10"))
      .isDefault(true)
      .build();

    List<RoutingTable> allResults = new ArrayList<>();
    VpcRoutingTablesPager pager = new VpcRoutingTablesPager(vpcService, listVpcRoutingTablesOptions);
    while (pager.hasNext()) {
      List<RoutingTable> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listVpcRoutingTables operation using the VpcRoutingTablesPager.getAll() method
  @Test
  public void testListVpcRoutingTablesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"routing_tables\":[{\"accept_routes_from\":[{\"resource_type\":\"vpn_server\"}],\"advertise_routes_to\":[\"transit_gateway\"],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc-routing-table:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"id\":\"r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"is_default\":false,\"lifecycle_state\":\"stable\",\"name\":\"my-routing-table-1\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"routing_table\",\"route_direct_link_ingress\":true,\"route_internet_ingress\":true,\"route_transit_gateway_ingress\":true,\"route_vpc_zone_ingress\":false,\"routes\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840/routes/r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\",\"id\":\"r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\",\"name\":\"my-vpc-routing-table-route\"}],\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}]}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"routing_tables\":[{\"accept_routes_from\":[{\"resource_type\":\"vpn_server\"}],\"advertise_routes_to\":[\"transit_gateway\"],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc-routing-table:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"id\":\"r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"is_default\":false,\"lifecycle_state\":\"stable\",\"name\":\"my-routing-table-1\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"routing_table\",\"route_direct_link_ingress\":true,\"route_internet_ingress\":true,\"route_transit_gateway_ingress\":true,\"route_vpc_zone_ingress\":false,\"routes\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840/routes/r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\",\"id\":\"r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\",\"name\":\"my-vpc-routing-table-route\"}],\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}]}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpcRoutingTablesOptions listVpcRoutingTablesOptions = new ListVpcRoutingTablesOptions.Builder()
      .vpcId("testString")
      .limit(Long.valueOf("10"))
      .isDefault(true)
      .build();

    VpcRoutingTablesPager pager = new VpcRoutingTablesPager(vpcService, listVpcRoutingTablesOptions);
    List<RoutingTable> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createVpcRoutingTable operation with a valid options model parameter
  @Test
  public void testCreateVpcRoutingTableWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"accept_routes_from\": [{\"resource_type\": \"vpn_server\"}], \"advertise_routes_to\": [\"transit_gateway\"], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc-routing-table:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"id\": \"r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"is_default\": false, \"lifecycle_state\": \"stable\", \"name\": \"my-routing-table-1\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"routing_table\", \"route_direct_link_ingress\": true, \"route_internet_ingress\": true, \"route_transit_gateway_ingress\": true, \"route_vpc_zone_ingress\": false, \"routes\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840/routes/r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\", \"id\": \"r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\", \"name\": \"my-vpc-routing-table-route\"}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}]}";
    String createVpcRoutingTablePath = "/vpcs/testString/routing_tables";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ResourceFilter model
    ResourceFilter resourceFilterModel = new ResourceFilter.Builder()
      .resourceType("vpn_server")
      .build();

    // Construct an instance of the RouteNextHopPrototypeRouteNextHopIPRouteNextHopIPSentinelIP model
    RouteNextHopPrototypeRouteNextHopIPRouteNextHopIPSentinelIP routeNextHopPrototypeModel = new RouteNextHopPrototypeRouteNextHopIPRouteNextHopIPSentinelIP.Builder()
      .address("0.0.0.0")
      .build();

    // Construct an instance of the ZoneIdentityByName model
    ZoneIdentityByName zoneIdentityModel = new ZoneIdentityByName.Builder()
      .name("us-south-1")
      .build();

    // Construct an instance of the RoutePrototype model
    RoutePrototype routePrototypeModel = new RoutePrototype.Builder()
      .action("deliver")
      .advertise(false)
      .destination("192.168.3.0/24")
      .name("my-vpc-routing-table-route")
      .nextHop(routeNextHopPrototypeModel)
      .priority(Long.valueOf("1"))
      .zone(zoneIdentityModel)
      .build();

    // Construct an instance of the CreateVpcRoutingTableOptions model
    CreateVpcRoutingTableOptions createVpcRoutingTableOptionsModel = new CreateVpcRoutingTableOptions.Builder()
      .vpcId("testString")
      .acceptRoutesFrom(java.util.Arrays.asList(resourceFilterModel))
      .advertiseRoutesTo(java.util.Arrays.asList())
      .name("my-routing-table-1")
      .routeDirectLinkIngress(false)
      .routeInternetIngress(false)
      .routeTransitGatewayIngress(false)
      .routeVpcZoneIngress(false)
      .routes(java.util.Arrays.asList(routePrototypeModel))
      .build();

    // Invoke createVpcRoutingTable() with a valid options model and verify the result
    Response<RoutingTable> response = vpcService.createVpcRoutingTable(createVpcRoutingTableOptionsModel).execute();
    assertNotNull(response);
    RoutingTable responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createVpcRoutingTablePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createVpcRoutingTable operation with and without retries enabled
  @Test
  public void testCreateVpcRoutingTableWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateVpcRoutingTableWOptions();

    vpcService.disableRetries();
    testCreateVpcRoutingTableWOptions();
  }

  // Test the createVpcRoutingTable operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateVpcRoutingTableNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createVpcRoutingTable(null).execute();
  }

  // Test the deleteVpcRoutingTable operation with a valid options model parameter
  @Test
  public void testDeleteVpcRoutingTableWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteVpcRoutingTablePath = "/vpcs/testString/routing_tables/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteVpcRoutingTableOptions model
    DeleteVpcRoutingTableOptions deleteVpcRoutingTableOptionsModel = new DeleteVpcRoutingTableOptions.Builder()
      .vpcId("testString")
      .id("testString")
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke deleteVpcRoutingTable() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteVpcRoutingTable(deleteVpcRoutingTableOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteVpcRoutingTablePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteVpcRoutingTable operation with and without retries enabled
  @Test
  public void testDeleteVpcRoutingTableWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteVpcRoutingTableWOptions();

    vpcService.disableRetries();
    testDeleteVpcRoutingTableWOptions();
  }

  // Test the deleteVpcRoutingTable operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteVpcRoutingTableNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteVpcRoutingTable(null).execute();
  }

  // Test the getVpcRoutingTable operation with a valid options model parameter
  @Test
  public void testGetVpcRoutingTableWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"accept_routes_from\": [{\"resource_type\": \"vpn_server\"}], \"advertise_routes_to\": [\"transit_gateway\"], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc-routing-table:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"id\": \"r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"is_default\": false, \"lifecycle_state\": \"stable\", \"name\": \"my-routing-table-1\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"routing_table\", \"route_direct_link_ingress\": true, \"route_internet_ingress\": true, \"route_transit_gateway_ingress\": true, \"route_vpc_zone_ingress\": false, \"routes\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840/routes/r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\", \"id\": \"r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\", \"name\": \"my-vpc-routing-table-route\"}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}]}";
    String getVpcRoutingTablePath = "/vpcs/testString/routing_tables/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVpcRoutingTableOptions model
    GetVpcRoutingTableOptions getVpcRoutingTableOptionsModel = new GetVpcRoutingTableOptions.Builder()
      .vpcId("testString")
      .id("testString")
      .build();

    // Invoke getVpcRoutingTable() with a valid options model and verify the result
    Response<RoutingTable> response = vpcService.getVpcRoutingTable(getVpcRoutingTableOptionsModel).execute();
    assertNotNull(response);
    RoutingTable responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVpcRoutingTablePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVpcRoutingTable operation with and without retries enabled
  @Test
  public void testGetVpcRoutingTableWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVpcRoutingTableWOptions();

    vpcService.disableRetries();
    testGetVpcRoutingTableWOptions();
  }

  // Test the getVpcRoutingTable operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVpcRoutingTableNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVpcRoutingTable(null).execute();
  }

  // Test the updateVpcRoutingTable operation with a valid options model parameter
  @Test
  public void testUpdateVpcRoutingTableWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"accept_routes_from\": [{\"resource_type\": \"vpn_server\"}], \"advertise_routes_to\": [\"transit_gateway\"], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc-routing-table:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"id\": \"r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"is_default\": false, \"lifecycle_state\": \"stable\", \"name\": \"my-routing-table-1\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"routing_table\", \"route_direct_link_ingress\": true, \"route_internet_ingress\": true, \"route_transit_gateway_ingress\": true, \"route_vpc_zone_ingress\": false, \"routes\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840/routes/r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\", \"id\": \"r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\", \"name\": \"my-vpc-routing-table-route\"}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}]}";
    String updateVpcRoutingTablePath = "/vpcs/testString/routing_tables/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ResourceFilter model
    ResourceFilter resourceFilterModel = new ResourceFilter.Builder()
      .resourceType("vpn_server")
      .build();

    // Construct an instance of the RoutingTablePatch model
    RoutingTablePatch routingTablePatchModel = new RoutingTablePatch.Builder()
      .acceptRoutesFrom(java.util.Arrays.asList(resourceFilterModel))
      .advertiseRoutesTo(java.util.Arrays.asList("transit_gateway"))
      .name("my-routing-table-2")
      .routeDirectLinkIngress(true)
      .routeInternetIngress(true)
      .routeTransitGatewayIngress(true)
      .routeVpcZoneIngress(true)
      .build();
    Map<String, Object> routingTablePatchModelAsPatch = routingTablePatchModel.asPatch();

    // Construct an instance of the UpdateVpcRoutingTableOptions model
    UpdateVpcRoutingTableOptions updateVpcRoutingTableOptionsModel = new UpdateVpcRoutingTableOptions.Builder()
      .vpcId("testString")
      .id("testString")
      .routingTablePatch(routingTablePatchModelAsPatch)
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke updateVpcRoutingTable() with a valid options model and verify the result
    Response<RoutingTable> response = vpcService.updateVpcRoutingTable(updateVpcRoutingTableOptionsModel).execute();
    assertNotNull(response);
    RoutingTable responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateVpcRoutingTablePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateVpcRoutingTable operation with and without retries enabled
  @Test
  public void testUpdateVpcRoutingTableWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateVpcRoutingTableWOptions();

    vpcService.disableRetries();
    testUpdateVpcRoutingTableWOptions();
  }

  // Test the updateVpcRoutingTable operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateVpcRoutingTableNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateVpcRoutingTable(null).execute();
  }

  // Test the listVpcRoutingTableRoutes operation with a valid options model parameter
  @Test
  public void testListVpcRoutingTableRoutesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"routes\": [{\"action\": \"delegate\", \"advertise\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"creator\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpn:0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"name\": \"my-vpn-gateway\", \"resource_type\": \"vpn_gateway\"}, \"destination\": \"192.168.3.0/24\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840/routes/r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\", \"id\": \"r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\", \"lifecycle_state\": \"stable\", \"name\": \"my-vpc-routing-table-route\", \"next_hop\": {\"address\": \"192.168.3.4\"}, \"origin\": \"service\", \"priority\": 1, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"total_count\": 132}";
    String listVpcRoutingTableRoutesPath = "/vpcs/testString/routing_tables/testString/routes";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListVpcRoutingTableRoutesOptions model
    ListVpcRoutingTableRoutesOptions listVpcRoutingTableRoutesOptionsModel = new ListVpcRoutingTableRoutesOptions.Builder()
      .vpcId("testString")
      .routingTableId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listVpcRoutingTableRoutes() with a valid options model and verify the result
    Response<RouteCollection> response = vpcService.listVpcRoutingTableRoutes(listVpcRoutingTableRoutesOptionsModel).execute();
    assertNotNull(response);
    RouteCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listVpcRoutingTableRoutesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listVpcRoutingTableRoutes operation with and without retries enabled
  @Test
  public void testListVpcRoutingTableRoutesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListVpcRoutingTableRoutesWOptions();

    vpcService.disableRetries();
    testListVpcRoutingTableRoutesWOptions();
  }

  // Test the listVpcRoutingTableRoutes operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListVpcRoutingTableRoutesNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listVpcRoutingTableRoutes(null).execute();
  }

  // Test the listVpcRoutingTableRoutes operation using the VpcRoutingTableRoutesPager.getNext() method
  @Test
  public void testListVpcRoutingTableRoutesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"routes\":[{\"action\":\"delegate\",\"advertise\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"creator\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpn:0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"id\":\"0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"name\":\"my-vpn-gateway\",\"resource_type\":\"vpn_gateway\"},\"destination\":\"192.168.3.0/24\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840/routes/r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\",\"id\":\"r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\",\"lifecycle_state\":\"stable\",\"name\":\"my-vpc-routing-table-route\",\"next_hop\":{\"address\":\"192.168.3.4\"},\"origin\":\"service\",\"priority\":1,\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"routes\":[{\"action\":\"delegate\",\"advertise\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"creator\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpn:0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"id\":\"0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"name\":\"my-vpn-gateway\",\"resource_type\":\"vpn_gateway\"},\"destination\":\"192.168.3.0/24\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840/routes/r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\",\"id\":\"r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\",\"lifecycle_state\":\"stable\",\"name\":\"my-vpc-routing-table-route\",\"next_hop\":{\"address\":\"192.168.3.4\"},\"origin\":\"service\",\"priority\":1,\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpcRoutingTableRoutesOptions listVpcRoutingTableRoutesOptions = new ListVpcRoutingTableRoutesOptions.Builder()
      .vpcId("testString")
      .routingTableId("testString")
      .limit(Long.valueOf("10"))
      .build();

    List<Route> allResults = new ArrayList<>();
    VpcRoutingTableRoutesPager pager = new VpcRoutingTableRoutesPager(vpcService, listVpcRoutingTableRoutesOptions);
    while (pager.hasNext()) {
      List<Route> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listVpcRoutingTableRoutes operation using the VpcRoutingTableRoutesPager.getAll() method
  @Test
  public void testListVpcRoutingTableRoutesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"routes\":[{\"action\":\"delegate\",\"advertise\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"creator\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpn:0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"id\":\"0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"name\":\"my-vpn-gateway\",\"resource_type\":\"vpn_gateway\"},\"destination\":\"192.168.3.0/24\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840/routes/r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\",\"id\":\"r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\",\"lifecycle_state\":\"stable\",\"name\":\"my-vpc-routing-table-route\",\"next_hop\":{\"address\":\"192.168.3.4\"},\"origin\":\"service\",\"priority\":1,\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"routes\":[{\"action\":\"delegate\",\"advertise\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"creator\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpn:0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"id\":\"0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"name\":\"my-vpn-gateway\",\"resource_type\":\"vpn_gateway\"},\"destination\":\"192.168.3.0/24\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840/routes/r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\",\"id\":\"r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\",\"lifecycle_state\":\"stable\",\"name\":\"my-vpc-routing-table-route\",\"next_hop\":{\"address\":\"192.168.3.4\"},\"origin\":\"service\",\"priority\":1,\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpcRoutingTableRoutesOptions listVpcRoutingTableRoutesOptions = new ListVpcRoutingTableRoutesOptions.Builder()
      .vpcId("testString")
      .routingTableId("testString")
      .limit(Long.valueOf("10"))
      .build();

    VpcRoutingTableRoutesPager pager = new VpcRoutingTableRoutesPager(vpcService, listVpcRoutingTableRoutesOptions);
    List<Route> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createVpcRoutingTableRoute operation with a valid options model parameter
  @Test
  public void testCreateVpcRoutingTableRouteWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"action\": \"delegate\", \"advertise\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"creator\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpn:0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"name\": \"my-vpn-gateway\", \"resource_type\": \"vpn_gateway\"}, \"destination\": \"192.168.3.0/24\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840/routes/r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\", \"id\": \"r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\", \"lifecycle_state\": \"stable\", \"name\": \"my-vpc-routing-table-route\", \"next_hop\": {\"address\": \"192.168.3.4\"}, \"origin\": \"service\", \"priority\": 1, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String createVpcRoutingTableRoutePath = "/vpcs/testString/routing_tables/testString/routes";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ZoneIdentityByName model
    ZoneIdentityByName zoneIdentityModel = new ZoneIdentityByName.Builder()
      .name("us-south-1")
      .build();

    // Construct an instance of the RouteNextHopPrototypeRouteNextHopIPRouteNextHopIPSentinelIP model
    RouteNextHopPrototypeRouteNextHopIPRouteNextHopIPSentinelIP routeNextHopPrototypeModel = new RouteNextHopPrototypeRouteNextHopIPRouteNextHopIPSentinelIP.Builder()
      .address("0.0.0.0")
      .build();

    // Construct an instance of the CreateVpcRoutingTableRouteOptions model
    CreateVpcRoutingTableRouteOptions createVpcRoutingTableRouteOptionsModel = new CreateVpcRoutingTableRouteOptions.Builder()
      .vpcId("testString")
      .routingTableId("testString")
      .destination("192.168.3.0/24")
      .zone(zoneIdentityModel)
      .action("deliver")
      .advertise(false)
      .name("my-vpc-routing-table-route")
      .nextHop(routeNextHopPrototypeModel)
      .priority(Long.valueOf("1"))
      .build();

    // Invoke createVpcRoutingTableRoute() with a valid options model and verify the result
    Response<Route> response = vpcService.createVpcRoutingTableRoute(createVpcRoutingTableRouteOptionsModel).execute();
    assertNotNull(response);
    Route responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createVpcRoutingTableRoutePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createVpcRoutingTableRoute operation with and without retries enabled
  @Test
  public void testCreateVpcRoutingTableRouteWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateVpcRoutingTableRouteWOptions();

    vpcService.disableRetries();
    testCreateVpcRoutingTableRouteWOptions();
  }

  // Test the createVpcRoutingTableRoute operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateVpcRoutingTableRouteNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createVpcRoutingTableRoute(null).execute();
  }

  // Test the deleteVpcRoutingTableRoute operation with a valid options model parameter
  @Test
  public void testDeleteVpcRoutingTableRouteWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteVpcRoutingTableRoutePath = "/vpcs/testString/routing_tables/testString/routes/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteVpcRoutingTableRouteOptions model
    DeleteVpcRoutingTableRouteOptions deleteVpcRoutingTableRouteOptionsModel = new DeleteVpcRoutingTableRouteOptions.Builder()
      .vpcId("testString")
      .routingTableId("testString")
      .id("testString")
      .build();

    // Invoke deleteVpcRoutingTableRoute() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteVpcRoutingTableRoute(deleteVpcRoutingTableRouteOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteVpcRoutingTableRoutePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteVpcRoutingTableRoute operation with and without retries enabled
  @Test
  public void testDeleteVpcRoutingTableRouteWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteVpcRoutingTableRouteWOptions();

    vpcService.disableRetries();
    testDeleteVpcRoutingTableRouteWOptions();
  }

  // Test the deleteVpcRoutingTableRoute operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteVpcRoutingTableRouteNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteVpcRoutingTableRoute(null).execute();
  }

  // Test the getVpcRoutingTableRoute operation with a valid options model parameter
  @Test
  public void testGetVpcRoutingTableRouteWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"action\": \"delegate\", \"advertise\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"creator\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpn:0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"name\": \"my-vpn-gateway\", \"resource_type\": \"vpn_gateway\"}, \"destination\": \"192.168.3.0/24\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840/routes/r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\", \"id\": \"r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\", \"lifecycle_state\": \"stable\", \"name\": \"my-vpc-routing-table-route\", \"next_hop\": {\"address\": \"192.168.3.4\"}, \"origin\": \"service\", \"priority\": 1, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getVpcRoutingTableRoutePath = "/vpcs/testString/routing_tables/testString/routes/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVpcRoutingTableRouteOptions model
    GetVpcRoutingTableRouteOptions getVpcRoutingTableRouteOptionsModel = new GetVpcRoutingTableRouteOptions.Builder()
      .vpcId("testString")
      .routingTableId("testString")
      .id("testString")
      .build();

    // Invoke getVpcRoutingTableRoute() with a valid options model and verify the result
    Response<Route> response = vpcService.getVpcRoutingTableRoute(getVpcRoutingTableRouteOptionsModel).execute();
    assertNotNull(response);
    Route responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVpcRoutingTableRoutePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVpcRoutingTableRoute operation with and without retries enabled
  @Test
  public void testGetVpcRoutingTableRouteWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVpcRoutingTableRouteWOptions();

    vpcService.disableRetries();
    testGetVpcRoutingTableRouteWOptions();
  }

  // Test the getVpcRoutingTableRoute operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVpcRoutingTableRouteNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVpcRoutingTableRoute(null).execute();
  }

  // Test the updateVpcRoutingTableRoute operation with a valid options model parameter
  @Test
  public void testUpdateVpcRoutingTableRouteWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"action\": \"delegate\", \"advertise\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"creator\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpn:0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"name\": \"my-vpn-gateway\", \"resource_type\": \"vpn_gateway\"}, \"destination\": \"192.168.3.0/24\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840/routes/r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\", \"id\": \"r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\", \"lifecycle_state\": \"stable\", \"name\": \"my-vpc-routing-table-route\", \"next_hop\": {\"address\": \"192.168.3.4\"}, \"origin\": \"service\", \"priority\": 1, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String updateVpcRoutingTableRoutePath = "/vpcs/testString/routing_tables/testString/routes/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the RouteNextHopPatchRouteNextHopIPRouteNextHopIPSentinelIP model
    RouteNextHopPatchRouteNextHopIPRouteNextHopIPSentinelIP routeNextHopPatchModel = new RouteNextHopPatchRouteNextHopIPRouteNextHopIPSentinelIP.Builder()
      .address("0.0.0.0")
      .build();

    // Construct an instance of the RoutePatch model
    RoutePatch routePatchModel = new RoutePatch.Builder()
      .advertise(false)
      .name("my-vpc-routing-table-route")
      .nextHop(routeNextHopPatchModel)
      .priority(Long.valueOf("1"))
      .build();
    Map<String, Object> routePatchModelAsPatch = routePatchModel.asPatch();

    // Construct an instance of the UpdateVpcRoutingTableRouteOptions model
    UpdateVpcRoutingTableRouteOptions updateVpcRoutingTableRouteOptionsModel = new UpdateVpcRoutingTableRouteOptions.Builder()
      .vpcId("testString")
      .routingTableId("testString")
      .id("testString")
      .routePatch(routePatchModelAsPatch)
      .build();

    // Invoke updateVpcRoutingTableRoute() with a valid options model and verify the result
    Response<Route> response = vpcService.updateVpcRoutingTableRoute(updateVpcRoutingTableRouteOptionsModel).execute();
    assertNotNull(response);
    Route responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateVpcRoutingTableRoutePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateVpcRoutingTableRoute operation with and without retries enabled
  @Test
  public void testUpdateVpcRoutingTableRouteWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateVpcRoutingTableRouteWOptions();

    vpcService.disableRetries();
    testUpdateVpcRoutingTableRouteWOptions();
  }

  // Test the updateVpcRoutingTableRoute operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateVpcRoutingTableRouteNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateVpcRoutingTableRoute(null).execute();
  }

  // Test the listSubnets operation with a valid options model parameter
  @Test
  public void testListSubnetsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"subnets\": [{\"available_ipv4_address_count\": 15, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"ip_version\": \"ipv4\", \"ipv4_cidr_block\": \"10.0.0.0/24\", \"name\": \"my-subnet\", \"network_acl\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::network-acl:r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"id\": \"r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"name\": \"my-network-acl\"}, \"public_gateway\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::public-gateway:r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"id\": \"r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"name\": \"my-public-gateway\", \"resource_type\": \"public_gateway\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"subnet\", \"routing_table\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc-routing-table:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"id\": \"r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"name\": \"my-routing-table-1\", \"resource_type\": \"routing_table\"}, \"status\": \"available\", \"total_ipv4_address_count\": 256, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"total_count\": 132}";
    String listSubnetsPath = "/subnets";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListSubnetsOptions model
    ListSubnetsOptions listSubnetsOptionsModel = new ListSubnetsOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .zoneName("us-south-1")
      .vpcId("testString")
      .vpcCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .vpcName("my-vpc")
      .routingTableId("testString")
      .routingTableName("my-routing-table")
      .build();

    // Invoke listSubnets() with a valid options model and verify the result
    Response<SubnetCollection> response = vpcService.listSubnets(listSubnetsOptionsModel).execute();
    assertNotNull(response);
    SubnetCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listSubnetsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
    assertEquals(query.get("zone.name"), "us-south-1");
    assertEquals(query.get("vpc.id"), "testString");
    assertEquals(query.get("vpc.crn"), "crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b");
    assertEquals(query.get("vpc.name"), "my-vpc");
    assertEquals(query.get("routing_table.id"), "testString");
    assertEquals(query.get("routing_table.name"), "my-routing-table");
  }

  // Test the listSubnets operation with and without retries enabled
  @Test
  public void testListSubnetsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListSubnetsWOptions();

    vpcService.disableRetries();
    testListSubnetsWOptions();
  }

  // Test the listSubnets operation using the SubnetsPager.getNext() method
  @Test
  public void testListSubnetsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"subnets\":[{\"available_ipv4_address_count\":15,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"ip_version\":\"ipv4\",\"ipv4_cidr_block\":\"10.0.0.0/24\",\"name\":\"my-subnet\",\"network_acl\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::network-acl:r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"id\":\"r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"name\":\"my-network-acl\"},\"public_gateway\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::public-gateway:r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"id\":\"r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"name\":\"my-public-gateway\",\"resource_type\":\"public_gateway\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"subnet\",\"routing_table\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc-routing-table:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"id\":\"r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"name\":\"my-routing-table-1\",\"resource_type\":\"routing_table\"},\"status\":\"available\",\"total_ipv4_address_count\":256,\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"subnets\":[{\"available_ipv4_address_count\":15,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"ip_version\":\"ipv4\",\"ipv4_cidr_block\":\"10.0.0.0/24\",\"name\":\"my-subnet\",\"network_acl\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::network-acl:r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"id\":\"r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"name\":\"my-network-acl\"},\"public_gateway\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::public-gateway:r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"id\":\"r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"name\":\"my-public-gateway\",\"resource_type\":\"public_gateway\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"subnet\",\"routing_table\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc-routing-table:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"id\":\"r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"name\":\"my-routing-table-1\",\"resource_type\":\"routing_table\"},\"status\":\"available\",\"total_ipv4_address_count\":256,\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListSubnetsOptions listSubnetsOptions = new ListSubnetsOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .zoneName("us-south-1")
      .vpcId("testString")
      .vpcCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .vpcName("my-vpc")
      .routingTableId("testString")
      .routingTableName("my-routing-table")
      .build();

    List<Subnet> allResults = new ArrayList<>();
    SubnetsPager pager = new SubnetsPager(vpcService, listSubnetsOptions);
    while (pager.hasNext()) {
      List<Subnet> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listSubnets operation using the SubnetsPager.getAll() method
  @Test
  public void testListSubnetsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"subnets\":[{\"available_ipv4_address_count\":15,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"ip_version\":\"ipv4\",\"ipv4_cidr_block\":\"10.0.0.0/24\",\"name\":\"my-subnet\",\"network_acl\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::network-acl:r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"id\":\"r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"name\":\"my-network-acl\"},\"public_gateway\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::public-gateway:r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"id\":\"r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"name\":\"my-public-gateway\",\"resource_type\":\"public_gateway\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"subnet\",\"routing_table\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc-routing-table:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"id\":\"r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"name\":\"my-routing-table-1\",\"resource_type\":\"routing_table\"},\"status\":\"available\",\"total_ipv4_address_count\":256,\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"subnets\":[{\"available_ipv4_address_count\":15,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"ip_version\":\"ipv4\",\"ipv4_cidr_block\":\"10.0.0.0/24\",\"name\":\"my-subnet\",\"network_acl\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::network-acl:r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"id\":\"r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"name\":\"my-network-acl\"},\"public_gateway\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::public-gateway:r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"id\":\"r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"name\":\"my-public-gateway\",\"resource_type\":\"public_gateway\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"subnet\",\"routing_table\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc-routing-table:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"id\":\"r006-6885e83f-03b2-4603-8a86-db2a0f55c840\",\"name\":\"my-routing-table-1\",\"resource_type\":\"routing_table\"},\"status\":\"available\",\"total_ipv4_address_count\":256,\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListSubnetsOptions listSubnetsOptions = new ListSubnetsOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .zoneName("us-south-1")
      .vpcId("testString")
      .vpcCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .vpcName("my-vpc")
      .routingTableId("testString")
      .routingTableName("my-routing-table")
      .build();

    SubnetsPager pager = new SubnetsPager(vpcService, listSubnetsOptions);
    List<Subnet> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createSubnet operation with a valid options model parameter
  @Test
  public void testCreateSubnetWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"available_ipv4_address_count\": 15, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"ip_version\": \"ipv4\", \"ipv4_cidr_block\": \"10.0.0.0/24\", \"name\": \"my-subnet\", \"network_acl\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::network-acl:r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"id\": \"r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"name\": \"my-network-acl\"}, \"public_gateway\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::public-gateway:r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"id\": \"r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"name\": \"my-public-gateway\", \"resource_type\": \"public_gateway\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"subnet\", \"routing_table\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc-routing-table:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"id\": \"r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"name\": \"my-routing-table-1\", \"resource_type\": \"routing_table\"}, \"status\": \"available\", \"total_ipv4_address_count\": 256, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String createSubnetPath = "/subnets";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the NetworkACLIdentityById model
    NetworkACLIdentityById networkAclIdentityModel = new NetworkACLIdentityById.Builder()
      .id("r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf")
      .build();

    // Construct an instance of the PublicGatewayIdentityPublicGatewayIdentityById model
    PublicGatewayIdentityPublicGatewayIdentityById publicGatewayIdentityModel = new PublicGatewayIdentityPublicGatewayIdentityById.Builder()
      .id("r006-dc5431ef-1fc6-4861-adc9-a59d077d1241")
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the RoutingTableIdentityByCRN model
    RoutingTableIdentityByCRN routingTableIdentityModel = new RoutingTableIdentityByCRN.Builder()
      .crn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc-routing-table:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/r006-6885e83f-03b2-4603-8a86-db2a0f55c840")
      .build();

    // Construct an instance of the VPCIdentityById model
    VPCIdentityById vpcIdentityModel = new VPCIdentityById.Builder()
      .id("r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .build();

    // Construct an instance of the ZoneIdentityByName model
    ZoneIdentityByName zoneIdentityModel = new ZoneIdentityByName.Builder()
      .name("us-south-1")
      .build();

    // Construct an instance of the SubnetPrototypeSubnetByTotalCount model
    SubnetPrototypeSubnetByTotalCount subnetPrototypeModel = new SubnetPrototypeSubnetByTotalCount.Builder()
      .ipVersion("ipv4")
      .name("my-subnet")
      .networkAcl(networkAclIdentityModel)
      .publicGateway(publicGatewayIdentityModel)
      .resourceGroup(resourceGroupIdentityModel)
      .routingTable(routingTableIdentityModel)
      .vpc(vpcIdentityModel)
      .totalIpv4AddressCount(Long.valueOf("256"))
      .zone(zoneIdentityModel)
      .build();

    // Construct an instance of the CreateSubnetOptions model
    CreateSubnetOptions createSubnetOptionsModel = new CreateSubnetOptions.Builder()
      .subnetPrototype(subnetPrototypeModel)
      .build();

    // Invoke createSubnet() with a valid options model and verify the result
    Response<Subnet> response = vpcService.createSubnet(createSubnetOptionsModel).execute();
    assertNotNull(response);
    Subnet responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createSubnetPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createSubnet operation with and without retries enabled
  @Test
  public void testCreateSubnetWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateSubnetWOptions();

    vpcService.disableRetries();
    testCreateSubnetWOptions();
  }

  // Test the createSubnet operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateSubnetNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createSubnet(null).execute();
  }

  // Test the deleteSubnet operation with a valid options model parameter
  @Test
  public void testDeleteSubnetWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteSubnetPath = "/subnets/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteSubnetOptions model
    DeleteSubnetOptions deleteSubnetOptionsModel = new DeleteSubnetOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteSubnet() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteSubnet(deleteSubnetOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteSubnetPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteSubnet operation with and without retries enabled
  @Test
  public void testDeleteSubnetWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteSubnetWOptions();

    vpcService.disableRetries();
    testDeleteSubnetWOptions();
  }

  // Test the deleteSubnet operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteSubnetNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteSubnet(null).execute();
  }

  // Test the getSubnet operation with a valid options model parameter
  @Test
  public void testGetSubnetWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"available_ipv4_address_count\": 15, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"ip_version\": \"ipv4\", \"ipv4_cidr_block\": \"10.0.0.0/24\", \"name\": \"my-subnet\", \"network_acl\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::network-acl:r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"id\": \"r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"name\": \"my-network-acl\"}, \"public_gateway\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::public-gateway:r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"id\": \"r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"name\": \"my-public-gateway\", \"resource_type\": \"public_gateway\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"subnet\", \"routing_table\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc-routing-table:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"id\": \"r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"name\": \"my-routing-table-1\", \"resource_type\": \"routing_table\"}, \"status\": \"available\", \"total_ipv4_address_count\": 256, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getSubnetPath = "/subnets/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetSubnetOptions model
    GetSubnetOptions getSubnetOptionsModel = new GetSubnetOptions.Builder()
      .id("testString")
      .build();

    // Invoke getSubnet() with a valid options model and verify the result
    Response<Subnet> response = vpcService.getSubnet(getSubnetOptionsModel).execute();
    assertNotNull(response);
    Subnet responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getSubnetPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getSubnet operation with and without retries enabled
  @Test
  public void testGetSubnetWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetSubnetWOptions();

    vpcService.disableRetries();
    testGetSubnetWOptions();
  }

  // Test the getSubnet operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetSubnetNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getSubnet(null).execute();
  }

  // Test the updateSubnet operation with a valid options model parameter
  @Test
  public void testUpdateSubnetWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"available_ipv4_address_count\": 15, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"ip_version\": \"ipv4\", \"ipv4_cidr_block\": \"10.0.0.0/24\", \"name\": \"my-subnet\", \"network_acl\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::network-acl:r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"id\": \"r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"name\": \"my-network-acl\"}, \"public_gateway\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::public-gateway:r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"id\": \"r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"name\": \"my-public-gateway\", \"resource_type\": \"public_gateway\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"subnet\", \"routing_table\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc-routing-table:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"id\": \"r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"name\": \"my-routing-table-1\", \"resource_type\": \"routing_table\"}, \"status\": \"available\", \"total_ipv4_address_count\": 256, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String updateSubnetPath = "/subnets/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the NetworkACLIdentityById model
    NetworkACLIdentityById networkAclIdentityModel = new NetworkACLIdentityById.Builder()
      .id("r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf")
      .build();

    // Construct an instance of the SubnetPublicGatewayPatchPublicGatewayIdentityById model
    SubnetPublicGatewayPatchPublicGatewayIdentityById subnetPublicGatewayPatchModel = new SubnetPublicGatewayPatchPublicGatewayIdentityById.Builder()
      .id("r006-dc5431ef-1fc6-4861-adc9-a59d077d1241")
      .build();

    // Construct an instance of the RoutingTableIdentityByCRN model
    RoutingTableIdentityByCRN routingTableIdentityModel = new RoutingTableIdentityByCRN.Builder()
      .crn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc-routing-table:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/r006-6885e83f-03b2-4603-8a86-db2a0f55c840")
      .build();

    // Construct an instance of the SubnetPatch model
    SubnetPatch subnetPatchModel = new SubnetPatch.Builder()
      .name("my-subnet")
      .networkAcl(networkAclIdentityModel)
      .publicGateway(subnetPublicGatewayPatchModel)
      .routingTable(routingTableIdentityModel)
      .build();
    Map<String, Object> subnetPatchModelAsPatch = subnetPatchModel.asPatch();

    // Construct an instance of the UpdateSubnetOptions model
    UpdateSubnetOptions updateSubnetOptionsModel = new UpdateSubnetOptions.Builder()
      .id("testString")
      .subnetPatch(subnetPatchModelAsPatch)
      .build();

    // Invoke updateSubnet() with a valid options model and verify the result
    Response<Subnet> response = vpcService.updateSubnet(updateSubnetOptionsModel).execute();
    assertNotNull(response);
    Subnet responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateSubnetPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateSubnet operation with and without retries enabled
  @Test
  public void testUpdateSubnetWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateSubnetWOptions();

    vpcService.disableRetries();
    testUpdateSubnetWOptions();
  }

  // Test the updateSubnet operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateSubnetNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateSubnet(null).execute();
  }

  // Test the getSubnetNetworkAcl operation with a valid options model parameter
  @Test
  public void testGetSubnetNetworkAclWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::network-acl:r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"id\": \"r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"name\": \"my-network-acl\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"rules\": [{\"action\": \"allow\", \"before\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"name\": \"my-network-acl-rule\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"destination\": \"192.168.3.0/24\", \"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"ip_version\": \"ipv4\", \"name\": \"my-network-acl-rule\", \"source\": \"192.168.3.0/24\", \"protocol\": \"all\"}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String getSubnetNetworkAclPath = "/subnets/testString/network_acl";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetSubnetNetworkAclOptions model
    GetSubnetNetworkAclOptions getSubnetNetworkAclOptionsModel = new GetSubnetNetworkAclOptions.Builder()
      .id("testString")
      .build();

    // Invoke getSubnetNetworkAcl() with a valid options model and verify the result
    Response<NetworkACL> response = vpcService.getSubnetNetworkAcl(getSubnetNetworkAclOptionsModel).execute();
    assertNotNull(response);
    NetworkACL responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getSubnetNetworkAclPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getSubnetNetworkAcl operation with and without retries enabled
  @Test
  public void testGetSubnetNetworkAclWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetSubnetNetworkAclWOptions();

    vpcService.disableRetries();
    testGetSubnetNetworkAclWOptions();
  }

  // Test the getSubnetNetworkAcl operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetSubnetNetworkAclNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getSubnetNetworkAcl(null).execute();
  }

  // Test the replaceSubnetNetworkAcl operation with a valid options model parameter
  @Test
  public void testReplaceSubnetNetworkAclWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::network-acl:r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"id\": \"r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"name\": \"my-network-acl\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"rules\": [{\"action\": \"allow\", \"before\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"name\": \"my-network-acl-rule\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"destination\": \"192.168.3.0/24\", \"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"ip_version\": \"ipv4\", \"name\": \"my-network-acl-rule\", \"source\": \"192.168.3.0/24\", \"protocol\": \"all\"}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String replaceSubnetNetworkAclPath = "/subnets/testString/network_acl";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the NetworkACLIdentityById model
    NetworkACLIdentityById networkAclIdentityModel = new NetworkACLIdentityById.Builder()
      .id("r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf")
      .build();

    // Construct an instance of the ReplaceSubnetNetworkAclOptions model
    ReplaceSubnetNetworkAclOptions replaceSubnetNetworkAclOptionsModel = new ReplaceSubnetNetworkAclOptions.Builder()
      .id("testString")
      .networkAclIdentity(networkAclIdentityModel)
      .build();

    // Invoke replaceSubnetNetworkAcl() with a valid options model and verify the result
    Response<NetworkACL> response = vpcService.replaceSubnetNetworkAcl(replaceSubnetNetworkAclOptionsModel).execute();
    assertNotNull(response);
    NetworkACL responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PUT");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, replaceSubnetNetworkAclPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the replaceSubnetNetworkAcl operation with and without retries enabled
  @Test
  public void testReplaceSubnetNetworkAclWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testReplaceSubnetNetworkAclWOptions();

    vpcService.disableRetries();
    testReplaceSubnetNetworkAclWOptions();
  }

  // Test the replaceSubnetNetworkAcl operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testReplaceSubnetNetworkAclNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.replaceSubnetNetworkAcl(null).execute();
  }

  // Test the unsetSubnetPublicGateway operation with a valid options model parameter
  @Test
  public void testUnsetSubnetPublicGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String unsetSubnetPublicGatewayPath = "/subnets/testString/public_gateway";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the UnsetSubnetPublicGatewayOptions model
    UnsetSubnetPublicGatewayOptions unsetSubnetPublicGatewayOptionsModel = new UnsetSubnetPublicGatewayOptions.Builder()
      .id("testString")
      .build();

    // Invoke unsetSubnetPublicGateway() with a valid options model and verify the result
    Response<Void> response = vpcService.unsetSubnetPublicGateway(unsetSubnetPublicGatewayOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, unsetSubnetPublicGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the unsetSubnetPublicGateway operation with and without retries enabled
  @Test
  public void testUnsetSubnetPublicGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUnsetSubnetPublicGatewayWOptions();

    vpcService.disableRetries();
    testUnsetSubnetPublicGatewayWOptions();
  }

  // Test the unsetSubnetPublicGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUnsetSubnetPublicGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.unsetSubnetPublicGateway(null).execute();
  }

  // Test the getSubnetPublicGateway operation with a valid options model parameter
  @Test
  public void testGetSubnetPublicGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::public-gateway:r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"floating_ip\": {\"address\": \"203.0.113.1\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"id\": \"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"name\": \"my-floating-ip\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"id\": \"r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"name\": \"my-public-gateway\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"public_gateway\", \"status\": \"available\", \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getSubnetPublicGatewayPath = "/subnets/testString/public_gateway";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetSubnetPublicGatewayOptions model
    GetSubnetPublicGatewayOptions getSubnetPublicGatewayOptionsModel = new GetSubnetPublicGatewayOptions.Builder()
      .id("testString")
      .build();

    // Invoke getSubnetPublicGateway() with a valid options model and verify the result
    Response<PublicGateway> response = vpcService.getSubnetPublicGateway(getSubnetPublicGatewayOptionsModel).execute();
    assertNotNull(response);
    PublicGateway responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getSubnetPublicGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getSubnetPublicGateway operation with and without retries enabled
  @Test
  public void testGetSubnetPublicGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetSubnetPublicGatewayWOptions();

    vpcService.disableRetries();
    testGetSubnetPublicGatewayWOptions();
  }

  // Test the getSubnetPublicGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetSubnetPublicGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getSubnetPublicGateway(null).execute();
  }

  // Test the setSubnetPublicGateway operation with a valid options model parameter
  @Test
  public void testSetSubnetPublicGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::public-gateway:r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"floating_ip\": {\"address\": \"203.0.113.1\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"id\": \"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"name\": \"my-floating-ip\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"id\": \"r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"name\": \"my-public-gateway\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"public_gateway\", \"status\": \"available\", \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String setSubnetPublicGatewayPath = "/subnets/testString/public_gateway";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the PublicGatewayIdentityPublicGatewayIdentityById model
    PublicGatewayIdentityPublicGatewayIdentityById publicGatewayIdentityModel = new PublicGatewayIdentityPublicGatewayIdentityById.Builder()
      .id("r006-dc5431ef-1fc6-4861-adc9-a59d077d1241")
      .build();

    // Construct an instance of the SetSubnetPublicGatewayOptions model
    SetSubnetPublicGatewayOptions setSubnetPublicGatewayOptionsModel = new SetSubnetPublicGatewayOptions.Builder()
      .id("testString")
      .publicGatewayIdentity(publicGatewayIdentityModel)
      .build();

    // Invoke setSubnetPublicGateway() with a valid options model and verify the result
    Response<PublicGateway> response = vpcService.setSubnetPublicGateway(setSubnetPublicGatewayOptionsModel).execute();
    assertNotNull(response);
    PublicGateway responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PUT");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, setSubnetPublicGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the setSubnetPublicGateway operation with and without retries enabled
  @Test
  public void testSetSubnetPublicGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testSetSubnetPublicGatewayWOptions();

    vpcService.disableRetries();
    testSetSubnetPublicGatewayWOptions();
  }

  // Test the setSubnetPublicGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testSetSubnetPublicGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.setSubnetPublicGateway(null).execute();
  }

  // Test the getSubnetRoutingTable operation with a valid options model parameter
  @Test
  public void testGetSubnetRoutingTableWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"accept_routes_from\": [{\"resource_type\": \"vpn_server\"}], \"advertise_routes_to\": [\"transit_gateway\"], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc-routing-table:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"id\": \"r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"is_default\": false, \"lifecycle_state\": \"stable\", \"name\": \"my-routing-table-1\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"routing_table\", \"route_direct_link_ingress\": true, \"route_internet_ingress\": true, \"route_transit_gateway_ingress\": true, \"route_vpc_zone_ingress\": false, \"routes\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840/routes/r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\", \"id\": \"r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\", \"name\": \"my-vpc-routing-table-route\"}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}]}";
    String getSubnetRoutingTablePath = "/subnets/testString/routing_table";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetSubnetRoutingTableOptions model
    GetSubnetRoutingTableOptions getSubnetRoutingTableOptionsModel = new GetSubnetRoutingTableOptions.Builder()
      .id("testString")
      .build();

    // Invoke getSubnetRoutingTable() with a valid options model and verify the result
    Response<RoutingTable> response = vpcService.getSubnetRoutingTable(getSubnetRoutingTableOptionsModel).execute();
    assertNotNull(response);
    RoutingTable responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getSubnetRoutingTablePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getSubnetRoutingTable operation with and without retries enabled
  @Test
  public void testGetSubnetRoutingTableWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetSubnetRoutingTableWOptions();

    vpcService.disableRetries();
    testGetSubnetRoutingTableWOptions();
  }

  // Test the getSubnetRoutingTable operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetSubnetRoutingTableNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getSubnetRoutingTable(null).execute();
  }

  // Test the replaceSubnetRoutingTable operation with a valid options model parameter
  @Test
  public void testReplaceSubnetRoutingTableWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"accept_routes_from\": [{\"resource_type\": \"vpn_server\"}], \"advertise_routes_to\": [\"transit_gateway\"], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc-routing-table:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"id\": \"r006-6885e83f-03b2-4603-8a86-db2a0f55c840\", \"is_default\": false, \"lifecycle_state\": \"stable\", \"name\": \"my-routing-table-1\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"routing_table\", \"route_direct_link_ingress\": true, \"route_internet_ingress\": true, \"route_transit_gateway_ingress\": true, \"route_vpc_zone_ingress\": false, \"routes\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/routing_tables/r006-6885e83f-03b2-4603-8a86-db2a0f55c840/routes/r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\", \"id\": \"r006-67b7b783-9a0f-41c1-a7f7-eccff87fb8f1\", \"name\": \"my-vpc-routing-table-route\"}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}]}";
    String replaceSubnetRoutingTablePath = "/subnets/testString/routing_table";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the RoutingTableIdentityByCRN model
    RoutingTableIdentityByCRN routingTableIdentityModel = new RoutingTableIdentityByCRN.Builder()
      .crn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc-routing-table:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b/r006-6885e83f-03b2-4603-8a86-db2a0f55c840")
      .build();

    // Construct an instance of the ReplaceSubnetRoutingTableOptions model
    ReplaceSubnetRoutingTableOptions replaceSubnetRoutingTableOptionsModel = new ReplaceSubnetRoutingTableOptions.Builder()
      .id("testString")
      .routingTableIdentity(routingTableIdentityModel)
      .build();

    // Invoke replaceSubnetRoutingTable() with a valid options model and verify the result
    Response<RoutingTable> response = vpcService.replaceSubnetRoutingTable(replaceSubnetRoutingTableOptionsModel).execute();
    assertNotNull(response);
    RoutingTable responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PUT");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, replaceSubnetRoutingTablePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the replaceSubnetRoutingTable operation with and without retries enabled
  @Test
  public void testReplaceSubnetRoutingTableWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testReplaceSubnetRoutingTableWOptions();

    vpcService.disableRetries();
    testReplaceSubnetRoutingTableWOptions();
  }

  // Test the replaceSubnetRoutingTable operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testReplaceSubnetRoutingTableNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.replaceSubnetRoutingTable(null).execute();
  }

  // Test the listSubnetReservedIps operation with a valid options model parameter
  @Test
  public void testListSubnetReservedIpsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"reserved_ips\": [{\"address\": \"192.168.3.4\", \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"lifecycle_state\": \"stable\", \"name\": \"my-reserved-ip\", \"owner\": \"provider\", \"resource_type\": \"subnet_reserved_ip\", \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"id\": \"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"name\": \"my-endpoint-gateway\", \"resource_type\": \"endpoint_gateway\"}}], \"total_count\": 132}";
    String listSubnetReservedIpsPath = "/subnets/testString/reserved_ips";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListSubnetReservedIpsOptions model
    ListSubnetReservedIpsOptions listSubnetReservedIpsOptionsModel = new ListSubnetReservedIpsOptions.Builder()
      .subnetId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .sort("name")
      .targetId("testString")
      .targetCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::load-balancer:r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727")
      .targetName("my-resource")
      .targetResourceType("testString")
      .build();

    // Invoke listSubnetReservedIps() with a valid options model and verify the result
    Response<ReservedIPCollection> response = vpcService.listSubnetReservedIps(listSubnetReservedIpsOptionsModel).execute();
    assertNotNull(response);
    ReservedIPCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listSubnetReservedIpsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("sort"), "name");
    assertEquals(query.get("target.id"), "testString");
    assertEquals(query.get("target.crn"), "crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::load-balancer:r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727");
    assertEquals(query.get("target.name"), "my-resource");
    assertEquals(query.get("target.resource_type"), "testString");
  }

  // Test the listSubnetReservedIps operation with and without retries enabled
  @Test
  public void testListSubnetReservedIpsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListSubnetReservedIpsWOptions();

    vpcService.disableRetries();
    testListSubnetReservedIpsWOptions();
  }

  // Test the listSubnetReservedIps operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListSubnetReservedIpsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listSubnetReservedIps(null).execute();
  }

  // Test the listSubnetReservedIps operation using the SubnetReservedIpsPager.getNext() method
  @Test
  public void testListSubnetReservedIpsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"reserved_ips\":[{\"address\":\"192.168.3.4\",\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"lifecycle_state\":\"stable\",\"name\":\"my-reserved-ip\",\"owner\":\"provider\",\"resource_type\":\"subnet_reserved_ip\",\"target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"id\":\"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"name\":\"my-endpoint-gateway\",\"resource_type\":\"endpoint_gateway\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"reserved_ips\":[{\"address\":\"192.168.3.4\",\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"lifecycle_state\":\"stable\",\"name\":\"my-reserved-ip\",\"owner\":\"provider\",\"resource_type\":\"subnet_reserved_ip\",\"target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"id\":\"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"name\":\"my-endpoint-gateway\",\"resource_type\":\"endpoint_gateway\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListSubnetReservedIpsOptions listSubnetReservedIpsOptions = new ListSubnetReservedIpsOptions.Builder()
      .subnetId("testString")
      .limit(Long.valueOf("10"))
      .sort("name")
      .targetId("testString")
      .targetCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::load-balancer:r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727")
      .targetName("my-resource")
      .targetResourceType("testString")
      .build();

    List<ReservedIP> allResults = new ArrayList<>();
    SubnetReservedIpsPager pager = new SubnetReservedIpsPager(vpcService, listSubnetReservedIpsOptions);
    while (pager.hasNext()) {
      List<ReservedIP> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listSubnetReservedIps operation using the SubnetReservedIpsPager.getAll() method
  @Test
  public void testListSubnetReservedIpsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"reserved_ips\":[{\"address\":\"192.168.3.4\",\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"lifecycle_state\":\"stable\",\"name\":\"my-reserved-ip\",\"owner\":\"provider\",\"resource_type\":\"subnet_reserved_ip\",\"target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"id\":\"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"name\":\"my-endpoint-gateway\",\"resource_type\":\"endpoint_gateway\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"reserved_ips\":[{\"address\":\"192.168.3.4\",\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"lifecycle_state\":\"stable\",\"name\":\"my-reserved-ip\",\"owner\":\"provider\",\"resource_type\":\"subnet_reserved_ip\",\"target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"id\":\"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"name\":\"my-endpoint-gateway\",\"resource_type\":\"endpoint_gateway\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListSubnetReservedIpsOptions listSubnetReservedIpsOptions = new ListSubnetReservedIpsOptions.Builder()
      .subnetId("testString")
      .limit(Long.valueOf("10"))
      .sort("name")
      .targetId("testString")
      .targetCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::load-balancer:r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727")
      .targetName("my-resource")
      .targetResourceType("testString")
      .build();

    SubnetReservedIpsPager pager = new SubnetReservedIpsPager(vpcService, listSubnetReservedIpsOptions);
    List<ReservedIP> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createSubnetReservedIp operation with a valid options model parameter
  @Test
  public void testCreateSubnetReservedIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"192.168.3.4\", \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"lifecycle_state\": \"stable\", \"name\": \"my-reserved-ip\", \"owner\": \"provider\", \"resource_type\": \"subnet_reserved_ip\", \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"id\": \"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"name\": \"my-endpoint-gateway\", \"resource_type\": \"endpoint_gateway\"}}";
    String createSubnetReservedIpPath = "/subnets/testString/reserved_ips";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ReservedIPTargetPrototypeEndpointGatewayIdentityEndpointGatewayIdentityById model
    ReservedIPTargetPrototypeEndpointGatewayIdentityEndpointGatewayIdentityById reservedIpTargetPrototypeModel = new ReservedIPTargetPrototypeEndpointGatewayIdentityEndpointGatewayIdentityById.Builder()
      .id("r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0")
      .build();

    // Construct an instance of the CreateSubnetReservedIpOptions model
    CreateSubnetReservedIpOptions createSubnetReservedIpOptionsModel = new CreateSubnetReservedIpOptions.Builder()
      .subnetId("testString")
      .address("192.168.3.4")
      .autoDelete(false)
      .name("my-reserved-ip")
      .target(reservedIpTargetPrototypeModel)
      .build();

    // Invoke createSubnetReservedIp() with a valid options model and verify the result
    Response<ReservedIP> response = vpcService.createSubnetReservedIp(createSubnetReservedIpOptionsModel).execute();
    assertNotNull(response);
    ReservedIP responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createSubnetReservedIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createSubnetReservedIp operation with and without retries enabled
  @Test
  public void testCreateSubnetReservedIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateSubnetReservedIpWOptions();

    vpcService.disableRetries();
    testCreateSubnetReservedIpWOptions();
  }

  // Test the createSubnetReservedIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateSubnetReservedIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createSubnetReservedIp(null).execute();
  }

  // Test the deleteSubnetReservedIp operation with a valid options model parameter
  @Test
  public void testDeleteSubnetReservedIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteSubnetReservedIpPath = "/subnets/testString/reserved_ips/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteSubnetReservedIpOptions model
    DeleteSubnetReservedIpOptions deleteSubnetReservedIpOptionsModel = new DeleteSubnetReservedIpOptions.Builder()
      .subnetId("testString")
      .id("testString")
      .build();

    // Invoke deleteSubnetReservedIp() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteSubnetReservedIp(deleteSubnetReservedIpOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteSubnetReservedIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteSubnetReservedIp operation with and without retries enabled
  @Test
  public void testDeleteSubnetReservedIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteSubnetReservedIpWOptions();

    vpcService.disableRetries();
    testDeleteSubnetReservedIpWOptions();
  }

  // Test the deleteSubnetReservedIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteSubnetReservedIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteSubnetReservedIp(null).execute();
  }

  // Test the getSubnetReservedIp operation with a valid options model parameter
  @Test
  public void testGetSubnetReservedIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"192.168.3.4\", \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"lifecycle_state\": \"stable\", \"name\": \"my-reserved-ip\", \"owner\": \"provider\", \"resource_type\": \"subnet_reserved_ip\", \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"id\": \"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"name\": \"my-endpoint-gateway\", \"resource_type\": \"endpoint_gateway\"}}";
    String getSubnetReservedIpPath = "/subnets/testString/reserved_ips/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetSubnetReservedIpOptions model
    GetSubnetReservedIpOptions getSubnetReservedIpOptionsModel = new GetSubnetReservedIpOptions.Builder()
      .subnetId("testString")
      .id("testString")
      .build();

    // Invoke getSubnetReservedIp() with a valid options model and verify the result
    Response<ReservedIP> response = vpcService.getSubnetReservedIp(getSubnetReservedIpOptionsModel).execute();
    assertNotNull(response);
    ReservedIP responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getSubnetReservedIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getSubnetReservedIp operation with and without retries enabled
  @Test
  public void testGetSubnetReservedIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetSubnetReservedIpWOptions();

    vpcService.disableRetries();
    testGetSubnetReservedIpWOptions();
  }

  // Test the getSubnetReservedIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetSubnetReservedIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getSubnetReservedIp(null).execute();
  }

  // Test the updateSubnetReservedIp operation with a valid options model parameter
  @Test
  public void testUpdateSubnetReservedIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"192.168.3.4\", \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"lifecycle_state\": \"stable\", \"name\": \"my-reserved-ip\", \"owner\": \"provider\", \"resource_type\": \"subnet_reserved_ip\", \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"id\": \"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"name\": \"my-endpoint-gateway\", \"resource_type\": \"endpoint_gateway\"}}";
    String updateSubnetReservedIpPath = "/subnets/testString/reserved_ips/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ReservedIPPatch model
    ReservedIPPatch reservedIpPatchModel = new ReservedIPPatch.Builder()
      .autoDelete(false)
      .name("my-reserved-ip-updated")
      .build();
    Map<String, Object> reservedIpPatchModelAsPatch = reservedIpPatchModel.asPatch();

    // Construct an instance of the UpdateSubnetReservedIpOptions model
    UpdateSubnetReservedIpOptions updateSubnetReservedIpOptionsModel = new UpdateSubnetReservedIpOptions.Builder()
      .subnetId("testString")
      .id("testString")
      .reservedIpPatch(reservedIpPatchModelAsPatch)
      .build();

    // Invoke updateSubnetReservedIp() with a valid options model and verify the result
    Response<ReservedIP> response = vpcService.updateSubnetReservedIp(updateSubnetReservedIpOptionsModel).execute();
    assertNotNull(response);
    ReservedIP responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateSubnetReservedIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateSubnetReservedIp operation with and without retries enabled
  @Test
  public void testUpdateSubnetReservedIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateSubnetReservedIpWOptions();

    vpcService.disableRetries();
    testUpdateSubnetReservedIpWOptions();
  }

  // Test the updateSubnetReservedIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateSubnetReservedIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateSubnetReservedIp(null).execute();
  }

  // Test the listImages operation with a valid options model parameter
  @Test
  public void testListImagesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"images\": [{\"catalog_offering\": {\"managed\": false, \"version\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"deprecation_at\": \"2019-01-01T12:00:00.000Z\", \"encryption\": \"user_managed\", \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"file\": {\"checksums\": {\"sha256\": \"e992a84f113d3a35d2145ca3e7aca4fc95fe6daf470a08d8af3422ee59c92e15\"}, \"size\": 1}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"minimum_provisioned_size\": 22, \"name\": \"my-image\", \"obsolescence_at\": \"2019-01-01T12:00:00.000Z\", \"operating_system\": {\"allow_user_image_creation\": true, \"architecture\": \"amd64\", \"dedicated_host_only\": false, \"display_name\": \"Ubuntu Server 16.04 LTS amd64\", \"family\": \"Ubuntu Server\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-24-04-amd64\", \"name\": \"ubuntu-24-04-amd64\", \"user_data_format\": \"cloud_init\", \"vendor\": \"Canonical\", \"version\": \"16.04 LTS\"}, \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"image\", \"source_volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\", \"remote\": {\"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"volume\"}, \"status\": \"available\", \"status_reasons\": [{\"code\": \"encryption_key_deleted\", \"message\": \"message\", \"more_info\": \"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}], \"user_data_format\": \"cloud_init\", \"visibility\": \"private\"}], \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listImagesPath = "/images";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListImagesOptions model
    ListImagesOptions listImagesOptionsModel = new ListImagesOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("my-name")
      .status(java.util.Arrays.asList("available"))
      .visibility("private")
      .userDataFormat(java.util.Arrays.asList("cloud_init"))
      .remoteAccountId("bb1b52262f7441a586f49068482f1e60")
      .build();

    // Invoke listImages() with a valid options model and verify the result
    Response<ImageCollection> response = vpcService.listImages(listImagesOptionsModel).execute();
    assertNotNull(response);
    ImageCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listImagesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
    assertEquals(query.get("name"), "my-name");
    assertEquals(query.get("status"), RequestUtils.join(java.util.Arrays.asList("available"), ","));
    assertEquals(query.get("visibility"), "private");
    assertEquals(query.get("user_data_format"), RequestUtils.join(java.util.Arrays.asList("cloud_init"), ","));
    assertEquals(query.get("remote.account.id"), "bb1b52262f7441a586f49068482f1e60");
  }

  // Test the listImages operation with and without retries enabled
  @Test
  public void testListImagesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListImagesWOptions();

    vpcService.disableRetries();
    testListImagesWOptions();
  }

  // Test the listImages operation using the ImagesPager.getNext() method
  @Test
  public void testListImagesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"images\":[{\"catalog_offering\":{\"managed\":false,\"version\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"deprecation_at\":\"2019-01-01T12:00:00.000Z\",\"encryption\":\"user_managed\",\"encryption_key\":{\"crn\":\"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"},\"file\":{\"checksums\":{\"sha256\":\"e992a84f113d3a35d2145ca3e7aca4fc95fe6daf470a08d8af3422ee59c92e15\"},\"size\":1},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"id\":\"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"minimum_provisioned_size\":22,\"name\":\"my-image\",\"obsolescence_at\":\"2019-01-01T12:00:00.000Z\",\"operating_system\":{\"allow_user_image_creation\":true,\"architecture\":\"amd64\",\"dedicated_host_only\":false,\"display_name\":\"Ubuntu Server 16.04 LTS amd64\",\"family\":\"Ubuntu Server\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-24-04-amd64\",\"name\":\"ubuntu-24-04-amd64\",\"user_data_format\":\"cloud_init\",\"vendor\":\"Canonical\",\"version\":\"16.04 LTS\"},\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"}},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"image\",\"source_volume\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\",\"remote\":{\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"volume\"},\"status\":\"available\",\"status_reasons\":[{\"code\":\"encryption_key_deleted\",\"message\":\"message\",\"more_info\":\"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}],\"user_data_format\":\"cloud_init\",\"visibility\":\"private\"}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"images\":[{\"catalog_offering\":{\"managed\":false,\"version\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"deprecation_at\":\"2019-01-01T12:00:00.000Z\",\"encryption\":\"user_managed\",\"encryption_key\":{\"crn\":\"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"},\"file\":{\"checksums\":{\"sha256\":\"e992a84f113d3a35d2145ca3e7aca4fc95fe6daf470a08d8af3422ee59c92e15\"},\"size\":1},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"id\":\"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"minimum_provisioned_size\":22,\"name\":\"my-image\",\"obsolescence_at\":\"2019-01-01T12:00:00.000Z\",\"operating_system\":{\"allow_user_image_creation\":true,\"architecture\":\"amd64\",\"dedicated_host_only\":false,\"display_name\":\"Ubuntu Server 16.04 LTS amd64\",\"family\":\"Ubuntu Server\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-24-04-amd64\",\"name\":\"ubuntu-24-04-amd64\",\"user_data_format\":\"cloud_init\",\"vendor\":\"Canonical\",\"version\":\"16.04 LTS\"},\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"}},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"image\",\"source_volume\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\",\"remote\":{\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"volume\"},\"status\":\"available\",\"status_reasons\":[{\"code\":\"encryption_key_deleted\",\"message\":\"message\",\"more_info\":\"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}],\"user_data_format\":\"cloud_init\",\"visibility\":\"private\"}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListImagesOptions listImagesOptions = new ListImagesOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("my-name")
      .status(java.util.Arrays.asList("available"))
      .visibility("private")
      .userDataFormat(java.util.Arrays.asList("cloud_init"))
      .remoteAccountId("bb1b52262f7441a586f49068482f1e60")
      .build();

    List<Image> allResults = new ArrayList<>();
    ImagesPager pager = new ImagesPager(vpcService, listImagesOptions);
    while (pager.hasNext()) {
      List<Image> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listImages operation using the ImagesPager.getAll() method
  @Test
  public void testListImagesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"images\":[{\"catalog_offering\":{\"managed\":false,\"version\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"deprecation_at\":\"2019-01-01T12:00:00.000Z\",\"encryption\":\"user_managed\",\"encryption_key\":{\"crn\":\"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"},\"file\":{\"checksums\":{\"sha256\":\"e992a84f113d3a35d2145ca3e7aca4fc95fe6daf470a08d8af3422ee59c92e15\"},\"size\":1},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"id\":\"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"minimum_provisioned_size\":22,\"name\":\"my-image\",\"obsolescence_at\":\"2019-01-01T12:00:00.000Z\",\"operating_system\":{\"allow_user_image_creation\":true,\"architecture\":\"amd64\",\"dedicated_host_only\":false,\"display_name\":\"Ubuntu Server 16.04 LTS amd64\",\"family\":\"Ubuntu Server\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-24-04-amd64\",\"name\":\"ubuntu-24-04-amd64\",\"user_data_format\":\"cloud_init\",\"vendor\":\"Canonical\",\"version\":\"16.04 LTS\"},\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"}},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"image\",\"source_volume\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\",\"remote\":{\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"volume\"},\"status\":\"available\",\"status_reasons\":[{\"code\":\"encryption_key_deleted\",\"message\":\"message\",\"more_info\":\"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}],\"user_data_format\":\"cloud_init\",\"visibility\":\"private\"}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"images\":[{\"catalog_offering\":{\"managed\":false,\"version\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"deprecation_at\":\"2019-01-01T12:00:00.000Z\",\"encryption\":\"user_managed\",\"encryption_key\":{\"crn\":\"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"},\"file\":{\"checksums\":{\"sha256\":\"e992a84f113d3a35d2145ca3e7aca4fc95fe6daf470a08d8af3422ee59c92e15\"},\"size\":1},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"id\":\"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"minimum_provisioned_size\":22,\"name\":\"my-image\",\"obsolescence_at\":\"2019-01-01T12:00:00.000Z\",\"operating_system\":{\"allow_user_image_creation\":true,\"architecture\":\"amd64\",\"dedicated_host_only\":false,\"display_name\":\"Ubuntu Server 16.04 LTS amd64\",\"family\":\"Ubuntu Server\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-24-04-amd64\",\"name\":\"ubuntu-24-04-amd64\",\"user_data_format\":\"cloud_init\",\"vendor\":\"Canonical\",\"version\":\"16.04 LTS\"},\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"}},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"image\",\"source_volume\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\",\"remote\":{\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"volume\"},\"status\":\"available\",\"status_reasons\":[{\"code\":\"encryption_key_deleted\",\"message\":\"message\",\"more_info\":\"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}],\"user_data_format\":\"cloud_init\",\"visibility\":\"private\"}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListImagesOptions listImagesOptions = new ListImagesOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("my-name")
      .status(java.util.Arrays.asList("available"))
      .visibility("private")
      .userDataFormat(java.util.Arrays.asList("cloud_init"))
      .remoteAccountId("bb1b52262f7441a586f49068482f1e60")
      .build();

    ImagesPager pager = new ImagesPager(vpcService, listImagesOptions);
    List<Image> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createImage operation with a valid options model parameter
  @Test
  public void testCreateImageWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"catalog_offering\": {\"managed\": false, \"version\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"deprecation_at\": \"2019-01-01T12:00:00.000Z\", \"encryption\": \"user_managed\", \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"file\": {\"checksums\": {\"sha256\": \"e992a84f113d3a35d2145ca3e7aca4fc95fe6daf470a08d8af3422ee59c92e15\"}, \"size\": 1}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"minimum_provisioned_size\": 22, \"name\": \"my-image\", \"obsolescence_at\": \"2019-01-01T12:00:00.000Z\", \"operating_system\": {\"allow_user_image_creation\": true, \"architecture\": \"amd64\", \"dedicated_host_only\": false, \"display_name\": \"Ubuntu Server 16.04 LTS amd64\", \"family\": \"Ubuntu Server\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-24-04-amd64\", \"name\": \"ubuntu-24-04-amd64\", \"user_data_format\": \"cloud_init\", \"vendor\": \"Canonical\", \"version\": \"16.04 LTS\"}, \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"image\", \"source_volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\", \"remote\": {\"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"volume\"}, \"status\": \"available\", \"status_reasons\": [{\"code\": \"encryption_key_deleted\", \"message\": \"message\", \"more_info\": \"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}], \"user_data_format\": \"cloud_init\", \"visibility\": \"private\"}";
    String createImagePath = "/images";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the EncryptionKeyIdentityByCRN model
    EncryptionKeyIdentityByCRN encryptionKeyIdentityModel = new EncryptionKeyIdentityByCRN.Builder()
      .crn("crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")
      .build();

    // Construct an instance of the ImageFilePrototype model
    ImageFilePrototype imageFilePrototypeModel = new ImageFilePrototype.Builder()
      .href("cos://us-south/my-bucket/my-image.qcow2")
      .build();

    // Construct an instance of the OperatingSystemIdentityByName model
    OperatingSystemIdentityByName operatingSystemIdentityModel = new OperatingSystemIdentityByName.Builder()
      .name("debian-9-amd64")
      .build();

    // Construct an instance of the ImagePrototypeImageByFile model
    ImagePrototypeImageByFile imagePrototypeModel = new ImagePrototypeImageByFile.Builder()
      .deprecationAt(DateUtils.parseAsDateTime("2019-01-01T12:00:00.000Z"))
      .name("my-image")
      .obsolescenceAt(DateUtils.parseAsDateTime("2019-01-01T12:00:00.000Z"))
      .resourceGroup(resourceGroupIdentityModel)
      .encryptedDataKey("testString")
      .encryptionKey(encryptionKeyIdentityModel)
      .file(imageFilePrototypeModel)
      .operatingSystem(operatingSystemIdentityModel)
      .build();

    // Construct an instance of the CreateImageOptions model
    CreateImageOptions createImageOptionsModel = new CreateImageOptions.Builder()
      .imagePrototype(imagePrototypeModel)
      .build();

    // Invoke createImage() with a valid options model and verify the result
    Response<Image> response = vpcService.createImage(createImageOptionsModel).execute();
    assertNotNull(response);
    Image responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createImagePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createImage operation with and without retries enabled
  @Test
  public void testCreateImageWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateImageWOptions();

    vpcService.disableRetries();
    testCreateImageWOptions();
  }

  // Test the createImage operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateImageNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createImage(null).execute();
  }

  // Test the deleteImage operation with a valid options model parameter
  @Test
  public void testDeleteImageWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteImagePath = "/images/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteImageOptions model
    DeleteImageOptions deleteImageOptionsModel = new DeleteImageOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteImage() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteImage(deleteImageOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteImagePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteImage operation with and without retries enabled
  @Test
  public void testDeleteImageWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteImageWOptions();

    vpcService.disableRetries();
    testDeleteImageWOptions();
  }

  // Test the deleteImage operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteImageNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteImage(null).execute();
  }

  // Test the getImage operation with a valid options model parameter
  @Test
  public void testGetImageWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"catalog_offering\": {\"managed\": false, \"version\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"deprecation_at\": \"2019-01-01T12:00:00.000Z\", \"encryption\": \"user_managed\", \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"file\": {\"checksums\": {\"sha256\": \"e992a84f113d3a35d2145ca3e7aca4fc95fe6daf470a08d8af3422ee59c92e15\"}, \"size\": 1}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"minimum_provisioned_size\": 22, \"name\": \"my-image\", \"obsolescence_at\": \"2019-01-01T12:00:00.000Z\", \"operating_system\": {\"allow_user_image_creation\": true, \"architecture\": \"amd64\", \"dedicated_host_only\": false, \"display_name\": \"Ubuntu Server 16.04 LTS amd64\", \"family\": \"Ubuntu Server\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-24-04-amd64\", \"name\": \"ubuntu-24-04-amd64\", \"user_data_format\": \"cloud_init\", \"vendor\": \"Canonical\", \"version\": \"16.04 LTS\"}, \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"image\", \"source_volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\", \"remote\": {\"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"volume\"}, \"status\": \"available\", \"status_reasons\": [{\"code\": \"encryption_key_deleted\", \"message\": \"message\", \"more_info\": \"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}], \"user_data_format\": \"cloud_init\", \"visibility\": \"private\"}";
    String getImagePath = "/images/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetImageOptions model
    GetImageOptions getImageOptionsModel = new GetImageOptions.Builder()
      .id("testString")
      .build();

    // Invoke getImage() with a valid options model and verify the result
    Response<Image> response = vpcService.getImage(getImageOptionsModel).execute();
    assertNotNull(response);
    Image responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getImagePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getImage operation with and without retries enabled
  @Test
  public void testGetImageWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetImageWOptions();

    vpcService.disableRetries();
    testGetImageWOptions();
  }

  // Test the getImage operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetImageNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getImage(null).execute();
  }

  // Test the updateImage operation with a valid options model parameter
  @Test
  public void testUpdateImageWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"catalog_offering\": {\"managed\": false, \"version\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"deprecation_at\": \"2019-01-01T12:00:00.000Z\", \"encryption\": \"user_managed\", \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"file\": {\"checksums\": {\"sha256\": \"e992a84f113d3a35d2145ca3e7aca4fc95fe6daf470a08d8af3422ee59c92e15\"}, \"size\": 1}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"minimum_provisioned_size\": 22, \"name\": \"my-image\", \"obsolescence_at\": \"2019-01-01T12:00:00.000Z\", \"operating_system\": {\"allow_user_image_creation\": true, \"architecture\": \"amd64\", \"dedicated_host_only\": false, \"display_name\": \"Ubuntu Server 16.04 LTS amd64\", \"family\": \"Ubuntu Server\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-24-04-amd64\", \"name\": \"ubuntu-24-04-amd64\", \"user_data_format\": \"cloud_init\", \"vendor\": \"Canonical\", \"version\": \"16.04 LTS\"}, \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"image\", \"source_volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\", \"remote\": {\"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"volume\"}, \"status\": \"available\", \"status_reasons\": [{\"code\": \"encryption_key_deleted\", \"message\": \"message\", \"more_info\": \"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}], \"user_data_format\": \"cloud_init\", \"visibility\": \"private\"}";
    String updateImagePath = "/images/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ImagePatch model
    ImagePatch imagePatchModel = new ImagePatch.Builder()
      .deprecationAt(DateUtils.parseAsDateTime("2019-01-01T12:00:00.000Z"))
      .name("my-image")
      .obsolescenceAt(DateUtils.parseAsDateTime("2019-01-01T12:00:00.000Z"))
      .build();
    Map<String, Object> imagePatchModelAsPatch = imagePatchModel.asPatch();

    // Construct an instance of the UpdateImageOptions model
    UpdateImageOptions updateImageOptionsModel = new UpdateImageOptions.Builder()
      .id("testString")
      .imagePatch(imagePatchModelAsPatch)
      .build();

    // Invoke updateImage() with a valid options model and verify the result
    Response<Image> response = vpcService.updateImage(updateImageOptionsModel).execute();
    assertNotNull(response);
    Image responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateImagePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateImage operation with and without retries enabled
  @Test
  public void testUpdateImageWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateImageWOptions();

    vpcService.disableRetries();
    testUpdateImageWOptions();
  }

  // Test the updateImage operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateImageNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateImage(null).execute();
  }

  // Test the deprecateImage operation with a valid options model parameter
  @Test
  public void testDeprecateImageWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deprecateImagePath = "/images/testString/deprecate";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeprecateImageOptions model
    DeprecateImageOptions deprecateImageOptionsModel = new DeprecateImageOptions.Builder()
      .id("testString")
      .build();

    // Invoke deprecateImage() with a valid options model and verify the result
    Response<Void> response = vpcService.deprecateImage(deprecateImageOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deprecateImagePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deprecateImage operation with and without retries enabled
  @Test
  public void testDeprecateImageWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeprecateImageWOptions();

    vpcService.disableRetries();
    testDeprecateImageWOptions();
  }

  // Test the deprecateImage operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeprecateImageNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deprecateImage(null).execute();
  }

  // Test the obsoleteImage operation with a valid options model parameter
  @Test
  public void testObsoleteImageWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String obsoleteImagePath = "/images/testString/obsolete";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the ObsoleteImageOptions model
    ObsoleteImageOptions obsoleteImageOptionsModel = new ObsoleteImageOptions.Builder()
      .id("testString")
      .build();

    // Invoke obsoleteImage() with a valid options model and verify the result
    Response<Void> response = vpcService.obsoleteImage(obsoleteImageOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, obsoleteImagePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the obsoleteImage operation with and without retries enabled
  @Test
  public void testObsoleteImageWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testObsoleteImageWOptions();

    vpcService.disableRetries();
    testObsoleteImageWOptions();
  }

  // Test the obsoleteImage operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testObsoleteImageNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.obsoleteImage(null).execute();
  }

  // Test the listImageExportJobs operation with a valid options model parameter
  @Test
  public void testListImageExportJobsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"export_jobs\": [{\"completed_at\": \"2019-01-01T12:00:00.000Z\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"encrypted_data_key\": \"VGhpcyBpcyBhIG1vY2sgYnl0ZSBhcnJheSB2YWx1ZS4=\", \"format\": \"qcow2\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8/export_jobs/r006-095e9baf-01d4-4e29-986e-20d26606b82a\", \"id\": \"r006-095e9baf-01d4-4e29-986e-20d26606b82a\", \"name\": \"my-image-export-job\", \"resource_type\": \"image_export_job\", \"started_at\": \"2019-01-01T12:00:00.000Z\", \"status\": \"deleting\", \"status_reasons\": [{\"code\": \"cannot_access_storage_bucket\", \"message\": \"message\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-object-storage-prereq\"}], \"storage_bucket\": {\"crn\": \"crn:v1:bluemix:public:cloud-object-storage:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1a0ec336-f391-4091-a6fb-5e084a4c56f4:bucket:bucket-27200-lwx4cfvcue\", \"name\": \"bucket-27200-lwx4cfvcue\"}, \"storage_href\": \"cos://us-south/bucket-27200-lwx4cfvcue/my-image-export.qcow2\", \"storage_object\": {\"name\": \"my-object\"}}]}";
    String listImageExportJobsPath = "/images/testString/export_jobs";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListImageExportJobsOptions model
    ListImageExportJobsOptions listImageExportJobsOptionsModel = new ListImageExportJobsOptions.Builder()
      .imageId("testString")
      .name("my-name")
      .build();

    // Invoke listImageExportJobs() with a valid options model and verify the result
    Response<ImageExportJobUnpaginatedCollection> response = vpcService.listImageExportJobs(listImageExportJobsOptionsModel).execute();
    assertNotNull(response);
    ImageExportJobUnpaginatedCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listImageExportJobsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("name"), "my-name");
  }

  // Test the listImageExportJobs operation with and without retries enabled
  @Test
  public void testListImageExportJobsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListImageExportJobsWOptions();

    vpcService.disableRetries();
    testListImageExportJobsWOptions();
  }

  // Test the listImageExportJobs operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListImageExportJobsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listImageExportJobs(null).execute();
  }

  // Test the createImageExportJob operation with a valid options model parameter
  @Test
  public void testCreateImageExportJobWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"completed_at\": \"2019-01-01T12:00:00.000Z\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"encrypted_data_key\": \"VGhpcyBpcyBhIG1vY2sgYnl0ZSBhcnJheSB2YWx1ZS4=\", \"format\": \"qcow2\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8/export_jobs/r006-095e9baf-01d4-4e29-986e-20d26606b82a\", \"id\": \"r006-095e9baf-01d4-4e29-986e-20d26606b82a\", \"name\": \"my-image-export-job\", \"resource_type\": \"image_export_job\", \"started_at\": \"2019-01-01T12:00:00.000Z\", \"status\": \"deleting\", \"status_reasons\": [{\"code\": \"cannot_access_storage_bucket\", \"message\": \"message\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-object-storage-prereq\"}], \"storage_bucket\": {\"crn\": \"crn:v1:bluemix:public:cloud-object-storage:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1a0ec336-f391-4091-a6fb-5e084a4c56f4:bucket:bucket-27200-lwx4cfvcue\", \"name\": \"bucket-27200-lwx4cfvcue\"}, \"storage_href\": \"cos://us-south/bucket-27200-lwx4cfvcue/my-image-export.qcow2\", \"storage_object\": {\"name\": \"my-object\"}}";
    String createImageExportJobPath = "/images/testString/export_jobs";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the CloudObjectStorageBucketIdentityCloudObjectStorageBucketIdentityByName model
    CloudObjectStorageBucketIdentityCloudObjectStorageBucketIdentityByName cloudObjectStorageBucketIdentityModel = new CloudObjectStorageBucketIdentityCloudObjectStorageBucketIdentityByName.Builder()
      .name("bucket-27200-lwx4cfvcue")
      .build();

    // Construct an instance of the CreateImageExportJobOptions model
    CreateImageExportJobOptions createImageExportJobOptionsModel = new CreateImageExportJobOptions.Builder()
      .imageId("testString")
      .storageBucket(cloudObjectStorageBucketIdentityModel)
      .format("qcow2")
      .name("my-image-export")
      .build();

    // Invoke createImageExportJob() with a valid options model and verify the result
    Response<ImageExportJob> response = vpcService.createImageExportJob(createImageExportJobOptionsModel).execute();
    assertNotNull(response);
    ImageExportJob responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createImageExportJobPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createImageExportJob operation with and without retries enabled
  @Test
  public void testCreateImageExportJobWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateImageExportJobWOptions();

    vpcService.disableRetries();
    testCreateImageExportJobWOptions();
  }

  // Test the createImageExportJob operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateImageExportJobNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createImageExportJob(null).execute();
  }

  // Test the deleteImageExportJob operation with a valid options model parameter
  @Test
  public void testDeleteImageExportJobWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteImageExportJobPath = "/images/testString/export_jobs/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteImageExportJobOptions model
    DeleteImageExportJobOptions deleteImageExportJobOptionsModel = new DeleteImageExportJobOptions.Builder()
      .imageId("testString")
      .id("testString")
      .build();

    // Invoke deleteImageExportJob() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteImageExportJob(deleteImageExportJobOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteImageExportJobPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteImageExportJob operation with and without retries enabled
  @Test
  public void testDeleteImageExportJobWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteImageExportJobWOptions();

    vpcService.disableRetries();
    testDeleteImageExportJobWOptions();
  }

  // Test the deleteImageExportJob operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteImageExportJobNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteImageExportJob(null).execute();
  }

  // Test the getImageExportJob operation with a valid options model parameter
  @Test
  public void testGetImageExportJobWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"completed_at\": \"2019-01-01T12:00:00.000Z\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"encrypted_data_key\": \"VGhpcyBpcyBhIG1vY2sgYnl0ZSBhcnJheSB2YWx1ZS4=\", \"format\": \"qcow2\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8/export_jobs/r006-095e9baf-01d4-4e29-986e-20d26606b82a\", \"id\": \"r006-095e9baf-01d4-4e29-986e-20d26606b82a\", \"name\": \"my-image-export-job\", \"resource_type\": \"image_export_job\", \"started_at\": \"2019-01-01T12:00:00.000Z\", \"status\": \"deleting\", \"status_reasons\": [{\"code\": \"cannot_access_storage_bucket\", \"message\": \"message\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-object-storage-prereq\"}], \"storage_bucket\": {\"crn\": \"crn:v1:bluemix:public:cloud-object-storage:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1a0ec336-f391-4091-a6fb-5e084a4c56f4:bucket:bucket-27200-lwx4cfvcue\", \"name\": \"bucket-27200-lwx4cfvcue\"}, \"storage_href\": \"cos://us-south/bucket-27200-lwx4cfvcue/my-image-export.qcow2\", \"storage_object\": {\"name\": \"my-object\"}}";
    String getImageExportJobPath = "/images/testString/export_jobs/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetImageExportJobOptions model
    GetImageExportJobOptions getImageExportJobOptionsModel = new GetImageExportJobOptions.Builder()
      .imageId("testString")
      .id("testString")
      .build();

    // Invoke getImageExportJob() with a valid options model and verify the result
    Response<ImageExportJob> response = vpcService.getImageExportJob(getImageExportJobOptionsModel).execute();
    assertNotNull(response);
    ImageExportJob responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getImageExportJobPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getImageExportJob operation with and without retries enabled
  @Test
  public void testGetImageExportJobWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetImageExportJobWOptions();

    vpcService.disableRetries();
    testGetImageExportJobWOptions();
  }

  // Test the getImageExportJob operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetImageExportJobNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getImageExportJob(null).execute();
  }

  // Test the updateImageExportJob operation with a valid options model parameter
  @Test
  public void testUpdateImageExportJobWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"completed_at\": \"2019-01-01T12:00:00.000Z\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"encrypted_data_key\": \"VGhpcyBpcyBhIG1vY2sgYnl0ZSBhcnJheSB2YWx1ZS4=\", \"format\": \"qcow2\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8/export_jobs/r006-095e9baf-01d4-4e29-986e-20d26606b82a\", \"id\": \"r006-095e9baf-01d4-4e29-986e-20d26606b82a\", \"name\": \"my-image-export-job\", \"resource_type\": \"image_export_job\", \"started_at\": \"2019-01-01T12:00:00.000Z\", \"status\": \"deleting\", \"status_reasons\": [{\"code\": \"cannot_access_storage_bucket\", \"message\": \"message\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-object-storage-prereq\"}], \"storage_bucket\": {\"crn\": \"crn:v1:bluemix:public:cloud-object-storage:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1a0ec336-f391-4091-a6fb-5e084a4c56f4:bucket:bucket-27200-lwx4cfvcue\", \"name\": \"bucket-27200-lwx4cfvcue\"}, \"storage_href\": \"cos://us-south/bucket-27200-lwx4cfvcue/my-image-export.qcow2\", \"storage_object\": {\"name\": \"my-object\"}}";
    String updateImageExportJobPath = "/images/testString/export_jobs/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ImageExportJobPatch model
    ImageExportJobPatch imageExportJobPatchModel = new ImageExportJobPatch.Builder()
      .name("my-image-export-job-updated")
      .build();
    Map<String, Object> imageExportJobPatchModelAsPatch = imageExportJobPatchModel.asPatch();

    // Construct an instance of the UpdateImageExportJobOptions model
    UpdateImageExportJobOptions updateImageExportJobOptionsModel = new UpdateImageExportJobOptions.Builder()
      .imageId("testString")
      .id("testString")
      .imageExportJobPatch(imageExportJobPatchModelAsPatch)
      .build();

    // Invoke updateImageExportJob() with a valid options model and verify the result
    Response<ImageExportJob> response = vpcService.updateImageExportJob(updateImageExportJobOptionsModel).execute();
    assertNotNull(response);
    ImageExportJob responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateImageExportJobPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateImageExportJob operation with and without retries enabled
  @Test
  public void testUpdateImageExportJobWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateImageExportJobWOptions();

    vpcService.disableRetries();
    testUpdateImageExportJobWOptions();
  }

  // Test the updateImageExportJob operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateImageExportJobNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateImageExportJob(null).execute();
  }

  // Test the listOperatingSystems operation with a valid options model parameter
  @Test
  public void testListOperatingSystemsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"operating_systems\": [{\"allow_user_image_creation\": true, \"architecture\": \"amd64\", \"dedicated_host_only\": false, \"display_name\": \"Ubuntu Server 16.04 LTS amd64\", \"family\": \"Ubuntu Server\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-24-04-amd64\", \"name\": \"ubuntu-24-04-amd64\", \"user_data_format\": \"cloud_init\", \"vendor\": \"Canonical\", \"version\": \"16.04 LTS\"}], \"total_count\": 132}";
    String listOperatingSystemsPath = "/operating_systems";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListOperatingSystemsOptions model
    ListOperatingSystemsOptions listOperatingSystemsOptionsModel = new ListOperatingSystemsOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listOperatingSystems() with a valid options model and verify the result
    Response<OperatingSystemCollection> response = vpcService.listOperatingSystems(listOperatingSystemsOptionsModel).execute();
    assertNotNull(response);
    OperatingSystemCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listOperatingSystemsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listOperatingSystems operation with and without retries enabled
  @Test
  public void testListOperatingSystemsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListOperatingSystemsWOptions();

    vpcService.disableRetries();
    testListOperatingSystemsWOptions();
  }

  // Test the listOperatingSystems operation using the OperatingSystemsPager.getNext() method
  @Test
  public void testListOperatingSystemsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"operating_systems\":[{\"allow_user_image_creation\":true,\"architecture\":\"amd64\",\"dedicated_host_only\":false,\"display_name\":\"Ubuntu Server 16.04 LTS amd64\",\"family\":\"Ubuntu Server\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-24-04-amd64\",\"name\":\"ubuntu-24-04-amd64\",\"user_data_format\":\"cloud_init\",\"vendor\":\"Canonical\",\"version\":\"16.04 LTS\"}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"operating_systems\":[{\"allow_user_image_creation\":true,\"architecture\":\"amd64\",\"dedicated_host_only\":false,\"display_name\":\"Ubuntu Server 16.04 LTS amd64\",\"family\":\"Ubuntu Server\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-24-04-amd64\",\"name\":\"ubuntu-24-04-amd64\",\"user_data_format\":\"cloud_init\",\"vendor\":\"Canonical\",\"version\":\"16.04 LTS\"}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListOperatingSystemsOptions listOperatingSystemsOptions = new ListOperatingSystemsOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    List<OperatingSystem> allResults = new ArrayList<>();
    OperatingSystemsPager pager = new OperatingSystemsPager(vpcService, listOperatingSystemsOptions);
    while (pager.hasNext()) {
      List<OperatingSystem> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listOperatingSystems operation using the OperatingSystemsPager.getAll() method
  @Test
  public void testListOperatingSystemsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"operating_systems\":[{\"allow_user_image_creation\":true,\"architecture\":\"amd64\",\"dedicated_host_only\":false,\"display_name\":\"Ubuntu Server 16.04 LTS amd64\",\"family\":\"Ubuntu Server\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-24-04-amd64\",\"name\":\"ubuntu-24-04-amd64\",\"user_data_format\":\"cloud_init\",\"vendor\":\"Canonical\",\"version\":\"16.04 LTS\"}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"operating_systems\":[{\"allow_user_image_creation\":true,\"architecture\":\"amd64\",\"dedicated_host_only\":false,\"display_name\":\"Ubuntu Server 16.04 LTS amd64\",\"family\":\"Ubuntu Server\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-24-04-amd64\",\"name\":\"ubuntu-24-04-amd64\",\"user_data_format\":\"cloud_init\",\"vendor\":\"Canonical\",\"version\":\"16.04 LTS\"}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListOperatingSystemsOptions listOperatingSystemsOptions = new ListOperatingSystemsOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    OperatingSystemsPager pager = new OperatingSystemsPager(vpcService, listOperatingSystemsOptions);
    List<OperatingSystem> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the getOperatingSystem operation with a valid options model parameter
  @Test
  public void testGetOperatingSystemWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"allow_user_image_creation\": true, \"architecture\": \"amd64\", \"dedicated_host_only\": false, \"display_name\": \"Ubuntu Server 16.04 LTS amd64\", \"family\": \"Ubuntu Server\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-24-04-amd64\", \"name\": \"ubuntu-24-04-amd64\", \"user_data_format\": \"cloud_init\", \"vendor\": \"Canonical\", \"version\": \"16.04 LTS\"}";
    String getOperatingSystemPath = "/operating_systems/red-7-amd64";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetOperatingSystemOptions model
    GetOperatingSystemOptions getOperatingSystemOptionsModel = new GetOperatingSystemOptions.Builder()
      .name("red-7-amd64")
      .build();

    // Invoke getOperatingSystem() with a valid options model and verify the result
    Response<OperatingSystem> response = vpcService.getOperatingSystem(getOperatingSystemOptionsModel).execute();
    assertNotNull(response);
    OperatingSystem responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getOperatingSystemPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getOperatingSystem operation with and without retries enabled
  @Test
  public void testGetOperatingSystemWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetOperatingSystemWOptions();

    vpcService.disableRetries();
    testGetOperatingSystemWOptions();
  }

  // Test the getOperatingSystem operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetOperatingSystemNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getOperatingSystem(null).execute();
  }

  // Test the listKeys operation with a valid options model parameter
  @Test
  public void testListKeysWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"keys\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::key:r006-82679077-ac3b-4c10-be16-63e9c21f0f45\", \"fingerprint\": \"SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/keys/r006-82679077-ac3b-4c10-be16-63e9c21f0f45\", \"id\": \"r006-82679077-ac3b-4c10-be16-63e9c21f0f45\", \"length\": 2048, \"name\": \"my-key-1\", \"public_key\": \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"type\": \"ed25519\"}], \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listKeysPath = "/keys";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListKeysOptions model
    ListKeysOptions listKeysOptionsModel = new ListKeysOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .build();

    // Invoke listKeys() with a valid options model and verify the result
    Response<KeyCollection> response = vpcService.listKeys(listKeysOptionsModel).execute();
    assertNotNull(response);
    KeyCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listKeysPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
  }

  // Test the listKeys operation with and without retries enabled
  @Test
  public void testListKeysWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListKeysWOptions();

    vpcService.disableRetries();
    testListKeysWOptions();
  }

  // Test the listKeys operation using the KeysPager.getNext() method
  @Test
  public void testListKeysWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"keys\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::key:r006-82679077-ac3b-4c10-be16-63e9c21f0f45\",\"fingerprint\":\"SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/keys/r006-82679077-ac3b-4c10-be16-63e9c21f0f45\",\"id\":\"r006-82679077-ac3b-4c10-be16-63e9c21f0f45\",\"length\":2048,\"name\":\"my-key-1\",\"public_key\":\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"type\":\"ed25519\"}],\"limit\":1}";
    String mockResponsePage2 = "{\"total_count\":2,\"keys\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::key:r006-82679077-ac3b-4c10-be16-63e9c21f0f45\",\"fingerprint\":\"SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/keys/r006-82679077-ac3b-4c10-be16-63e9c21f0f45\",\"id\":\"r006-82679077-ac3b-4c10-be16-63e9c21f0f45\",\"length\":2048,\"name\":\"my-key-1\",\"public_key\":\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"type\":\"ed25519\"}],\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListKeysOptions listKeysOptions = new ListKeysOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .build();

    List<Key> allResults = new ArrayList<>();
    KeysPager pager = new KeysPager(vpcService, listKeysOptions);
    while (pager.hasNext()) {
      List<Key> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listKeys operation using the KeysPager.getAll() method
  @Test
  public void testListKeysWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"keys\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::key:r006-82679077-ac3b-4c10-be16-63e9c21f0f45\",\"fingerprint\":\"SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/keys/r006-82679077-ac3b-4c10-be16-63e9c21f0f45\",\"id\":\"r006-82679077-ac3b-4c10-be16-63e9c21f0f45\",\"length\":2048,\"name\":\"my-key-1\",\"public_key\":\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"type\":\"ed25519\"}],\"limit\":1}";
    String mockResponsePage2 = "{\"total_count\":2,\"keys\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::key:r006-82679077-ac3b-4c10-be16-63e9c21f0f45\",\"fingerprint\":\"SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/keys/r006-82679077-ac3b-4c10-be16-63e9c21f0f45\",\"id\":\"r006-82679077-ac3b-4c10-be16-63e9c21f0f45\",\"length\":2048,\"name\":\"my-key-1\",\"public_key\":\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"type\":\"ed25519\"}],\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListKeysOptions listKeysOptions = new ListKeysOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .build();

    KeysPager pager = new KeysPager(vpcService, listKeysOptions);
    List<Key> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createKey operation with a valid options model parameter
  @Test
  public void testCreateKeyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::key:r006-82679077-ac3b-4c10-be16-63e9c21f0f45\", \"fingerprint\": \"SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/keys/r006-82679077-ac3b-4c10-be16-63e9c21f0f45\", \"id\": \"r006-82679077-ac3b-4c10-be16-63e9c21f0f45\", \"length\": 2048, \"name\": \"my-key-1\", \"public_key\": \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"type\": \"ed25519\"}";
    String createKeyPath = "/keys";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the CreateKeyOptions model
    CreateKeyOptions createKeyOptionsModel = new CreateKeyOptions.Builder()
      .publicKey("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En")
      .name("my-key-1")
      .resourceGroup(resourceGroupIdentityModel)
      .type("rsa")
      .build();

    // Invoke createKey() with a valid options model and verify the result
    Response<Key> response = vpcService.createKey(createKeyOptionsModel).execute();
    assertNotNull(response);
    Key responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createKeyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createKey operation with and without retries enabled
  @Test
  public void testCreateKeyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateKeyWOptions();

    vpcService.disableRetries();
    testCreateKeyWOptions();
  }

  // Test the createKey operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateKeyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createKey(null).execute();
  }

  // Test the deleteKey operation with a valid options model parameter
  @Test
  public void testDeleteKeyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteKeyPath = "/keys/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteKeyOptions model
    DeleteKeyOptions deleteKeyOptionsModel = new DeleteKeyOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteKey() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteKey(deleteKeyOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteKeyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteKey operation with and without retries enabled
  @Test
  public void testDeleteKeyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteKeyWOptions();

    vpcService.disableRetries();
    testDeleteKeyWOptions();
  }

  // Test the deleteKey operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteKeyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteKey(null).execute();
  }

  // Test the getKey operation with a valid options model parameter
  @Test
  public void testGetKeyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::key:r006-82679077-ac3b-4c10-be16-63e9c21f0f45\", \"fingerprint\": \"SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/keys/r006-82679077-ac3b-4c10-be16-63e9c21f0f45\", \"id\": \"r006-82679077-ac3b-4c10-be16-63e9c21f0f45\", \"length\": 2048, \"name\": \"my-key-1\", \"public_key\": \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"type\": \"ed25519\"}";
    String getKeyPath = "/keys/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetKeyOptions model
    GetKeyOptions getKeyOptionsModel = new GetKeyOptions.Builder()
      .id("testString")
      .build();

    // Invoke getKey() with a valid options model and verify the result
    Response<Key> response = vpcService.getKey(getKeyOptionsModel).execute();
    assertNotNull(response);
    Key responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getKeyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getKey operation with and without retries enabled
  @Test
  public void testGetKeyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetKeyWOptions();

    vpcService.disableRetries();
    testGetKeyWOptions();
  }

  // Test the getKey operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetKeyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getKey(null).execute();
  }

  // Test the updateKey operation with a valid options model parameter
  @Test
  public void testUpdateKeyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::key:r006-82679077-ac3b-4c10-be16-63e9c21f0f45\", \"fingerprint\": \"SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/keys/r006-82679077-ac3b-4c10-be16-63e9c21f0f45\", \"id\": \"r006-82679077-ac3b-4c10-be16-63e9c21f0f45\", \"length\": 2048, \"name\": \"my-key-1\", \"public_key\": \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"type\": \"ed25519\"}";
    String updateKeyPath = "/keys/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the KeyPatch model
    KeyPatch keyPatchModel = new KeyPatch.Builder()
      .name("my-key-1")
      .build();
    Map<String, Object> keyPatchModelAsPatch = keyPatchModel.asPatch();

    // Construct an instance of the UpdateKeyOptions model
    UpdateKeyOptions updateKeyOptionsModel = new UpdateKeyOptions.Builder()
      .id("testString")
      .keyPatch(keyPatchModelAsPatch)
      .build();

    // Invoke updateKey() with a valid options model and verify the result
    Response<Key> response = vpcService.updateKey(updateKeyOptionsModel).execute();
    assertNotNull(response);
    Key responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateKeyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateKey operation with and without retries enabled
  @Test
  public void testUpdateKeyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateKeyWOptions();

    vpcService.disableRetries();
    testUpdateKeyWOptions();
  }

  // Test the updateKey operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateKeyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateKey(null).execute();
  }

  // Test the listInstanceProfiles operation with a valid options model parameter
  @Test
  public void testListInstanceProfilesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"profiles\": [{\"bandwidth\": {\"type\": \"fixed\", \"value\": 20000}, \"cluster_network_attachment_count\": {\"type\": \"dependent\"}, \"confidential_compute_modes\": {\"default\": \"disabled\", \"type\": \"enum\", \"values\": [\"disabled\"]}, \"disks\": [{\"quantity\": {\"type\": \"fixed\", \"value\": 4}, \"size\": {\"type\": \"fixed\", \"value\": 100}, \"supported_interface_types\": {\"default\": \"nvme\", \"type\": \"enum\", \"values\": [\"nvme\"]}}], \"family\": \"balanced\", \"gpu_count\": {\"type\": \"fixed\", \"value\": 2}, \"gpu_manufacturer\": {\"type\": \"enum\", \"values\": [\"amd\"]}, \"gpu_memory\": {\"type\": \"fixed\", \"value\": 16}, \"gpu_model\": {\"type\": \"enum\", \"values\": [\"Tesla V100\"]}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"memory\": {\"type\": \"fixed\", \"value\": 16}, \"name\": \"bx2-4x16\", \"network_attachment_count\": {\"max\": 5, \"min\": 1, \"type\": \"range\"}, \"network_interface_count\": {\"max\": 5, \"min\": 1, \"type\": \"range\"}, \"numa_count\": {\"type\": \"fixed\", \"value\": 2}, \"os_architecture\": {\"default\": \"amd64\", \"type\": \"enum\", \"values\": [\"amd64\"]}, \"port_speed\": {\"type\": \"fixed\", \"value\": 1000}, \"reservation_terms\": {\"type\": \"enum\", \"values\": [\"one_year\"]}, \"resource_type\": \"instance_profile\", \"secure_boot_modes\": {\"default\": true, \"type\": \"enum\", \"values\": [true]}, \"status\": \"current\", \"supported_cluster_network_profiles\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_network/profiles/h100\", \"name\": \"h100\", \"resource_type\": \"cluster_network_profile\"}], \"total_volume_bandwidth\": {\"type\": \"fixed\", \"value\": 20000}, \"vcpu_architecture\": {\"type\": \"fixed\", \"value\": \"amd64\"}, \"vcpu_count\": {\"type\": \"fixed\", \"value\": 16}, \"vcpu_manufacturer\": {\"type\": \"fixed\", \"value\": \"intel\"}}]}";
    String listInstanceProfilesPath = "/instance/profiles";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListInstanceProfilesOptions model
    ListInstanceProfilesOptions listInstanceProfilesOptionsModel = new ListInstanceProfilesOptions();

    // Invoke listInstanceProfiles() with a valid options model and verify the result
    Response<InstanceProfileCollection> response = vpcService.listInstanceProfiles(listInstanceProfilesOptionsModel).execute();
    assertNotNull(response);
    InstanceProfileCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listInstanceProfilesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listInstanceProfiles operation with and without retries enabled
  @Test
  public void testListInstanceProfilesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListInstanceProfilesWOptions();

    vpcService.disableRetries();
    testListInstanceProfilesWOptions();
  }

  // Test the getInstanceProfile operation with a valid options model parameter
  @Test
  public void testGetInstanceProfileWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"bandwidth\": {\"type\": \"fixed\", \"value\": 20000}, \"cluster_network_attachment_count\": {\"type\": \"dependent\"}, \"confidential_compute_modes\": {\"default\": \"disabled\", \"type\": \"enum\", \"values\": [\"disabled\"]}, \"disks\": [{\"quantity\": {\"type\": \"fixed\", \"value\": 4}, \"size\": {\"type\": \"fixed\", \"value\": 100}, \"supported_interface_types\": {\"default\": \"nvme\", \"type\": \"enum\", \"values\": [\"nvme\"]}}], \"family\": \"balanced\", \"gpu_count\": {\"type\": \"fixed\", \"value\": 2}, \"gpu_manufacturer\": {\"type\": \"enum\", \"values\": [\"amd\"]}, \"gpu_memory\": {\"type\": \"fixed\", \"value\": 16}, \"gpu_model\": {\"type\": \"enum\", \"values\": [\"Tesla V100\"]}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"memory\": {\"type\": \"fixed\", \"value\": 16}, \"name\": \"bx2-4x16\", \"network_attachment_count\": {\"max\": 5, \"min\": 1, \"type\": \"range\"}, \"network_interface_count\": {\"max\": 5, \"min\": 1, \"type\": \"range\"}, \"numa_count\": {\"type\": \"fixed\", \"value\": 2}, \"os_architecture\": {\"default\": \"amd64\", \"type\": \"enum\", \"values\": [\"amd64\"]}, \"port_speed\": {\"type\": \"fixed\", \"value\": 1000}, \"reservation_terms\": {\"type\": \"enum\", \"values\": [\"one_year\"]}, \"resource_type\": \"instance_profile\", \"secure_boot_modes\": {\"default\": true, \"type\": \"enum\", \"values\": [true]}, \"status\": \"current\", \"supported_cluster_network_profiles\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_network/profiles/h100\", \"name\": \"h100\", \"resource_type\": \"cluster_network_profile\"}], \"total_volume_bandwidth\": {\"type\": \"fixed\", \"value\": 20000}, \"vcpu_architecture\": {\"type\": \"fixed\", \"value\": \"amd64\"}, \"vcpu_count\": {\"type\": \"fixed\", \"value\": 16}, \"vcpu_manufacturer\": {\"type\": \"fixed\", \"value\": \"intel\"}}";
    String getInstanceProfilePath = "/instance/profiles/mx2-host-152x1216";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetInstanceProfileOptions model
    GetInstanceProfileOptions getInstanceProfileOptionsModel = new GetInstanceProfileOptions.Builder()
      .name("mx2-host-152x1216")
      .build();

    // Invoke getInstanceProfile() with a valid options model and verify the result
    Response<InstanceProfile> response = vpcService.getInstanceProfile(getInstanceProfileOptionsModel).execute();
    assertNotNull(response);
    InstanceProfile responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getInstanceProfilePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getInstanceProfile operation with and without retries enabled
  @Test
  public void testGetInstanceProfileWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetInstanceProfileWOptions();

    vpcService.disableRetries();
    testGetInstanceProfileWOptions();
  }

  // Test the getInstanceProfile operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetInstanceProfileNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getInstanceProfile(null).execute();
  }

  // Test the listInstanceTemplates operation with a valid options model parameter
  @Test
  public void testListInstanceTemplatesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"templates\": [{\"availability_policy\": {\"host_failure\": \"restart\"}, \"cluster_network_attachments\": [{\"cluster_network_interface\": {\"auto_delete\": false, \"name\": \"my-cluster-network-interface\", \"primary_ip\": {\"id\": \"0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\"}, \"subnet\": {\"id\": \"0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\"}}, \"name\": \"my-instance-network-attachment\"}], \"confidential_compute_mode\": \"disabled\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance-template:0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\", \"default_trusted_profile\": {\"auto_link\": false, \"target\": {\"id\": \"Profile-9fd84246-7df4-4667-94e4-8ecde51d5ac5\"}}, \"enable_secure_boot\": true, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\", \"id\": \"0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\", \"keys\": [{\"id\": \"r006-82679077-ac3b-4c10-be16-63e9c21f0f45\"}], \"metadata_service\": {\"enabled\": false, \"protocol\": \"https\", \"response_hop_limit\": 2}, \"name\": \"my-instance-template\", \"placement_target\": {\"id\": \"0717-1e09281b-f177-46fb-baf1-bc152b2e391a\"}, \"profile\": {\"name\": \"bx2-4x16\"}, \"reservation_affinity\": {\"policy\": \"automatic\", \"pool\": [{\"id\": \"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\"}]}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"total_volume_bandwidth\": 500, \"user_data\": \"userData\", \"volume_attachments\": [{\"delete_volume_on_instance_delete\": false, \"name\": \"my-volume-attachment\", \"volume\": {\"id\": \"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\"}}], \"vpc\": {\"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\"}, \"boot_volume_attachment\": {\"delete_volume_on_instance_delete\": true, \"name\": \"my-volume-attachment\", \"volume\": {\"bandwidth\": 1000, \"capacity\": 100, \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"iops\": 10000, \"name\": \"my-volume\", \"profile\": {\"name\": \"general-purpose\"}, \"resource_group\": {\"id\": \"fee82deba12e4c0fb69c3b09d1f12345\"}, \"user_tags\": [\"userTags\"]}}, \"image\": {\"id\": \"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\"}, \"zone\": {\"name\": \"us-south-1\"}, \"network_attachments\": [{\"name\": \"my-instance-network-attachment\", \"virtual_network_interface\": {\"allow_ip_spoofing\": true, \"auto_delete\": false, \"enable_infrastructure_nat\": true, \"ips\": [{\"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\"}], \"name\": \"my-virtual-network-interface\", \"primary_ip\": {\"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\"}, \"protocol_state_filtering_mode\": \"auto\", \"resource_group\": {\"id\": \"fee82deba12e4c0fb69c3b09d1f12345\"}, \"security_groups\": [{\"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\"}], \"subnet\": {\"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\"}}}], \"primary_network_attachment\": {\"name\": \"my-instance-network-attachment\", \"virtual_network_interface\": {\"allow_ip_spoofing\": true, \"auto_delete\": false, \"enable_infrastructure_nat\": true, \"ips\": [{\"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\"}], \"name\": \"my-virtual-network-interface\", \"primary_ip\": {\"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\"}, \"protocol_state_filtering_mode\": \"auto\", \"resource_group\": {\"id\": \"fee82deba12e4c0fb69c3b09d1f12345\"}, \"security_groups\": [{\"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\"}], \"subnet\": {\"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\"}}}}], \"total_count\": 132}";
    String listInstanceTemplatesPath = "/instance/templates";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListInstanceTemplatesOptions model
    ListInstanceTemplatesOptions listInstanceTemplatesOptionsModel = new ListInstanceTemplatesOptions();

    // Invoke listInstanceTemplates() with a valid options model and verify the result
    Response<InstanceTemplateCollection> response = vpcService.listInstanceTemplates(listInstanceTemplatesOptionsModel).execute();
    assertNotNull(response);
    InstanceTemplateCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listInstanceTemplatesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listInstanceTemplates operation with and without retries enabled
  @Test
  public void testListInstanceTemplatesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListInstanceTemplatesWOptions();

    vpcService.disableRetries();
    testListInstanceTemplatesWOptions();
  }

  // Test the createInstanceTemplate operation with a valid options model parameter
  @Test
  public void testCreateInstanceTemplateWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"availability_policy\": {\"host_failure\": \"restart\"}, \"cluster_network_attachments\": [{\"cluster_network_interface\": {\"auto_delete\": false, \"name\": \"my-cluster-network-interface\", \"primary_ip\": {\"id\": \"0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\"}, \"subnet\": {\"id\": \"0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\"}}, \"name\": \"my-instance-network-attachment\"}], \"confidential_compute_mode\": \"disabled\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance-template:0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\", \"default_trusted_profile\": {\"auto_link\": false, \"target\": {\"id\": \"Profile-9fd84246-7df4-4667-94e4-8ecde51d5ac5\"}}, \"enable_secure_boot\": true, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\", \"id\": \"0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\", \"keys\": [{\"id\": \"r006-82679077-ac3b-4c10-be16-63e9c21f0f45\"}], \"metadata_service\": {\"enabled\": false, \"protocol\": \"https\", \"response_hop_limit\": 2}, \"name\": \"my-instance-template\", \"placement_target\": {\"id\": \"0717-1e09281b-f177-46fb-baf1-bc152b2e391a\"}, \"profile\": {\"name\": \"bx2-4x16\"}, \"reservation_affinity\": {\"policy\": \"automatic\", \"pool\": [{\"id\": \"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\"}]}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"total_volume_bandwidth\": 500, \"user_data\": \"userData\", \"volume_attachments\": [{\"delete_volume_on_instance_delete\": false, \"name\": \"my-volume-attachment\", \"volume\": {\"id\": \"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\"}}], \"vpc\": {\"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\"}, \"boot_volume_attachment\": {\"delete_volume_on_instance_delete\": true, \"name\": \"my-volume-attachment\", \"volume\": {\"bandwidth\": 1000, \"capacity\": 100, \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"iops\": 10000, \"name\": \"my-volume\", \"profile\": {\"name\": \"general-purpose\"}, \"resource_group\": {\"id\": \"fee82deba12e4c0fb69c3b09d1f12345\"}, \"user_tags\": [\"userTags\"]}}, \"image\": {\"id\": \"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\"}, \"zone\": {\"name\": \"us-south-1\"}, \"network_attachments\": [{\"name\": \"my-instance-network-attachment\", \"virtual_network_interface\": {\"allow_ip_spoofing\": true, \"auto_delete\": false, \"enable_infrastructure_nat\": true, \"ips\": [{\"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\"}], \"name\": \"my-virtual-network-interface\", \"primary_ip\": {\"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\"}, \"protocol_state_filtering_mode\": \"auto\", \"resource_group\": {\"id\": \"fee82deba12e4c0fb69c3b09d1f12345\"}, \"security_groups\": [{\"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\"}], \"subnet\": {\"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\"}}}], \"primary_network_attachment\": {\"name\": \"my-instance-network-attachment\", \"virtual_network_interface\": {\"allow_ip_spoofing\": true, \"auto_delete\": false, \"enable_infrastructure_nat\": true, \"ips\": [{\"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\"}], \"name\": \"my-virtual-network-interface\", \"primary_ip\": {\"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\"}, \"protocol_state_filtering_mode\": \"auto\", \"resource_group\": {\"id\": \"fee82deba12e4c0fb69c3b09d1f12345\"}, \"security_groups\": [{\"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\"}], \"subnet\": {\"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\"}}}}";
    String createInstanceTemplatePath = "/instance/templates";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the InstanceAvailabilityPolicyPrototype model
    InstanceAvailabilityPolicyPrototype instanceAvailabilityPolicyPrototypeModel = new InstanceAvailabilityPolicyPrototype.Builder()
      .hostFailure("restart")
      .build();

    // Construct an instance of the ClusterNetworkInterfacePrimaryIPPrototypeClusterNetworkSubnetReservedIPPrototypeClusterNetworkInterfacePrimaryIPContext model
    ClusterNetworkInterfacePrimaryIPPrototypeClusterNetworkSubnetReservedIPPrototypeClusterNetworkInterfacePrimaryIPContext clusterNetworkInterfacePrimaryIpPrototypeModel = new ClusterNetworkInterfacePrimaryIPPrototypeClusterNetworkSubnetReservedIPPrototypeClusterNetworkInterfacePrimaryIPContext.Builder()
      .address("10.0.0.5")
      .autoDelete(false)
      .name("my-cluster-network-subnet-reserved-ip")
      .build();

    // Construct an instance of the ClusterNetworkSubnetIdentityById model
    ClusterNetworkSubnetIdentityById clusterNetworkSubnetIdentityModel = new ClusterNetworkSubnetIdentityById.Builder()
      .id("0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930")
      .build();

    // Construct an instance of the InstanceClusterNetworkAttachmentPrototypeClusterNetworkInterfaceInstanceClusterNetworkInterfacePrototypeInstanceClusterNetworkAttachment model
    InstanceClusterNetworkAttachmentPrototypeClusterNetworkInterfaceInstanceClusterNetworkInterfacePrototypeInstanceClusterNetworkAttachment instanceClusterNetworkAttachmentPrototypeClusterNetworkInterfaceModel = new InstanceClusterNetworkAttachmentPrototypeClusterNetworkInterfaceInstanceClusterNetworkInterfacePrototypeInstanceClusterNetworkAttachment.Builder()
      .autoDelete(false)
      .name("my-cluster-network-interface")
      .primaryIp(clusterNetworkInterfacePrimaryIpPrototypeModel)
      .subnet(clusterNetworkSubnetIdentityModel)
      .build();

    // Construct an instance of the InstanceClusterNetworkAttachmentPrototypeInstanceContext model
    InstanceClusterNetworkAttachmentPrototypeInstanceContext instanceClusterNetworkAttachmentPrototypeInstanceContextModel = new InstanceClusterNetworkAttachmentPrototypeInstanceContext.Builder()
      .clusterNetworkInterface(instanceClusterNetworkAttachmentPrototypeClusterNetworkInterfaceModel)
      .name("my-instance-network-attachment")
      .build();

    // Construct an instance of the TrustedProfileIdentityById model
    TrustedProfileIdentityById trustedProfileIdentityModel = new TrustedProfileIdentityById.Builder()
      .id("Profile-9fd84246-7df4-4667-94e4-8ecde51d5ac5")
      .build();

    // Construct an instance of the InstanceDefaultTrustedProfilePrototype model
    InstanceDefaultTrustedProfilePrototype instanceDefaultTrustedProfilePrototypeModel = new InstanceDefaultTrustedProfilePrototype.Builder()
      .autoLink(false)
      .target(trustedProfileIdentityModel)
      .build();

    // Construct an instance of the KeyIdentityById model
    KeyIdentityById keyIdentityModel = new KeyIdentityById.Builder()
      .id("r006-82679077-ac3b-4c10-be16-63e9c21f0f45")
      .build();

    // Construct an instance of the InstanceMetadataServicePrototype model
    InstanceMetadataServicePrototype instanceMetadataServicePrototypeModel = new InstanceMetadataServicePrototype.Builder()
      .enabled(false)
      .protocol("https")
      .responseHopLimit(Long.valueOf("2"))
      .build();

    // Construct an instance of the InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityById model
    InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityById instancePlacementTargetPrototypeModel = new InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityById.Builder()
      .id("0717-1e09281b-f177-46fb-baf1-bc152b2e391a")
      .build();

    // Construct an instance of the InstanceProfileIdentityByName model
    InstanceProfileIdentityByName instanceProfileIdentityModel = new InstanceProfileIdentityByName.Builder()
      .name("bx2-4x16")
      .build();

    // Construct an instance of the ReservationIdentityById model
    ReservationIdentityById reservationIdentityModel = new ReservationIdentityById.Builder()
      .id("0717-ba49df72-37b8-43ac-98da-f8e029de0e63")
      .build();

    // Construct an instance of the InstanceReservationAffinityPrototype model
    InstanceReservationAffinityPrototype instanceReservationAffinityPrototypeModel = new InstanceReservationAffinityPrototype.Builder()
      .policy("automatic")
      .pool(java.util.Arrays.asList(reservationIdentityModel))
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the VolumeAttachmentPrototypeVolumeVolumeIdentityVolumeIdentityById model
    VolumeAttachmentPrototypeVolumeVolumeIdentityVolumeIdentityById volumeAttachmentPrototypeVolumeModel = new VolumeAttachmentPrototypeVolumeVolumeIdentityVolumeIdentityById.Builder()
      .id("r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5")
      .build();

    // Construct an instance of the VolumeAttachmentPrototype model
    VolumeAttachmentPrototype volumeAttachmentPrototypeModel = new VolumeAttachmentPrototype.Builder()
      .deleteVolumeOnInstanceDelete(false)
      .name("my-volume-attachment")
      .volume(volumeAttachmentPrototypeVolumeModel)
      .build();

    // Construct an instance of the VPCIdentityById model
    VPCIdentityById vpcIdentityModel = new VPCIdentityById.Builder()
      .id("r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .build();

    // Construct an instance of the EncryptionKeyIdentityByCRN model
    EncryptionKeyIdentityByCRN encryptionKeyIdentityModel = new EncryptionKeyIdentityByCRN.Builder()
      .crn("crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")
      .build();

    // Construct an instance of the VolumeProfileIdentityByName model
    VolumeProfileIdentityByName volumeProfileIdentityModel = new VolumeProfileIdentityByName.Builder()
      .name("general-purpose")
      .build();

    // Construct an instance of the VolumePrototypeInstanceByImageContext model
    VolumePrototypeInstanceByImageContext volumePrototypeInstanceByImageContextModel = new VolumePrototypeInstanceByImageContext.Builder()
      .bandwidth(Long.valueOf("1000"))
      .capacity(Long.valueOf("100"))
      .encryptionKey(encryptionKeyIdentityModel)
      .iops(Long.valueOf("10000"))
      .name("my-boot-volume")
      .profile(volumeProfileIdentityModel)
      .resourceGroup(resourceGroupIdentityModel)
      .userTags(java.util.Arrays.asList())
      .build();

    // Construct an instance of the VolumeAttachmentPrototypeInstanceByImageContext model
    VolumeAttachmentPrototypeInstanceByImageContext volumeAttachmentPrototypeInstanceByImageContextModel = new VolumeAttachmentPrototypeInstanceByImageContext.Builder()
      .deleteVolumeOnInstanceDelete(true)
      .name("my-volume-attachment")
      .volume(volumePrototypeInstanceByImageContextModel)
      .build();

    // Construct an instance of the ImageIdentityById model
    ImageIdentityById imageIdentityModel = new ImageIdentityById.Builder()
      .id("r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8")
      .build();

    // Construct an instance of the ZoneIdentityByName model
    ZoneIdentityByName zoneIdentityModel = new ZoneIdentityByName.Builder()
      .name("us-south-1")
      .build();

    // Construct an instance of the VirtualNetworkInterfaceIPPrototypeReservedIPPrototypeVirtualNetworkInterfaceIPsContext model
    VirtualNetworkInterfaceIPPrototypeReservedIPPrototypeVirtualNetworkInterfaceIPsContext virtualNetworkInterfaceIpPrototypeModel = new VirtualNetworkInterfaceIPPrototypeReservedIPPrototypeVirtualNetworkInterfaceIPsContext.Builder()
      .address("10.0.0.5")
      .autoDelete(false)
      .name("my-reserved-ip")
      .build();

    // Construct an instance of the VirtualNetworkInterfacePrimaryIPPrototypeReservedIPPrototypeVirtualNetworkInterfacePrimaryIPContext model
    VirtualNetworkInterfacePrimaryIPPrototypeReservedIPPrototypeVirtualNetworkInterfacePrimaryIPContext virtualNetworkInterfacePrimaryIpPrototypeModel = new VirtualNetworkInterfacePrimaryIPPrototypeReservedIPPrototypeVirtualNetworkInterfacePrimaryIPContext.Builder()
      .address("10.0.0.5")
      .autoDelete(false)
      .name("my-reserved-ip")
      .build();

    // Construct an instance of the SecurityGroupIdentityById model
    SecurityGroupIdentityById securityGroupIdentityModel = new SecurityGroupIdentityById.Builder()
      .id("r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271")
      .build();

    // Construct an instance of the SubnetIdentityById model
    SubnetIdentityById subnetIdentityModel = new SubnetIdentityById.Builder()
      .id("0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
      .build();

    // Construct an instance of the InstanceNetworkAttachmentPrototypeVirtualNetworkInterfaceVirtualNetworkInterfacePrototypeInstanceNetworkAttachmentContext model
    InstanceNetworkAttachmentPrototypeVirtualNetworkInterfaceVirtualNetworkInterfacePrototypeInstanceNetworkAttachmentContext instanceNetworkAttachmentPrototypeVirtualNetworkInterfaceModel = new InstanceNetworkAttachmentPrototypeVirtualNetworkInterfaceVirtualNetworkInterfacePrototypeInstanceNetworkAttachmentContext.Builder()
      .allowIpSpoofing(true)
      .autoDelete(false)
      .enableInfrastructureNat(true)
      .ips(java.util.Arrays.asList(virtualNetworkInterfaceIpPrototypeModel))
      .name("my-virtual-network-interface")
      .primaryIp(virtualNetworkInterfacePrimaryIpPrototypeModel)
      .protocolStateFilteringMode("auto")
      .resourceGroup(resourceGroupIdentityModel)
      .securityGroups(java.util.Arrays.asList(securityGroupIdentityModel))
      .subnet(subnetIdentityModel)
      .build();

    // Construct an instance of the InstanceNetworkAttachmentPrototype model
    InstanceNetworkAttachmentPrototype instanceNetworkAttachmentPrototypeModel = new InstanceNetworkAttachmentPrototype.Builder()
      .name("my-instance-network-attachment")
      .virtualNetworkInterface(instanceNetworkAttachmentPrototypeVirtualNetworkInterfaceModel)
      .build();

    // Construct an instance of the InstanceTemplatePrototypeInstanceTemplateByImageInstanceTemplateByImageInstanceByNetworkAttachment model
    InstanceTemplatePrototypeInstanceTemplateByImageInstanceTemplateByImageInstanceByNetworkAttachment instanceTemplatePrototypeModel = new InstanceTemplatePrototypeInstanceTemplateByImageInstanceTemplateByImageInstanceByNetworkAttachment.Builder()
      .availabilityPolicy(instanceAvailabilityPolicyPrototypeModel)
      .clusterNetworkAttachments(java.util.Arrays.asList(instanceClusterNetworkAttachmentPrototypeInstanceContextModel))
      .confidentialComputeMode("disabled")
      .defaultTrustedProfile(instanceDefaultTrustedProfilePrototypeModel)
      .enableSecureBoot(true)
      .keys(java.util.Arrays.asList(keyIdentityModel))
      .metadataService(instanceMetadataServicePrototypeModel)
      .name("my-instance")
      .placementTarget(instancePlacementTargetPrototypeModel)
      .profile(instanceProfileIdentityModel)
      .reservationAffinity(instanceReservationAffinityPrototypeModel)
      .resourceGroup(resourceGroupIdentityModel)
      .totalVolumeBandwidth(Long.valueOf("500"))
      .userData("testString")
      .volumeAttachments(java.util.Arrays.asList(volumeAttachmentPrototypeModel))
      .vpc(vpcIdentityModel)
      .bootVolumeAttachment(volumeAttachmentPrototypeInstanceByImageContextModel)
      .image(imageIdentityModel)
      .zone(zoneIdentityModel)
      .networkAttachments(java.util.Arrays.asList(instanceNetworkAttachmentPrototypeModel))
      .primaryNetworkAttachment(instanceNetworkAttachmentPrototypeModel)
      .build();

    // Construct an instance of the CreateInstanceTemplateOptions model
    CreateInstanceTemplateOptions createInstanceTemplateOptionsModel = new CreateInstanceTemplateOptions.Builder()
      .instanceTemplatePrototype(instanceTemplatePrototypeModel)
      .build();

    // Invoke createInstanceTemplate() with a valid options model and verify the result
    Response<InstanceTemplate> response = vpcService.createInstanceTemplate(createInstanceTemplateOptionsModel).execute();
    assertNotNull(response);
    InstanceTemplate responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createInstanceTemplatePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createInstanceTemplate operation with and without retries enabled
  @Test
  public void testCreateInstanceTemplateWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateInstanceTemplateWOptions();

    vpcService.disableRetries();
    testCreateInstanceTemplateWOptions();
  }

  // Test the createInstanceTemplate operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateInstanceTemplateNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createInstanceTemplate(null).execute();
  }

  // Test the deleteInstanceTemplate operation with a valid options model parameter
  @Test
  public void testDeleteInstanceTemplateWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteInstanceTemplatePath = "/instance/templates/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteInstanceTemplateOptions model
    DeleteInstanceTemplateOptions deleteInstanceTemplateOptionsModel = new DeleteInstanceTemplateOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteInstanceTemplate() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteInstanceTemplate(deleteInstanceTemplateOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteInstanceTemplatePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteInstanceTemplate operation with and without retries enabled
  @Test
  public void testDeleteInstanceTemplateWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteInstanceTemplateWOptions();

    vpcService.disableRetries();
    testDeleteInstanceTemplateWOptions();
  }

  // Test the deleteInstanceTemplate operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteInstanceTemplateNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteInstanceTemplate(null).execute();
  }

  // Test the getInstanceTemplate operation with a valid options model parameter
  @Test
  public void testGetInstanceTemplateWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"availability_policy\": {\"host_failure\": \"restart\"}, \"cluster_network_attachments\": [{\"cluster_network_interface\": {\"auto_delete\": false, \"name\": \"my-cluster-network-interface\", \"primary_ip\": {\"id\": \"0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\"}, \"subnet\": {\"id\": \"0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\"}}, \"name\": \"my-instance-network-attachment\"}], \"confidential_compute_mode\": \"disabled\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance-template:0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\", \"default_trusted_profile\": {\"auto_link\": false, \"target\": {\"id\": \"Profile-9fd84246-7df4-4667-94e4-8ecde51d5ac5\"}}, \"enable_secure_boot\": true, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\", \"id\": \"0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\", \"keys\": [{\"id\": \"r006-82679077-ac3b-4c10-be16-63e9c21f0f45\"}], \"metadata_service\": {\"enabled\": false, \"protocol\": \"https\", \"response_hop_limit\": 2}, \"name\": \"my-instance-template\", \"placement_target\": {\"id\": \"0717-1e09281b-f177-46fb-baf1-bc152b2e391a\"}, \"profile\": {\"name\": \"bx2-4x16\"}, \"reservation_affinity\": {\"policy\": \"automatic\", \"pool\": [{\"id\": \"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\"}]}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"total_volume_bandwidth\": 500, \"user_data\": \"userData\", \"volume_attachments\": [{\"delete_volume_on_instance_delete\": false, \"name\": \"my-volume-attachment\", \"volume\": {\"id\": \"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\"}}], \"vpc\": {\"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\"}, \"boot_volume_attachment\": {\"delete_volume_on_instance_delete\": true, \"name\": \"my-volume-attachment\", \"volume\": {\"bandwidth\": 1000, \"capacity\": 100, \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"iops\": 10000, \"name\": \"my-volume\", \"profile\": {\"name\": \"general-purpose\"}, \"resource_group\": {\"id\": \"fee82deba12e4c0fb69c3b09d1f12345\"}, \"user_tags\": [\"userTags\"]}}, \"image\": {\"id\": \"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\"}, \"zone\": {\"name\": \"us-south-1\"}, \"network_attachments\": [{\"name\": \"my-instance-network-attachment\", \"virtual_network_interface\": {\"allow_ip_spoofing\": true, \"auto_delete\": false, \"enable_infrastructure_nat\": true, \"ips\": [{\"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\"}], \"name\": \"my-virtual-network-interface\", \"primary_ip\": {\"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\"}, \"protocol_state_filtering_mode\": \"auto\", \"resource_group\": {\"id\": \"fee82deba12e4c0fb69c3b09d1f12345\"}, \"security_groups\": [{\"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\"}], \"subnet\": {\"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\"}}}], \"primary_network_attachment\": {\"name\": \"my-instance-network-attachment\", \"virtual_network_interface\": {\"allow_ip_spoofing\": true, \"auto_delete\": false, \"enable_infrastructure_nat\": true, \"ips\": [{\"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\"}], \"name\": \"my-virtual-network-interface\", \"primary_ip\": {\"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\"}, \"protocol_state_filtering_mode\": \"auto\", \"resource_group\": {\"id\": \"fee82deba12e4c0fb69c3b09d1f12345\"}, \"security_groups\": [{\"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\"}], \"subnet\": {\"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\"}}}}";
    String getInstanceTemplatePath = "/instance/templates/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetInstanceTemplateOptions model
    GetInstanceTemplateOptions getInstanceTemplateOptionsModel = new GetInstanceTemplateOptions.Builder()
      .id("testString")
      .build();

    // Invoke getInstanceTemplate() with a valid options model and verify the result
    Response<InstanceTemplate> response = vpcService.getInstanceTemplate(getInstanceTemplateOptionsModel).execute();
    assertNotNull(response);
    InstanceTemplate responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getInstanceTemplatePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getInstanceTemplate operation with and without retries enabled
  @Test
  public void testGetInstanceTemplateWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetInstanceTemplateWOptions();

    vpcService.disableRetries();
    testGetInstanceTemplateWOptions();
  }

  // Test the getInstanceTemplate operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetInstanceTemplateNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getInstanceTemplate(null).execute();
  }

  // Test the updateInstanceTemplate operation with a valid options model parameter
  @Test
  public void testUpdateInstanceTemplateWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"availability_policy\": {\"host_failure\": \"restart\"}, \"cluster_network_attachments\": [{\"cluster_network_interface\": {\"auto_delete\": false, \"name\": \"my-cluster-network-interface\", \"primary_ip\": {\"id\": \"0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\"}, \"subnet\": {\"id\": \"0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\"}}, \"name\": \"my-instance-network-attachment\"}], \"confidential_compute_mode\": \"disabled\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance-template:0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\", \"default_trusted_profile\": {\"auto_link\": false, \"target\": {\"id\": \"Profile-9fd84246-7df4-4667-94e4-8ecde51d5ac5\"}}, \"enable_secure_boot\": true, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\", \"id\": \"0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\", \"keys\": [{\"id\": \"r006-82679077-ac3b-4c10-be16-63e9c21f0f45\"}], \"metadata_service\": {\"enabled\": false, \"protocol\": \"https\", \"response_hop_limit\": 2}, \"name\": \"my-instance-template\", \"placement_target\": {\"id\": \"0717-1e09281b-f177-46fb-baf1-bc152b2e391a\"}, \"profile\": {\"name\": \"bx2-4x16\"}, \"reservation_affinity\": {\"policy\": \"automatic\", \"pool\": [{\"id\": \"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\"}]}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"total_volume_bandwidth\": 500, \"user_data\": \"userData\", \"volume_attachments\": [{\"delete_volume_on_instance_delete\": false, \"name\": \"my-volume-attachment\", \"volume\": {\"id\": \"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\"}}], \"vpc\": {\"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\"}, \"boot_volume_attachment\": {\"delete_volume_on_instance_delete\": true, \"name\": \"my-volume-attachment\", \"volume\": {\"bandwidth\": 1000, \"capacity\": 100, \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"iops\": 10000, \"name\": \"my-volume\", \"profile\": {\"name\": \"general-purpose\"}, \"resource_group\": {\"id\": \"fee82deba12e4c0fb69c3b09d1f12345\"}, \"user_tags\": [\"userTags\"]}}, \"image\": {\"id\": \"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\"}, \"zone\": {\"name\": \"us-south-1\"}, \"network_attachments\": [{\"name\": \"my-instance-network-attachment\", \"virtual_network_interface\": {\"allow_ip_spoofing\": true, \"auto_delete\": false, \"enable_infrastructure_nat\": true, \"ips\": [{\"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\"}], \"name\": \"my-virtual-network-interface\", \"primary_ip\": {\"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\"}, \"protocol_state_filtering_mode\": \"auto\", \"resource_group\": {\"id\": \"fee82deba12e4c0fb69c3b09d1f12345\"}, \"security_groups\": [{\"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\"}], \"subnet\": {\"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\"}}}], \"primary_network_attachment\": {\"name\": \"my-instance-network-attachment\", \"virtual_network_interface\": {\"allow_ip_spoofing\": true, \"auto_delete\": false, \"enable_infrastructure_nat\": true, \"ips\": [{\"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\"}], \"name\": \"my-virtual-network-interface\", \"primary_ip\": {\"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\"}, \"protocol_state_filtering_mode\": \"auto\", \"resource_group\": {\"id\": \"fee82deba12e4c0fb69c3b09d1f12345\"}, \"security_groups\": [{\"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\"}], \"subnet\": {\"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\"}}}}";
    String updateInstanceTemplatePath = "/instance/templates/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the InstanceTemplatePatch model
    InstanceTemplatePatch instanceTemplatePatchModel = new InstanceTemplatePatch.Builder()
      .name("my-instance-template-updated")
      .build();
    Map<String, Object> instanceTemplatePatchModelAsPatch = instanceTemplatePatchModel.asPatch();

    // Construct an instance of the UpdateInstanceTemplateOptions model
    UpdateInstanceTemplateOptions updateInstanceTemplateOptionsModel = new UpdateInstanceTemplateOptions.Builder()
      .id("testString")
      .instanceTemplatePatch(instanceTemplatePatchModelAsPatch)
      .build();

    // Invoke updateInstanceTemplate() with a valid options model and verify the result
    Response<InstanceTemplate> response = vpcService.updateInstanceTemplate(updateInstanceTemplateOptionsModel).execute();
    assertNotNull(response);
    InstanceTemplate responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateInstanceTemplatePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateInstanceTemplate operation with and without retries enabled
  @Test
  public void testUpdateInstanceTemplateWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateInstanceTemplateWOptions();

    vpcService.disableRetries();
    testUpdateInstanceTemplateWOptions();
  }

  // Test the updateInstanceTemplate operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateInstanceTemplateNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateInstanceTemplate(null).execute();
  }

  // Test the listInstances operation with a valid options model parameter
  @Test
  public void testListInstancesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"instances\": [{\"availability_policy\": {\"host_failure\": \"restart\"}, \"bandwidth\": 1000, \"boot_volume_attachment\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"device\": {\"id\": \"id\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/volume_attachments/0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"id\": \"0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"name\": \"my-volume-attachment\", \"volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\", \"resource_type\": \"volume\"}}, \"catalog_offering\": {\"plan\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:51c9e0db-2911-45a6-adb0-ac5332d27cf2:plan:sw.51c9e0db-2911-45a6-adb0-ac5332d27cf2.772c0dbe-aa62-482e-adbe-a3fc20101e0e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}}, \"version\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}}, \"cluster_network\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::cluster-network:0717-da0df18c-7598-4633-a648-fdaac28a5573\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573\", \"id\": \"0717-da0df18c-7598-4633-a648-fdaac28a5573\", \"name\": \"my-cluster-network\", \"resource_type\": \"cluster_network\"}, \"cluster_network_attachments\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\", \"id\": \"0717-fb880975-db45-4459-8548-64e3995ac213\", \"name\": \"my-instance-network-attachment\", \"resource_type\": \"instance_cluster_network_attachment\"}], \"confidential_compute_mode\": \"disabled\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"dedicated_host\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host:0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-host\", \"resource_type\": \"dedicated_host\"}, \"disks\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"interface_type\": \"nvme\", \"name\": \"my-instance-disk\", \"resource_type\": \"instance_disk\", \"size\": 100}], \"enable_secure_boot\": true, \"gpu\": {\"count\": 1, \"manufacturer\": \"amd\", \"memory\": 1, \"model\": \"Tesla V100\"}, \"health_reasons\": [{\"code\": \"reservation_expired\", \"message\": \"The reservation cannot be used because it has expired.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-server-health-status-reasons\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"id\": \"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"image\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"name\": \"my-image\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"image\"}, \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"memory\": 64, \"metadata_service\": {\"enabled\": false, \"protocol\": \"http\", \"response_hop_limit\": 1}, \"name\": \"my-instance\", \"network_attachments\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_attachments/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-attachment\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"instance_network_attachment\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"virtual_network_interface\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"name\": \"my-virtual-network-interface\", \"resource_type\": \"virtual_network_interface\"}}], \"network_interfaces\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}}], \"numa_count\": 2, \"placement_target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host-group:0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"id\": \"0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"name\": \"my-dedicated-host-group\", \"resource_type\": \"dedicated_host_group\"}, \"primary_network_attachment\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_attachments/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-attachment\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"instance_network_attachment\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"virtual_network_interface\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"name\": \"my-virtual-network-interface\", \"resource_type\": \"virtual_network_interface\"}}, \"primary_network_interface\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}}, \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\", \"resource_type\": \"instance_profile\"}, \"reservation\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"id\": \"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"name\": \"my-reservation\", \"resource_type\": \"reservation\"}, \"reservation_affinity\": {\"policy\": \"automatic\", \"pool\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"id\": \"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"name\": \"my-reservation\", \"resource_type\": \"reservation\"}]}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"instance\", \"startable\": false, \"status\": \"deleting\", \"status_reasons\": [{\"code\": \"cannot_start_storage\", \"message\": \"The virtual server instance is unusable because the encryption key for the boot volume\nhas been deleted\", \"more_info\": \"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}], \"total_network_bandwidth\": 500, \"total_volume_bandwidth\": 500, \"vcpu\": {\"architecture\": \"amd64\", \"count\": 4, \"manufacturer\": \"intel\"}, \"volume_attachments\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"device\": {\"id\": \"id\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/volume_attachments/0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"id\": \"0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"name\": \"my-volume-attachment\", \"volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\", \"resource_type\": \"volume\"}}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listInstancesPath = "/instances";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListInstancesOptions model
    ListInstancesOptions listInstancesOptionsModel = new ListInstancesOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("my-name")
      .clusterNetworkId("testString")
      .clusterNetworkCrn("crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::cluster-network:0717-da0df18c-7598-4633-a648-fdaac28a5573")
      .clusterNetworkName("my-cluster-network")
      .dedicatedHostId("testString")
      .dedicatedHostCrn("crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host:0717-1e09281b-f177-46fb-baf1-bc152b2e391a")
      .dedicatedHostName("my-dedicated-host")
      .placementGroupId("testString")
      .placementGroupCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::placement-group:r006-418fe842-a3e9-47b9-a938-1aa5bd632871")
      .placementGroupName("my-placement-group")
      .reservationAffinityPolicy("automatic")
      .reservationId("testString")
      .reservationCrn("crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63")
      .reservationName("my-reservation")
      .vpcId("testString")
      .vpcCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .vpcName("my-vpc")
      .build();

    // Invoke listInstances() with a valid options model and verify the result
    Response<InstanceCollection> response = vpcService.listInstances(listInstancesOptionsModel).execute();
    assertNotNull(response);
    InstanceCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listInstancesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
    assertEquals(query.get("name"), "my-name");
    assertEquals(query.get("cluster_network.id"), "testString");
    assertEquals(query.get("cluster_network.crn"), "crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::cluster-network:0717-da0df18c-7598-4633-a648-fdaac28a5573");
    assertEquals(query.get("cluster_network.name"), "my-cluster-network");
    assertEquals(query.get("dedicated_host.id"), "testString");
    assertEquals(query.get("dedicated_host.crn"), "crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host:0717-1e09281b-f177-46fb-baf1-bc152b2e391a");
    assertEquals(query.get("dedicated_host.name"), "my-dedicated-host");
    assertEquals(query.get("placement_group.id"), "testString");
    assertEquals(query.get("placement_group.crn"), "crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::placement-group:r006-418fe842-a3e9-47b9-a938-1aa5bd632871");
    assertEquals(query.get("placement_group.name"), "my-placement-group");
    assertEquals(query.get("reservation_affinity.policy"), "automatic");
    assertEquals(query.get("reservation.id"), "testString");
    assertEquals(query.get("reservation.crn"), "crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63");
    assertEquals(query.get("reservation.name"), "my-reservation");
    assertEquals(query.get("vpc.id"), "testString");
    assertEquals(query.get("vpc.crn"), "crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b");
    assertEquals(query.get("vpc.name"), "my-vpc");
  }

  // Test the listInstances operation with and without retries enabled
  @Test
  public void testListInstancesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListInstancesWOptions();

    vpcService.disableRetries();
    testListInstancesWOptions();
  }

  // Test the listInstances operation using the InstancesPager.getNext() method
  @Test
  public void testListInstancesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"instances\":[{\"availability_policy\":{\"host_failure\":\"restart\"},\"bandwidth\":1000,\"boot_volume_attachment\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"device\":{\"id\":\"id\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/volume_attachments/0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"id\":\"0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"name\":\"my-volume-attachment\",\"volume\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\",\"resource_type\":\"volume\"}},\"catalog_offering\":{\"plan\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:51c9e0db-2911-45a6-adb0-ac5332d27cf2:plan:sw.51c9e0db-2911-45a6-adb0-ac5332d27cf2.772c0dbe-aa62-482e-adbe-a3fc20101e0e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}},\"version\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}},\"cluster_network\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::cluster-network:0717-da0df18c-7598-4633-a648-fdaac28a5573\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573\",\"id\":\"0717-da0df18c-7598-4633-a648-fdaac28a5573\",\"name\":\"my-cluster-network\",\"resource_type\":\"cluster_network\"},\"cluster_network_attachments\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\",\"id\":\"0717-fb880975-db45-4459-8548-64e3995ac213\",\"name\":\"my-instance-network-attachment\",\"resource_type\":\"instance_cluster_network_attachment\"}],\"confidential_compute_mode\":\"disabled\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"dedicated_host\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host:0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-host\",\"resource_type\":\"dedicated_host\"},\"disks\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"interface_type\":\"nvme\",\"name\":\"my-instance-disk\",\"resource_type\":\"instance_disk\",\"size\":100}],\"enable_secure_boot\":true,\"gpu\":{\"count\":1,\"manufacturer\":\"amd\",\"memory\":1,\"model\":\"Tesla V100\"},\"health_reasons\":[{\"code\":\"reservation_expired\",\"message\":\"The reservation cannot be used because it has expired.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-server-health-status-reasons\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"id\":\"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"image\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"id\":\"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"name\":\"my-image\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"image\"},\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"memory\":64,\"metadata_service\":{\"enabled\":false,\"protocol\":\"http\",\"response_hop_limit\":1},\"name\":\"my-instance\",\"network_attachments\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_attachments/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"id\":\"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"name\":\"my-instance-network-attachment\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"instance_network_attachment\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"virtual_network_interface\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"id\":\"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"name\":\"my-virtual-network-interface\",\"resource_type\":\"virtual_network_interface\"}}],\"network_interfaces\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"id\":\"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"name\":\"my-instance-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}}],\"numa_count\":2,\"placement_target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host-group:0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"id\":\"0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"name\":\"my-dedicated-host-group\",\"resource_type\":\"dedicated_host_group\"},\"primary_network_attachment\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_attachments/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"id\":\"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"name\":\"my-instance-network-attachment\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"instance_network_attachment\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"virtual_network_interface\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"id\":\"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"name\":\"my-virtual-network-interface\",\"resource_type\":\"virtual_network_interface\"}},\"primary_network_interface\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"id\":\"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"name\":\"my-instance-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}},\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\",\"resource_type\":\"instance_profile\"},\"reservation\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"id\":\"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"name\":\"my-reservation\",\"resource_type\":\"reservation\"},\"reservation_affinity\":{\"policy\":\"automatic\",\"pool\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"id\":\"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"name\":\"my-reservation\",\"resource_type\":\"reservation\"}]},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"instance\",\"startable\":false,\"status\":\"deleting\",\"status_reasons\":[{\"code\":\"cannot_start_storage\",\"message\":\"The virtual server instance is unusable because the encryption key for the boot volume\\nhas been deleted\",\"more_info\":\"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}],\"total_network_bandwidth\":500,\"total_volume_bandwidth\":500,\"vcpu\":{\"architecture\":\"amd64\",\"count\":4,\"manufacturer\":\"intel\"},\"volume_attachments\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"device\":{\"id\":\"id\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/volume_attachments/0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"id\":\"0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"name\":\"my-volume-attachment\",\"volume\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\",\"resource_type\":\"volume\"}}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"instances\":[{\"availability_policy\":{\"host_failure\":\"restart\"},\"bandwidth\":1000,\"boot_volume_attachment\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"device\":{\"id\":\"id\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/volume_attachments/0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"id\":\"0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"name\":\"my-volume-attachment\",\"volume\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\",\"resource_type\":\"volume\"}},\"catalog_offering\":{\"plan\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:51c9e0db-2911-45a6-adb0-ac5332d27cf2:plan:sw.51c9e0db-2911-45a6-adb0-ac5332d27cf2.772c0dbe-aa62-482e-adbe-a3fc20101e0e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}},\"version\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}},\"cluster_network\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::cluster-network:0717-da0df18c-7598-4633-a648-fdaac28a5573\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573\",\"id\":\"0717-da0df18c-7598-4633-a648-fdaac28a5573\",\"name\":\"my-cluster-network\",\"resource_type\":\"cluster_network\"},\"cluster_network_attachments\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\",\"id\":\"0717-fb880975-db45-4459-8548-64e3995ac213\",\"name\":\"my-instance-network-attachment\",\"resource_type\":\"instance_cluster_network_attachment\"}],\"confidential_compute_mode\":\"disabled\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"dedicated_host\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host:0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-host\",\"resource_type\":\"dedicated_host\"},\"disks\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"interface_type\":\"nvme\",\"name\":\"my-instance-disk\",\"resource_type\":\"instance_disk\",\"size\":100}],\"enable_secure_boot\":true,\"gpu\":{\"count\":1,\"manufacturer\":\"amd\",\"memory\":1,\"model\":\"Tesla V100\"},\"health_reasons\":[{\"code\":\"reservation_expired\",\"message\":\"The reservation cannot be used because it has expired.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-server-health-status-reasons\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"id\":\"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"image\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"id\":\"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"name\":\"my-image\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"image\"},\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"memory\":64,\"metadata_service\":{\"enabled\":false,\"protocol\":\"http\",\"response_hop_limit\":1},\"name\":\"my-instance\",\"network_attachments\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_attachments/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"id\":\"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"name\":\"my-instance-network-attachment\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"instance_network_attachment\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"virtual_network_interface\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"id\":\"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"name\":\"my-virtual-network-interface\",\"resource_type\":\"virtual_network_interface\"}}],\"network_interfaces\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"id\":\"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"name\":\"my-instance-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}}],\"numa_count\":2,\"placement_target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host-group:0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"id\":\"0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"name\":\"my-dedicated-host-group\",\"resource_type\":\"dedicated_host_group\"},\"primary_network_attachment\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_attachments/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"id\":\"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"name\":\"my-instance-network-attachment\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"instance_network_attachment\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"virtual_network_interface\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"id\":\"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"name\":\"my-virtual-network-interface\",\"resource_type\":\"virtual_network_interface\"}},\"primary_network_interface\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"id\":\"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"name\":\"my-instance-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}},\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\",\"resource_type\":\"instance_profile\"},\"reservation\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"id\":\"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"name\":\"my-reservation\",\"resource_type\":\"reservation\"},\"reservation_affinity\":{\"policy\":\"automatic\",\"pool\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"id\":\"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"name\":\"my-reservation\",\"resource_type\":\"reservation\"}]},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"instance\",\"startable\":false,\"status\":\"deleting\",\"status_reasons\":[{\"code\":\"cannot_start_storage\",\"message\":\"The virtual server instance is unusable because the encryption key for the boot volume\\nhas been deleted\",\"more_info\":\"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}],\"total_network_bandwidth\":500,\"total_volume_bandwidth\":500,\"vcpu\":{\"architecture\":\"amd64\",\"count\":4,\"manufacturer\":\"intel\"},\"volume_attachments\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"device\":{\"id\":\"id\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/volume_attachments/0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"id\":\"0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"name\":\"my-volume-attachment\",\"volume\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\",\"resource_type\":\"volume\"}}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListInstancesOptions listInstancesOptions = new ListInstancesOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("my-name")
      .clusterNetworkId("testString")
      .clusterNetworkCrn("crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::cluster-network:0717-da0df18c-7598-4633-a648-fdaac28a5573")
      .clusterNetworkName("my-cluster-network")
      .dedicatedHostId("testString")
      .dedicatedHostCrn("crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host:0717-1e09281b-f177-46fb-baf1-bc152b2e391a")
      .dedicatedHostName("my-dedicated-host")
      .placementGroupId("testString")
      .placementGroupCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::placement-group:r006-418fe842-a3e9-47b9-a938-1aa5bd632871")
      .placementGroupName("my-placement-group")
      .reservationAffinityPolicy("automatic")
      .reservationId("testString")
      .reservationCrn("crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63")
      .reservationName("my-reservation")
      .vpcId("testString")
      .vpcCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .vpcName("my-vpc")
      .build();

    List<Instance> allResults = new ArrayList<>();
    InstancesPager pager = new InstancesPager(vpcService, listInstancesOptions);
    while (pager.hasNext()) {
      List<Instance> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listInstances operation using the InstancesPager.getAll() method
  @Test
  public void testListInstancesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"instances\":[{\"availability_policy\":{\"host_failure\":\"restart\"},\"bandwidth\":1000,\"boot_volume_attachment\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"device\":{\"id\":\"id\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/volume_attachments/0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"id\":\"0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"name\":\"my-volume-attachment\",\"volume\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\",\"resource_type\":\"volume\"}},\"catalog_offering\":{\"plan\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:51c9e0db-2911-45a6-adb0-ac5332d27cf2:plan:sw.51c9e0db-2911-45a6-adb0-ac5332d27cf2.772c0dbe-aa62-482e-adbe-a3fc20101e0e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}},\"version\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}},\"cluster_network\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::cluster-network:0717-da0df18c-7598-4633-a648-fdaac28a5573\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573\",\"id\":\"0717-da0df18c-7598-4633-a648-fdaac28a5573\",\"name\":\"my-cluster-network\",\"resource_type\":\"cluster_network\"},\"cluster_network_attachments\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\",\"id\":\"0717-fb880975-db45-4459-8548-64e3995ac213\",\"name\":\"my-instance-network-attachment\",\"resource_type\":\"instance_cluster_network_attachment\"}],\"confidential_compute_mode\":\"disabled\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"dedicated_host\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host:0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-host\",\"resource_type\":\"dedicated_host\"},\"disks\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"interface_type\":\"nvme\",\"name\":\"my-instance-disk\",\"resource_type\":\"instance_disk\",\"size\":100}],\"enable_secure_boot\":true,\"gpu\":{\"count\":1,\"manufacturer\":\"amd\",\"memory\":1,\"model\":\"Tesla V100\"},\"health_reasons\":[{\"code\":\"reservation_expired\",\"message\":\"The reservation cannot be used because it has expired.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-server-health-status-reasons\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"id\":\"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"image\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"id\":\"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"name\":\"my-image\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"image\"},\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"memory\":64,\"metadata_service\":{\"enabled\":false,\"protocol\":\"http\",\"response_hop_limit\":1},\"name\":\"my-instance\",\"network_attachments\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_attachments/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"id\":\"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"name\":\"my-instance-network-attachment\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"instance_network_attachment\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"virtual_network_interface\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"id\":\"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"name\":\"my-virtual-network-interface\",\"resource_type\":\"virtual_network_interface\"}}],\"network_interfaces\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"id\":\"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"name\":\"my-instance-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}}],\"numa_count\":2,\"placement_target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host-group:0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"id\":\"0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"name\":\"my-dedicated-host-group\",\"resource_type\":\"dedicated_host_group\"},\"primary_network_attachment\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_attachments/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"id\":\"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"name\":\"my-instance-network-attachment\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"instance_network_attachment\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"virtual_network_interface\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"id\":\"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"name\":\"my-virtual-network-interface\",\"resource_type\":\"virtual_network_interface\"}},\"primary_network_interface\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"id\":\"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"name\":\"my-instance-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}},\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\",\"resource_type\":\"instance_profile\"},\"reservation\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"id\":\"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"name\":\"my-reservation\",\"resource_type\":\"reservation\"},\"reservation_affinity\":{\"policy\":\"automatic\",\"pool\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"id\":\"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"name\":\"my-reservation\",\"resource_type\":\"reservation\"}]},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"instance\",\"startable\":false,\"status\":\"deleting\",\"status_reasons\":[{\"code\":\"cannot_start_storage\",\"message\":\"The virtual server instance is unusable because the encryption key for the boot volume\\nhas been deleted\",\"more_info\":\"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}],\"total_network_bandwidth\":500,\"total_volume_bandwidth\":500,\"vcpu\":{\"architecture\":\"amd64\",\"count\":4,\"manufacturer\":\"intel\"},\"volume_attachments\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"device\":{\"id\":\"id\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/volume_attachments/0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"id\":\"0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"name\":\"my-volume-attachment\",\"volume\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\",\"resource_type\":\"volume\"}}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"instances\":[{\"availability_policy\":{\"host_failure\":\"restart\"},\"bandwidth\":1000,\"boot_volume_attachment\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"device\":{\"id\":\"id\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/volume_attachments/0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"id\":\"0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"name\":\"my-volume-attachment\",\"volume\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\",\"resource_type\":\"volume\"}},\"catalog_offering\":{\"plan\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:51c9e0db-2911-45a6-adb0-ac5332d27cf2:plan:sw.51c9e0db-2911-45a6-adb0-ac5332d27cf2.772c0dbe-aa62-482e-adbe-a3fc20101e0e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}},\"version\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}},\"cluster_network\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::cluster-network:0717-da0df18c-7598-4633-a648-fdaac28a5573\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573\",\"id\":\"0717-da0df18c-7598-4633-a648-fdaac28a5573\",\"name\":\"my-cluster-network\",\"resource_type\":\"cluster_network\"},\"cluster_network_attachments\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\",\"id\":\"0717-fb880975-db45-4459-8548-64e3995ac213\",\"name\":\"my-instance-network-attachment\",\"resource_type\":\"instance_cluster_network_attachment\"}],\"confidential_compute_mode\":\"disabled\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"dedicated_host\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host:0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-host\",\"resource_type\":\"dedicated_host\"},\"disks\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"interface_type\":\"nvme\",\"name\":\"my-instance-disk\",\"resource_type\":\"instance_disk\",\"size\":100}],\"enable_secure_boot\":true,\"gpu\":{\"count\":1,\"manufacturer\":\"amd\",\"memory\":1,\"model\":\"Tesla V100\"},\"health_reasons\":[{\"code\":\"reservation_expired\",\"message\":\"The reservation cannot be used because it has expired.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-server-health-status-reasons\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"id\":\"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"image\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"id\":\"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"name\":\"my-image\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"image\"},\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"memory\":64,\"metadata_service\":{\"enabled\":false,\"protocol\":\"http\",\"response_hop_limit\":1},\"name\":\"my-instance\",\"network_attachments\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_attachments/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"id\":\"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"name\":\"my-instance-network-attachment\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"instance_network_attachment\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"virtual_network_interface\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"id\":\"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"name\":\"my-virtual-network-interface\",\"resource_type\":\"virtual_network_interface\"}}],\"network_interfaces\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"id\":\"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"name\":\"my-instance-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}}],\"numa_count\":2,\"placement_target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host-group:0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"id\":\"0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"name\":\"my-dedicated-host-group\",\"resource_type\":\"dedicated_host_group\"},\"primary_network_attachment\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_attachments/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"id\":\"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"name\":\"my-instance-network-attachment\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"instance_network_attachment\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"virtual_network_interface\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"id\":\"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"name\":\"my-virtual-network-interface\",\"resource_type\":\"virtual_network_interface\"}},\"primary_network_interface\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"id\":\"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"name\":\"my-instance-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}},\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\",\"resource_type\":\"instance_profile\"},\"reservation\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"id\":\"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"name\":\"my-reservation\",\"resource_type\":\"reservation\"},\"reservation_affinity\":{\"policy\":\"automatic\",\"pool\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"id\":\"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"name\":\"my-reservation\",\"resource_type\":\"reservation\"}]},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"instance\",\"startable\":false,\"status\":\"deleting\",\"status_reasons\":[{\"code\":\"cannot_start_storage\",\"message\":\"The virtual server instance is unusable because the encryption key for the boot volume\\nhas been deleted\",\"more_info\":\"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}],\"total_network_bandwidth\":500,\"total_volume_bandwidth\":500,\"vcpu\":{\"architecture\":\"amd64\",\"count\":4,\"manufacturer\":\"intel\"},\"volume_attachments\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"device\":{\"id\":\"id\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/volume_attachments/0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"id\":\"0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"name\":\"my-volume-attachment\",\"volume\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\",\"resource_type\":\"volume\"}}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListInstancesOptions listInstancesOptions = new ListInstancesOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("my-name")
      .clusterNetworkId("testString")
      .clusterNetworkCrn("crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::cluster-network:0717-da0df18c-7598-4633-a648-fdaac28a5573")
      .clusterNetworkName("my-cluster-network")
      .dedicatedHostId("testString")
      .dedicatedHostCrn("crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host:0717-1e09281b-f177-46fb-baf1-bc152b2e391a")
      .dedicatedHostName("my-dedicated-host")
      .placementGroupId("testString")
      .placementGroupCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::placement-group:r006-418fe842-a3e9-47b9-a938-1aa5bd632871")
      .placementGroupName("my-placement-group")
      .reservationAffinityPolicy("automatic")
      .reservationId("testString")
      .reservationCrn("crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63")
      .reservationName("my-reservation")
      .vpcId("testString")
      .vpcCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .vpcName("my-vpc")
      .build();

    InstancesPager pager = new InstancesPager(vpcService, listInstancesOptions);
    List<Instance> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createInstance operation with a valid options model parameter
  @Test
  public void testCreateInstanceWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"availability_policy\": {\"host_failure\": \"restart\"}, \"bandwidth\": 1000, \"boot_volume_attachment\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"device\": {\"id\": \"id\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/volume_attachments/0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"id\": \"0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"name\": \"my-volume-attachment\", \"volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\", \"resource_type\": \"volume\"}}, \"catalog_offering\": {\"plan\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:51c9e0db-2911-45a6-adb0-ac5332d27cf2:plan:sw.51c9e0db-2911-45a6-adb0-ac5332d27cf2.772c0dbe-aa62-482e-adbe-a3fc20101e0e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}}, \"version\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}}, \"cluster_network\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::cluster-network:0717-da0df18c-7598-4633-a648-fdaac28a5573\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573\", \"id\": \"0717-da0df18c-7598-4633-a648-fdaac28a5573\", \"name\": \"my-cluster-network\", \"resource_type\": \"cluster_network\"}, \"cluster_network_attachments\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\", \"id\": \"0717-fb880975-db45-4459-8548-64e3995ac213\", \"name\": \"my-instance-network-attachment\", \"resource_type\": \"instance_cluster_network_attachment\"}], \"confidential_compute_mode\": \"disabled\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"dedicated_host\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host:0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-host\", \"resource_type\": \"dedicated_host\"}, \"disks\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"interface_type\": \"nvme\", \"name\": \"my-instance-disk\", \"resource_type\": \"instance_disk\", \"size\": 100}], \"enable_secure_boot\": true, \"gpu\": {\"count\": 1, \"manufacturer\": \"amd\", \"memory\": 1, \"model\": \"Tesla V100\"}, \"health_reasons\": [{\"code\": \"reservation_expired\", \"message\": \"The reservation cannot be used because it has expired.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-server-health-status-reasons\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"id\": \"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"image\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"name\": \"my-image\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"image\"}, \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"memory\": 64, \"metadata_service\": {\"enabled\": false, \"protocol\": \"http\", \"response_hop_limit\": 1}, \"name\": \"my-instance\", \"network_attachments\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_attachments/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-attachment\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"instance_network_attachment\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"virtual_network_interface\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"name\": \"my-virtual-network-interface\", \"resource_type\": \"virtual_network_interface\"}}], \"network_interfaces\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}}], \"numa_count\": 2, \"placement_target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host-group:0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"id\": \"0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"name\": \"my-dedicated-host-group\", \"resource_type\": \"dedicated_host_group\"}, \"primary_network_attachment\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_attachments/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-attachment\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"instance_network_attachment\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"virtual_network_interface\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"name\": \"my-virtual-network-interface\", \"resource_type\": \"virtual_network_interface\"}}, \"primary_network_interface\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}}, \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\", \"resource_type\": \"instance_profile\"}, \"reservation\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"id\": \"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"name\": \"my-reservation\", \"resource_type\": \"reservation\"}, \"reservation_affinity\": {\"policy\": \"automatic\", \"pool\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"id\": \"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"name\": \"my-reservation\", \"resource_type\": \"reservation\"}]}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"instance\", \"startable\": false, \"status\": \"deleting\", \"status_reasons\": [{\"code\": \"cannot_start_storage\", \"message\": \"The virtual server instance is unusable because the encryption key for the boot volume\nhas been deleted\", \"more_info\": \"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}], \"total_network_bandwidth\": 500, \"total_volume_bandwidth\": 500, \"vcpu\": {\"architecture\": \"amd64\", \"count\": 4, \"manufacturer\": \"intel\"}, \"volume_attachments\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"device\": {\"id\": \"id\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/volume_attachments/0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"id\": \"0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"name\": \"my-volume-attachment\", \"volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\", \"resource_type\": \"volume\"}}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String createInstancePath = "/instances";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the InstanceAvailabilityPolicyPrototype model
    InstanceAvailabilityPolicyPrototype instanceAvailabilityPolicyPrototypeModel = new InstanceAvailabilityPolicyPrototype.Builder()
      .hostFailure("restart")
      .build();

    // Construct an instance of the ClusterNetworkInterfacePrimaryIPPrototypeClusterNetworkSubnetReservedIPPrototypeClusterNetworkInterfacePrimaryIPContext model
    ClusterNetworkInterfacePrimaryIPPrototypeClusterNetworkSubnetReservedIPPrototypeClusterNetworkInterfacePrimaryIPContext clusterNetworkInterfacePrimaryIpPrototypeModel = new ClusterNetworkInterfacePrimaryIPPrototypeClusterNetworkSubnetReservedIPPrototypeClusterNetworkInterfacePrimaryIPContext.Builder()
      .address("10.0.0.5")
      .autoDelete(false)
      .name("my-cluster-network-subnet-reserved-ip")
      .build();

    // Construct an instance of the ClusterNetworkSubnetIdentityById model
    ClusterNetworkSubnetIdentityById clusterNetworkSubnetIdentityModel = new ClusterNetworkSubnetIdentityById.Builder()
      .id("0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930")
      .build();

    // Construct an instance of the InstanceClusterNetworkAttachmentPrototypeClusterNetworkInterfaceInstanceClusterNetworkInterfacePrototypeInstanceClusterNetworkAttachment model
    InstanceClusterNetworkAttachmentPrototypeClusterNetworkInterfaceInstanceClusterNetworkInterfacePrototypeInstanceClusterNetworkAttachment instanceClusterNetworkAttachmentPrototypeClusterNetworkInterfaceModel = new InstanceClusterNetworkAttachmentPrototypeClusterNetworkInterfaceInstanceClusterNetworkInterfacePrototypeInstanceClusterNetworkAttachment.Builder()
      .autoDelete(false)
      .name("my-cluster-network-interface")
      .primaryIp(clusterNetworkInterfacePrimaryIpPrototypeModel)
      .subnet(clusterNetworkSubnetIdentityModel)
      .build();

    // Construct an instance of the InstanceClusterNetworkAttachmentPrototypeInstanceContext model
    InstanceClusterNetworkAttachmentPrototypeInstanceContext instanceClusterNetworkAttachmentPrototypeInstanceContextModel = new InstanceClusterNetworkAttachmentPrototypeInstanceContext.Builder()
      .clusterNetworkInterface(instanceClusterNetworkAttachmentPrototypeClusterNetworkInterfaceModel)
      .name("my-instance-network-attachment")
      .build();

    // Construct an instance of the TrustedProfileIdentityById model
    TrustedProfileIdentityById trustedProfileIdentityModel = new TrustedProfileIdentityById.Builder()
      .id("Profile-9fd84246-7df4-4667-94e4-8ecde51d5ac5")
      .build();

    // Construct an instance of the InstanceDefaultTrustedProfilePrototype model
    InstanceDefaultTrustedProfilePrototype instanceDefaultTrustedProfilePrototypeModel = new InstanceDefaultTrustedProfilePrototype.Builder()
      .autoLink(false)
      .target(trustedProfileIdentityModel)
      .build();

    // Construct an instance of the KeyIdentityById model
    KeyIdentityById keyIdentityModel = new KeyIdentityById.Builder()
      .id("r006-82679077-ac3b-4c10-be16-63e9c21f0f45")
      .build();

    // Construct an instance of the InstanceMetadataServicePrototype model
    InstanceMetadataServicePrototype instanceMetadataServicePrototypeModel = new InstanceMetadataServicePrototype.Builder()
      .enabled(false)
      .protocol("https")
      .responseHopLimit(Long.valueOf("2"))
      .build();

    // Construct an instance of the InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityById model
    InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityById instancePlacementTargetPrototypeModel = new InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityById.Builder()
      .id("r006-418fe842-a3e9-47b9-a938-1aa5bd632871")
      .build();

    // Construct an instance of the InstanceProfileIdentityByName model
    InstanceProfileIdentityByName instanceProfileIdentityModel = new InstanceProfileIdentityByName.Builder()
      .name("bx2-2x8")
      .build();

    // Construct an instance of the ReservationIdentityById model
    ReservationIdentityById reservationIdentityModel = new ReservationIdentityById.Builder()
      .id("0717-ba49df72-37b8-43ac-98da-f8e029de0e63")
      .build();

    // Construct an instance of the InstanceReservationAffinityPrototype model
    InstanceReservationAffinityPrototype instanceReservationAffinityPrototypeModel = new InstanceReservationAffinityPrototype.Builder()
      .policy("automatic")
      .pool(java.util.Arrays.asList(reservationIdentityModel))
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the VolumeProfileIdentityByName model
    VolumeProfileIdentityByName volumeProfileIdentityModel = new VolumeProfileIdentityByName.Builder()
      .name("5iops-tier")
      .build();

    // Construct an instance of the EncryptionKeyIdentityByCRN model
    EncryptionKeyIdentityByCRN encryptionKeyIdentityModel = new EncryptionKeyIdentityByCRN.Builder()
      .crn("crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")
      .build();

    // Construct an instance of the VolumeAttachmentPrototypeVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity model
    VolumeAttachmentPrototypeVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity volumeAttachmentPrototypeVolumeModel = new VolumeAttachmentPrototypeVolumeVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity.Builder()
      .bandwidth(Long.valueOf("1000"))
      .iops(Long.valueOf("10000"))
      .name("my-data-volume")
      .profile(volumeProfileIdentityModel)
      .resourceGroup(resourceGroupIdentityModel)
      .userTags(java.util.Arrays.asList())
      .capacity(Long.valueOf("1000"))
      .encryptionKey(encryptionKeyIdentityModel)
      .build();

    // Construct an instance of the VolumeAttachmentPrototype model
    VolumeAttachmentPrototype volumeAttachmentPrototypeModel = new VolumeAttachmentPrototype.Builder()
      .deleteVolumeOnInstanceDelete(false)
      .name("my-volume-attachment")
      .volume(volumeAttachmentPrototypeVolumeModel)
      .build();

    // Construct an instance of the VPCIdentityById model
    VPCIdentityById vpcIdentityModel = new VPCIdentityById.Builder()
      .id("r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .build();

    // Construct an instance of the VolumePrototypeInstanceByImageContext model
    VolumePrototypeInstanceByImageContext volumePrototypeInstanceByImageContextModel = new VolumePrototypeInstanceByImageContext.Builder()
      .bandwidth(Long.valueOf("1000"))
      .capacity(Long.valueOf("100"))
      .encryptionKey(encryptionKeyIdentityModel)
      .iops(Long.valueOf("10000"))
      .name("my-boot-volume")
      .profile(volumeProfileIdentityModel)
      .resourceGroup(resourceGroupIdentityModel)
      .userTags(java.util.Arrays.asList())
      .build();

    // Construct an instance of the VolumeAttachmentPrototypeInstanceByImageContext model
    VolumeAttachmentPrototypeInstanceByImageContext volumeAttachmentPrototypeInstanceByImageContextModel = new VolumeAttachmentPrototypeInstanceByImageContext.Builder()
      .deleteVolumeOnInstanceDelete(true)
      .name("my-volume-attachment")
      .volume(volumePrototypeInstanceByImageContextModel)
      .build();

    // Construct an instance of the ImageIdentityById model
    ImageIdentityById imageIdentityModel = new ImageIdentityById.Builder()
      .id("r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8")
      .build();

    // Construct an instance of the ZoneIdentityByName model
    ZoneIdentityByName zoneIdentityModel = new ZoneIdentityByName.Builder()
      .name("us-south-1")
      .build();

    // Construct an instance of the NetworkInterfaceIPPrototypeReservedIPPrototypeNetworkInterfaceContext model
    NetworkInterfaceIPPrototypeReservedIPPrototypeNetworkInterfaceContext networkInterfaceIpPrototypeModel = new NetworkInterfaceIPPrototypeReservedIPPrototypeNetworkInterfaceContext.Builder()
      .address("10.0.0.5")
      .autoDelete(false)
      .name("my-reserved-ip")
      .build();

    // Construct an instance of the SecurityGroupIdentityById model
    SecurityGroupIdentityById securityGroupIdentityModel = new SecurityGroupIdentityById.Builder()
      .id("r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271")
      .build();

    // Construct an instance of the SubnetIdentityById model
    SubnetIdentityById subnetIdentityModel = new SubnetIdentityById.Builder()
      .id("0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
      .build();

    // Construct an instance of the NetworkInterfacePrototype model
    NetworkInterfacePrototype networkInterfacePrototypeModel = new NetworkInterfacePrototype.Builder()
      .allowIpSpoofing(true)
      .name("my-instance-network-interface")
      .primaryIp(networkInterfaceIpPrototypeModel)
      .securityGroups(java.util.Arrays.asList(securityGroupIdentityModel))
      .subnet(subnetIdentityModel)
      .build();

    // Construct an instance of the InstancePrototypeInstanceByImageInstanceByImageInstanceByNetworkInterface model
    InstancePrototypeInstanceByImageInstanceByImageInstanceByNetworkInterface instancePrototypeModel = new InstancePrototypeInstanceByImageInstanceByImageInstanceByNetworkInterface.Builder()
      .availabilityPolicy(instanceAvailabilityPolicyPrototypeModel)
      .clusterNetworkAttachments(java.util.Arrays.asList(instanceClusterNetworkAttachmentPrototypeInstanceContextModel))
      .confidentialComputeMode("disabled")
      .defaultTrustedProfile(instanceDefaultTrustedProfilePrototypeModel)
      .enableSecureBoot(true)
      .keys(java.util.Arrays.asList(keyIdentityModel))
      .metadataService(instanceMetadataServicePrototypeModel)
      .name("my-instance")
      .placementTarget(instancePlacementTargetPrototypeModel)
      .profile(instanceProfileIdentityModel)
      .reservationAffinity(instanceReservationAffinityPrototypeModel)
      .resourceGroup(resourceGroupIdentityModel)
      .totalVolumeBandwidth(Long.valueOf("500"))
      .userData("testString")
      .volumeAttachments(java.util.Arrays.asList(volumeAttachmentPrototypeModel))
      .vpc(vpcIdentityModel)
      .bootVolumeAttachment(volumeAttachmentPrototypeInstanceByImageContextModel)
      .image(imageIdentityModel)
      .zone(zoneIdentityModel)
      .networkInterfaces(java.util.Arrays.asList(networkInterfacePrototypeModel))
      .primaryNetworkInterface(networkInterfacePrototypeModel)
      .build();

    // Construct an instance of the CreateInstanceOptions model
    CreateInstanceOptions createInstanceOptionsModel = new CreateInstanceOptions.Builder()
      .instancePrototype(instancePrototypeModel)
      .build();

    // Invoke createInstance() with a valid options model and verify the result
    Response<Instance> response = vpcService.createInstance(createInstanceOptionsModel).execute();
    assertNotNull(response);
    Instance responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createInstancePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createInstance operation with and without retries enabled
  @Test
  public void testCreateInstanceWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateInstanceWOptions();

    vpcService.disableRetries();
    testCreateInstanceWOptions();
  }

  // Test the createInstance operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateInstanceNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createInstance(null).execute();
  }

  // Test the deleteInstance operation with a valid options model parameter
  @Test
  public void testDeleteInstanceWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteInstancePath = "/instances/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteInstanceOptions model
    DeleteInstanceOptions deleteInstanceOptionsModel = new DeleteInstanceOptions.Builder()
      .id("testString")
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke deleteInstance() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteInstance(deleteInstanceOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteInstancePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteInstance operation with and without retries enabled
  @Test
  public void testDeleteInstanceWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteInstanceWOptions();

    vpcService.disableRetries();
    testDeleteInstanceWOptions();
  }

  // Test the deleteInstance operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteInstanceNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteInstance(null).execute();
  }

  // Test the getInstance operation with a valid options model parameter
  @Test
  public void testGetInstanceWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"availability_policy\": {\"host_failure\": \"restart\"}, \"bandwidth\": 1000, \"boot_volume_attachment\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"device\": {\"id\": \"id\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/volume_attachments/0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"id\": \"0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"name\": \"my-volume-attachment\", \"volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\", \"resource_type\": \"volume\"}}, \"catalog_offering\": {\"plan\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:51c9e0db-2911-45a6-adb0-ac5332d27cf2:plan:sw.51c9e0db-2911-45a6-adb0-ac5332d27cf2.772c0dbe-aa62-482e-adbe-a3fc20101e0e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}}, \"version\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}}, \"cluster_network\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::cluster-network:0717-da0df18c-7598-4633-a648-fdaac28a5573\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573\", \"id\": \"0717-da0df18c-7598-4633-a648-fdaac28a5573\", \"name\": \"my-cluster-network\", \"resource_type\": \"cluster_network\"}, \"cluster_network_attachments\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\", \"id\": \"0717-fb880975-db45-4459-8548-64e3995ac213\", \"name\": \"my-instance-network-attachment\", \"resource_type\": \"instance_cluster_network_attachment\"}], \"confidential_compute_mode\": \"disabled\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"dedicated_host\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host:0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-host\", \"resource_type\": \"dedicated_host\"}, \"disks\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"interface_type\": \"nvme\", \"name\": \"my-instance-disk\", \"resource_type\": \"instance_disk\", \"size\": 100}], \"enable_secure_boot\": true, \"gpu\": {\"count\": 1, \"manufacturer\": \"amd\", \"memory\": 1, \"model\": \"Tesla V100\"}, \"health_reasons\": [{\"code\": \"reservation_expired\", \"message\": \"The reservation cannot be used because it has expired.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-server-health-status-reasons\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"id\": \"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"image\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"name\": \"my-image\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"image\"}, \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"memory\": 64, \"metadata_service\": {\"enabled\": false, \"protocol\": \"http\", \"response_hop_limit\": 1}, \"name\": \"my-instance\", \"network_attachments\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_attachments/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-attachment\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"instance_network_attachment\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"virtual_network_interface\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"name\": \"my-virtual-network-interface\", \"resource_type\": \"virtual_network_interface\"}}], \"network_interfaces\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}}], \"numa_count\": 2, \"placement_target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host-group:0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"id\": \"0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"name\": \"my-dedicated-host-group\", \"resource_type\": \"dedicated_host_group\"}, \"primary_network_attachment\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_attachments/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-attachment\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"instance_network_attachment\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"virtual_network_interface\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"name\": \"my-virtual-network-interface\", \"resource_type\": \"virtual_network_interface\"}}, \"primary_network_interface\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}}, \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\", \"resource_type\": \"instance_profile\"}, \"reservation\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"id\": \"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"name\": \"my-reservation\", \"resource_type\": \"reservation\"}, \"reservation_affinity\": {\"policy\": \"automatic\", \"pool\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"id\": \"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"name\": \"my-reservation\", \"resource_type\": \"reservation\"}]}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"instance\", \"startable\": false, \"status\": \"deleting\", \"status_reasons\": [{\"code\": \"cannot_start_storage\", \"message\": \"The virtual server instance is unusable because the encryption key for the boot volume\nhas been deleted\", \"more_info\": \"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}], \"total_network_bandwidth\": 500, \"total_volume_bandwidth\": 500, \"vcpu\": {\"architecture\": \"amd64\", \"count\": 4, \"manufacturer\": \"intel\"}, \"volume_attachments\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"device\": {\"id\": \"id\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/volume_attachments/0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"id\": \"0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"name\": \"my-volume-attachment\", \"volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\", \"resource_type\": \"volume\"}}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getInstancePath = "/instances/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetInstanceOptions model
    GetInstanceOptions getInstanceOptionsModel = new GetInstanceOptions.Builder()
      .id("testString")
      .build();

    // Invoke getInstance() with a valid options model and verify the result
    Response<Instance> response = vpcService.getInstance(getInstanceOptionsModel).execute();
    assertNotNull(response);
    Instance responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getInstancePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getInstance operation with and without retries enabled
  @Test
  public void testGetInstanceWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetInstanceWOptions();

    vpcService.disableRetries();
    testGetInstanceWOptions();
  }

  // Test the getInstance operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetInstanceNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getInstance(null).execute();
  }

  // Test the updateInstance operation with a valid options model parameter
  @Test
  public void testUpdateInstanceWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"availability_policy\": {\"host_failure\": \"restart\"}, \"bandwidth\": 1000, \"boot_volume_attachment\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"device\": {\"id\": \"id\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/volume_attachments/0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"id\": \"0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"name\": \"my-volume-attachment\", \"volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\", \"resource_type\": \"volume\"}}, \"catalog_offering\": {\"plan\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:51c9e0db-2911-45a6-adb0-ac5332d27cf2:plan:sw.51c9e0db-2911-45a6-adb0-ac5332d27cf2.772c0dbe-aa62-482e-adbe-a3fc20101e0e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}}, \"version\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}}, \"cluster_network\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::cluster-network:0717-da0df18c-7598-4633-a648-fdaac28a5573\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573\", \"id\": \"0717-da0df18c-7598-4633-a648-fdaac28a5573\", \"name\": \"my-cluster-network\", \"resource_type\": \"cluster_network\"}, \"cluster_network_attachments\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\", \"id\": \"0717-fb880975-db45-4459-8548-64e3995ac213\", \"name\": \"my-instance-network-attachment\", \"resource_type\": \"instance_cluster_network_attachment\"}], \"confidential_compute_mode\": \"disabled\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"dedicated_host\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host:0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-host\", \"resource_type\": \"dedicated_host\"}, \"disks\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"interface_type\": \"nvme\", \"name\": \"my-instance-disk\", \"resource_type\": \"instance_disk\", \"size\": 100}], \"enable_secure_boot\": true, \"gpu\": {\"count\": 1, \"manufacturer\": \"amd\", \"memory\": 1, \"model\": \"Tesla V100\"}, \"health_reasons\": [{\"code\": \"reservation_expired\", \"message\": \"The reservation cannot be used because it has expired.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-server-health-status-reasons\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"id\": \"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"image\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"name\": \"my-image\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"image\"}, \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"memory\": 64, \"metadata_service\": {\"enabled\": false, \"protocol\": \"http\", \"response_hop_limit\": 1}, \"name\": \"my-instance\", \"network_attachments\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_attachments/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-attachment\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"instance_network_attachment\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"virtual_network_interface\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"name\": \"my-virtual-network-interface\", \"resource_type\": \"virtual_network_interface\"}}], \"network_interfaces\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}}], \"numa_count\": 2, \"placement_target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host-group:0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"id\": \"0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"name\": \"my-dedicated-host-group\", \"resource_type\": \"dedicated_host_group\"}, \"primary_network_attachment\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_attachments/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-attachment\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"instance_network_attachment\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"virtual_network_interface\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"name\": \"my-virtual-network-interface\", \"resource_type\": \"virtual_network_interface\"}}, \"primary_network_interface\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}}, \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\", \"resource_type\": \"instance_profile\"}, \"reservation\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"id\": \"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"name\": \"my-reservation\", \"resource_type\": \"reservation\"}, \"reservation_affinity\": {\"policy\": \"automatic\", \"pool\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"id\": \"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"name\": \"my-reservation\", \"resource_type\": \"reservation\"}]}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"instance\", \"startable\": false, \"status\": \"deleting\", \"status_reasons\": [{\"code\": \"cannot_start_storage\", \"message\": \"The virtual server instance is unusable because the encryption key for the boot volume\nhas been deleted\", \"more_info\": \"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}], \"total_network_bandwidth\": 500, \"total_volume_bandwidth\": 500, \"vcpu\": {\"architecture\": \"amd64\", \"count\": 4, \"manufacturer\": \"intel\"}, \"volume_attachments\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"device\": {\"id\": \"id\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/volume_attachments/0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"id\": \"0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"name\": \"my-volume-attachment\", \"volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\", \"resource_type\": \"volume\"}}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String updateInstancePath = "/instances/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the InstanceAvailabilityPolicyPatch model
    InstanceAvailabilityPolicyPatch instanceAvailabilityPolicyPatchModel = new InstanceAvailabilityPolicyPatch.Builder()
      .hostFailure("restart")
      .build();

    // Construct an instance of the InstanceMetadataServicePatch model
    InstanceMetadataServicePatch instanceMetadataServicePatchModel = new InstanceMetadataServicePatch.Builder()
      .enabled(true)
      .protocol("http")
      .responseHopLimit(Long.valueOf("1"))
      .build();

    // Construct an instance of the InstancePlacementTargetPatchDedicatedHostIdentityDedicatedHostIdentityById model
    InstancePlacementTargetPatchDedicatedHostIdentityDedicatedHostIdentityById instancePlacementTargetPatchModel = new InstancePlacementTargetPatchDedicatedHostIdentityDedicatedHostIdentityById.Builder()
      .id("0717-1e09281b-f177-46fb-baf1-bc152b2e391a")
      .build();

    // Construct an instance of the InstancePatchProfileInstanceProfileIdentityByName model
    InstancePatchProfileInstanceProfileIdentityByName instancePatchProfileModel = new InstancePatchProfileInstanceProfileIdentityByName.Builder()
      .name("bx2-4x16")
      .build();

    // Construct an instance of the ReservationIdentityById model
    ReservationIdentityById reservationIdentityModel = new ReservationIdentityById.Builder()
      .id("0717-ba49df72-37b8-43ac-98da-f8e029de0e63")
      .build();

    // Construct an instance of the InstanceReservationAffinityPatch model
    InstanceReservationAffinityPatch instanceReservationAffinityPatchModel = new InstanceReservationAffinityPatch.Builder()
      .policy("automatic")
      .pool(java.util.Arrays.asList(reservationIdentityModel))
      .build();

    // Construct an instance of the InstancePatch model
    InstancePatch instancePatchModel = new InstancePatch.Builder()
      .availabilityPolicy(instanceAvailabilityPolicyPatchModel)
      .confidentialComputeMode("disabled")
      .enableSecureBoot(true)
      .metadataService(instanceMetadataServicePatchModel)
      .name("my-instance")
      .placementTarget(instancePlacementTargetPatchModel)
      .profile(instancePatchProfileModel)
      .reservationAffinity(instanceReservationAffinityPatchModel)
      .totalVolumeBandwidth(Long.valueOf("500"))
      .build();
    Map<String, Object> instancePatchModelAsPatch = instancePatchModel.asPatch();

    // Construct an instance of the UpdateInstanceOptions model
    UpdateInstanceOptions updateInstanceOptionsModel = new UpdateInstanceOptions.Builder()
      .id("testString")
      .instancePatch(instancePatchModelAsPatch)
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke updateInstance() with a valid options model and verify the result
    Response<Instance> response = vpcService.updateInstance(updateInstanceOptionsModel).execute();
    assertNotNull(response);
    Instance responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateInstancePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateInstance operation with and without retries enabled
  @Test
  public void testUpdateInstanceWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateInstanceWOptions();

    vpcService.disableRetries();
    testUpdateInstanceWOptions();
  }

  // Test the updateInstance operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateInstanceNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateInstance(null).execute();
  }

  // Test the getInstanceInitialization operation with a valid options model parameter
  @Test
  public void testGetInstanceInitializationWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"default_trusted_profile\": {\"auto_link\": true, \"target\": {\"crn\": \"crn:v1:bluemix:public:iam-identity::a/aa2432b1fa4d4ace891e9b80fc104e34::profile:Profile-9fd84246-7df4-4667-94e4-8ecde51d5ac5\", \"id\": \"Profile-9fd84246-7df4-4667-94e4-8ecde51d5ac5\", \"resource_type\": \"trusted_profile\"}}, \"keys\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::key:r006-82679077-ac3b-4c10-be16-63e9c21f0f45\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"fingerprint\": \"SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/keys/r006-82679077-ac3b-4c10-be16-63e9c21f0f45\", \"id\": \"r006-82679077-ac3b-4c10-be16-63e9c21f0f45\", \"name\": \"my-key-1\"}], \"password\": {\"encrypted_password\": \"qQ+/YEApnl1ZtEgIrfprzb065307thTkzlnLqL5ICpesdbBN03dyCQ==\", \"encryption_key\": {\"fingerprint\": \"SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY\"}}}";
    String getInstanceInitializationPath = "/instances/testString/initialization";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetInstanceInitializationOptions model
    GetInstanceInitializationOptions getInstanceInitializationOptionsModel = new GetInstanceInitializationOptions.Builder()
      .id("testString")
      .build();

    // Invoke getInstanceInitialization() with a valid options model and verify the result
    Response<InstanceInitialization> response = vpcService.getInstanceInitialization(getInstanceInitializationOptionsModel).execute();
    assertNotNull(response);
    InstanceInitialization responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getInstanceInitializationPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getInstanceInitialization operation with and without retries enabled
  @Test
  public void testGetInstanceInitializationWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetInstanceInitializationWOptions();

    vpcService.disableRetries();
    testGetInstanceInitializationWOptions();
  }

  // Test the getInstanceInitialization operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetInstanceInitializationNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getInstanceInitialization(null).execute();
  }

  // Test the createInstanceAction operation with a valid options model parameter
  @Test
  public void testCreateInstanceActionWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"completed_at\": \"2019-01-01T12:00:00.000Z\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"force\": false, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/actions/109a1b6e-1242-4de1-be44-38705e9474ed\", \"id\": \"109a1b6e-1242-4de1-be44-38705e9474ed\", \"started_at\": \"2019-01-01T12:00:00.000Z\", \"status\": \"completed\", \"type\": \"reboot\"}";
    String createInstanceActionPath = "/instances/testString/actions";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the CreateInstanceActionOptions model
    CreateInstanceActionOptions createInstanceActionOptionsModel = new CreateInstanceActionOptions.Builder()
      .instanceId("testString")
      .type("reboot")
      .force(true)
      .build();

    // Invoke createInstanceAction() with a valid options model and verify the result
    Response<InstanceAction> response = vpcService.createInstanceAction(createInstanceActionOptionsModel).execute();
    assertNotNull(response);
    InstanceAction responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createInstanceActionPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createInstanceAction operation with and without retries enabled
  @Test
  public void testCreateInstanceActionWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateInstanceActionWOptions();

    vpcService.disableRetries();
    testCreateInstanceActionWOptions();
  }

  // Test the createInstanceAction operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateInstanceActionNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createInstanceAction(null).execute();
  }

  // Test the listInstanceClusterNetworkAttachments operation with a valid options model parameter
  @Test
  public void testListInstanceClusterNetworkAttachmentsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"cluster_network_attachments\": [{\"before\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\", \"id\": \"0717-fb880975-db45-4459-8548-64e3995ac213\", \"name\": \"my-instance-network-attachment\", \"resource_type\": \"instance_cluster_network_attachment\"}, \"cluster_network_interface\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/interfaces/0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\", \"id\": \"0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\", \"name\": \"my-cluster-network-interface\", \"primary_ip\": {\"address\": \"10.1.0.6\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930/reserved_ips/0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\", \"id\": \"0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\", \"name\": \"my-cluster-network-subnet-reserved-ip\", \"resource_type\": \"cluster_network_subnet_reserved_ip\"}, \"resource_type\": \"cluster_network_interface\", \"subnet\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\", \"id\": \"0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\", \"name\": \"my-cluster-network-subnet\", \"resource_type\": \"cluster_network_subnet\"}}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\", \"id\": \"0717-fb880975-db45-4459-8548-64e3995ac213\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-instance-network-attachment\", \"resource_type\": \"instance_cluster_network_attachment\"}], \"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listInstanceClusterNetworkAttachmentsPath = "/instances/testString/cluster_network_attachments";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListInstanceClusterNetworkAttachmentsOptions model
    ListInstanceClusterNetworkAttachmentsOptions listInstanceClusterNetworkAttachmentsOptionsModel = new ListInstanceClusterNetworkAttachmentsOptions.Builder()
      .instanceId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listInstanceClusterNetworkAttachments() with a valid options model and verify the result
    Response<InstanceClusterNetworkAttachmentCollection> response = vpcService.listInstanceClusterNetworkAttachments(listInstanceClusterNetworkAttachmentsOptionsModel).execute();
    assertNotNull(response);
    InstanceClusterNetworkAttachmentCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listInstanceClusterNetworkAttachmentsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listInstanceClusterNetworkAttachments operation with and without retries enabled
  @Test
  public void testListInstanceClusterNetworkAttachmentsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListInstanceClusterNetworkAttachmentsWOptions();

    vpcService.disableRetries();
    testListInstanceClusterNetworkAttachmentsWOptions();
  }

  // Test the listInstanceClusterNetworkAttachments operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListInstanceClusterNetworkAttachmentsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listInstanceClusterNetworkAttachments(null).execute();
  }

  // Test the listInstanceClusterNetworkAttachments operation using the InstanceClusterNetworkAttachmentsPager.getNext() method
  @Test
  public void testListInstanceClusterNetworkAttachmentsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"cluster_network_attachments\":[{\"before\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\",\"id\":\"0717-fb880975-db45-4459-8548-64e3995ac213\",\"name\":\"my-instance-network-attachment\",\"resource_type\":\"instance_cluster_network_attachment\"},\"cluster_network_interface\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/interfaces/0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\",\"id\":\"0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\",\"name\":\"my-cluster-network-interface\",\"primary_ip\":{\"address\":\"10.1.0.6\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930/reserved_ips/0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\",\"id\":\"0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\",\"name\":\"my-cluster-network-subnet-reserved-ip\",\"resource_type\":\"cluster_network_subnet_reserved_ip\"},\"resource_type\":\"cluster_network_interface\",\"subnet\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\",\"id\":\"0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\",\"name\":\"my-cluster-network-subnet\",\"resource_type\":\"cluster_network_subnet\"}},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\",\"id\":\"0717-fb880975-db45-4459-8548-64e3995ac213\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"name\":\"my-instance-network-attachment\",\"resource_type\":\"instance_cluster_network_attachment\"}],\"limit\":1}";
    String mockResponsePage2 = "{\"total_count\":2,\"cluster_network_attachments\":[{\"before\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\",\"id\":\"0717-fb880975-db45-4459-8548-64e3995ac213\",\"name\":\"my-instance-network-attachment\",\"resource_type\":\"instance_cluster_network_attachment\"},\"cluster_network_interface\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/interfaces/0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\",\"id\":\"0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\",\"name\":\"my-cluster-network-interface\",\"primary_ip\":{\"address\":\"10.1.0.6\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930/reserved_ips/0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\",\"id\":\"0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\",\"name\":\"my-cluster-network-subnet-reserved-ip\",\"resource_type\":\"cluster_network_subnet_reserved_ip\"},\"resource_type\":\"cluster_network_interface\",\"subnet\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\",\"id\":\"0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\",\"name\":\"my-cluster-network-subnet\",\"resource_type\":\"cluster_network_subnet\"}},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\",\"id\":\"0717-fb880975-db45-4459-8548-64e3995ac213\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"name\":\"my-instance-network-attachment\",\"resource_type\":\"instance_cluster_network_attachment\"}],\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListInstanceClusterNetworkAttachmentsOptions listInstanceClusterNetworkAttachmentsOptions = new ListInstanceClusterNetworkAttachmentsOptions.Builder()
      .instanceId("testString")
      .limit(Long.valueOf("10"))
      .build();

    List<InstanceClusterNetworkAttachment> allResults = new ArrayList<>();
    InstanceClusterNetworkAttachmentsPager pager = new InstanceClusterNetworkAttachmentsPager(vpcService, listInstanceClusterNetworkAttachmentsOptions);
    while (pager.hasNext()) {
      List<InstanceClusterNetworkAttachment> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listInstanceClusterNetworkAttachments operation using the InstanceClusterNetworkAttachmentsPager.getAll() method
  @Test
  public void testListInstanceClusterNetworkAttachmentsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"cluster_network_attachments\":[{\"before\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\",\"id\":\"0717-fb880975-db45-4459-8548-64e3995ac213\",\"name\":\"my-instance-network-attachment\",\"resource_type\":\"instance_cluster_network_attachment\"},\"cluster_network_interface\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/interfaces/0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\",\"id\":\"0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\",\"name\":\"my-cluster-network-interface\",\"primary_ip\":{\"address\":\"10.1.0.6\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930/reserved_ips/0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\",\"id\":\"0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\",\"name\":\"my-cluster-network-subnet-reserved-ip\",\"resource_type\":\"cluster_network_subnet_reserved_ip\"},\"resource_type\":\"cluster_network_interface\",\"subnet\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\",\"id\":\"0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\",\"name\":\"my-cluster-network-subnet\",\"resource_type\":\"cluster_network_subnet\"}},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\",\"id\":\"0717-fb880975-db45-4459-8548-64e3995ac213\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"name\":\"my-instance-network-attachment\",\"resource_type\":\"instance_cluster_network_attachment\"}],\"limit\":1}";
    String mockResponsePage2 = "{\"total_count\":2,\"cluster_network_attachments\":[{\"before\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\",\"id\":\"0717-fb880975-db45-4459-8548-64e3995ac213\",\"name\":\"my-instance-network-attachment\",\"resource_type\":\"instance_cluster_network_attachment\"},\"cluster_network_interface\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/interfaces/0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\",\"id\":\"0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\",\"name\":\"my-cluster-network-interface\",\"primary_ip\":{\"address\":\"10.1.0.6\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930/reserved_ips/0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\",\"id\":\"0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\",\"name\":\"my-cluster-network-subnet-reserved-ip\",\"resource_type\":\"cluster_network_subnet_reserved_ip\"},\"resource_type\":\"cluster_network_interface\",\"subnet\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\",\"id\":\"0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\",\"name\":\"my-cluster-network-subnet\",\"resource_type\":\"cluster_network_subnet\"}},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\",\"id\":\"0717-fb880975-db45-4459-8548-64e3995ac213\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"name\":\"my-instance-network-attachment\",\"resource_type\":\"instance_cluster_network_attachment\"}],\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListInstanceClusterNetworkAttachmentsOptions listInstanceClusterNetworkAttachmentsOptions = new ListInstanceClusterNetworkAttachmentsOptions.Builder()
      .instanceId("testString")
      .limit(Long.valueOf("10"))
      .build();

    InstanceClusterNetworkAttachmentsPager pager = new InstanceClusterNetworkAttachmentsPager(vpcService, listInstanceClusterNetworkAttachmentsOptions);
    List<InstanceClusterNetworkAttachment> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createClusterNetworkAttachment operation with a valid options model parameter
  @Test
  public void testCreateClusterNetworkAttachmentWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"before\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\", \"id\": \"0717-fb880975-db45-4459-8548-64e3995ac213\", \"name\": \"my-instance-network-attachment\", \"resource_type\": \"instance_cluster_network_attachment\"}, \"cluster_network_interface\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/interfaces/0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\", \"id\": \"0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\", \"name\": \"my-cluster-network-interface\", \"primary_ip\": {\"address\": \"10.1.0.6\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930/reserved_ips/0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\", \"id\": \"0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\", \"name\": \"my-cluster-network-subnet-reserved-ip\", \"resource_type\": \"cluster_network_subnet_reserved_ip\"}, \"resource_type\": \"cluster_network_interface\", \"subnet\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\", \"id\": \"0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\", \"name\": \"my-cluster-network-subnet\", \"resource_type\": \"cluster_network_subnet\"}}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\", \"id\": \"0717-fb880975-db45-4459-8548-64e3995ac213\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-instance-network-attachment\", \"resource_type\": \"instance_cluster_network_attachment\"}";
    String createClusterNetworkAttachmentPath = "/instances/testString/cluster_network_attachments";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ClusterNetworkInterfacePrimaryIPPrototypeClusterNetworkSubnetReservedIPPrototypeClusterNetworkInterfacePrimaryIPContext model
    ClusterNetworkInterfacePrimaryIPPrototypeClusterNetworkSubnetReservedIPPrototypeClusterNetworkInterfacePrimaryIPContext clusterNetworkInterfacePrimaryIpPrototypeModel = new ClusterNetworkInterfacePrimaryIPPrototypeClusterNetworkSubnetReservedIPPrototypeClusterNetworkInterfacePrimaryIPContext.Builder()
      .address("10.0.0.5")
      .autoDelete(false)
      .name("my-cluster-network-subnet-reserved-ip")
      .build();

    // Construct an instance of the ClusterNetworkSubnetIdentityById model
    ClusterNetworkSubnetIdentityById clusterNetworkSubnetIdentityModel = new ClusterNetworkSubnetIdentityById.Builder()
      .id("0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930")
      .build();

    // Construct an instance of the InstanceClusterNetworkAttachmentPrototypeClusterNetworkInterfaceInstanceClusterNetworkInterfacePrototypeInstanceClusterNetworkAttachment model
    InstanceClusterNetworkAttachmentPrototypeClusterNetworkInterfaceInstanceClusterNetworkInterfacePrototypeInstanceClusterNetworkAttachment instanceClusterNetworkAttachmentPrototypeClusterNetworkInterfaceModel = new InstanceClusterNetworkAttachmentPrototypeClusterNetworkInterfaceInstanceClusterNetworkInterfacePrototypeInstanceClusterNetworkAttachment.Builder()
      .autoDelete(false)
      .name("my-cluster-network-interface")
      .primaryIp(clusterNetworkInterfacePrimaryIpPrototypeModel)
      .subnet(clusterNetworkSubnetIdentityModel)
      .build();

    // Construct an instance of the InstanceClusterNetworkAttachmentBeforePrototypeInstanceClusterNetworkAttachmentIdentityById model
    InstanceClusterNetworkAttachmentBeforePrototypeInstanceClusterNetworkAttachmentIdentityById instanceClusterNetworkAttachmentBeforePrototypeModel = new InstanceClusterNetworkAttachmentBeforePrototypeInstanceClusterNetworkAttachmentIdentityById.Builder()
      .id("0717-fb880975-db45-4459-8548-64e3995ac213")
      .build();

    // Construct an instance of the CreateClusterNetworkAttachmentOptions model
    CreateClusterNetworkAttachmentOptions createClusterNetworkAttachmentOptionsModel = new CreateClusterNetworkAttachmentOptions.Builder()
      .instanceId("testString")
      .clusterNetworkInterface(instanceClusterNetworkAttachmentPrototypeClusterNetworkInterfaceModel)
      .before(instanceClusterNetworkAttachmentBeforePrototypeModel)
      .name("my-instance-network-attachment")
      .build();

    // Invoke createClusterNetworkAttachment() with a valid options model and verify the result
    Response<InstanceClusterNetworkAttachment> response = vpcService.createClusterNetworkAttachment(createClusterNetworkAttachmentOptionsModel).execute();
    assertNotNull(response);
    InstanceClusterNetworkAttachment responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createClusterNetworkAttachmentPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createClusterNetworkAttachment operation with and without retries enabled
  @Test
  public void testCreateClusterNetworkAttachmentWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateClusterNetworkAttachmentWOptions();

    vpcService.disableRetries();
    testCreateClusterNetworkAttachmentWOptions();
  }

  // Test the createClusterNetworkAttachment operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateClusterNetworkAttachmentNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createClusterNetworkAttachment(null).execute();
  }

  // Test the deleteInstanceClusterNetworkAttachment operation with a valid options model parameter
  @Test
  public void testDeleteInstanceClusterNetworkAttachmentWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"before\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\", \"id\": \"0717-fb880975-db45-4459-8548-64e3995ac213\", \"name\": \"my-instance-network-attachment\", \"resource_type\": \"instance_cluster_network_attachment\"}, \"cluster_network_interface\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/interfaces/0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\", \"id\": \"0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\", \"name\": \"my-cluster-network-interface\", \"primary_ip\": {\"address\": \"10.1.0.6\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930/reserved_ips/0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\", \"id\": \"0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\", \"name\": \"my-cluster-network-subnet-reserved-ip\", \"resource_type\": \"cluster_network_subnet_reserved_ip\"}, \"resource_type\": \"cluster_network_interface\", \"subnet\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\", \"id\": \"0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\", \"name\": \"my-cluster-network-subnet\", \"resource_type\": \"cluster_network_subnet\"}}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\", \"id\": \"0717-fb880975-db45-4459-8548-64e3995ac213\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-instance-network-attachment\", \"resource_type\": \"instance_cluster_network_attachment\"}";
    String deleteInstanceClusterNetworkAttachmentPath = "/instances/testString/cluster_network_attachments/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteInstanceClusterNetworkAttachmentOptions model
    DeleteInstanceClusterNetworkAttachmentOptions deleteInstanceClusterNetworkAttachmentOptionsModel = new DeleteInstanceClusterNetworkAttachmentOptions.Builder()
      .instanceId("testString")
      .id("testString")
      .build();

    // Invoke deleteInstanceClusterNetworkAttachment() with a valid options model and verify the result
    Response<InstanceClusterNetworkAttachment> response = vpcService.deleteInstanceClusterNetworkAttachment(deleteInstanceClusterNetworkAttachmentOptionsModel).execute();
    assertNotNull(response);
    InstanceClusterNetworkAttachment responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteInstanceClusterNetworkAttachmentPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteInstanceClusterNetworkAttachment operation with and without retries enabled
  @Test
  public void testDeleteInstanceClusterNetworkAttachmentWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteInstanceClusterNetworkAttachmentWOptions();

    vpcService.disableRetries();
    testDeleteInstanceClusterNetworkAttachmentWOptions();
  }

  // Test the deleteInstanceClusterNetworkAttachment operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteInstanceClusterNetworkAttachmentNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteInstanceClusterNetworkAttachment(null).execute();
  }

  // Test the getInstanceClusterNetworkAttachment operation with a valid options model parameter
  @Test
  public void testGetInstanceClusterNetworkAttachmentWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"before\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\", \"id\": \"0717-fb880975-db45-4459-8548-64e3995ac213\", \"name\": \"my-instance-network-attachment\", \"resource_type\": \"instance_cluster_network_attachment\"}, \"cluster_network_interface\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/interfaces/0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\", \"id\": \"0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\", \"name\": \"my-cluster-network-interface\", \"primary_ip\": {\"address\": \"10.1.0.6\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930/reserved_ips/0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\", \"id\": \"0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\", \"name\": \"my-cluster-network-subnet-reserved-ip\", \"resource_type\": \"cluster_network_subnet_reserved_ip\"}, \"resource_type\": \"cluster_network_interface\", \"subnet\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\", \"id\": \"0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\", \"name\": \"my-cluster-network-subnet\", \"resource_type\": \"cluster_network_subnet\"}}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\", \"id\": \"0717-fb880975-db45-4459-8548-64e3995ac213\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-instance-network-attachment\", \"resource_type\": \"instance_cluster_network_attachment\"}";
    String getInstanceClusterNetworkAttachmentPath = "/instances/testString/cluster_network_attachments/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetInstanceClusterNetworkAttachmentOptions model
    GetInstanceClusterNetworkAttachmentOptions getInstanceClusterNetworkAttachmentOptionsModel = new GetInstanceClusterNetworkAttachmentOptions.Builder()
      .instanceId("testString")
      .id("testString")
      .build();

    // Invoke getInstanceClusterNetworkAttachment() with a valid options model and verify the result
    Response<InstanceClusterNetworkAttachment> response = vpcService.getInstanceClusterNetworkAttachment(getInstanceClusterNetworkAttachmentOptionsModel).execute();
    assertNotNull(response);
    InstanceClusterNetworkAttachment responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getInstanceClusterNetworkAttachmentPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getInstanceClusterNetworkAttachment operation with and without retries enabled
  @Test
  public void testGetInstanceClusterNetworkAttachmentWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetInstanceClusterNetworkAttachmentWOptions();

    vpcService.disableRetries();
    testGetInstanceClusterNetworkAttachmentWOptions();
  }

  // Test the getInstanceClusterNetworkAttachment operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetInstanceClusterNetworkAttachmentNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getInstanceClusterNetworkAttachment(null).execute();
  }

  // Test the updateInstanceClusterNetworkAttachment operation with a valid options model parameter
  @Test
  public void testUpdateInstanceClusterNetworkAttachmentWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"before\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\", \"id\": \"0717-fb880975-db45-4459-8548-64e3995ac213\", \"name\": \"my-instance-network-attachment\", \"resource_type\": \"instance_cluster_network_attachment\"}, \"cluster_network_interface\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/interfaces/0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\", \"id\": \"0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\", \"name\": \"my-cluster-network-interface\", \"primary_ip\": {\"address\": \"10.1.0.6\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930/reserved_ips/0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\", \"id\": \"0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\", \"name\": \"my-cluster-network-subnet-reserved-ip\", \"resource_type\": \"cluster_network_subnet_reserved_ip\"}, \"resource_type\": \"cluster_network_interface\", \"subnet\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\", \"id\": \"0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\", \"name\": \"my-cluster-network-subnet\", \"resource_type\": \"cluster_network_subnet\"}}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\", \"id\": \"0717-fb880975-db45-4459-8548-64e3995ac213\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-instance-network-attachment\", \"resource_type\": \"instance_cluster_network_attachment\"}";
    String updateInstanceClusterNetworkAttachmentPath = "/instances/testString/cluster_network_attachments/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the InstanceClusterNetworkAttachmentPatch model
    InstanceClusterNetworkAttachmentPatch instanceClusterNetworkAttachmentPatchModel = new InstanceClusterNetworkAttachmentPatch.Builder()
      .name("my-instance-network-attachment-updated")
      .build();
    Map<String, Object> instanceClusterNetworkAttachmentPatchModelAsPatch = instanceClusterNetworkAttachmentPatchModel.asPatch();

    // Construct an instance of the UpdateInstanceClusterNetworkAttachmentOptions model
    UpdateInstanceClusterNetworkAttachmentOptions updateInstanceClusterNetworkAttachmentOptionsModel = new UpdateInstanceClusterNetworkAttachmentOptions.Builder()
      .instanceId("testString")
      .id("testString")
      .instanceClusterNetworkAttachmentPatch(instanceClusterNetworkAttachmentPatchModelAsPatch)
      .build();

    // Invoke updateInstanceClusterNetworkAttachment() with a valid options model and verify the result
    Response<InstanceClusterNetworkAttachment> response = vpcService.updateInstanceClusterNetworkAttachment(updateInstanceClusterNetworkAttachmentOptionsModel).execute();
    assertNotNull(response);
    InstanceClusterNetworkAttachment responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateInstanceClusterNetworkAttachmentPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateInstanceClusterNetworkAttachment operation with and without retries enabled
  @Test
  public void testUpdateInstanceClusterNetworkAttachmentWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateInstanceClusterNetworkAttachmentWOptions();

    vpcService.disableRetries();
    testUpdateInstanceClusterNetworkAttachmentWOptions();
  }

  // Test the updateInstanceClusterNetworkAttachment operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateInstanceClusterNetworkAttachmentNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateInstanceClusterNetworkAttachment(null).execute();
  }

  // Test the createInstanceConsoleAccessToken operation with a valid options model parameter
  @Test
  public void testCreateInstanceConsoleAccessTokenWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiYWEyNDMyYjFmYTRkNGFjZTg5MWU5YjgwZmMxMDRlMzQiLCJzZWNyZXQiOiJRVzRnWlhoaGJYQnNaU0J6WldOeVpYUUsiLCJleHAiOjE3MjYwNzU1OTR9.UFDVzzGJ54Go9Z4jgyPSLG49zNx-AjHTQrJA6ee8KLI\", \"console_type\": \"serial\", \"created_at\": \"2020-07-27T21:50:14.000Z\", \"expires_at\": \"2020-07-27T21:51:14.000Z\", \"force\": false, \"href\": \"wss://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/console?access_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiYWEyNDMyYjFmYTRkNGFjZTg5MWU5YjgwZmMxMDRlMzQiLCJzZWNyZXQiOiJRVzRnWlhoaGJYQnNaU0J6WldOeVpYUUsiLCJleHAiOjE3MjYwNzU1OTR9.UFDVzzGJ54Go9Z4jgyPSLG49zNx-AjHTQrJA6ee8KLI\"}";
    String createInstanceConsoleAccessTokenPath = "/instances/testString/console_access_token";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the CreateInstanceConsoleAccessTokenOptions model
    CreateInstanceConsoleAccessTokenOptions createInstanceConsoleAccessTokenOptionsModel = new CreateInstanceConsoleAccessTokenOptions.Builder()
      .instanceId("testString")
      .consoleType("serial")
      .force(false)
      .build();

    // Invoke createInstanceConsoleAccessToken() with a valid options model and verify the result
    Response<InstanceConsoleAccessToken> response = vpcService.createInstanceConsoleAccessToken(createInstanceConsoleAccessTokenOptionsModel).execute();
    assertNotNull(response);
    InstanceConsoleAccessToken responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createInstanceConsoleAccessTokenPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createInstanceConsoleAccessToken operation with and without retries enabled
  @Test
  public void testCreateInstanceConsoleAccessTokenWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateInstanceConsoleAccessTokenWOptions();

    vpcService.disableRetries();
    testCreateInstanceConsoleAccessTokenWOptions();
  }

  // Test the createInstanceConsoleAccessToken operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateInstanceConsoleAccessTokenNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createInstanceConsoleAccessToken(null).execute();
  }

  // Test the listInstanceDisks operation with a valid options model parameter
  @Test
  public void testListInstanceDisksWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"disks\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"interface_type\": \"nvme\", \"name\": \"my-instance-disk\", \"resource_type\": \"instance_disk\", \"size\": 100}]}";
    String listInstanceDisksPath = "/instances/testString/disks";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListInstanceDisksOptions model
    ListInstanceDisksOptions listInstanceDisksOptionsModel = new ListInstanceDisksOptions.Builder()
      .instanceId("testString")
      .build();

    // Invoke listInstanceDisks() with a valid options model and verify the result
    Response<InstanceDiskCollection> response = vpcService.listInstanceDisks(listInstanceDisksOptionsModel).execute();
    assertNotNull(response);
    InstanceDiskCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listInstanceDisksPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listInstanceDisks operation with and without retries enabled
  @Test
  public void testListInstanceDisksWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListInstanceDisksWOptions();

    vpcService.disableRetries();
    testListInstanceDisksWOptions();
  }

  // Test the listInstanceDisks operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListInstanceDisksNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listInstanceDisks(null).execute();
  }

  // Test the getInstanceDisk operation with a valid options model parameter
  @Test
  public void testGetInstanceDiskWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"interface_type\": \"nvme\", \"name\": \"my-instance-disk\", \"resource_type\": \"instance_disk\", \"size\": 100}";
    String getInstanceDiskPath = "/instances/testString/disks/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetInstanceDiskOptions model
    GetInstanceDiskOptions getInstanceDiskOptionsModel = new GetInstanceDiskOptions.Builder()
      .instanceId("testString")
      .id("testString")
      .build();

    // Invoke getInstanceDisk() with a valid options model and verify the result
    Response<InstanceDisk> response = vpcService.getInstanceDisk(getInstanceDiskOptionsModel).execute();
    assertNotNull(response);
    InstanceDisk responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getInstanceDiskPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getInstanceDisk operation with and without retries enabled
  @Test
  public void testGetInstanceDiskWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetInstanceDiskWOptions();

    vpcService.disableRetries();
    testGetInstanceDiskWOptions();
  }

  // Test the getInstanceDisk operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetInstanceDiskNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getInstanceDisk(null).execute();
  }

  // Test the updateInstanceDisk operation with a valid options model parameter
  @Test
  public void testUpdateInstanceDiskWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"interface_type\": \"nvme\", \"name\": \"my-instance-disk\", \"resource_type\": \"instance_disk\", \"size\": 100}";
    String updateInstanceDiskPath = "/instances/testString/disks/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the InstanceDiskPatch model
    InstanceDiskPatch instanceDiskPatchModel = new InstanceDiskPatch.Builder()
      .name("my-instance-disk-updated")
      .build();
    Map<String, Object> instanceDiskPatchModelAsPatch = instanceDiskPatchModel.asPatch();

    // Construct an instance of the UpdateInstanceDiskOptions model
    UpdateInstanceDiskOptions updateInstanceDiskOptionsModel = new UpdateInstanceDiskOptions.Builder()
      .instanceId("testString")
      .id("testString")
      .instanceDiskPatch(instanceDiskPatchModelAsPatch)
      .build();

    // Invoke updateInstanceDisk() with a valid options model and verify the result
    Response<InstanceDisk> response = vpcService.updateInstanceDisk(updateInstanceDiskOptionsModel).execute();
    assertNotNull(response);
    InstanceDisk responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateInstanceDiskPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateInstanceDisk operation with and without retries enabled
  @Test
  public void testUpdateInstanceDiskWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateInstanceDiskWOptions();

    vpcService.disableRetries();
    testUpdateInstanceDiskWOptions();
  }

  // Test the updateInstanceDisk operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateInstanceDiskNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateInstanceDisk(null).execute();
  }

  // Test the listInstanceNetworkAttachments operation with a valid options model parameter
  @Test
  public void testListInstanceNetworkAttachmentsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"network_attachments\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_attachments/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"lifecycle_state\": \"stable\", \"name\": \"my-instance-network-attachment\", \"port_speed\": 1000, \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"instance_network_attachment\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"type\": \"primary\", \"virtual_network_interface\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"name\": \"my-virtual-network-interface\", \"resource_type\": \"virtual_network_interface\"}}]}";
    String listInstanceNetworkAttachmentsPath = "/instances/testString/network_attachments";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListInstanceNetworkAttachmentsOptions model
    ListInstanceNetworkAttachmentsOptions listInstanceNetworkAttachmentsOptionsModel = new ListInstanceNetworkAttachmentsOptions.Builder()
      .instanceId("testString")
      .build();

    // Invoke listInstanceNetworkAttachments() with a valid options model and verify the result
    Response<InstanceNetworkAttachmentCollection> response = vpcService.listInstanceNetworkAttachments(listInstanceNetworkAttachmentsOptionsModel).execute();
    assertNotNull(response);
    InstanceNetworkAttachmentCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listInstanceNetworkAttachmentsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listInstanceNetworkAttachments operation with and without retries enabled
  @Test
  public void testListInstanceNetworkAttachmentsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListInstanceNetworkAttachmentsWOptions();

    vpcService.disableRetries();
    testListInstanceNetworkAttachmentsWOptions();
  }

  // Test the listInstanceNetworkAttachments operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListInstanceNetworkAttachmentsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listInstanceNetworkAttachments(null).execute();
  }

  // Test the createInstanceNetworkAttachment operation with a valid options model parameter
  @Test
  public void testCreateInstanceNetworkAttachmentWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_attachments/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"lifecycle_state\": \"stable\", \"name\": \"my-instance-network-attachment\", \"port_speed\": 1000, \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"instance_network_attachment\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"type\": \"primary\", \"virtual_network_interface\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"name\": \"my-virtual-network-interface\", \"resource_type\": \"virtual_network_interface\"}}";
    String createInstanceNetworkAttachmentPath = "/instances/testString/network_attachments";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the VirtualNetworkInterfaceIPPrototypeReservedIPPrototypeVirtualNetworkInterfaceIPsContext model
    VirtualNetworkInterfaceIPPrototypeReservedIPPrototypeVirtualNetworkInterfaceIPsContext virtualNetworkInterfaceIpPrototypeModel = new VirtualNetworkInterfaceIPPrototypeReservedIPPrototypeVirtualNetworkInterfaceIPsContext.Builder()
      .address("10.0.0.5")
      .autoDelete(false)
      .name("my-reserved-ip")
      .build();

    // Construct an instance of the VirtualNetworkInterfacePrimaryIPPrototypeReservedIPPrototypeVirtualNetworkInterfacePrimaryIPContext model
    VirtualNetworkInterfacePrimaryIPPrototypeReservedIPPrototypeVirtualNetworkInterfacePrimaryIPContext virtualNetworkInterfacePrimaryIpPrototypeModel = new VirtualNetworkInterfacePrimaryIPPrototypeReservedIPPrototypeVirtualNetworkInterfacePrimaryIPContext.Builder()
      .address("10.0.0.7")
      .autoDelete(false)
      .name("my-reserved-ip")
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the SecurityGroupIdentityById model
    SecurityGroupIdentityById securityGroupIdentityModel = new SecurityGroupIdentityById.Builder()
      .id("r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271")
      .build();

    // Construct an instance of the SubnetIdentityById model
    SubnetIdentityById subnetIdentityModel = new SubnetIdentityById.Builder()
      .id("0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
      .build();

    // Construct an instance of the InstanceNetworkAttachmentPrototypeVirtualNetworkInterfaceVirtualNetworkInterfacePrototypeInstanceNetworkAttachmentContext model
    InstanceNetworkAttachmentPrototypeVirtualNetworkInterfaceVirtualNetworkInterfacePrototypeInstanceNetworkAttachmentContext instanceNetworkAttachmentPrototypeVirtualNetworkInterfaceModel = new InstanceNetworkAttachmentPrototypeVirtualNetworkInterfaceVirtualNetworkInterfacePrototypeInstanceNetworkAttachmentContext.Builder()
      .allowIpSpoofing(true)
      .autoDelete(false)
      .enableInfrastructureNat(true)
      .ips(java.util.Arrays.asList(virtualNetworkInterfaceIpPrototypeModel))
      .name("my-virtual-network-interface")
      .primaryIp(virtualNetworkInterfacePrimaryIpPrototypeModel)
      .protocolStateFilteringMode("auto")
      .resourceGroup(resourceGroupIdentityModel)
      .securityGroups(java.util.Arrays.asList(securityGroupIdentityModel))
      .subnet(subnetIdentityModel)
      .build();

    // Construct an instance of the CreateInstanceNetworkAttachmentOptions model
    CreateInstanceNetworkAttachmentOptions createInstanceNetworkAttachmentOptionsModel = new CreateInstanceNetworkAttachmentOptions.Builder()
      .instanceId("testString")
      .virtualNetworkInterface(instanceNetworkAttachmentPrototypeVirtualNetworkInterfaceModel)
      .name("testString")
      .build();

    // Invoke createInstanceNetworkAttachment() with a valid options model and verify the result
    Response<InstanceNetworkAttachment> response = vpcService.createInstanceNetworkAttachment(createInstanceNetworkAttachmentOptionsModel).execute();
    assertNotNull(response);
    InstanceNetworkAttachment responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createInstanceNetworkAttachmentPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createInstanceNetworkAttachment operation with and without retries enabled
  @Test
  public void testCreateInstanceNetworkAttachmentWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateInstanceNetworkAttachmentWOptions();

    vpcService.disableRetries();
    testCreateInstanceNetworkAttachmentWOptions();
  }

  // Test the createInstanceNetworkAttachment operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateInstanceNetworkAttachmentNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createInstanceNetworkAttachment(null).execute();
  }

  // Test the deleteInstanceNetworkAttachment operation with a valid options model parameter
  @Test
  public void testDeleteInstanceNetworkAttachmentWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteInstanceNetworkAttachmentPath = "/instances/testString/network_attachments/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteInstanceNetworkAttachmentOptions model
    DeleteInstanceNetworkAttachmentOptions deleteInstanceNetworkAttachmentOptionsModel = new DeleteInstanceNetworkAttachmentOptions.Builder()
      .instanceId("testString")
      .id("testString")
      .build();

    // Invoke deleteInstanceNetworkAttachment() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteInstanceNetworkAttachment(deleteInstanceNetworkAttachmentOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteInstanceNetworkAttachmentPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteInstanceNetworkAttachment operation with and without retries enabled
  @Test
  public void testDeleteInstanceNetworkAttachmentWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteInstanceNetworkAttachmentWOptions();

    vpcService.disableRetries();
    testDeleteInstanceNetworkAttachmentWOptions();
  }

  // Test the deleteInstanceNetworkAttachment operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteInstanceNetworkAttachmentNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteInstanceNetworkAttachment(null).execute();
  }

  // Test the getInstanceNetworkAttachment operation with a valid options model parameter
  @Test
  public void testGetInstanceNetworkAttachmentWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_attachments/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"lifecycle_state\": \"stable\", \"name\": \"my-instance-network-attachment\", \"port_speed\": 1000, \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"instance_network_attachment\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"type\": \"primary\", \"virtual_network_interface\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"name\": \"my-virtual-network-interface\", \"resource_type\": \"virtual_network_interface\"}}";
    String getInstanceNetworkAttachmentPath = "/instances/testString/network_attachments/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetInstanceNetworkAttachmentOptions model
    GetInstanceNetworkAttachmentOptions getInstanceNetworkAttachmentOptionsModel = new GetInstanceNetworkAttachmentOptions.Builder()
      .instanceId("testString")
      .id("testString")
      .build();

    // Invoke getInstanceNetworkAttachment() with a valid options model and verify the result
    Response<InstanceNetworkAttachment> response = vpcService.getInstanceNetworkAttachment(getInstanceNetworkAttachmentOptionsModel).execute();
    assertNotNull(response);
    InstanceNetworkAttachment responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getInstanceNetworkAttachmentPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getInstanceNetworkAttachment operation with and without retries enabled
  @Test
  public void testGetInstanceNetworkAttachmentWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetInstanceNetworkAttachmentWOptions();

    vpcService.disableRetries();
    testGetInstanceNetworkAttachmentWOptions();
  }

  // Test the getInstanceNetworkAttachment operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetInstanceNetworkAttachmentNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getInstanceNetworkAttachment(null).execute();
  }

  // Test the updateInstanceNetworkAttachment operation with a valid options model parameter
  @Test
  public void testUpdateInstanceNetworkAttachmentWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_attachments/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"lifecycle_state\": \"stable\", \"name\": \"my-instance-network-attachment\", \"port_speed\": 1000, \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"instance_network_attachment\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"type\": \"primary\", \"virtual_network_interface\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"name\": \"my-virtual-network-interface\", \"resource_type\": \"virtual_network_interface\"}}";
    String updateInstanceNetworkAttachmentPath = "/instances/testString/network_attachments/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the InstanceNetworkAttachmentPatch model
    InstanceNetworkAttachmentPatch instanceNetworkAttachmentPatchModel = new InstanceNetworkAttachmentPatch.Builder()
      .name("my-instance-network-attachment-updated")
      .build();
    Map<String, Object> instanceNetworkAttachmentPatchModelAsPatch = instanceNetworkAttachmentPatchModel.asPatch();

    // Construct an instance of the UpdateInstanceNetworkAttachmentOptions model
    UpdateInstanceNetworkAttachmentOptions updateInstanceNetworkAttachmentOptionsModel = new UpdateInstanceNetworkAttachmentOptions.Builder()
      .instanceId("testString")
      .id("testString")
      .instanceNetworkAttachmentPatch(instanceNetworkAttachmentPatchModelAsPatch)
      .build();

    // Invoke updateInstanceNetworkAttachment() with a valid options model and verify the result
    Response<InstanceNetworkAttachment> response = vpcService.updateInstanceNetworkAttachment(updateInstanceNetworkAttachmentOptionsModel).execute();
    assertNotNull(response);
    InstanceNetworkAttachment responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateInstanceNetworkAttachmentPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateInstanceNetworkAttachment operation with and without retries enabled
  @Test
  public void testUpdateInstanceNetworkAttachmentWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateInstanceNetworkAttachmentWOptions();

    vpcService.disableRetries();
    testUpdateInstanceNetworkAttachmentWOptions();
  }

  // Test the updateInstanceNetworkAttachment operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateInstanceNetworkAttachmentNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateInstanceNetworkAttachment(null).execute();
  }

  // Test the listInstanceNetworkInterfaces operation with a valid options model parameter
  @Test
  public void testListInstanceNetworkInterfacesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"network_interfaces\": [{\"allow_ip_spoofing\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"floating_ips\": [{\"address\": \"203.0.113.1\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"id\": \"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"name\": \"my-floating-ip\"}], \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-interface\", \"port_speed\": 1000, \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"status\": \"available\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"type\": \"primary\"}]}";
    String listInstanceNetworkInterfacesPath = "/instances/testString/network_interfaces";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListInstanceNetworkInterfacesOptions model
    ListInstanceNetworkInterfacesOptions listInstanceNetworkInterfacesOptionsModel = new ListInstanceNetworkInterfacesOptions.Builder()
      .instanceId("testString")
      .build();

    // Invoke listInstanceNetworkInterfaces() with a valid options model and verify the result
    Response<NetworkInterfaceUnpaginatedCollection> response = vpcService.listInstanceNetworkInterfaces(listInstanceNetworkInterfacesOptionsModel).execute();
    assertNotNull(response);
    NetworkInterfaceUnpaginatedCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listInstanceNetworkInterfacesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listInstanceNetworkInterfaces operation with and without retries enabled
  @Test
  public void testListInstanceNetworkInterfacesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListInstanceNetworkInterfacesWOptions();

    vpcService.disableRetries();
    testListInstanceNetworkInterfacesWOptions();
  }

  // Test the listInstanceNetworkInterfaces operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListInstanceNetworkInterfacesNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listInstanceNetworkInterfaces(null).execute();
  }

  // Test the createInstanceNetworkInterface operation with a valid options model parameter
  @Test
  public void testCreateInstanceNetworkInterfaceWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"allow_ip_spoofing\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"floating_ips\": [{\"address\": \"203.0.113.1\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"id\": \"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"name\": \"my-floating-ip\"}], \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-interface\", \"port_speed\": 1000, \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"status\": \"available\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"type\": \"primary\"}";
    String createInstanceNetworkInterfacePath = "/instances/testString/network_interfaces";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the SubnetIdentityById model
    SubnetIdentityById subnetIdentityModel = new SubnetIdentityById.Builder()
      .id("0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
      .build();

    // Construct an instance of the NetworkInterfaceIPPrototypeReservedIPPrototypeNetworkInterfaceContext model
    NetworkInterfaceIPPrototypeReservedIPPrototypeNetworkInterfaceContext networkInterfaceIpPrototypeModel = new NetworkInterfaceIPPrototypeReservedIPPrototypeNetworkInterfaceContext.Builder()
      .address("10.0.0.5")
      .autoDelete(false)
      .name("my-reserved-ip")
      .build();

    // Construct an instance of the SecurityGroupIdentityById model
    SecurityGroupIdentityById securityGroupIdentityModel = new SecurityGroupIdentityById.Builder()
      .id("r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271")
      .build();

    // Construct an instance of the CreateInstanceNetworkInterfaceOptions model
    CreateInstanceNetworkInterfaceOptions createInstanceNetworkInterfaceOptionsModel = new CreateInstanceNetworkInterfaceOptions.Builder()
      .instanceId("testString")
      .subnet(subnetIdentityModel)
      .allowIpSpoofing(true)
      .name("my-instance-network-interface")
      .primaryIp(networkInterfaceIpPrototypeModel)
      .securityGroups(java.util.Arrays.asList(securityGroupIdentityModel))
      .build();

    // Invoke createInstanceNetworkInterface() with a valid options model and verify the result
    Response<NetworkInterface> response = vpcService.createInstanceNetworkInterface(createInstanceNetworkInterfaceOptionsModel).execute();
    assertNotNull(response);
    NetworkInterface responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createInstanceNetworkInterfacePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createInstanceNetworkInterface operation with and without retries enabled
  @Test
  public void testCreateInstanceNetworkInterfaceWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateInstanceNetworkInterfaceWOptions();

    vpcService.disableRetries();
    testCreateInstanceNetworkInterfaceWOptions();
  }

  // Test the createInstanceNetworkInterface operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateInstanceNetworkInterfaceNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createInstanceNetworkInterface(null).execute();
  }

  // Test the deleteInstanceNetworkInterface operation with a valid options model parameter
  @Test
  public void testDeleteInstanceNetworkInterfaceWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteInstanceNetworkInterfacePath = "/instances/testString/network_interfaces/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteInstanceNetworkInterfaceOptions model
    DeleteInstanceNetworkInterfaceOptions deleteInstanceNetworkInterfaceOptionsModel = new DeleteInstanceNetworkInterfaceOptions.Builder()
      .instanceId("testString")
      .id("testString")
      .build();

    // Invoke deleteInstanceNetworkInterface() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteInstanceNetworkInterface(deleteInstanceNetworkInterfaceOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteInstanceNetworkInterfacePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteInstanceNetworkInterface operation with and without retries enabled
  @Test
  public void testDeleteInstanceNetworkInterfaceWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteInstanceNetworkInterfaceWOptions();

    vpcService.disableRetries();
    testDeleteInstanceNetworkInterfaceWOptions();
  }

  // Test the deleteInstanceNetworkInterface operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteInstanceNetworkInterfaceNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteInstanceNetworkInterface(null).execute();
  }

  // Test the getInstanceNetworkInterface operation with a valid options model parameter
  @Test
  public void testGetInstanceNetworkInterfaceWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"allow_ip_spoofing\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"floating_ips\": [{\"address\": \"203.0.113.1\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"id\": \"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"name\": \"my-floating-ip\"}], \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-interface\", \"port_speed\": 1000, \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"status\": \"available\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"type\": \"primary\"}";
    String getInstanceNetworkInterfacePath = "/instances/testString/network_interfaces/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetInstanceNetworkInterfaceOptions model
    GetInstanceNetworkInterfaceOptions getInstanceNetworkInterfaceOptionsModel = new GetInstanceNetworkInterfaceOptions.Builder()
      .instanceId("testString")
      .id("testString")
      .build();

    // Invoke getInstanceNetworkInterface() with a valid options model and verify the result
    Response<NetworkInterface> response = vpcService.getInstanceNetworkInterface(getInstanceNetworkInterfaceOptionsModel).execute();
    assertNotNull(response);
    NetworkInterface responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getInstanceNetworkInterfacePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getInstanceNetworkInterface operation with and without retries enabled
  @Test
  public void testGetInstanceNetworkInterfaceWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetInstanceNetworkInterfaceWOptions();

    vpcService.disableRetries();
    testGetInstanceNetworkInterfaceWOptions();
  }

  // Test the getInstanceNetworkInterface operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetInstanceNetworkInterfaceNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getInstanceNetworkInterface(null).execute();
  }

  // Test the updateInstanceNetworkInterface operation with a valid options model parameter
  @Test
  public void testUpdateInstanceNetworkInterfaceWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"allow_ip_spoofing\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"floating_ips\": [{\"address\": \"203.0.113.1\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"id\": \"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"name\": \"my-floating-ip\"}], \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-interface\", \"port_speed\": 1000, \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"status\": \"available\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"type\": \"primary\"}";
    String updateInstanceNetworkInterfacePath = "/instances/testString/network_interfaces/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the NetworkInterfacePatch model
    NetworkInterfacePatch networkInterfacePatchModel = new NetworkInterfacePatch.Builder()
      .allowIpSpoofing(true)
      .name("my-network-interface-updated")
      .build();
    Map<String, Object> networkInterfacePatchModelAsPatch = networkInterfacePatchModel.asPatch();

    // Construct an instance of the UpdateInstanceNetworkInterfaceOptions model
    UpdateInstanceNetworkInterfaceOptions updateInstanceNetworkInterfaceOptionsModel = new UpdateInstanceNetworkInterfaceOptions.Builder()
      .instanceId("testString")
      .id("testString")
      .networkInterfacePatch(networkInterfacePatchModelAsPatch)
      .build();

    // Invoke updateInstanceNetworkInterface() with a valid options model and verify the result
    Response<NetworkInterface> response = vpcService.updateInstanceNetworkInterface(updateInstanceNetworkInterfaceOptionsModel).execute();
    assertNotNull(response);
    NetworkInterface responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateInstanceNetworkInterfacePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateInstanceNetworkInterface operation with and without retries enabled
  @Test
  public void testUpdateInstanceNetworkInterfaceWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateInstanceNetworkInterfaceWOptions();

    vpcService.disableRetries();
    testUpdateInstanceNetworkInterfaceWOptions();
  }

  // Test the updateInstanceNetworkInterface operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateInstanceNetworkInterfaceNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateInstanceNetworkInterface(null).execute();
  }

  // Test the listInstanceNetworkInterfaceFloatingIps operation with a valid options model parameter
  @Test
  public void testListInstanceNetworkInterfaceFloatingIpsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"floating_ips\": [{\"address\": \"203.0.113.1\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"id\": \"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"name\": \"my-floating-ip\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"status\": \"available\", \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}]}";
    String listInstanceNetworkInterfaceFloatingIpsPath = "/instances/testString/network_interfaces/testString/floating_ips";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListInstanceNetworkInterfaceFloatingIpsOptions model
    ListInstanceNetworkInterfaceFloatingIpsOptions listInstanceNetworkInterfaceFloatingIpsOptionsModel = new ListInstanceNetworkInterfaceFloatingIpsOptions.Builder()
      .instanceId("testString")
      .networkInterfaceId("testString")
      .build();

    // Invoke listInstanceNetworkInterfaceFloatingIps() with a valid options model and verify the result
    Response<FloatingIPUnpaginatedCollection> response = vpcService.listInstanceNetworkInterfaceFloatingIps(listInstanceNetworkInterfaceFloatingIpsOptionsModel).execute();
    assertNotNull(response);
    FloatingIPUnpaginatedCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listInstanceNetworkInterfaceFloatingIpsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listInstanceNetworkInterfaceFloatingIps operation with and without retries enabled
  @Test
  public void testListInstanceNetworkInterfaceFloatingIpsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListInstanceNetworkInterfaceFloatingIpsWOptions();

    vpcService.disableRetries();
    testListInstanceNetworkInterfaceFloatingIpsWOptions();
  }

  // Test the listInstanceNetworkInterfaceFloatingIps operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListInstanceNetworkInterfaceFloatingIpsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listInstanceNetworkInterfaceFloatingIps(null).execute();
  }

  // Test the removeInstanceNetworkInterfaceFloatingIp operation with a valid options model parameter
  @Test
  public void testRemoveInstanceNetworkInterfaceFloatingIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String removeInstanceNetworkInterfaceFloatingIpPath = "/instances/testString/network_interfaces/testString/floating_ips/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the RemoveInstanceNetworkInterfaceFloatingIpOptions model
    RemoveInstanceNetworkInterfaceFloatingIpOptions removeInstanceNetworkInterfaceFloatingIpOptionsModel = new RemoveInstanceNetworkInterfaceFloatingIpOptions.Builder()
      .instanceId("testString")
      .networkInterfaceId("testString")
      .id("testString")
      .build();

    // Invoke removeInstanceNetworkInterfaceFloatingIp() with a valid options model and verify the result
    Response<Void> response = vpcService.removeInstanceNetworkInterfaceFloatingIp(removeInstanceNetworkInterfaceFloatingIpOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, removeInstanceNetworkInterfaceFloatingIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the removeInstanceNetworkInterfaceFloatingIp operation with and without retries enabled
  @Test
  public void testRemoveInstanceNetworkInterfaceFloatingIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testRemoveInstanceNetworkInterfaceFloatingIpWOptions();

    vpcService.disableRetries();
    testRemoveInstanceNetworkInterfaceFloatingIpWOptions();
  }

  // Test the removeInstanceNetworkInterfaceFloatingIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testRemoveInstanceNetworkInterfaceFloatingIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.removeInstanceNetworkInterfaceFloatingIp(null).execute();
  }

  // Test the getInstanceNetworkInterfaceFloatingIp operation with a valid options model parameter
  @Test
  public void testGetInstanceNetworkInterfaceFloatingIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"203.0.113.1\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"id\": \"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"name\": \"my-floating-ip\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"status\": \"available\", \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getInstanceNetworkInterfaceFloatingIpPath = "/instances/testString/network_interfaces/testString/floating_ips/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetInstanceNetworkInterfaceFloatingIpOptions model
    GetInstanceNetworkInterfaceFloatingIpOptions getInstanceNetworkInterfaceFloatingIpOptionsModel = new GetInstanceNetworkInterfaceFloatingIpOptions.Builder()
      .instanceId("testString")
      .networkInterfaceId("testString")
      .id("testString")
      .build();

    // Invoke getInstanceNetworkInterfaceFloatingIp() with a valid options model and verify the result
    Response<FloatingIP> response = vpcService.getInstanceNetworkInterfaceFloatingIp(getInstanceNetworkInterfaceFloatingIpOptionsModel).execute();
    assertNotNull(response);
    FloatingIP responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getInstanceNetworkInterfaceFloatingIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getInstanceNetworkInterfaceFloatingIp operation with and without retries enabled
  @Test
  public void testGetInstanceNetworkInterfaceFloatingIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetInstanceNetworkInterfaceFloatingIpWOptions();

    vpcService.disableRetries();
    testGetInstanceNetworkInterfaceFloatingIpWOptions();
  }

  // Test the getInstanceNetworkInterfaceFloatingIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetInstanceNetworkInterfaceFloatingIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getInstanceNetworkInterfaceFloatingIp(null).execute();
  }

  // Test the addInstanceNetworkInterfaceFloatingIp operation with a valid options model parameter
  @Test
  public void testAddInstanceNetworkInterfaceFloatingIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"203.0.113.1\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"id\": \"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"name\": \"my-floating-ip\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"status\": \"available\", \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String addInstanceNetworkInterfaceFloatingIpPath = "/instances/testString/network_interfaces/testString/floating_ips/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the AddInstanceNetworkInterfaceFloatingIpOptions model
    AddInstanceNetworkInterfaceFloatingIpOptions addInstanceNetworkInterfaceFloatingIpOptionsModel = new AddInstanceNetworkInterfaceFloatingIpOptions.Builder()
      .instanceId("testString")
      .networkInterfaceId("testString")
      .id("testString")
      .build();

    // Invoke addInstanceNetworkInterfaceFloatingIp() with a valid options model and verify the result
    Response<FloatingIP> response = vpcService.addInstanceNetworkInterfaceFloatingIp(addInstanceNetworkInterfaceFloatingIpOptionsModel).execute();
    assertNotNull(response);
    FloatingIP responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PUT");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, addInstanceNetworkInterfaceFloatingIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the addInstanceNetworkInterfaceFloatingIp operation with and without retries enabled
  @Test
  public void testAddInstanceNetworkInterfaceFloatingIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testAddInstanceNetworkInterfaceFloatingIpWOptions();

    vpcService.disableRetries();
    testAddInstanceNetworkInterfaceFloatingIpWOptions();
  }

  // Test the addInstanceNetworkInterfaceFloatingIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testAddInstanceNetworkInterfaceFloatingIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.addInstanceNetworkInterfaceFloatingIp(null).execute();
  }

  // Test the listInstanceNetworkInterfaceIps operation with a valid options model parameter
  @Test
  public void testListInstanceNetworkInterfaceIpsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"ips\": [{\"address\": \"192.168.3.4\", \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"lifecycle_state\": \"stable\", \"name\": \"my-reserved-ip\", \"owner\": \"provider\", \"resource_type\": \"subnet_reserved_ip\", \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"id\": \"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"name\": \"my-endpoint-gateway\", \"resource_type\": \"endpoint_gateway\"}}], \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listInstanceNetworkInterfaceIpsPath = "/instances/testString/network_interfaces/testString/ips";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListInstanceNetworkInterfaceIpsOptions model
    ListInstanceNetworkInterfaceIpsOptions listInstanceNetworkInterfaceIpsOptionsModel = new ListInstanceNetworkInterfaceIpsOptions.Builder()
      .instanceId("testString")
      .networkInterfaceId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listInstanceNetworkInterfaceIps() with a valid options model and verify the result
    Response<ReservedIPCollectionInstanceNetworkInterfaceContext> response = vpcService.listInstanceNetworkInterfaceIps(listInstanceNetworkInterfaceIpsOptionsModel).execute();
    assertNotNull(response);
    ReservedIPCollectionInstanceNetworkInterfaceContext responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listInstanceNetworkInterfaceIpsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listInstanceNetworkInterfaceIps operation with and without retries enabled
  @Test
  public void testListInstanceNetworkInterfaceIpsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListInstanceNetworkInterfaceIpsWOptions();

    vpcService.disableRetries();
    testListInstanceNetworkInterfaceIpsWOptions();
  }

  // Test the listInstanceNetworkInterfaceIps operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListInstanceNetworkInterfaceIpsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listInstanceNetworkInterfaceIps(null).execute();
  }

  // Test the listInstanceNetworkInterfaceIps operation using the InstanceNetworkInterfaceIpsPager.getNext() method
  @Test
  public void testListInstanceNetworkInterfaceIpsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"ips\":[{\"address\":\"192.168.3.4\",\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"lifecycle_state\":\"stable\",\"name\":\"my-reserved-ip\",\"owner\":\"provider\",\"resource_type\":\"subnet_reserved_ip\",\"target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"id\":\"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"name\":\"my-endpoint-gateway\",\"resource_type\":\"endpoint_gateway\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"ips\":[{\"address\":\"192.168.3.4\",\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"lifecycle_state\":\"stable\",\"name\":\"my-reserved-ip\",\"owner\":\"provider\",\"resource_type\":\"subnet_reserved_ip\",\"target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"id\":\"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"name\":\"my-endpoint-gateway\",\"resource_type\":\"endpoint_gateway\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListInstanceNetworkInterfaceIpsOptions listInstanceNetworkInterfaceIpsOptions = new ListInstanceNetworkInterfaceIpsOptions.Builder()
      .instanceId("testString")
      .networkInterfaceId("testString")
      .limit(Long.valueOf("10"))
      .build();

    List<ReservedIP> allResults = new ArrayList<>();
    InstanceNetworkInterfaceIpsPager pager = new InstanceNetworkInterfaceIpsPager(vpcService, listInstanceNetworkInterfaceIpsOptions);
    while (pager.hasNext()) {
      List<ReservedIP> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listInstanceNetworkInterfaceIps operation using the InstanceNetworkInterfaceIpsPager.getAll() method
  @Test
  public void testListInstanceNetworkInterfaceIpsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"ips\":[{\"address\":\"192.168.3.4\",\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"lifecycle_state\":\"stable\",\"name\":\"my-reserved-ip\",\"owner\":\"provider\",\"resource_type\":\"subnet_reserved_ip\",\"target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"id\":\"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"name\":\"my-endpoint-gateway\",\"resource_type\":\"endpoint_gateway\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"ips\":[{\"address\":\"192.168.3.4\",\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"lifecycle_state\":\"stable\",\"name\":\"my-reserved-ip\",\"owner\":\"provider\",\"resource_type\":\"subnet_reserved_ip\",\"target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"id\":\"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"name\":\"my-endpoint-gateway\",\"resource_type\":\"endpoint_gateway\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListInstanceNetworkInterfaceIpsOptions listInstanceNetworkInterfaceIpsOptions = new ListInstanceNetworkInterfaceIpsOptions.Builder()
      .instanceId("testString")
      .networkInterfaceId("testString")
      .limit(Long.valueOf("10"))
      .build();

    InstanceNetworkInterfaceIpsPager pager = new InstanceNetworkInterfaceIpsPager(vpcService, listInstanceNetworkInterfaceIpsOptions);
    List<ReservedIP> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the getInstanceNetworkInterfaceIp operation with a valid options model parameter
  @Test
  public void testGetInstanceNetworkInterfaceIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"192.168.3.4\", \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"lifecycle_state\": \"stable\", \"name\": \"my-reserved-ip\", \"owner\": \"provider\", \"resource_type\": \"subnet_reserved_ip\", \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"id\": \"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"name\": \"my-endpoint-gateway\", \"resource_type\": \"endpoint_gateway\"}}";
    String getInstanceNetworkInterfaceIpPath = "/instances/testString/network_interfaces/testString/ips/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetInstanceNetworkInterfaceIpOptions model
    GetInstanceNetworkInterfaceIpOptions getInstanceNetworkInterfaceIpOptionsModel = new GetInstanceNetworkInterfaceIpOptions.Builder()
      .instanceId("testString")
      .networkInterfaceId("testString")
      .id("testString")
      .build();

    // Invoke getInstanceNetworkInterfaceIp() with a valid options model and verify the result
    Response<ReservedIP> response = vpcService.getInstanceNetworkInterfaceIp(getInstanceNetworkInterfaceIpOptionsModel).execute();
    assertNotNull(response);
    ReservedIP responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getInstanceNetworkInterfaceIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getInstanceNetworkInterfaceIp operation with and without retries enabled
  @Test
  public void testGetInstanceNetworkInterfaceIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetInstanceNetworkInterfaceIpWOptions();

    vpcService.disableRetries();
    testGetInstanceNetworkInterfaceIpWOptions();
  }

  // Test the getInstanceNetworkInterfaceIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetInstanceNetworkInterfaceIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getInstanceNetworkInterfaceIp(null).execute();
  }

  // Test the listInstanceVolumeAttachments operation with a valid options model parameter
  @Test
  public void testListInstanceVolumeAttachmentsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"volume_attachments\": [{\"bandwidth\": 250, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"delete_volume_on_instance_delete\": true, \"device\": {\"id\": \"id\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/volume_attachments/0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"id\": \"0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"name\": \"my-volume-attachment\", \"status\": \"attached\", \"type\": \"boot\", \"volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\", \"resource_type\": \"volume\"}}]}";
    String listInstanceVolumeAttachmentsPath = "/instances/testString/volume_attachments";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListInstanceVolumeAttachmentsOptions model
    ListInstanceVolumeAttachmentsOptions listInstanceVolumeAttachmentsOptionsModel = new ListInstanceVolumeAttachmentsOptions.Builder()
      .instanceId("testString")
      .build();

    // Invoke listInstanceVolumeAttachments() with a valid options model and verify the result
    Response<VolumeAttachmentCollection> response = vpcService.listInstanceVolumeAttachments(listInstanceVolumeAttachmentsOptionsModel).execute();
    assertNotNull(response);
    VolumeAttachmentCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listInstanceVolumeAttachmentsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listInstanceVolumeAttachments operation with and without retries enabled
  @Test
  public void testListInstanceVolumeAttachmentsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListInstanceVolumeAttachmentsWOptions();

    vpcService.disableRetries();
    testListInstanceVolumeAttachmentsWOptions();
  }

  // Test the listInstanceVolumeAttachments operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListInstanceVolumeAttachmentsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listInstanceVolumeAttachments(null).execute();
  }

  // Test the createInstanceVolumeAttachment operation with a valid options model parameter
  @Test
  public void testCreateInstanceVolumeAttachmentWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"bandwidth\": 250, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"delete_volume_on_instance_delete\": true, \"device\": {\"id\": \"id\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/volume_attachments/0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"id\": \"0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"name\": \"my-volume-attachment\", \"status\": \"attached\", \"type\": \"boot\", \"volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\", \"resource_type\": \"volume\"}}";
    String createInstanceVolumeAttachmentPath = "/instances/testString/volume_attachments";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the VolumeAttachmentPrototypeVolumeVolumeIdentityVolumeIdentityById model
    VolumeAttachmentPrototypeVolumeVolumeIdentityVolumeIdentityById volumeAttachmentPrototypeVolumeModel = new VolumeAttachmentPrototypeVolumeVolumeIdentityVolumeIdentityById.Builder()
      .id("r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5")
      .build();

    // Construct an instance of the CreateInstanceVolumeAttachmentOptions model
    CreateInstanceVolumeAttachmentOptions createInstanceVolumeAttachmentOptionsModel = new CreateInstanceVolumeAttachmentOptions.Builder()
      .instanceId("testString")
      .volume(volumeAttachmentPrototypeVolumeModel)
      .deleteVolumeOnInstanceDelete(false)
      .name("my-volume-attachment")
      .build();

    // Invoke createInstanceVolumeAttachment() with a valid options model and verify the result
    Response<VolumeAttachment> response = vpcService.createInstanceVolumeAttachment(createInstanceVolumeAttachmentOptionsModel).execute();
    assertNotNull(response);
    VolumeAttachment responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createInstanceVolumeAttachmentPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createInstanceVolumeAttachment operation with and without retries enabled
  @Test
  public void testCreateInstanceVolumeAttachmentWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateInstanceVolumeAttachmentWOptions();

    vpcService.disableRetries();
    testCreateInstanceVolumeAttachmentWOptions();
  }

  // Test the createInstanceVolumeAttachment operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateInstanceVolumeAttachmentNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createInstanceVolumeAttachment(null).execute();
  }

  // Test the deleteInstanceVolumeAttachment operation with a valid options model parameter
  @Test
  public void testDeleteInstanceVolumeAttachmentWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteInstanceVolumeAttachmentPath = "/instances/testString/volume_attachments/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteInstanceVolumeAttachmentOptions model
    DeleteInstanceVolumeAttachmentOptions deleteInstanceVolumeAttachmentOptionsModel = new DeleteInstanceVolumeAttachmentOptions.Builder()
      .instanceId("testString")
      .id("testString")
      .build();

    // Invoke deleteInstanceVolumeAttachment() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteInstanceVolumeAttachment(deleteInstanceVolumeAttachmentOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteInstanceVolumeAttachmentPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteInstanceVolumeAttachment operation with and without retries enabled
  @Test
  public void testDeleteInstanceVolumeAttachmentWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteInstanceVolumeAttachmentWOptions();

    vpcService.disableRetries();
    testDeleteInstanceVolumeAttachmentWOptions();
  }

  // Test the deleteInstanceVolumeAttachment operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteInstanceVolumeAttachmentNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteInstanceVolumeAttachment(null).execute();
  }

  // Test the getInstanceVolumeAttachment operation with a valid options model parameter
  @Test
  public void testGetInstanceVolumeAttachmentWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"bandwidth\": 250, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"delete_volume_on_instance_delete\": true, \"device\": {\"id\": \"id\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/volume_attachments/0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"id\": \"0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"name\": \"my-volume-attachment\", \"status\": \"attached\", \"type\": \"boot\", \"volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\", \"resource_type\": \"volume\"}}";
    String getInstanceVolumeAttachmentPath = "/instances/testString/volume_attachments/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetInstanceVolumeAttachmentOptions model
    GetInstanceVolumeAttachmentOptions getInstanceVolumeAttachmentOptionsModel = new GetInstanceVolumeAttachmentOptions.Builder()
      .instanceId("testString")
      .id("testString")
      .build();

    // Invoke getInstanceVolumeAttachment() with a valid options model and verify the result
    Response<VolumeAttachment> response = vpcService.getInstanceVolumeAttachment(getInstanceVolumeAttachmentOptionsModel).execute();
    assertNotNull(response);
    VolumeAttachment responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getInstanceVolumeAttachmentPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getInstanceVolumeAttachment operation with and without retries enabled
  @Test
  public void testGetInstanceVolumeAttachmentWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetInstanceVolumeAttachmentWOptions();

    vpcService.disableRetries();
    testGetInstanceVolumeAttachmentWOptions();
  }

  // Test the getInstanceVolumeAttachment operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetInstanceVolumeAttachmentNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getInstanceVolumeAttachment(null).execute();
  }

  // Test the updateInstanceVolumeAttachment operation with a valid options model parameter
  @Test
  public void testUpdateInstanceVolumeAttachmentWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"bandwidth\": 250, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"delete_volume_on_instance_delete\": true, \"device\": {\"id\": \"id\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/volume_attachments/0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"id\": \"0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"name\": \"my-volume-attachment\", \"status\": \"attached\", \"type\": \"boot\", \"volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\", \"resource_type\": \"volume\"}}";
    String updateInstanceVolumeAttachmentPath = "/instances/testString/volume_attachments/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the VolumeAttachmentPatch model
    VolumeAttachmentPatch volumeAttachmentPatchModel = new VolumeAttachmentPatch.Builder()
      .deleteVolumeOnInstanceDelete(true)
      .name("my-volume-attachment")
      .build();
    Map<String, Object> volumeAttachmentPatchModelAsPatch = volumeAttachmentPatchModel.asPatch();

    // Construct an instance of the UpdateInstanceVolumeAttachmentOptions model
    UpdateInstanceVolumeAttachmentOptions updateInstanceVolumeAttachmentOptionsModel = new UpdateInstanceVolumeAttachmentOptions.Builder()
      .instanceId("testString")
      .id("testString")
      .volumeAttachmentPatch(volumeAttachmentPatchModelAsPatch)
      .build();

    // Invoke updateInstanceVolumeAttachment() with a valid options model and verify the result
    Response<VolumeAttachment> response = vpcService.updateInstanceVolumeAttachment(updateInstanceVolumeAttachmentOptionsModel).execute();
    assertNotNull(response);
    VolumeAttachment responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateInstanceVolumeAttachmentPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateInstanceVolumeAttachment operation with and without retries enabled
  @Test
  public void testUpdateInstanceVolumeAttachmentWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateInstanceVolumeAttachmentWOptions();

    vpcService.disableRetries();
    testUpdateInstanceVolumeAttachmentWOptions();
  }

  // Test the updateInstanceVolumeAttachment operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateInstanceVolumeAttachmentNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateInstanceVolumeAttachment(null).execute();
  }

  // Test the listInstanceGroups operation with a valid options model parameter
  @Test
  public void testListInstanceGroupsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"instance_groups\": [{\"application_port\": 22, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::instance-group:r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\", \"id\": \"r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\", \"instance_template\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance-template:0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\", \"id\": \"0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\", \"name\": \"my-instance-template\"}, \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"load_balancer_pool\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}, \"managers\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea\", \"id\": \"r006-bd21f31f-8a05-4451-836d-ab0347e91fea\", \"name\": \"my-instance-group-manager\"}], \"membership_count\": 10, \"name\": \"my-instance-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"status\": \"deleting\", \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"updated_at\": \"2019-01-01T12:00:00.000Z\", \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}], \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listInstanceGroupsPath = "/instance_groups";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListInstanceGroupsOptions model
    ListInstanceGroupsOptions listInstanceGroupsOptionsModel = new ListInstanceGroupsOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listInstanceGroups() with a valid options model and verify the result
    Response<InstanceGroupCollection> response = vpcService.listInstanceGroups(listInstanceGroupsOptionsModel).execute();
    assertNotNull(response);
    InstanceGroupCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listInstanceGroupsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listInstanceGroups operation with and without retries enabled
  @Test
  public void testListInstanceGroupsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListInstanceGroupsWOptions();

    vpcService.disableRetries();
    testListInstanceGroupsWOptions();
  }

  // Test the listInstanceGroups operation using the InstanceGroupsPager.getNext() method
  @Test
  public void testListInstanceGroupsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"instance_groups\":[{\"application_port\":22,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::instance-group:r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\",\"id\":\"r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\",\"instance_template\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance-template:0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\",\"id\":\"0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\",\"name\":\"my-instance-template\"},\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"load_balancer_pool\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004\",\"id\":\"r006-70294e14-4e61-11e8-bcf4-0242ac110004\",\"name\":\"my-load-balancer-pool\"},\"managers\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea\",\"id\":\"r006-bd21f31f-8a05-4451-836d-ab0347e91fea\",\"name\":\"my-instance-group-manager\"}],\"membership_count\":10,\"name\":\"my-instance-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"status\":\"deleting\",\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}],\"updated_at\":\"2019-01-01T12:00:00.000Z\",\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"instance_groups\":[{\"application_port\":22,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::instance-group:r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\",\"id\":\"r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\",\"instance_template\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance-template:0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\",\"id\":\"0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\",\"name\":\"my-instance-template\"},\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"load_balancer_pool\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004\",\"id\":\"r006-70294e14-4e61-11e8-bcf4-0242ac110004\",\"name\":\"my-load-balancer-pool\"},\"managers\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea\",\"id\":\"r006-bd21f31f-8a05-4451-836d-ab0347e91fea\",\"name\":\"my-instance-group-manager\"}],\"membership_count\":10,\"name\":\"my-instance-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"status\":\"deleting\",\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}],\"updated_at\":\"2019-01-01T12:00:00.000Z\",\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListInstanceGroupsOptions listInstanceGroupsOptions = new ListInstanceGroupsOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    List<InstanceGroup> allResults = new ArrayList<>();
    InstanceGroupsPager pager = new InstanceGroupsPager(vpcService, listInstanceGroupsOptions);
    while (pager.hasNext()) {
      List<InstanceGroup> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listInstanceGroups operation using the InstanceGroupsPager.getAll() method
  @Test
  public void testListInstanceGroupsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"instance_groups\":[{\"application_port\":22,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::instance-group:r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\",\"id\":\"r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\",\"instance_template\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance-template:0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\",\"id\":\"0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\",\"name\":\"my-instance-template\"},\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"load_balancer_pool\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004\",\"id\":\"r006-70294e14-4e61-11e8-bcf4-0242ac110004\",\"name\":\"my-load-balancer-pool\"},\"managers\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea\",\"id\":\"r006-bd21f31f-8a05-4451-836d-ab0347e91fea\",\"name\":\"my-instance-group-manager\"}],\"membership_count\":10,\"name\":\"my-instance-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"status\":\"deleting\",\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}],\"updated_at\":\"2019-01-01T12:00:00.000Z\",\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"instance_groups\":[{\"application_port\":22,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::instance-group:r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\",\"id\":\"r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\",\"instance_template\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance-template:0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\",\"id\":\"0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\",\"name\":\"my-instance-template\"},\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"load_balancer_pool\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004\",\"id\":\"r006-70294e14-4e61-11e8-bcf4-0242ac110004\",\"name\":\"my-load-balancer-pool\"},\"managers\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea\",\"id\":\"r006-bd21f31f-8a05-4451-836d-ab0347e91fea\",\"name\":\"my-instance-group-manager\"}],\"membership_count\":10,\"name\":\"my-instance-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"status\":\"deleting\",\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}],\"updated_at\":\"2019-01-01T12:00:00.000Z\",\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListInstanceGroupsOptions listInstanceGroupsOptions = new ListInstanceGroupsOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    InstanceGroupsPager pager = new InstanceGroupsPager(vpcService, listInstanceGroupsOptions);
    List<InstanceGroup> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createInstanceGroup operation with a valid options model parameter
  @Test
  public void testCreateInstanceGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"application_port\": 22, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::instance-group:r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\", \"id\": \"r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\", \"instance_template\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance-template:0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\", \"id\": \"0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\", \"name\": \"my-instance-template\"}, \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"load_balancer_pool\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}, \"managers\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea\", \"id\": \"r006-bd21f31f-8a05-4451-836d-ab0347e91fea\", \"name\": \"my-instance-group-manager\"}], \"membership_count\": 10, \"name\": \"my-instance-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"status\": \"deleting\", \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"updated_at\": \"2019-01-01T12:00:00.000Z\", \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String createInstanceGroupPath = "/instance_groups";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the InstanceTemplateIdentityById model
    InstanceTemplateIdentityById instanceTemplateIdentityModel = new InstanceTemplateIdentityById.Builder()
      .id("0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2")
      .build();

    // Construct an instance of the SubnetIdentityById model
    SubnetIdentityById subnetIdentityModel = new SubnetIdentityById.Builder()
      .id("0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
      .build();

    // Construct an instance of the LoadBalancerIdentityById model
    LoadBalancerIdentityById loadBalancerIdentityModel = new LoadBalancerIdentityById.Builder()
      .id("r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727")
      .build();

    // Construct an instance of the LoadBalancerPoolIdentityLoadBalancerPoolIdentityById model
    LoadBalancerPoolIdentityLoadBalancerPoolIdentityById loadBalancerPoolIdentityModel = new LoadBalancerPoolIdentityLoadBalancerPoolIdentityById.Builder()
      .id("r006-70294e14-4e61-11e8-bcf4-0242ac110004")
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the CreateInstanceGroupOptions model
    CreateInstanceGroupOptions createInstanceGroupOptionsModel = new CreateInstanceGroupOptions.Builder()
      .instanceTemplate(instanceTemplateIdentityModel)
      .subnets(java.util.Arrays.asList(subnetIdentityModel))
      .applicationPort(Long.valueOf("22"))
      .loadBalancer(loadBalancerIdentityModel)
      .loadBalancerPool(loadBalancerPoolIdentityModel)
      .membershipCount(Long.valueOf("10"))
      .name("my-instance-group")
      .resourceGroup(resourceGroupIdentityModel)
      .build();

    // Invoke createInstanceGroup() with a valid options model and verify the result
    Response<InstanceGroup> response = vpcService.createInstanceGroup(createInstanceGroupOptionsModel).execute();
    assertNotNull(response);
    InstanceGroup responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createInstanceGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createInstanceGroup operation with and without retries enabled
  @Test
  public void testCreateInstanceGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateInstanceGroupWOptions();

    vpcService.disableRetries();
    testCreateInstanceGroupWOptions();
  }

  // Test the createInstanceGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateInstanceGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createInstanceGroup(null).execute();
  }

  // Test the deleteInstanceGroup operation with a valid options model parameter
  @Test
  public void testDeleteInstanceGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteInstanceGroupPath = "/instance_groups/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteInstanceGroupOptions model
    DeleteInstanceGroupOptions deleteInstanceGroupOptionsModel = new DeleteInstanceGroupOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteInstanceGroup() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteInstanceGroup(deleteInstanceGroupOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteInstanceGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteInstanceGroup operation with and without retries enabled
  @Test
  public void testDeleteInstanceGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteInstanceGroupWOptions();

    vpcService.disableRetries();
    testDeleteInstanceGroupWOptions();
  }

  // Test the deleteInstanceGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteInstanceGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteInstanceGroup(null).execute();
  }

  // Test the getInstanceGroup operation with a valid options model parameter
  @Test
  public void testGetInstanceGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"application_port\": 22, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::instance-group:r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\", \"id\": \"r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\", \"instance_template\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance-template:0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\", \"id\": \"0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\", \"name\": \"my-instance-template\"}, \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"load_balancer_pool\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}, \"managers\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea\", \"id\": \"r006-bd21f31f-8a05-4451-836d-ab0347e91fea\", \"name\": \"my-instance-group-manager\"}], \"membership_count\": 10, \"name\": \"my-instance-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"status\": \"deleting\", \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"updated_at\": \"2019-01-01T12:00:00.000Z\", \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String getInstanceGroupPath = "/instance_groups/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetInstanceGroupOptions model
    GetInstanceGroupOptions getInstanceGroupOptionsModel = new GetInstanceGroupOptions.Builder()
      .id("testString")
      .build();

    // Invoke getInstanceGroup() with a valid options model and verify the result
    Response<InstanceGroup> response = vpcService.getInstanceGroup(getInstanceGroupOptionsModel).execute();
    assertNotNull(response);
    InstanceGroup responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getInstanceGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getInstanceGroup operation with and without retries enabled
  @Test
  public void testGetInstanceGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetInstanceGroupWOptions();

    vpcService.disableRetries();
    testGetInstanceGroupWOptions();
  }

  // Test the getInstanceGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetInstanceGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getInstanceGroup(null).execute();
  }

  // Test the updateInstanceGroup operation with a valid options model parameter
  @Test
  public void testUpdateInstanceGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"application_port\": 22, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::instance-group:r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\", \"id\": \"r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\", \"instance_template\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance-template:0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\", \"id\": \"0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\", \"name\": \"my-instance-template\"}, \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"load_balancer_pool\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}, \"managers\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea\", \"id\": \"r006-bd21f31f-8a05-4451-836d-ab0347e91fea\", \"name\": \"my-instance-group-manager\"}], \"membership_count\": 10, \"name\": \"my-instance-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"status\": \"deleting\", \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"updated_at\": \"2019-01-01T12:00:00.000Z\", \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String updateInstanceGroupPath = "/instance_groups/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the InstanceTemplateIdentityById model
    InstanceTemplateIdentityById instanceTemplateIdentityModel = new InstanceTemplateIdentityById.Builder()
      .id("0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2")
      .build();

    // Construct an instance of the LoadBalancerIdentityById model
    LoadBalancerIdentityById loadBalancerIdentityModel = new LoadBalancerIdentityById.Builder()
      .id("r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727")
      .build();

    // Construct an instance of the LoadBalancerPoolIdentityLoadBalancerPoolIdentityById model
    LoadBalancerPoolIdentityLoadBalancerPoolIdentityById loadBalancerPoolIdentityModel = new LoadBalancerPoolIdentityLoadBalancerPoolIdentityById.Builder()
      .id("r006-70294e14-4e61-11e8-bcf4-0242ac110004")
      .build();

    // Construct an instance of the SubnetIdentityById model
    SubnetIdentityById subnetIdentityModel = new SubnetIdentityById.Builder()
      .id("0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
      .build();

    // Construct an instance of the InstanceGroupPatch model
    InstanceGroupPatch instanceGroupPatchModel = new InstanceGroupPatch.Builder()
      .applicationPort(Long.valueOf("22"))
      .instanceTemplate(instanceTemplateIdentityModel)
      .loadBalancer(loadBalancerIdentityModel)
      .loadBalancerPool(loadBalancerPoolIdentityModel)
      .membershipCount(Long.valueOf("20"))
      .name("my-instance-group")
      .subnets(java.util.Arrays.asList(subnetIdentityModel))
      .build();
    Map<String, Object> instanceGroupPatchModelAsPatch = instanceGroupPatchModel.asPatch();

    // Construct an instance of the UpdateInstanceGroupOptions model
    UpdateInstanceGroupOptions updateInstanceGroupOptionsModel = new UpdateInstanceGroupOptions.Builder()
      .id("testString")
      .instanceGroupPatch(instanceGroupPatchModelAsPatch)
      .build();

    // Invoke updateInstanceGroup() with a valid options model and verify the result
    Response<InstanceGroup> response = vpcService.updateInstanceGroup(updateInstanceGroupOptionsModel).execute();
    assertNotNull(response);
    InstanceGroup responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateInstanceGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateInstanceGroup operation with and without retries enabled
  @Test
  public void testUpdateInstanceGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateInstanceGroupWOptions();

    vpcService.disableRetries();
    testUpdateInstanceGroupWOptions();
  }

  // Test the updateInstanceGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateInstanceGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateInstanceGroup(null).execute();
  }

  // Test the deleteInstanceGroupLoadBalancer operation with a valid options model parameter
  @Test
  public void testDeleteInstanceGroupLoadBalancerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteInstanceGroupLoadBalancerPath = "/instance_groups/testString/load_balancer";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteInstanceGroupLoadBalancerOptions model
    DeleteInstanceGroupLoadBalancerOptions deleteInstanceGroupLoadBalancerOptionsModel = new DeleteInstanceGroupLoadBalancerOptions.Builder()
      .instanceGroupId("testString")
      .build();

    // Invoke deleteInstanceGroupLoadBalancer() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteInstanceGroupLoadBalancer(deleteInstanceGroupLoadBalancerOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteInstanceGroupLoadBalancerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteInstanceGroupLoadBalancer operation with and without retries enabled
  @Test
  public void testDeleteInstanceGroupLoadBalancerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteInstanceGroupLoadBalancerWOptions();

    vpcService.disableRetries();
    testDeleteInstanceGroupLoadBalancerWOptions();
  }

  // Test the deleteInstanceGroupLoadBalancer operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteInstanceGroupLoadBalancerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteInstanceGroupLoadBalancer(null).execute();
  }

  // Test the listInstanceGroupManagers operation with a valid options model parameter
  @Test
  public void testListInstanceGroupManagersWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"managers\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea\", \"id\": \"r006-bd21f31f-8a05-4451-836d-ab0347e91fea\", \"management_enabled\": false, \"name\": \"my-instance-group-manager\", \"updated_at\": \"2019-01-01T12:00:00.000Z\", \"aggregation_window\": 120, \"cooldown\": 210, \"manager_type\": \"autoscale\", \"max_membership_count\": 10, \"min_membership_count\": 10, \"policies\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea/policies/r006-ca664290-30eb-4ad7-9fb6-db45731f0be7\", \"id\": \"r006-ca664290-30eb-4ad7-9fb6-db45731f0be7\", \"name\": \"my-instance-group-manager-policy\"}]}], \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listInstanceGroupManagersPath = "/instance_groups/testString/managers";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListInstanceGroupManagersOptions model
    ListInstanceGroupManagersOptions listInstanceGroupManagersOptionsModel = new ListInstanceGroupManagersOptions.Builder()
      .instanceGroupId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listInstanceGroupManagers() with a valid options model and verify the result
    Response<InstanceGroupManagerCollection> response = vpcService.listInstanceGroupManagers(listInstanceGroupManagersOptionsModel).execute();
    assertNotNull(response);
    InstanceGroupManagerCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listInstanceGroupManagersPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listInstanceGroupManagers operation with and without retries enabled
  @Test
  public void testListInstanceGroupManagersWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListInstanceGroupManagersWOptions();

    vpcService.disableRetries();
    testListInstanceGroupManagersWOptions();
  }

  // Test the listInstanceGroupManagers operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListInstanceGroupManagersNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listInstanceGroupManagers(null).execute();
  }

  // Test the listInstanceGroupManagers operation using the InstanceGroupManagersPager.getNext() method
  @Test
  public void testListInstanceGroupManagersWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"managers\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea\",\"id\":\"r006-bd21f31f-8a05-4451-836d-ab0347e91fea\",\"management_enabled\":false,\"name\":\"my-instance-group-manager\",\"updated_at\":\"2019-01-01T12:00:00.000Z\",\"aggregation_window\":120,\"cooldown\":210,\"manager_type\":\"autoscale\",\"max_membership_count\":10,\"min_membership_count\":10,\"policies\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea/policies/r006-ca664290-30eb-4ad7-9fb6-db45731f0be7\",\"id\":\"r006-ca664290-30eb-4ad7-9fb6-db45731f0be7\",\"name\":\"my-instance-group-manager-policy\"}]}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"managers\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea\",\"id\":\"r006-bd21f31f-8a05-4451-836d-ab0347e91fea\",\"management_enabled\":false,\"name\":\"my-instance-group-manager\",\"updated_at\":\"2019-01-01T12:00:00.000Z\",\"aggregation_window\":120,\"cooldown\":210,\"manager_type\":\"autoscale\",\"max_membership_count\":10,\"min_membership_count\":10,\"policies\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea/policies/r006-ca664290-30eb-4ad7-9fb6-db45731f0be7\",\"id\":\"r006-ca664290-30eb-4ad7-9fb6-db45731f0be7\",\"name\":\"my-instance-group-manager-policy\"}]}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListInstanceGroupManagersOptions listInstanceGroupManagersOptions = new ListInstanceGroupManagersOptions.Builder()
      .instanceGroupId("testString")
      .limit(Long.valueOf("10"))
      .build();

    List<InstanceGroupManager> allResults = new ArrayList<>();
    InstanceGroupManagersPager pager = new InstanceGroupManagersPager(vpcService, listInstanceGroupManagersOptions);
    while (pager.hasNext()) {
      List<InstanceGroupManager> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listInstanceGroupManagers operation using the InstanceGroupManagersPager.getAll() method
  @Test
  public void testListInstanceGroupManagersWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"managers\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea\",\"id\":\"r006-bd21f31f-8a05-4451-836d-ab0347e91fea\",\"management_enabled\":false,\"name\":\"my-instance-group-manager\",\"updated_at\":\"2019-01-01T12:00:00.000Z\",\"aggregation_window\":120,\"cooldown\":210,\"manager_type\":\"autoscale\",\"max_membership_count\":10,\"min_membership_count\":10,\"policies\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea/policies/r006-ca664290-30eb-4ad7-9fb6-db45731f0be7\",\"id\":\"r006-ca664290-30eb-4ad7-9fb6-db45731f0be7\",\"name\":\"my-instance-group-manager-policy\"}]}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"managers\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea\",\"id\":\"r006-bd21f31f-8a05-4451-836d-ab0347e91fea\",\"management_enabled\":false,\"name\":\"my-instance-group-manager\",\"updated_at\":\"2019-01-01T12:00:00.000Z\",\"aggregation_window\":120,\"cooldown\":210,\"manager_type\":\"autoscale\",\"max_membership_count\":10,\"min_membership_count\":10,\"policies\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea/policies/r006-ca664290-30eb-4ad7-9fb6-db45731f0be7\",\"id\":\"r006-ca664290-30eb-4ad7-9fb6-db45731f0be7\",\"name\":\"my-instance-group-manager-policy\"}]}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListInstanceGroupManagersOptions listInstanceGroupManagersOptions = new ListInstanceGroupManagersOptions.Builder()
      .instanceGroupId("testString")
      .limit(Long.valueOf("10"))
      .build();

    InstanceGroupManagersPager pager = new InstanceGroupManagersPager(vpcService, listInstanceGroupManagersOptions);
    List<InstanceGroupManager> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createInstanceGroupManager operation with a valid options model parameter
  @Test
  public void testCreateInstanceGroupManagerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea\", \"id\": \"r006-bd21f31f-8a05-4451-836d-ab0347e91fea\", \"management_enabled\": false, \"name\": \"my-instance-group-manager\", \"updated_at\": \"2019-01-01T12:00:00.000Z\", \"aggregation_window\": 120, \"cooldown\": 210, \"manager_type\": \"autoscale\", \"max_membership_count\": 10, \"min_membership_count\": 10, \"policies\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea/policies/r006-ca664290-30eb-4ad7-9fb6-db45731f0be7\", \"id\": \"r006-ca664290-30eb-4ad7-9fb6-db45731f0be7\", \"name\": \"my-instance-group-manager-policy\"}]}";
    String createInstanceGroupManagerPath = "/instance_groups/testString/managers";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype model
    InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype instanceGroupManagerPrototypeModel = new InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype.Builder()
      .managementEnabled(true)
      .name("my-instance-group-manager")
      .aggregationWindow(Long.valueOf("120"))
      .cooldown(Long.valueOf("210"))
      .managerType("autoscale")
      .maxMembershipCount(Long.valueOf("10"))
      .minMembershipCount(Long.valueOf("10"))
      .build();

    // Construct an instance of the CreateInstanceGroupManagerOptions model
    CreateInstanceGroupManagerOptions createInstanceGroupManagerOptionsModel = new CreateInstanceGroupManagerOptions.Builder()
      .instanceGroupId("testString")
      .instanceGroupManagerPrototype(instanceGroupManagerPrototypeModel)
      .build();

    // Invoke createInstanceGroupManager() with a valid options model and verify the result
    Response<InstanceGroupManager> response = vpcService.createInstanceGroupManager(createInstanceGroupManagerOptionsModel).execute();
    assertNotNull(response);
    InstanceGroupManager responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createInstanceGroupManagerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createInstanceGroupManager operation with and without retries enabled
  @Test
  public void testCreateInstanceGroupManagerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateInstanceGroupManagerWOptions();

    vpcService.disableRetries();
    testCreateInstanceGroupManagerWOptions();
  }

  // Test the createInstanceGroupManager operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateInstanceGroupManagerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createInstanceGroupManager(null).execute();
  }

  // Test the deleteInstanceGroupManager operation with a valid options model parameter
  @Test
  public void testDeleteInstanceGroupManagerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteInstanceGroupManagerPath = "/instance_groups/testString/managers/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteInstanceGroupManagerOptions model
    DeleteInstanceGroupManagerOptions deleteInstanceGroupManagerOptionsModel = new DeleteInstanceGroupManagerOptions.Builder()
      .instanceGroupId("testString")
      .id("testString")
      .build();

    // Invoke deleteInstanceGroupManager() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteInstanceGroupManager(deleteInstanceGroupManagerOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteInstanceGroupManagerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteInstanceGroupManager operation with and without retries enabled
  @Test
  public void testDeleteInstanceGroupManagerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteInstanceGroupManagerWOptions();

    vpcService.disableRetries();
    testDeleteInstanceGroupManagerWOptions();
  }

  // Test the deleteInstanceGroupManager operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteInstanceGroupManagerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteInstanceGroupManager(null).execute();
  }

  // Test the getInstanceGroupManager operation with a valid options model parameter
  @Test
  public void testGetInstanceGroupManagerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea\", \"id\": \"r006-bd21f31f-8a05-4451-836d-ab0347e91fea\", \"management_enabled\": false, \"name\": \"my-instance-group-manager\", \"updated_at\": \"2019-01-01T12:00:00.000Z\", \"aggregation_window\": 120, \"cooldown\": 210, \"manager_type\": \"autoscale\", \"max_membership_count\": 10, \"min_membership_count\": 10, \"policies\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea/policies/r006-ca664290-30eb-4ad7-9fb6-db45731f0be7\", \"id\": \"r006-ca664290-30eb-4ad7-9fb6-db45731f0be7\", \"name\": \"my-instance-group-manager-policy\"}]}";
    String getInstanceGroupManagerPath = "/instance_groups/testString/managers/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetInstanceGroupManagerOptions model
    GetInstanceGroupManagerOptions getInstanceGroupManagerOptionsModel = new GetInstanceGroupManagerOptions.Builder()
      .instanceGroupId("testString")
      .id("testString")
      .build();

    // Invoke getInstanceGroupManager() with a valid options model and verify the result
    Response<InstanceGroupManager> response = vpcService.getInstanceGroupManager(getInstanceGroupManagerOptionsModel).execute();
    assertNotNull(response);
    InstanceGroupManager responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getInstanceGroupManagerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getInstanceGroupManager operation with and without retries enabled
  @Test
  public void testGetInstanceGroupManagerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetInstanceGroupManagerWOptions();

    vpcService.disableRetries();
    testGetInstanceGroupManagerWOptions();
  }

  // Test the getInstanceGroupManager operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetInstanceGroupManagerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getInstanceGroupManager(null).execute();
  }

  // Test the updateInstanceGroupManager operation with a valid options model parameter
  @Test
  public void testUpdateInstanceGroupManagerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea\", \"id\": \"r006-bd21f31f-8a05-4451-836d-ab0347e91fea\", \"management_enabled\": false, \"name\": \"my-instance-group-manager\", \"updated_at\": \"2019-01-01T12:00:00.000Z\", \"aggregation_window\": 120, \"cooldown\": 210, \"manager_type\": \"autoscale\", \"max_membership_count\": 10, \"min_membership_count\": 10, \"policies\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea/policies/r006-ca664290-30eb-4ad7-9fb6-db45731f0be7\", \"id\": \"r006-ca664290-30eb-4ad7-9fb6-db45731f0be7\", \"name\": \"my-instance-group-manager-policy\"}]}";
    String updateInstanceGroupManagerPath = "/instance_groups/testString/managers/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the InstanceGroupManagerPatch model
    InstanceGroupManagerPatch instanceGroupManagerPatchModel = new InstanceGroupManagerPatch.Builder()
      .aggregationWindow(Long.valueOf("120"))
      .cooldown(Long.valueOf("210"))
      .managementEnabled(false)
      .maxMembershipCount(Long.valueOf("10"))
      .minMembershipCount(Long.valueOf("10"))
      .name("my-instance-group-manager")
      .build();
    Map<String, Object> instanceGroupManagerPatchModelAsPatch = instanceGroupManagerPatchModel.asPatch();

    // Construct an instance of the UpdateInstanceGroupManagerOptions model
    UpdateInstanceGroupManagerOptions updateInstanceGroupManagerOptionsModel = new UpdateInstanceGroupManagerOptions.Builder()
      .instanceGroupId("testString")
      .id("testString")
      .instanceGroupManagerPatch(instanceGroupManagerPatchModelAsPatch)
      .build();

    // Invoke updateInstanceGroupManager() with a valid options model and verify the result
    Response<InstanceGroupManager> response = vpcService.updateInstanceGroupManager(updateInstanceGroupManagerOptionsModel).execute();
    assertNotNull(response);
    InstanceGroupManager responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateInstanceGroupManagerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateInstanceGroupManager operation with and without retries enabled
  @Test
  public void testUpdateInstanceGroupManagerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateInstanceGroupManagerWOptions();

    vpcService.disableRetries();
    testUpdateInstanceGroupManagerWOptions();
  }

  // Test the updateInstanceGroupManager operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateInstanceGroupManagerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateInstanceGroupManager(null).execute();
  }

  // Test the listInstanceGroupManagerActions operation with a valid options model parameter
  @Test
  public void testListInstanceGroupManagerActionsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"actions\": [{\"auto_delete\": true, \"auto_delete_timeout\": 24, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea/actions/r006-b3fda6cb-6f66-4ab4-a636-100ded91e8d7\", \"id\": \"r006-b3fda6cb-6f66-4ab4-a636-100ded91e8d7\", \"name\": \"my-instance-group-manager-action\", \"resource_type\": \"instance_group_manager_action\", \"status\": \"active\", \"updated_at\": \"2019-01-01T12:00:00.000Z\", \"action_type\": \"scheduled\", \"cron_spec\": \"30 */2 * * 1-5\", \"last_applied_at\": \"2019-01-01T12:00:00.000Z\", \"next_run_at\": \"2019-01-01T12:00:00.000Z\", \"group\": {\"membership_count\": 10}}], \"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listInstanceGroupManagerActionsPath = "/instance_groups/testString/managers/testString/actions";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListInstanceGroupManagerActionsOptions model
    ListInstanceGroupManagerActionsOptions listInstanceGroupManagerActionsOptionsModel = new ListInstanceGroupManagerActionsOptions.Builder()
      .instanceGroupId("testString")
      .instanceGroupManagerId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listInstanceGroupManagerActions() with a valid options model and verify the result
    Response<InstanceGroupManagerActionsCollection> response = vpcService.listInstanceGroupManagerActions(listInstanceGroupManagerActionsOptionsModel).execute();
    assertNotNull(response);
    InstanceGroupManagerActionsCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listInstanceGroupManagerActionsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listInstanceGroupManagerActions operation with and without retries enabled
  @Test
  public void testListInstanceGroupManagerActionsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListInstanceGroupManagerActionsWOptions();

    vpcService.disableRetries();
    testListInstanceGroupManagerActionsWOptions();
  }

  // Test the listInstanceGroupManagerActions operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListInstanceGroupManagerActionsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listInstanceGroupManagerActions(null).execute();
  }

  // Test the listInstanceGroupManagerActions operation using the InstanceGroupManagerActionsPager.getNext() method
  @Test
  public void testListInstanceGroupManagerActionsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"actions\":[{\"auto_delete\":true,\"auto_delete_timeout\":24,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea/actions/r006-b3fda6cb-6f66-4ab4-a636-100ded91e8d7\",\"id\":\"r006-b3fda6cb-6f66-4ab4-a636-100ded91e8d7\",\"name\":\"my-instance-group-manager-action\",\"resource_type\":\"instance_group_manager_action\",\"status\":\"active\",\"updated_at\":\"2019-01-01T12:00:00.000Z\",\"action_type\":\"scheduled\",\"cron_spec\":\"30 */2 * * 1-5\",\"last_applied_at\":\"2019-01-01T12:00:00.000Z\",\"next_run_at\":\"2019-01-01T12:00:00.000Z\",\"group\":{\"membership_count\":10}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"actions\":[{\"auto_delete\":true,\"auto_delete_timeout\":24,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea/actions/r006-b3fda6cb-6f66-4ab4-a636-100ded91e8d7\",\"id\":\"r006-b3fda6cb-6f66-4ab4-a636-100ded91e8d7\",\"name\":\"my-instance-group-manager-action\",\"resource_type\":\"instance_group_manager_action\",\"status\":\"active\",\"updated_at\":\"2019-01-01T12:00:00.000Z\",\"action_type\":\"scheduled\",\"cron_spec\":\"30 */2 * * 1-5\",\"last_applied_at\":\"2019-01-01T12:00:00.000Z\",\"next_run_at\":\"2019-01-01T12:00:00.000Z\",\"group\":{\"membership_count\":10}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListInstanceGroupManagerActionsOptions listInstanceGroupManagerActionsOptions = new ListInstanceGroupManagerActionsOptions.Builder()
      .instanceGroupId("testString")
      .instanceGroupManagerId("testString")
      .limit(Long.valueOf("10"))
      .build();

    List<InstanceGroupManagerAction> allResults = new ArrayList<>();
    InstanceGroupManagerActionsPager pager = new InstanceGroupManagerActionsPager(vpcService, listInstanceGroupManagerActionsOptions);
    while (pager.hasNext()) {
      List<InstanceGroupManagerAction> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listInstanceGroupManagerActions operation using the InstanceGroupManagerActionsPager.getAll() method
  @Test
  public void testListInstanceGroupManagerActionsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"actions\":[{\"auto_delete\":true,\"auto_delete_timeout\":24,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea/actions/r006-b3fda6cb-6f66-4ab4-a636-100ded91e8d7\",\"id\":\"r006-b3fda6cb-6f66-4ab4-a636-100ded91e8d7\",\"name\":\"my-instance-group-manager-action\",\"resource_type\":\"instance_group_manager_action\",\"status\":\"active\",\"updated_at\":\"2019-01-01T12:00:00.000Z\",\"action_type\":\"scheduled\",\"cron_spec\":\"30 */2 * * 1-5\",\"last_applied_at\":\"2019-01-01T12:00:00.000Z\",\"next_run_at\":\"2019-01-01T12:00:00.000Z\",\"group\":{\"membership_count\":10}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"actions\":[{\"auto_delete\":true,\"auto_delete_timeout\":24,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea/actions/r006-b3fda6cb-6f66-4ab4-a636-100ded91e8d7\",\"id\":\"r006-b3fda6cb-6f66-4ab4-a636-100ded91e8d7\",\"name\":\"my-instance-group-manager-action\",\"resource_type\":\"instance_group_manager_action\",\"status\":\"active\",\"updated_at\":\"2019-01-01T12:00:00.000Z\",\"action_type\":\"scheduled\",\"cron_spec\":\"30 */2 * * 1-5\",\"last_applied_at\":\"2019-01-01T12:00:00.000Z\",\"next_run_at\":\"2019-01-01T12:00:00.000Z\",\"group\":{\"membership_count\":10}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListInstanceGroupManagerActionsOptions listInstanceGroupManagerActionsOptions = new ListInstanceGroupManagerActionsOptions.Builder()
      .instanceGroupId("testString")
      .instanceGroupManagerId("testString")
      .limit(Long.valueOf("10"))
      .build();

    InstanceGroupManagerActionsPager pager = new InstanceGroupManagerActionsPager(vpcService, listInstanceGroupManagerActionsOptions);
    List<InstanceGroupManagerAction> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createInstanceGroupManagerAction operation with a valid options model parameter
  @Test
  public void testCreateInstanceGroupManagerActionWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"auto_delete\": true, \"auto_delete_timeout\": 24, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea/actions/r006-b3fda6cb-6f66-4ab4-a636-100ded91e8d7\", \"id\": \"r006-b3fda6cb-6f66-4ab4-a636-100ded91e8d7\", \"name\": \"my-instance-group-manager-action\", \"resource_type\": \"instance_group_manager_action\", \"status\": \"active\", \"updated_at\": \"2019-01-01T12:00:00.000Z\", \"action_type\": \"scheduled\", \"cron_spec\": \"30 */2 * * 1-5\", \"last_applied_at\": \"2019-01-01T12:00:00.000Z\", \"next_run_at\": \"2019-01-01T12:00:00.000Z\", \"group\": {\"membership_count\": 10}}";
    String createInstanceGroupManagerActionPath = "/instance_groups/testString/managers/testString/actions";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the InstanceGroupManagerScheduledActionGroupPrototype model
    InstanceGroupManagerScheduledActionGroupPrototype instanceGroupManagerScheduledActionGroupPrototypeModel = new InstanceGroupManagerScheduledActionGroupPrototype.Builder()
      .membershipCount(Long.valueOf("10"))
      .build();

    // Construct an instance of the InstanceGroupManagerActionPrototypeScheduledActionPrototypeByRunAtByGroup model
    InstanceGroupManagerActionPrototypeScheduledActionPrototypeByRunAtByGroup instanceGroupManagerActionPrototypeModel = new InstanceGroupManagerActionPrototypeScheduledActionPrototypeByRunAtByGroup.Builder()
      .name("my-instance-group-manager-action")
      .runAt(DateUtils.parseAsDateTime("2019-01-01T12:00:00.000Z"))
      .group(instanceGroupManagerScheduledActionGroupPrototypeModel)
      .build();

    // Construct an instance of the CreateInstanceGroupManagerActionOptions model
    CreateInstanceGroupManagerActionOptions createInstanceGroupManagerActionOptionsModel = new CreateInstanceGroupManagerActionOptions.Builder()
      .instanceGroupId("testString")
      .instanceGroupManagerId("testString")
      .instanceGroupManagerActionPrototype(instanceGroupManagerActionPrototypeModel)
      .build();

    // Invoke createInstanceGroupManagerAction() with a valid options model and verify the result
    Response<InstanceGroupManagerAction> response = vpcService.createInstanceGroupManagerAction(createInstanceGroupManagerActionOptionsModel).execute();
    assertNotNull(response);
    InstanceGroupManagerAction responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createInstanceGroupManagerActionPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createInstanceGroupManagerAction operation with and without retries enabled
  @Test
  public void testCreateInstanceGroupManagerActionWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateInstanceGroupManagerActionWOptions();

    vpcService.disableRetries();
    testCreateInstanceGroupManagerActionWOptions();
  }

  // Test the createInstanceGroupManagerAction operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateInstanceGroupManagerActionNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createInstanceGroupManagerAction(null).execute();
  }

  // Test the deleteInstanceGroupManagerAction operation with a valid options model parameter
  @Test
  public void testDeleteInstanceGroupManagerActionWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteInstanceGroupManagerActionPath = "/instance_groups/testString/managers/testString/actions/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteInstanceGroupManagerActionOptions model
    DeleteInstanceGroupManagerActionOptions deleteInstanceGroupManagerActionOptionsModel = new DeleteInstanceGroupManagerActionOptions.Builder()
      .instanceGroupId("testString")
      .instanceGroupManagerId("testString")
      .id("testString")
      .build();

    // Invoke deleteInstanceGroupManagerAction() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteInstanceGroupManagerAction(deleteInstanceGroupManagerActionOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteInstanceGroupManagerActionPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteInstanceGroupManagerAction operation with and without retries enabled
  @Test
  public void testDeleteInstanceGroupManagerActionWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteInstanceGroupManagerActionWOptions();

    vpcService.disableRetries();
    testDeleteInstanceGroupManagerActionWOptions();
  }

  // Test the deleteInstanceGroupManagerAction operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteInstanceGroupManagerActionNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteInstanceGroupManagerAction(null).execute();
  }

  // Test the getInstanceGroupManagerAction operation with a valid options model parameter
  @Test
  public void testGetInstanceGroupManagerActionWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"auto_delete\": true, \"auto_delete_timeout\": 24, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea/actions/r006-b3fda6cb-6f66-4ab4-a636-100ded91e8d7\", \"id\": \"r006-b3fda6cb-6f66-4ab4-a636-100ded91e8d7\", \"name\": \"my-instance-group-manager-action\", \"resource_type\": \"instance_group_manager_action\", \"status\": \"active\", \"updated_at\": \"2019-01-01T12:00:00.000Z\", \"action_type\": \"scheduled\", \"cron_spec\": \"30 */2 * * 1-5\", \"last_applied_at\": \"2019-01-01T12:00:00.000Z\", \"next_run_at\": \"2019-01-01T12:00:00.000Z\", \"group\": {\"membership_count\": 10}}";
    String getInstanceGroupManagerActionPath = "/instance_groups/testString/managers/testString/actions/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetInstanceGroupManagerActionOptions model
    GetInstanceGroupManagerActionOptions getInstanceGroupManagerActionOptionsModel = new GetInstanceGroupManagerActionOptions.Builder()
      .instanceGroupId("testString")
      .instanceGroupManagerId("testString")
      .id("testString")
      .build();

    // Invoke getInstanceGroupManagerAction() with a valid options model and verify the result
    Response<InstanceGroupManagerAction> response = vpcService.getInstanceGroupManagerAction(getInstanceGroupManagerActionOptionsModel).execute();
    assertNotNull(response);
    InstanceGroupManagerAction responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getInstanceGroupManagerActionPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getInstanceGroupManagerAction operation with and without retries enabled
  @Test
  public void testGetInstanceGroupManagerActionWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetInstanceGroupManagerActionWOptions();

    vpcService.disableRetries();
    testGetInstanceGroupManagerActionWOptions();
  }

  // Test the getInstanceGroupManagerAction operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetInstanceGroupManagerActionNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getInstanceGroupManagerAction(null).execute();
  }

  // Test the updateInstanceGroupManagerAction operation with a valid options model parameter
  @Test
  public void testUpdateInstanceGroupManagerActionWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"auto_delete\": true, \"auto_delete_timeout\": 24, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea/actions/r006-b3fda6cb-6f66-4ab4-a636-100ded91e8d7\", \"id\": \"r006-b3fda6cb-6f66-4ab4-a636-100ded91e8d7\", \"name\": \"my-instance-group-manager-action\", \"resource_type\": \"instance_group_manager_action\", \"status\": \"active\", \"updated_at\": \"2019-01-01T12:00:00.000Z\", \"action_type\": \"scheduled\", \"cron_spec\": \"30 */2 * * 1-5\", \"last_applied_at\": \"2019-01-01T12:00:00.000Z\", \"next_run_at\": \"2019-01-01T12:00:00.000Z\", \"group\": {\"membership_count\": 10}}";
    String updateInstanceGroupManagerActionPath = "/instance_groups/testString/managers/testString/actions/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the InstanceGroupManagerActionGroupPatch model
    InstanceGroupManagerActionGroupPatch instanceGroupManagerActionGroupPatchModel = new InstanceGroupManagerActionGroupPatch.Builder()
      .membershipCount(Long.valueOf("10"))
      .build();

    // Construct an instance of the InstanceGroupManagerActionManagerPatch model
    InstanceGroupManagerActionManagerPatch instanceGroupManagerActionManagerPatchModel = new InstanceGroupManagerActionManagerPatch.Builder()
      .maxMembershipCount(Long.valueOf("10"))
      .minMembershipCount(Long.valueOf("10"))
      .build();

    // Construct an instance of the InstanceGroupManagerActionPatch model
    InstanceGroupManagerActionPatch instanceGroupManagerActionPatchModel = new InstanceGroupManagerActionPatch.Builder()
      .autoDelete(false)
      .autoDeleteTimeout(Long.valueOf("24"))
      .cronSpec("30 */2 * * 1-5")
      .group(instanceGroupManagerActionGroupPatchModel)
      .manager(instanceGroupManagerActionManagerPatchModel)
      .name("my-instance-group-manager-action")
      .runAt(DateUtils.parseAsDateTime("2019-01-01T12:00:00.000Z"))
      .build();
    Map<String, Object> instanceGroupManagerActionPatchModelAsPatch = instanceGroupManagerActionPatchModel.asPatch();

    // Construct an instance of the UpdateInstanceGroupManagerActionOptions model
    UpdateInstanceGroupManagerActionOptions updateInstanceGroupManagerActionOptionsModel = new UpdateInstanceGroupManagerActionOptions.Builder()
      .instanceGroupId("testString")
      .instanceGroupManagerId("testString")
      .id("testString")
      .instanceGroupManagerActionPatch(instanceGroupManagerActionPatchModelAsPatch)
      .build();

    // Invoke updateInstanceGroupManagerAction() with a valid options model and verify the result
    Response<InstanceGroupManagerAction> response = vpcService.updateInstanceGroupManagerAction(updateInstanceGroupManagerActionOptionsModel).execute();
    assertNotNull(response);
    InstanceGroupManagerAction responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateInstanceGroupManagerActionPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateInstanceGroupManagerAction operation with and without retries enabled
  @Test
  public void testUpdateInstanceGroupManagerActionWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateInstanceGroupManagerActionWOptions();

    vpcService.disableRetries();
    testUpdateInstanceGroupManagerActionWOptions();
  }

  // Test the updateInstanceGroupManagerAction operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateInstanceGroupManagerActionNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateInstanceGroupManagerAction(null).execute();
  }

  // Test the listInstanceGroupManagerPolicies operation with a valid options model parameter
  @Test
  public void testListInstanceGroupManagerPoliciesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"policies\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea/policies/r006-ca664290-30eb-4ad7-9fb6-db45731f0be7\", \"id\": \"r006-ca664290-30eb-4ad7-9fb6-db45731f0be7\", \"name\": \"my-instance-group-manager-policy\", \"updated_at\": \"2019-01-01T12:00:00.000Z\", \"metric_type\": \"cpu\", \"metric_value\": 0, \"policy_type\": \"target\"}], \"total_count\": 132}";
    String listInstanceGroupManagerPoliciesPath = "/instance_groups/testString/managers/testString/policies";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListInstanceGroupManagerPoliciesOptions model
    ListInstanceGroupManagerPoliciesOptions listInstanceGroupManagerPoliciesOptionsModel = new ListInstanceGroupManagerPoliciesOptions.Builder()
      .instanceGroupId("testString")
      .instanceGroupManagerId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listInstanceGroupManagerPolicies() with a valid options model and verify the result
    Response<InstanceGroupManagerPolicyCollection> response = vpcService.listInstanceGroupManagerPolicies(listInstanceGroupManagerPoliciesOptionsModel).execute();
    assertNotNull(response);
    InstanceGroupManagerPolicyCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listInstanceGroupManagerPoliciesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listInstanceGroupManagerPolicies operation with and without retries enabled
  @Test
  public void testListInstanceGroupManagerPoliciesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListInstanceGroupManagerPoliciesWOptions();

    vpcService.disableRetries();
    testListInstanceGroupManagerPoliciesWOptions();
  }

  // Test the listInstanceGroupManagerPolicies operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListInstanceGroupManagerPoliciesNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listInstanceGroupManagerPolicies(null).execute();
  }

  // Test the listInstanceGroupManagerPolicies operation using the InstanceGroupManagerPoliciesPager.getNext() method
  @Test
  public void testListInstanceGroupManagerPoliciesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"policies\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea/policies/r006-ca664290-30eb-4ad7-9fb6-db45731f0be7\",\"id\":\"r006-ca664290-30eb-4ad7-9fb6-db45731f0be7\",\"name\":\"my-instance-group-manager-policy\",\"updated_at\":\"2019-01-01T12:00:00.000Z\",\"metric_type\":\"cpu\",\"metric_value\":0,\"policy_type\":\"target\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"policies\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea/policies/r006-ca664290-30eb-4ad7-9fb6-db45731f0be7\",\"id\":\"r006-ca664290-30eb-4ad7-9fb6-db45731f0be7\",\"name\":\"my-instance-group-manager-policy\",\"updated_at\":\"2019-01-01T12:00:00.000Z\",\"metric_type\":\"cpu\",\"metric_value\":0,\"policy_type\":\"target\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListInstanceGroupManagerPoliciesOptions listInstanceGroupManagerPoliciesOptions = new ListInstanceGroupManagerPoliciesOptions.Builder()
      .instanceGroupId("testString")
      .instanceGroupManagerId("testString")
      .limit(Long.valueOf("10"))
      .build();

    List<InstanceGroupManagerPolicy> allResults = new ArrayList<>();
    InstanceGroupManagerPoliciesPager pager = new InstanceGroupManagerPoliciesPager(vpcService, listInstanceGroupManagerPoliciesOptions);
    while (pager.hasNext()) {
      List<InstanceGroupManagerPolicy> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listInstanceGroupManagerPolicies operation using the InstanceGroupManagerPoliciesPager.getAll() method
  @Test
  public void testListInstanceGroupManagerPoliciesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"policies\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea/policies/r006-ca664290-30eb-4ad7-9fb6-db45731f0be7\",\"id\":\"r006-ca664290-30eb-4ad7-9fb6-db45731f0be7\",\"name\":\"my-instance-group-manager-policy\",\"updated_at\":\"2019-01-01T12:00:00.000Z\",\"metric_type\":\"cpu\",\"metric_value\":0,\"policy_type\":\"target\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"policies\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea/policies/r006-ca664290-30eb-4ad7-9fb6-db45731f0be7\",\"id\":\"r006-ca664290-30eb-4ad7-9fb6-db45731f0be7\",\"name\":\"my-instance-group-manager-policy\",\"updated_at\":\"2019-01-01T12:00:00.000Z\",\"metric_type\":\"cpu\",\"metric_value\":0,\"policy_type\":\"target\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListInstanceGroupManagerPoliciesOptions listInstanceGroupManagerPoliciesOptions = new ListInstanceGroupManagerPoliciesOptions.Builder()
      .instanceGroupId("testString")
      .instanceGroupManagerId("testString")
      .limit(Long.valueOf("10"))
      .build();

    InstanceGroupManagerPoliciesPager pager = new InstanceGroupManagerPoliciesPager(vpcService, listInstanceGroupManagerPoliciesOptions);
    List<InstanceGroupManagerPolicy> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createInstanceGroupManagerPolicy operation with a valid options model parameter
  @Test
  public void testCreateInstanceGroupManagerPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea/policies/r006-ca664290-30eb-4ad7-9fb6-db45731f0be7\", \"id\": \"r006-ca664290-30eb-4ad7-9fb6-db45731f0be7\", \"name\": \"my-instance-group-manager-policy\", \"updated_at\": \"2019-01-01T12:00:00.000Z\", \"metric_type\": \"cpu\", \"metric_value\": 0, \"policy_type\": \"target\"}";
    String createInstanceGroupManagerPolicyPath = "/instance_groups/testString/managers/testString/policies";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype model
    InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype instanceGroupManagerPolicyPrototypeModel = new InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype.Builder()
      .name("my-instance-group-manager-policy")
      .metricType("cpu")
      .metricValue(Long.valueOf("0"))
      .policyType("target")
      .build();

    // Construct an instance of the CreateInstanceGroupManagerPolicyOptions model
    CreateInstanceGroupManagerPolicyOptions createInstanceGroupManagerPolicyOptionsModel = new CreateInstanceGroupManagerPolicyOptions.Builder()
      .instanceGroupId("testString")
      .instanceGroupManagerId("testString")
      .instanceGroupManagerPolicyPrototype(instanceGroupManagerPolicyPrototypeModel)
      .build();

    // Invoke createInstanceGroupManagerPolicy() with a valid options model and verify the result
    Response<InstanceGroupManagerPolicy> response = vpcService.createInstanceGroupManagerPolicy(createInstanceGroupManagerPolicyOptionsModel).execute();
    assertNotNull(response);
    InstanceGroupManagerPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createInstanceGroupManagerPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createInstanceGroupManagerPolicy operation with and without retries enabled
  @Test
  public void testCreateInstanceGroupManagerPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateInstanceGroupManagerPolicyWOptions();

    vpcService.disableRetries();
    testCreateInstanceGroupManagerPolicyWOptions();
  }

  // Test the createInstanceGroupManagerPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateInstanceGroupManagerPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createInstanceGroupManagerPolicy(null).execute();
  }

  // Test the deleteInstanceGroupManagerPolicy operation with a valid options model parameter
  @Test
  public void testDeleteInstanceGroupManagerPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteInstanceGroupManagerPolicyPath = "/instance_groups/testString/managers/testString/policies/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteInstanceGroupManagerPolicyOptions model
    DeleteInstanceGroupManagerPolicyOptions deleteInstanceGroupManagerPolicyOptionsModel = new DeleteInstanceGroupManagerPolicyOptions.Builder()
      .instanceGroupId("testString")
      .instanceGroupManagerId("testString")
      .id("testString")
      .build();

    // Invoke deleteInstanceGroupManagerPolicy() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteInstanceGroupManagerPolicy(deleteInstanceGroupManagerPolicyOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteInstanceGroupManagerPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteInstanceGroupManagerPolicy operation with and without retries enabled
  @Test
  public void testDeleteInstanceGroupManagerPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteInstanceGroupManagerPolicyWOptions();

    vpcService.disableRetries();
    testDeleteInstanceGroupManagerPolicyWOptions();
  }

  // Test the deleteInstanceGroupManagerPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteInstanceGroupManagerPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteInstanceGroupManagerPolicy(null).execute();
  }

  // Test the getInstanceGroupManagerPolicy operation with a valid options model parameter
  @Test
  public void testGetInstanceGroupManagerPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea/policies/r006-ca664290-30eb-4ad7-9fb6-db45731f0be7\", \"id\": \"r006-ca664290-30eb-4ad7-9fb6-db45731f0be7\", \"name\": \"my-instance-group-manager-policy\", \"updated_at\": \"2019-01-01T12:00:00.000Z\", \"metric_type\": \"cpu\", \"metric_value\": 0, \"policy_type\": \"target\"}";
    String getInstanceGroupManagerPolicyPath = "/instance_groups/testString/managers/testString/policies/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetInstanceGroupManagerPolicyOptions model
    GetInstanceGroupManagerPolicyOptions getInstanceGroupManagerPolicyOptionsModel = new GetInstanceGroupManagerPolicyOptions.Builder()
      .instanceGroupId("testString")
      .instanceGroupManagerId("testString")
      .id("testString")
      .build();

    // Invoke getInstanceGroupManagerPolicy() with a valid options model and verify the result
    Response<InstanceGroupManagerPolicy> response = vpcService.getInstanceGroupManagerPolicy(getInstanceGroupManagerPolicyOptionsModel).execute();
    assertNotNull(response);
    InstanceGroupManagerPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getInstanceGroupManagerPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getInstanceGroupManagerPolicy operation with and without retries enabled
  @Test
  public void testGetInstanceGroupManagerPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetInstanceGroupManagerPolicyWOptions();

    vpcService.disableRetries();
    testGetInstanceGroupManagerPolicyWOptions();
  }

  // Test the getInstanceGroupManagerPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetInstanceGroupManagerPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getInstanceGroupManagerPolicy(null).execute();
  }

  // Test the updateInstanceGroupManagerPolicy operation with a valid options model parameter
  @Test
  public void testUpdateInstanceGroupManagerPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/managers/r006-bd21f31f-8a05-4451-836d-ab0347e91fea/policies/r006-ca664290-30eb-4ad7-9fb6-db45731f0be7\", \"id\": \"r006-ca664290-30eb-4ad7-9fb6-db45731f0be7\", \"name\": \"my-instance-group-manager-policy\", \"updated_at\": \"2019-01-01T12:00:00.000Z\", \"metric_type\": \"cpu\", \"metric_value\": 0, \"policy_type\": \"target\"}";
    String updateInstanceGroupManagerPolicyPath = "/instance_groups/testString/managers/testString/policies/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the InstanceGroupManagerPolicyPatch model
    InstanceGroupManagerPolicyPatch instanceGroupManagerPolicyPatchModel = new InstanceGroupManagerPolicyPatch.Builder()
      .metricType("cpu")
      .metricValue(Long.valueOf("75"))
      .name("my-instance-group-manager-policy")
      .build();
    Map<String, Object> instanceGroupManagerPolicyPatchModelAsPatch = instanceGroupManagerPolicyPatchModel.asPatch();

    // Construct an instance of the UpdateInstanceGroupManagerPolicyOptions model
    UpdateInstanceGroupManagerPolicyOptions updateInstanceGroupManagerPolicyOptionsModel = new UpdateInstanceGroupManagerPolicyOptions.Builder()
      .instanceGroupId("testString")
      .instanceGroupManagerId("testString")
      .id("testString")
      .instanceGroupManagerPolicyPatch(instanceGroupManagerPolicyPatchModelAsPatch)
      .build();

    // Invoke updateInstanceGroupManagerPolicy() with a valid options model and verify the result
    Response<InstanceGroupManagerPolicy> response = vpcService.updateInstanceGroupManagerPolicy(updateInstanceGroupManagerPolicyOptionsModel).execute();
    assertNotNull(response);
    InstanceGroupManagerPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateInstanceGroupManagerPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateInstanceGroupManagerPolicy operation with and without retries enabled
  @Test
  public void testUpdateInstanceGroupManagerPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateInstanceGroupManagerPolicyWOptions();

    vpcService.disableRetries();
    testUpdateInstanceGroupManagerPolicyWOptions();
  }

  // Test the updateInstanceGroupManagerPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateInstanceGroupManagerPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateInstanceGroupManagerPolicy(null).execute();
  }

  // Test the deleteInstanceGroupMemberships operation with a valid options model parameter
  @Test
  public void testDeleteInstanceGroupMembershipsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteInstanceGroupMembershipsPath = "/instance_groups/testString/memberships";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteInstanceGroupMembershipsOptions model
    DeleteInstanceGroupMembershipsOptions deleteInstanceGroupMembershipsOptionsModel = new DeleteInstanceGroupMembershipsOptions.Builder()
      .instanceGroupId("testString")
      .build();

    // Invoke deleteInstanceGroupMemberships() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteInstanceGroupMemberships(deleteInstanceGroupMembershipsOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteInstanceGroupMembershipsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteInstanceGroupMemberships operation with and without retries enabled
  @Test
  public void testDeleteInstanceGroupMembershipsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteInstanceGroupMembershipsWOptions();

    vpcService.disableRetries();
    testDeleteInstanceGroupMembershipsWOptions();
  }

  // Test the deleteInstanceGroupMemberships operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteInstanceGroupMembershipsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteInstanceGroupMemberships(null).execute();
  }

  // Test the listInstanceGroupMemberships operation with a valid options model parameter
  @Test
  public void testListInstanceGroupMembershipsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"memberships\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"delete_instance_on_membership_delete\": true, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/memberships/r006-32c8210b-fd1a-409f-8966-de85bbfd3741\", \"id\": \"r006-32c8210b-fd1a-409f-8966-de85bbfd3741\", \"instance\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"id\": \"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"name\": \"my-instance\"}, \"instance_template\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance-template:0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\", \"id\": \"0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\", \"name\": \"my-instance-template\"}, \"name\": \"my-instance-group-membership\", \"pool_member\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004/members/r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\", \"id\": \"r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\"}, \"status\": \"deleting\", \"updated_at\": \"2019-01-01T12:00:00.000Z\"}], \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listInstanceGroupMembershipsPath = "/instance_groups/testString/memberships";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListInstanceGroupMembershipsOptions model
    ListInstanceGroupMembershipsOptions listInstanceGroupMembershipsOptionsModel = new ListInstanceGroupMembershipsOptions.Builder()
      .instanceGroupId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listInstanceGroupMemberships() with a valid options model and verify the result
    Response<InstanceGroupMembershipCollection> response = vpcService.listInstanceGroupMemberships(listInstanceGroupMembershipsOptionsModel).execute();
    assertNotNull(response);
    InstanceGroupMembershipCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listInstanceGroupMembershipsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listInstanceGroupMemberships operation with and without retries enabled
  @Test
  public void testListInstanceGroupMembershipsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListInstanceGroupMembershipsWOptions();

    vpcService.disableRetries();
    testListInstanceGroupMembershipsWOptions();
  }

  // Test the listInstanceGroupMemberships operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListInstanceGroupMembershipsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listInstanceGroupMemberships(null).execute();
  }

  // Test the listInstanceGroupMemberships operation using the InstanceGroupMembershipsPager.getNext() method
  @Test
  public void testListInstanceGroupMembershipsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"memberships\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"delete_instance_on_membership_delete\":true,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/memberships/r006-32c8210b-fd1a-409f-8966-de85bbfd3741\",\"id\":\"r006-32c8210b-fd1a-409f-8966-de85bbfd3741\",\"instance\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"id\":\"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"name\":\"my-instance\"},\"instance_template\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance-template:0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\",\"id\":\"0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\",\"name\":\"my-instance-template\"},\"name\":\"my-instance-group-membership\",\"pool_member\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004/members/r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\",\"id\":\"r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\"},\"status\":\"deleting\",\"updated_at\":\"2019-01-01T12:00:00.000Z\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"memberships\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"delete_instance_on_membership_delete\":true,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/memberships/r006-32c8210b-fd1a-409f-8966-de85bbfd3741\",\"id\":\"r006-32c8210b-fd1a-409f-8966-de85bbfd3741\",\"instance\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"id\":\"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"name\":\"my-instance\"},\"instance_template\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance-template:0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\",\"id\":\"0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\",\"name\":\"my-instance-template\"},\"name\":\"my-instance-group-membership\",\"pool_member\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004/members/r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\",\"id\":\"r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\"},\"status\":\"deleting\",\"updated_at\":\"2019-01-01T12:00:00.000Z\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListInstanceGroupMembershipsOptions listInstanceGroupMembershipsOptions = new ListInstanceGroupMembershipsOptions.Builder()
      .instanceGroupId("testString")
      .limit(Long.valueOf("10"))
      .build();

    List<InstanceGroupMembership> allResults = new ArrayList<>();
    InstanceGroupMembershipsPager pager = new InstanceGroupMembershipsPager(vpcService, listInstanceGroupMembershipsOptions);
    while (pager.hasNext()) {
      List<InstanceGroupMembership> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listInstanceGroupMemberships operation using the InstanceGroupMembershipsPager.getAll() method
  @Test
  public void testListInstanceGroupMembershipsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"memberships\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"delete_instance_on_membership_delete\":true,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/memberships/r006-32c8210b-fd1a-409f-8966-de85bbfd3741\",\"id\":\"r006-32c8210b-fd1a-409f-8966-de85bbfd3741\",\"instance\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"id\":\"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"name\":\"my-instance\"},\"instance_template\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance-template:0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\",\"id\":\"0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\",\"name\":\"my-instance-template\"},\"name\":\"my-instance-group-membership\",\"pool_member\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004/members/r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\",\"id\":\"r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\"},\"status\":\"deleting\",\"updated_at\":\"2019-01-01T12:00:00.000Z\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"memberships\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"delete_instance_on_membership_delete\":true,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/memberships/r006-32c8210b-fd1a-409f-8966-de85bbfd3741\",\"id\":\"r006-32c8210b-fd1a-409f-8966-de85bbfd3741\",\"instance\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"id\":\"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"name\":\"my-instance\"},\"instance_template\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance-template:0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\",\"id\":\"0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\",\"name\":\"my-instance-template\"},\"name\":\"my-instance-group-membership\",\"pool_member\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004/members/r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\",\"id\":\"r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\"},\"status\":\"deleting\",\"updated_at\":\"2019-01-01T12:00:00.000Z\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListInstanceGroupMembershipsOptions listInstanceGroupMembershipsOptions = new ListInstanceGroupMembershipsOptions.Builder()
      .instanceGroupId("testString")
      .limit(Long.valueOf("10"))
      .build();

    InstanceGroupMembershipsPager pager = new InstanceGroupMembershipsPager(vpcService, listInstanceGroupMembershipsOptions);
    List<InstanceGroupMembership> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the deleteInstanceGroupMembership operation with a valid options model parameter
  @Test
  public void testDeleteInstanceGroupMembershipWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteInstanceGroupMembershipPath = "/instance_groups/testString/memberships/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteInstanceGroupMembershipOptions model
    DeleteInstanceGroupMembershipOptions deleteInstanceGroupMembershipOptionsModel = new DeleteInstanceGroupMembershipOptions.Builder()
      .instanceGroupId("testString")
      .id("testString")
      .build();

    // Invoke deleteInstanceGroupMembership() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteInstanceGroupMembership(deleteInstanceGroupMembershipOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteInstanceGroupMembershipPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteInstanceGroupMembership operation with and without retries enabled
  @Test
  public void testDeleteInstanceGroupMembershipWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteInstanceGroupMembershipWOptions();

    vpcService.disableRetries();
    testDeleteInstanceGroupMembershipWOptions();
  }

  // Test the deleteInstanceGroupMembership operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteInstanceGroupMembershipNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteInstanceGroupMembership(null).execute();
  }

  // Test the getInstanceGroupMembership operation with a valid options model parameter
  @Test
  public void testGetInstanceGroupMembershipWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"delete_instance_on_membership_delete\": true, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/memberships/r006-32c8210b-fd1a-409f-8966-de85bbfd3741\", \"id\": \"r006-32c8210b-fd1a-409f-8966-de85bbfd3741\", \"instance\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"id\": \"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"name\": \"my-instance\"}, \"instance_template\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance-template:0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\", \"id\": \"0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\", \"name\": \"my-instance-template\"}, \"name\": \"my-instance-group-membership\", \"pool_member\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004/members/r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\", \"id\": \"r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\"}, \"status\": \"deleting\", \"updated_at\": \"2019-01-01T12:00:00.000Z\"}";
    String getInstanceGroupMembershipPath = "/instance_groups/testString/memberships/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetInstanceGroupMembershipOptions model
    GetInstanceGroupMembershipOptions getInstanceGroupMembershipOptionsModel = new GetInstanceGroupMembershipOptions.Builder()
      .instanceGroupId("testString")
      .id("testString")
      .build();

    // Invoke getInstanceGroupMembership() with a valid options model and verify the result
    Response<InstanceGroupMembership> response = vpcService.getInstanceGroupMembership(getInstanceGroupMembershipOptionsModel).execute();
    assertNotNull(response);
    InstanceGroupMembership responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getInstanceGroupMembershipPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getInstanceGroupMembership operation with and without retries enabled
  @Test
  public void testGetInstanceGroupMembershipWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetInstanceGroupMembershipWOptions();

    vpcService.disableRetries();
    testGetInstanceGroupMembershipWOptions();
  }

  // Test the getInstanceGroupMembership operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetInstanceGroupMembershipNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getInstanceGroupMembership(null).execute();
  }

  // Test the updateInstanceGroupMembership operation with a valid options model parameter
  @Test
  public void testUpdateInstanceGroupMembershipWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"delete_instance_on_membership_delete\": true, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60/memberships/r006-32c8210b-fd1a-409f-8966-de85bbfd3741\", \"id\": \"r006-32c8210b-fd1a-409f-8966-de85bbfd3741\", \"instance\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"id\": \"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"name\": \"my-instance\"}, \"instance_template\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance-template:0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/templates/0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\", \"id\": \"0717-e6c2c7d8-ad57-4f38-a21c-a86265b6aeb2\", \"name\": \"my-instance-template\"}, \"name\": \"my-instance-group-membership\", \"pool_member\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004/members/r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\", \"id\": \"r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\"}, \"status\": \"deleting\", \"updated_at\": \"2019-01-01T12:00:00.000Z\"}";
    String updateInstanceGroupMembershipPath = "/instance_groups/testString/memberships/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the InstanceGroupMembershipPatch model
    InstanceGroupMembershipPatch instanceGroupMembershipPatchModel = new InstanceGroupMembershipPatch.Builder()
      .deleteInstanceOnMembershipDelete(false)
      .name("my-instance-group-membership")
      .build();
    Map<String, Object> instanceGroupMembershipPatchModelAsPatch = instanceGroupMembershipPatchModel.asPatch();

    // Construct an instance of the UpdateInstanceGroupMembershipOptions model
    UpdateInstanceGroupMembershipOptions updateInstanceGroupMembershipOptionsModel = new UpdateInstanceGroupMembershipOptions.Builder()
      .instanceGroupId("testString")
      .id("testString")
      .instanceGroupMembershipPatch(instanceGroupMembershipPatchModelAsPatch)
      .build();

    // Invoke updateInstanceGroupMembership() with a valid options model and verify the result
    Response<InstanceGroupMembership> response = vpcService.updateInstanceGroupMembership(updateInstanceGroupMembershipOptionsModel).execute();
    assertNotNull(response);
    InstanceGroupMembership responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateInstanceGroupMembershipPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateInstanceGroupMembership operation with and without retries enabled
  @Test
  public void testUpdateInstanceGroupMembershipWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateInstanceGroupMembershipWOptions();

    vpcService.disableRetries();
    testUpdateInstanceGroupMembershipWOptions();
  }

  // Test the updateInstanceGroupMembership operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateInstanceGroupMembershipNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateInstanceGroupMembership(null).execute();
  }

  // Test the listReservations operation with a valid options model parameter
  @Test
  public void testListReservationsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"reservations\": [{\"affinity_policy\": \"automatic\", \"capacity\": {\"allocated\": 10, \"available\": 8, \"status\": \"allocated\", \"total\": 10, \"used\": 2}, \"committed_use\": {\"expiration_at\": \"2019-01-01T12:00:00.000Z\", \"expiration_policy\": \"release\", \"term\": \"term\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"id\": \"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"lifecycle_state\": \"stable\", \"name\": \"my-reservation\", \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\", \"resource_type\": \"instance_profile\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"reservation\", \"status\": \"activating\", \"status_reasons\": [{\"code\": \"cannot_activate_no_capacity_available\", \"message\": \"The reservation cannot be activated because capacity is unavailable\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-reserved-capacity-status-reasons\"}], \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"total_count\": 132}";
    String listReservationsPath = "/reservations";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListReservationsOptions model
    ListReservationsOptions listReservationsOptionsModel = new ListReservationsOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .name("my-name")
      .profileResourceType("testString")
      .affinityPolicy("automatic")
      .resourceGroupId("testString")
      .zoneName("us-south-1")
      .build();

    // Invoke listReservations() with a valid options model and verify the result
    Response<ReservationCollection> response = vpcService.listReservations(listReservationsOptionsModel).execute();
    assertNotNull(response);
    ReservationCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listReservationsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("name"), "my-name");
    assertEquals(query.get("profile.resource_type"), "testString");
    assertEquals(query.get("affinity_policy"), "automatic");
    assertEquals(query.get("resource_group.id"), "testString");
    assertEquals(query.get("zone.name"), "us-south-1");
  }

  // Test the listReservations operation with and without retries enabled
  @Test
  public void testListReservationsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListReservationsWOptions();

    vpcService.disableRetries();
    testListReservationsWOptions();
  }

  // Test the listReservations operation using the ReservationsPager.getNext() method
  @Test
  public void testListReservationsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"reservations\":[{\"affinity_policy\":\"automatic\",\"capacity\":{\"allocated\":10,\"available\":8,\"status\":\"allocated\",\"total\":10,\"used\":2},\"committed_use\":{\"expiration_at\":\"2019-01-01T12:00:00.000Z\",\"expiration_policy\":\"release\",\"term\":\"term\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"id\":\"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"lifecycle_state\":\"stable\",\"name\":\"my-reservation\",\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\",\"resource_type\":\"instance_profile\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"reservation\",\"status\":\"activating\",\"status_reasons\":[{\"code\":\"cannot_activate_no_capacity_available\",\"message\":\"The reservation cannot be activated because capacity is unavailable\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-reserved-capacity-status-reasons\"}],\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"reservations\":[{\"affinity_policy\":\"automatic\",\"capacity\":{\"allocated\":10,\"available\":8,\"status\":\"allocated\",\"total\":10,\"used\":2},\"committed_use\":{\"expiration_at\":\"2019-01-01T12:00:00.000Z\",\"expiration_policy\":\"release\",\"term\":\"term\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"id\":\"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"lifecycle_state\":\"stable\",\"name\":\"my-reservation\",\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\",\"resource_type\":\"instance_profile\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"reservation\",\"status\":\"activating\",\"status_reasons\":[{\"code\":\"cannot_activate_no_capacity_available\",\"message\":\"The reservation cannot be activated because capacity is unavailable\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-reserved-capacity-status-reasons\"}],\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListReservationsOptions listReservationsOptions = new ListReservationsOptions.Builder()
      .limit(Long.valueOf("10"))
      .name("my-name")
      .profileResourceType("testString")
      .affinityPolicy("automatic")
      .resourceGroupId("testString")
      .zoneName("us-south-1")
      .build();

    List<Reservation> allResults = new ArrayList<>();
    ReservationsPager pager = new ReservationsPager(vpcService, listReservationsOptions);
    while (pager.hasNext()) {
      List<Reservation> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listReservations operation using the ReservationsPager.getAll() method
  @Test
  public void testListReservationsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"reservations\":[{\"affinity_policy\":\"automatic\",\"capacity\":{\"allocated\":10,\"available\":8,\"status\":\"allocated\",\"total\":10,\"used\":2},\"committed_use\":{\"expiration_at\":\"2019-01-01T12:00:00.000Z\",\"expiration_policy\":\"release\",\"term\":\"term\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"id\":\"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"lifecycle_state\":\"stable\",\"name\":\"my-reservation\",\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\",\"resource_type\":\"instance_profile\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"reservation\",\"status\":\"activating\",\"status_reasons\":[{\"code\":\"cannot_activate_no_capacity_available\",\"message\":\"The reservation cannot be activated because capacity is unavailable\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-reserved-capacity-status-reasons\"}],\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"reservations\":[{\"affinity_policy\":\"automatic\",\"capacity\":{\"allocated\":10,\"available\":8,\"status\":\"allocated\",\"total\":10,\"used\":2},\"committed_use\":{\"expiration_at\":\"2019-01-01T12:00:00.000Z\",\"expiration_policy\":\"release\",\"term\":\"term\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"id\":\"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"lifecycle_state\":\"stable\",\"name\":\"my-reservation\",\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\",\"resource_type\":\"instance_profile\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"reservation\",\"status\":\"activating\",\"status_reasons\":[{\"code\":\"cannot_activate_no_capacity_available\",\"message\":\"The reservation cannot be activated because capacity is unavailable\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-reserved-capacity-status-reasons\"}],\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListReservationsOptions listReservationsOptions = new ListReservationsOptions.Builder()
      .limit(Long.valueOf("10"))
      .name("my-name")
      .profileResourceType("testString")
      .affinityPolicy("automatic")
      .resourceGroupId("testString")
      .zoneName("us-south-1")
      .build();

    ReservationsPager pager = new ReservationsPager(vpcService, listReservationsOptions);
    List<Reservation> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createReservation operation with a valid options model parameter
  @Test
  public void testCreateReservationWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"affinity_policy\": \"automatic\", \"capacity\": {\"allocated\": 10, \"available\": 8, \"status\": \"allocated\", \"total\": 10, \"used\": 2}, \"committed_use\": {\"expiration_at\": \"2019-01-01T12:00:00.000Z\", \"expiration_policy\": \"release\", \"term\": \"term\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"id\": \"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"lifecycle_state\": \"stable\", \"name\": \"my-reservation\", \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\", \"resource_type\": \"instance_profile\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"reservation\", \"status\": \"activating\", \"status_reasons\": [{\"code\": \"cannot_activate_no_capacity_available\", \"message\": \"The reservation cannot be activated because capacity is unavailable\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-reserved-capacity-status-reasons\"}], \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String createReservationPath = "/reservations";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ReservationCapacityPrototype model
    ReservationCapacityPrototype reservationCapacityPrototypeModel = new ReservationCapacityPrototype.Builder()
      .total(Long.valueOf("10"))
      .build();

    // Construct an instance of the ReservationCommittedUsePrototype model
    ReservationCommittedUsePrototype reservationCommittedUsePrototypeModel = new ReservationCommittedUsePrototype.Builder()
      .expirationPolicy("release")
      .term("testString")
      .build();

    // Construct an instance of the ReservationProfilePrototype model
    ReservationProfilePrototype reservationProfilePrototypeModel = new ReservationProfilePrototype.Builder()
      .name("bx2-4x16")
      .resourceType("bare_metal_server_profile")
      .build();

    // Construct an instance of the ZoneIdentityByName model
    ZoneIdentityByName zoneIdentityModel = new ZoneIdentityByName.Builder()
      .name("us-south-1")
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the CreateReservationOptions model
    CreateReservationOptions createReservationOptionsModel = new CreateReservationOptions.Builder()
      .capacity(reservationCapacityPrototypeModel)
      .committedUse(reservationCommittedUsePrototypeModel)
      .profile(reservationProfilePrototypeModel)
      .zone(zoneIdentityModel)
      .affinityPolicy("automatic")
      .name("my-reservation")
      .resourceGroup(resourceGroupIdentityModel)
      .build();

    // Invoke createReservation() with a valid options model and verify the result
    Response<Reservation> response = vpcService.createReservation(createReservationOptionsModel).execute();
    assertNotNull(response);
    Reservation responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createReservationPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createReservation operation with and without retries enabled
  @Test
  public void testCreateReservationWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateReservationWOptions();

    vpcService.disableRetries();
    testCreateReservationWOptions();
  }

  // Test the createReservation operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateReservationNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createReservation(null).execute();
  }

  // Test the deleteReservation operation with a valid options model parameter
  @Test
  public void testDeleteReservationWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"affinity_policy\": \"automatic\", \"capacity\": {\"allocated\": 10, \"available\": 8, \"status\": \"allocated\", \"total\": 10, \"used\": 2}, \"committed_use\": {\"expiration_at\": \"2019-01-01T12:00:00.000Z\", \"expiration_policy\": \"release\", \"term\": \"term\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"id\": \"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"lifecycle_state\": \"stable\", \"name\": \"my-reservation\", \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\", \"resource_type\": \"instance_profile\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"reservation\", \"status\": \"activating\", \"status_reasons\": [{\"code\": \"cannot_activate_no_capacity_available\", \"message\": \"The reservation cannot be activated because capacity is unavailable\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-reserved-capacity-status-reasons\"}], \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String deleteReservationPath = "/reservations/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteReservationOptions model
    DeleteReservationOptions deleteReservationOptionsModel = new DeleteReservationOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteReservation() with a valid options model and verify the result
    Response<Reservation> response = vpcService.deleteReservation(deleteReservationOptionsModel).execute();
    assertNotNull(response);
    Reservation responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteReservationPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteReservation operation with and without retries enabled
  @Test
  public void testDeleteReservationWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteReservationWOptions();

    vpcService.disableRetries();
    testDeleteReservationWOptions();
  }

  // Test the deleteReservation operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteReservationNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteReservation(null).execute();
  }

  // Test the getReservation operation with a valid options model parameter
  @Test
  public void testGetReservationWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"affinity_policy\": \"automatic\", \"capacity\": {\"allocated\": 10, \"available\": 8, \"status\": \"allocated\", \"total\": 10, \"used\": 2}, \"committed_use\": {\"expiration_at\": \"2019-01-01T12:00:00.000Z\", \"expiration_policy\": \"release\", \"term\": \"term\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"id\": \"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"lifecycle_state\": \"stable\", \"name\": \"my-reservation\", \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\", \"resource_type\": \"instance_profile\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"reservation\", \"status\": \"activating\", \"status_reasons\": [{\"code\": \"cannot_activate_no_capacity_available\", \"message\": \"The reservation cannot be activated because capacity is unavailable\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-reserved-capacity-status-reasons\"}], \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getReservationPath = "/reservations/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetReservationOptions model
    GetReservationOptions getReservationOptionsModel = new GetReservationOptions.Builder()
      .id("testString")
      .build();

    // Invoke getReservation() with a valid options model and verify the result
    Response<Reservation> response = vpcService.getReservation(getReservationOptionsModel).execute();
    assertNotNull(response);
    Reservation responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getReservationPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getReservation operation with and without retries enabled
  @Test
  public void testGetReservationWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetReservationWOptions();

    vpcService.disableRetries();
    testGetReservationWOptions();
  }

  // Test the getReservation operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetReservationNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getReservation(null).execute();
  }

  // Test the updateReservation operation with a valid options model parameter
  @Test
  public void testUpdateReservationWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"affinity_policy\": \"automatic\", \"capacity\": {\"allocated\": 10, \"available\": 8, \"status\": \"allocated\", \"total\": 10, \"used\": 2}, \"committed_use\": {\"expiration_at\": \"2019-01-01T12:00:00.000Z\", \"expiration_policy\": \"release\", \"term\": \"term\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"id\": \"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"lifecycle_state\": \"stable\", \"name\": \"my-reservation\", \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\", \"resource_type\": \"instance_profile\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"reservation\", \"status\": \"activating\", \"status_reasons\": [{\"code\": \"cannot_activate_no_capacity_available\", \"message\": \"The reservation cannot be activated because capacity is unavailable\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-reserved-capacity-status-reasons\"}], \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String updateReservationPath = "/reservations/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ReservationCapacityPatch model
    ReservationCapacityPatch reservationCapacityPatchModel = new ReservationCapacityPatch.Builder()
      .total(Long.valueOf("10"))
      .build();

    // Construct an instance of the ReservationCommittedUsePatch model
    ReservationCommittedUsePatch reservationCommittedUsePatchModel = new ReservationCommittedUsePatch.Builder()
      .expirationPolicy("release")
      .term("testString")
      .build();

    // Construct an instance of the ReservationProfilePatch model
    ReservationProfilePatch reservationProfilePatchModel = new ReservationProfilePatch.Builder()
      .name("bx2-4x16")
      .resourceType("bare_metal_server_profile")
      .build();

    // Construct an instance of the ReservationPatch model
    ReservationPatch reservationPatchModel = new ReservationPatch.Builder()
      .affinityPolicy("automatic")
      .capacity(reservationCapacityPatchModel)
      .committedUse(reservationCommittedUsePatchModel)
      .name("my-reservation")
      .profile(reservationProfilePatchModel)
      .build();
    Map<String, Object> reservationPatchModelAsPatch = reservationPatchModel.asPatch();

    // Construct an instance of the UpdateReservationOptions model
    UpdateReservationOptions updateReservationOptionsModel = new UpdateReservationOptions.Builder()
      .id("testString")
      .reservationPatch(reservationPatchModelAsPatch)
      .build();

    // Invoke updateReservation() with a valid options model and verify the result
    Response<Reservation> response = vpcService.updateReservation(updateReservationOptionsModel).execute();
    assertNotNull(response);
    Reservation responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateReservationPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateReservation operation with and without retries enabled
  @Test
  public void testUpdateReservationWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateReservationWOptions();

    vpcService.disableRetries();
    testUpdateReservationWOptions();
  }

  // Test the updateReservation operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateReservationNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateReservation(null).execute();
  }

  // Test the activateReservation operation with a valid options model parameter
  @Test
  public void testActivateReservationWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String activateReservationPath = "/reservations/testString/activate";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the ActivateReservationOptions model
    ActivateReservationOptions activateReservationOptionsModel = new ActivateReservationOptions.Builder()
      .id("testString")
      .build();

    // Invoke activateReservation() with a valid options model and verify the result
    Response<Void> response = vpcService.activateReservation(activateReservationOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, activateReservationPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the activateReservation operation with and without retries enabled
  @Test
  public void testActivateReservationWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testActivateReservationWOptions();

    vpcService.disableRetries();
    testActivateReservationWOptions();
  }

  // Test the activateReservation operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testActivateReservationNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.activateReservation(null).execute();
  }

  // Test the listDedicatedHostGroups operation with a valid options model parameter
  @Test
  public void testListDedicatedHostGroupsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"groups\": [{\"class\": \"bx2\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host-group:0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"dedicated_hosts\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host:0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-host\", \"resource_type\": \"dedicated_host\"}], \"family\": \"balanced\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"id\": \"0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"name\": \"my-dedicated-host-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"dedicated_host_group\", \"supported_instance_profiles\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\", \"resource_type\": \"instance_profile\"}], \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listDedicatedHostGroupsPath = "/dedicated_host/groups";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListDedicatedHostGroupsOptions model
    ListDedicatedHostGroupsOptions listDedicatedHostGroupsOptionsModel = new ListDedicatedHostGroupsOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .zoneName("us-south-1")
      .name("my-name")
      .build();

    // Invoke listDedicatedHostGroups() with a valid options model and verify the result
    Response<DedicatedHostGroupCollection> response = vpcService.listDedicatedHostGroups(listDedicatedHostGroupsOptionsModel).execute();
    assertNotNull(response);
    DedicatedHostGroupCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listDedicatedHostGroupsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
    assertEquals(query.get("zone.name"), "us-south-1");
    assertEquals(query.get("name"), "my-name");
  }

  // Test the listDedicatedHostGroups operation with and without retries enabled
  @Test
  public void testListDedicatedHostGroupsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListDedicatedHostGroupsWOptions();

    vpcService.disableRetries();
    testListDedicatedHostGroupsWOptions();
  }

  // Test the listDedicatedHostGroups operation using the DedicatedHostGroupsPager.getNext() method
  @Test
  public void testListDedicatedHostGroupsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"groups\":[{\"class\":\"bx2\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host-group:0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"dedicated_hosts\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host:0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-host\",\"resource_type\":\"dedicated_host\"}],\"family\":\"balanced\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"id\":\"0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"name\":\"my-dedicated-host-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"dedicated_host_group\",\"supported_instance_profiles\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\",\"resource_type\":\"instance_profile\"}],\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"groups\":[{\"class\":\"bx2\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host-group:0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"dedicated_hosts\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host:0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-host\",\"resource_type\":\"dedicated_host\"}],\"family\":\"balanced\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"id\":\"0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"name\":\"my-dedicated-host-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"dedicated_host_group\",\"supported_instance_profiles\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\",\"resource_type\":\"instance_profile\"}],\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListDedicatedHostGroupsOptions listDedicatedHostGroupsOptions = new ListDedicatedHostGroupsOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .zoneName("us-south-1")
      .name("my-name")
      .build();

    List<DedicatedHostGroup> allResults = new ArrayList<>();
    DedicatedHostGroupsPager pager = new DedicatedHostGroupsPager(vpcService, listDedicatedHostGroupsOptions);
    while (pager.hasNext()) {
      List<DedicatedHostGroup> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listDedicatedHostGroups operation using the DedicatedHostGroupsPager.getAll() method
  @Test
  public void testListDedicatedHostGroupsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"groups\":[{\"class\":\"bx2\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host-group:0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"dedicated_hosts\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host:0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-host\",\"resource_type\":\"dedicated_host\"}],\"family\":\"balanced\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"id\":\"0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"name\":\"my-dedicated-host-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"dedicated_host_group\",\"supported_instance_profiles\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\",\"resource_type\":\"instance_profile\"}],\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"groups\":[{\"class\":\"bx2\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host-group:0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"dedicated_hosts\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host:0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"my-host\",\"resource_type\":\"dedicated_host\"}],\"family\":\"balanced\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"id\":\"0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"name\":\"my-dedicated-host-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"dedicated_host_group\",\"supported_instance_profiles\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\",\"resource_type\":\"instance_profile\"}],\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListDedicatedHostGroupsOptions listDedicatedHostGroupsOptions = new ListDedicatedHostGroupsOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .zoneName("us-south-1")
      .name("my-name")
      .build();

    DedicatedHostGroupsPager pager = new DedicatedHostGroupsPager(vpcService, listDedicatedHostGroupsOptions);
    List<DedicatedHostGroup> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createDedicatedHostGroup operation with a valid options model parameter
  @Test
  public void testCreateDedicatedHostGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"class\": \"bx2\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host-group:0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"dedicated_hosts\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host:0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-host\", \"resource_type\": \"dedicated_host\"}], \"family\": \"balanced\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"id\": \"0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"name\": \"my-dedicated-host-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"dedicated_host_group\", \"supported_instance_profiles\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\", \"resource_type\": \"instance_profile\"}], \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String createDedicatedHostGroupPath = "/dedicated_host/groups";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ZoneIdentityByName model
    ZoneIdentityByName zoneIdentityModel = new ZoneIdentityByName.Builder()
      .name("us-south-1")
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the CreateDedicatedHostGroupOptions model
    CreateDedicatedHostGroupOptions createDedicatedHostGroupOptionsModel = new CreateDedicatedHostGroupOptions.Builder()
      .xClass("mx2")
      .family("balanced")
      .zone(zoneIdentityModel)
      .name("testString")
      .resourceGroup(resourceGroupIdentityModel)
      .build();

    // Invoke createDedicatedHostGroup() with a valid options model and verify the result
    Response<DedicatedHostGroup> response = vpcService.createDedicatedHostGroup(createDedicatedHostGroupOptionsModel).execute();
    assertNotNull(response);
    DedicatedHostGroup responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createDedicatedHostGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createDedicatedHostGroup operation with and without retries enabled
  @Test
  public void testCreateDedicatedHostGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateDedicatedHostGroupWOptions();

    vpcService.disableRetries();
    testCreateDedicatedHostGroupWOptions();
  }

  // Test the createDedicatedHostGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateDedicatedHostGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createDedicatedHostGroup(null).execute();
  }

  // Test the deleteDedicatedHostGroup operation with a valid options model parameter
  @Test
  public void testDeleteDedicatedHostGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteDedicatedHostGroupPath = "/dedicated_host/groups/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteDedicatedHostGroupOptions model
    DeleteDedicatedHostGroupOptions deleteDedicatedHostGroupOptionsModel = new DeleteDedicatedHostGroupOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteDedicatedHostGroup() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteDedicatedHostGroup(deleteDedicatedHostGroupOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteDedicatedHostGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteDedicatedHostGroup operation with and without retries enabled
  @Test
  public void testDeleteDedicatedHostGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteDedicatedHostGroupWOptions();

    vpcService.disableRetries();
    testDeleteDedicatedHostGroupWOptions();
  }

  // Test the deleteDedicatedHostGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteDedicatedHostGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteDedicatedHostGroup(null).execute();
  }

  // Test the getDedicatedHostGroup operation with a valid options model parameter
  @Test
  public void testGetDedicatedHostGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"class\": \"bx2\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host-group:0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"dedicated_hosts\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host:0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-host\", \"resource_type\": \"dedicated_host\"}], \"family\": \"balanced\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"id\": \"0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"name\": \"my-dedicated-host-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"dedicated_host_group\", \"supported_instance_profiles\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\", \"resource_type\": \"instance_profile\"}], \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getDedicatedHostGroupPath = "/dedicated_host/groups/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetDedicatedHostGroupOptions model
    GetDedicatedHostGroupOptions getDedicatedHostGroupOptionsModel = new GetDedicatedHostGroupOptions.Builder()
      .id("testString")
      .build();

    // Invoke getDedicatedHostGroup() with a valid options model and verify the result
    Response<DedicatedHostGroup> response = vpcService.getDedicatedHostGroup(getDedicatedHostGroupOptionsModel).execute();
    assertNotNull(response);
    DedicatedHostGroup responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getDedicatedHostGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getDedicatedHostGroup operation with and without retries enabled
  @Test
  public void testGetDedicatedHostGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetDedicatedHostGroupWOptions();

    vpcService.disableRetries();
    testGetDedicatedHostGroupWOptions();
  }

  // Test the getDedicatedHostGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetDedicatedHostGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getDedicatedHostGroup(null).execute();
  }

  // Test the updateDedicatedHostGroup operation with a valid options model parameter
  @Test
  public void testUpdateDedicatedHostGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"class\": \"bx2\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host-group:0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"dedicated_hosts\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host:0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"my-host\", \"resource_type\": \"dedicated_host\"}], \"family\": \"balanced\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"id\": \"0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"name\": \"my-dedicated-host-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"dedicated_host_group\", \"supported_instance_profiles\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\", \"resource_type\": \"instance_profile\"}], \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String updateDedicatedHostGroupPath = "/dedicated_host/groups/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the DedicatedHostGroupPatch model
    DedicatedHostGroupPatch dedicatedHostGroupPatchModel = new DedicatedHostGroupPatch.Builder()
      .name("my-dedicated-host-group-updated")
      .build();
    Map<String, Object> dedicatedHostGroupPatchModelAsPatch = dedicatedHostGroupPatchModel.asPatch();

    // Construct an instance of the UpdateDedicatedHostGroupOptions model
    UpdateDedicatedHostGroupOptions updateDedicatedHostGroupOptionsModel = new UpdateDedicatedHostGroupOptions.Builder()
      .id("testString")
      .dedicatedHostGroupPatch(dedicatedHostGroupPatchModelAsPatch)
      .build();

    // Invoke updateDedicatedHostGroup() with a valid options model and verify the result
    Response<DedicatedHostGroup> response = vpcService.updateDedicatedHostGroup(updateDedicatedHostGroupOptionsModel).execute();
    assertNotNull(response);
    DedicatedHostGroup responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateDedicatedHostGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateDedicatedHostGroup operation with and without retries enabled
  @Test
  public void testUpdateDedicatedHostGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateDedicatedHostGroupWOptions();

    vpcService.disableRetries();
    testUpdateDedicatedHostGroupWOptions();
  }

  // Test the updateDedicatedHostGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateDedicatedHostGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateDedicatedHostGroup(null).execute();
  }

  // Test the listDedicatedHostProfiles operation with a valid options model parameter
  @Test
  public void testListDedicatedHostProfilesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"profiles\": [{\"class\": \"bx2\", \"disks\": [{\"interface_type\": {\"type\": \"fixed\", \"value\": \"nvme\"}, \"quantity\": {\"type\": \"fixed\", \"value\": 4}, \"size\": {\"type\": \"fixed\", \"value\": 3200}, \"supported_instance_interface_types\": {\"type\": \"fixed\", \"value\": [\"nvme\"]}}], \"family\": \"balanced\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"memory\": {\"type\": \"fixed\", \"value\": 16}, \"name\": \"mx2-host-152x1216\", \"socket_count\": {\"type\": \"fixed\", \"value\": 2}, \"status\": \"current\", \"supported_instance_profiles\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\", \"resource_type\": \"instance_profile\"}], \"vcpu_architecture\": {\"type\": \"fixed\", \"value\": \"amd64\"}, \"vcpu_count\": {\"type\": \"fixed\", \"value\": 16}, \"vcpu_manufacturer\": {\"type\": \"fixed\", \"value\": \"intel\"}}], \"total_count\": 132}";
    String listDedicatedHostProfilesPath = "/dedicated_host/profiles";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListDedicatedHostProfilesOptions model
    ListDedicatedHostProfilesOptions listDedicatedHostProfilesOptionsModel = new ListDedicatedHostProfilesOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listDedicatedHostProfiles() with a valid options model and verify the result
    Response<DedicatedHostProfileCollection> response = vpcService.listDedicatedHostProfiles(listDedicatedHostProfilesOptionsModel).execute();
    assertNotNull(response);
    DedicatedHostProfileCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listDedicatedHostProfilesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listDedicatedHostProfiles operation with and without retries enabled
  @Test
  public void testListDedicatedHostProfilesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListDedicatedHostProfilesWOptions();

    vpcService.disableRetries();
    testListDedicatedHostProfilesWOptions();
  }

  // Test the listDedicatedHostProfiles operation using the DedicatedHostProfilesPager.getNext() method
  @Test
  public void testListDedicatedHostProfilesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"profiles\":[{\"class\":\"bx2\",\"disks\":[{\"interface_type\":{\"type\":\"fixed\",\"value\":\"nvme\"},\"quantity\":{\"type\":\"fixed\",\"value\":4},\"size\":{\"type\":\"fixed\",\"value\":3200},\"supported_instance_interface_types\":{\"type\":\"fixed\",\"value\":[\"nvme\"]}}],\"family\":\"balanced\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"memory\":{\"type\":\"fixed\",\"value\":16},\"name\":\"mx2-host-152x1216\",\"socket_count\":{\"type\":\"fixed\",\"value\":2},\"status\":\"current\",\"supported_instance_profiles\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\",\"resource_type\":\"instance_profile\"}],\"vcpu_architecture\":{\"type\":\"fixed\",\"value\":\"amd64\"},\"vcpu_count\":{\"type\":\"fixed\",\"value\":16},\"vcpu_manufacturer\":{\"type\":\"fixed\",\"value\":\"intel\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"profiles\":[{\"class\":\"bx2\",\"disks\":[{\"interface_type\":{\"type\":\"fixed\",\"value\":\"nvme\"},\"quantity\":{\"type\":\"fixed\",\"value\":4},\"size\":{\"type\":\"fixed\",\"value\":3200},\"supported_instance_interface_types\":{\"type\":\"fixed\",\"value\":[\"nvme\"]}}],\"family\":\"balanced\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"memory\":{\"type\":\"fixed\",\"value\":16},\"name\":\"mx2-host-152x1216\",\"socket_count\":{\"type\":\"fixed\",\"value\":2},\"status\":\"current\",\"supported_instance_profiles\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\",\"resource_type\":\"instance_profile\"}],\"vcpu_architecture\":{\"type\":\"fixed\",\"value\":\"amd64\"},\"vcpu_count\":{\"type\":\"fixed\",\"value\":16},\"vcpu_manufacturer\":{\"type\":\"fixed\",\"value\":\"intel\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListDedicatedHostProfilesOptions listDedicatedHostProfilesOptions = new ListDedicatedHostProfilesOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    List<DedicatedHostProfile> allResults = new ArrayList<>();
    DedicatedHostProfilesPager pager = new DedicatedHostProfilesPager(vpcService, listDedicatedHostProfilesOptions);
    while (pager.hasNext()) {
      List<DedicatedHostProfile> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listDedicatedHostProfiles operation using the DedicatedHostProfilesPager.getAll() method
  @Test
  public void testListDedicatedHostProfilesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"profiles\":[{\"class\":\"bx2\",\"disks\":[{\"interface_type\":{\"type\":\"fixed\",\"value\":\"nvme\"},\"quantity\":{\"type\":\"fixed\",\"value\":4},\"size\":{\"type\":\"fixed\",\"value\":3200},\"supported_instance_interface_types\":{\"type\":\"fixed\",\"value\":[\"nvme\"]}}],\"family\":\"balanced\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"memory\":{\"type\":\"fixed\",\"value\":16},\"name\":\"mx2-host-152x1216\",\"socket_count\":{\"type\":\"fixed\",\"value\":2},\"status\":\"current\",\"supported_instance_profiles\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\",\"resource_type\":\"instance_profile\"}],\"vcpu_architecture\":{\"type\":\"fixed\",\"value\":\"amd64\"},\"vcpu_count\":{\"type\":\"fixed\",\"value\":16},\"vcpu_manufacturer\":{\"type\":\"fixed\",\"value\":\"intel\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"profiles\":[{\"class\":\"bx2\",\"disks\":[{\"interface_type\":{\"type\":\"fixed\",\"value\":\"nvme\"},\"quantity\":{\"type\":\"fixed\",\"value\":4},\"size\":{\"type\":\"fixed\",\"value\":3200},\"supported_instance_interface_types\":{\"type\":\"fixed\",\"value\":[\"nvme\"]}}],\"family\":\"balanced\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"memory\":{\"type\":\"fixed\",\"value\":16},\"name\":\"mx2-host-152x1216\",\"socket_count\":{\"type\":\"fixed\",\"value\":2},\"status\":\"current\",\"supported_instance_profiles\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\",\"resource_type\":\"instance_profile\"}],\"vcpu_architecture\":{\"type\":\"fixed\",\"value\":\"amd64\"},\"vcpu_count\":{\"type\":\"fixed\",\"value\":16},\"vcpu_manufacturer\":{\"type\":\"fixed\",\"value\":\"intel\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListDedicatedHostProfilesOptions listDedicatedHostProfilesOptions = new ListDedicatedHostProfilesOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    DedicatedHostProfilesPager pager = new DedicatedHostProfilesPager(vpcService, listDedicatedHostProfilesOptions);
    List<DedicatedHostProfile> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the getDedicatedHostProfile operation with a valid options model parameter
  @Test
  public void testGetDedicatedHostProfileWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"class\": \"bx2\", \"disks\": [{\"interface_type\": {\"type\": \"fixed\", \"value\": \"nvme\"}, \"quantity\": {\"type\": \"fixed\", \"value\": 4}, \"size\": {\"type\": \"fixed\", \"value\": 3200}, \"supported_instance_interface_types\": {\"type\": \"fixed\", \"value\": [\"nvme\"]}}], \"family\": \"balanced\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"memory\": {\"type\": \"fixed\", \"value\": 16}, \"name\": \"mx2-host-152x1216\", \"socket_count\": {\"type\": \"fixed\", \"value\": 2}, \"status\": \"current\", \"supported_instance_profiles\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\", \"resource_type\": \"instance_profile\"}], \"vcpu_architecture\": {\"type\": \"fixed\", \"value\": \"amd64\"}, \"vcpu_count\": {\"type\": \"fixed\", \"value\": 16}, \"vcpu_manufacturer\": {\"type\": \"fixed\", \"value\": \"intel\"}}";
    String getDedicatedHostProfilePath = "/dedicated_host/profiles/mx2-host-152x1216";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetDedicatedHostProfileOptions model
    GetDedicatedHostProfileOptions getDedicatedHostProfileOptionsModel = new GetDedicatedHostProfileOptions.Builder()
      .name("mx2-host-152x1216")
      .build();

    // Invoke getDedicatedHostProfile() with a valid options model and verify the result
    Response<DedicatedHostProfile> response = vpcService.getDedicatedHostProfile(getDedicatedHostProfileOptionsModel).execute();
    assertNotNull(response);
    DedicatedHostProfile responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getDedicatedHostProfilePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getDedicatedHostProfile operation with and without retries enabled
  @Test
  public void testGetDedicatedHostProfileWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetDedicatedHostProfileWOptions();

    vpcService.disableRetries();
    testGetDedicatedHostProfileWOptions();
  }

  // Test the getDedicatedHostProfile operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetDedicatedHostProfileNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getDedicatedHostProfile(null).execute();
  }

  // Test the listDedicatedHosts operation with a valid options model parameter
  @Test
  public void testListDedicatedHostsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"dedicated_hosts\": [{\"available_memory\": 128, \"available_vcpu\": {\"architecture\": \"amd64\", \"count\": 4, \"manufacturer\": \"intel\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host:0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"disks\": [{\"available\": 9, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a/disks/0717-bd091a9e-b036-4c65-a79b-56d164911f6e\", \"id\": \"0717-bd091a9e-b036-4c65-a79b-56d164911f6e\", \"instance_disks\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-instance-disk\", \"resource_type\": \"instance_disk\"}], \"interface_type\": \"nvme\", \"lifecycle_state\": \"stable\", \"name\": \"my-dedicated-host-disk\", \"provisionable\": false, \"resource_type\": \"dedicated_host_disk\", \"size\": 4, \"supported_instance_interface_types\": [\"nvme\"]}], \"group\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host-group:0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"id\": \"0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"name\": \"my-dedicated-host-group\", \"resource_type\": \"dedicated_host_group\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"instance_placement_enabled\": true, \"instances\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"id\": \"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"name\": \"my-instance\"}], \"lifecycle_state\": \"stable\", \"memory\": 128, \"name\": \"my-host\", \"numa\": {\"count\": 2, \"nodes\": [{\"available_vcpu\": 24, \"vcpu\": 56}]}, \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"mx2-host-152x1216\"}, \"provisionable\": false, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"dedicated_host\", \"socket_count\": 4, \"state\": \"available\", \"supported_instance_profiles\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\", \"resource_type\": \"instance_profile\"}], \"vcpu\": {\"architecture\": \"amd64\", \"count\": 4, \"manufacturer\": \"intel\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listDedicatedHostsPath = "/dedicated_hosts";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListDedicatedHostsOptions model
    ListDedicatedHostsOptions listDedicatedHostsOptionsModel = new ListDedicatedHostsOptions.Builder()
      .dedicatedHostGroupId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .zoneName("us-south-1")
      .name("my-name")
      .build();

    // Invoke listDedicatedHosts() with a valid options model and verify the result
    Response<DedicatedHostCollection> response = vpcService.listDedicatedHosts(listDedicatedHostsOptionsModel).execute();
    assertNotNull(response);
    DedicatedHostCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listDedicatedHostsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("dedicated_host_group.id"), "testString");
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
    assertEquals(query.get("zone.name"), "us-south-1");
    assertEquals(query.get("name"), "my-name");
  }

  // Test the listDedicatedHosts operation with and without retries enabled
  @Test
  public void testListDedicatedHostsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListDedicatedHostsWOptions();

    vpcService.disableRetries();
    testListDedicatedHostsWOptions();
  }

  // Test the listDedicatedHosts operation using the DedicatedHostsPager.getNext() method
  @Test
  public void testListDedicatedHostsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"dedicated_hosts\":[{\"available_memory\":128,\"available_vcpu\":{\"architecture\":\"amd64\",\"count\":4,\"manufacturer\":\"intel\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host:0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"disks\":[{\"available\":9,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a/disks/0717-bd091a9e-b036-4c65-a79b-56d164911f6e\",\"id\":\"0717-bd091a9e-b036-4c65-a79b-56d164911f6e\",\"instance_disks\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-instance-disk\",\"resource_type\":\"instance_disk\"}],\"interface_type\":\"nvme\",\"lifecycle_state\":\"stable\",\"name\":\"my-dedicated-host-disk\",\"provisionable\":false,\"resource_type\":\"dedicated_host_disk\",\"size\":4,\"supported_instance_interface_types\":[\"nvme\"]}],\"group\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host-group:0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"id\":\"0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"name\":\"my-dedicated-host-group\",\"resource_type\":\"dedicated_host_group\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"instance_placement_enabled\":true,\"instances\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"id\":\"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"name\":\"my-instance\"}],\"lifecycle_state\":\"stable\",\"memory\":128,\"name\":\"my-host\",\"numa\":{\"count\":2,\"nodes\":[{\"available_vcpu\":24,\"vcpu\":56}]},\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"mx2-host-152x1216\"},\"provisionable\":false,\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"dedicated_host\",\"socket_count\":4,\"state\":\"available\",\"supported_instance_profiles\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\",\"resource_type\":\"instance_profile\"}],\"vcpu\":{\"architecture\":\"amd64\",\"count\":4,\"manufacturer\":\"intel\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"dedicated_hosts\":[{\"available_memory\":128,\"available_vcpu\":{\"architecture\":\"amd64\",\"count\":4,\"manufacturer\":\"intel\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host:0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"disks\":[{\"available\":9,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a/disks/0717-bd091a9e-b036-4c65-a79b-56d164911f6e\",\"id\":\"0717-bd091a9e-b036-4c65-a79b-56d164911f6e\",\"instance_disks\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-instance-disk\",\"resource_type\":\"instance_disk\"}],\"interface_type\":\"nvme\",\"lifecycle_state\":\"stable\",\"name\":\"my-dedicated-host-disk\",\"provisionable\":false,\"resource_type\":\"dedicated_host_disk\",\"size\":4,\"supported_instance_interface_types\":[\"nvme\"]}],\"group\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host-group:0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"id\":\"0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"name\":\"my-dedicated-host-group\",\"resource_type\":\"dedicated_host_group\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"instance_placement_enabled\":true,\"instances\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"id\":\"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"name\":\"my-instance\"}],\"lifecycle_state\":\"stable\",\"memory\":128,\"name\":\"my-host\",\"numa\":{\"count\":2,\"nodes\":[{\"available_vcpu\":24,\"vcpu\":56}]},\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"mx2-host-152x1216\"},\"provisionable\":false,\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"dedicated_host\",\"socket_count\":4,\"state\":\"available\",\"supported_instance_profiles\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\",\"resource_type\":\"instance_profile\"}],\"vcpu\":{\"architecture\":\"amd64\",\"count\":4,\"manufacturer\":\"intel\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListDedicatedHostsOptions listDedicatedHostsOptions = new ListDedicatedHostsOptions.Builder()
      .dedicatedHostGroupId("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .zoneName("us-south-1")
      .name("my-name")
      .build();

    List<DedicatedHost> allResults = new ArrayList<>();
    DedicatedHostsPager pager = new DedicatedHostsPager(vpcService, listDedicatedHostsOptions);
    while (pager.hasNext()) {
      List<DedicatedHost> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listDedicatedHosts operation using the DedicatedHostsPager.getAll() method
  @Test
  public void testListDedicatedHostsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"dedicated_hosts\":[{\"available_memory\":128,\"available_vcpu\":{\"architecture\":\"amd64\",\"count\":4,\"manufacturer\":\"intel\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host:0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"disks\":[{\"available\":9,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a/disks/0717-bd091a9e-b036-4c65-a79b-56d164911f6e\",\"id\":\"0717-bd091a9e-b036-4c65-a79b-56d164911f6e\",\"instance_disks\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-instance-disk\",\"resource_type\":\"instance_disk\"}],\"interface_type\":\"nvme\",\"lifecycle_state\":\"stable\",\"name\":\"my-dedicated-host-disk\",\"provisionable\":false,\"resource_type\":\"dedicated_host_disk\",\"size\":4,\"supported_instance_interface_types\":[\"nvme\"]}],\"group\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host-group:0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"id\":\"0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"name\":\"my-dedicated-host-group\",\"resource_type\":\"dedicated_host_group\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"instance_placement_enabled\":true,\"instances\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"id\":\"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"name\":\"my-instance\"}],\"lifecycle_state\":\"stable\",\"memory\":128,\"name\":\"my-host\",\"numa\":{\"count\":2,\"nodes\":[{\"available_vcpu\":24,\"vcpu\":56}]},\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"mx2-host-152x1216\"},\"provisionable\":false,\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"dedicated_host\",\"socket_count\":4,\"state\":\"available\",\"supported_instance_profiles\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\",\"resource_type\":\"instance_profile\"}],\"vcpu\":{\"architecture\":\"amd64\",\"count\":4,\"manufacturer\":\"intel\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"dedicated_hosts\":[{\"available_memory\":128,\"available_vcpu\":{\"architecture\":\"amd64\",\"count\":4,\"manufacturer\":\"intel\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host:0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"disks\":[{\"available\":9,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a/disks/0717-bd091a9e-b036-4c65-a79b-56d164911f6e\",\"id\":\"0717-bd091a9e-b036-4c65-a79b-56d164911f6e\",\"instance_disks\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\",\"id\":\"10c02d81-0ecb-4dc5-897d-28392913b81e\",\"name\":\"my-instance-disk\",\"resource_type\":\"instance_disk\"}],\"interface_type\":\"nvme\",\"lifecycle_state\":\"stable\",\"name\":\"my-dedicated-host-disk\",\"provisionable\":false,\"resource_type\":\"dedicated_host_disk\",\"size\":4,\"supported_instance_interface_types\":[\"nvme\"]}],\"group\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host-group:0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"id\":\"0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\",\"name\":\"my-dedicated-host-group\",\"resource_type\":\"dedicated_host_group\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"id\":\"0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"instance_placement_enabled\":true,\"instances\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"id\":\"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"name\":\"my-instance\"}],\"lifecycle_state\":\"stable\",\"memory\":128,\"name\":\"my-host\",\"numa\":{\"count\":2,\"nodes\":[{\"available_vcpu\":24,\"vcpu\":56}]},\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\",\"name\":\"mx2-host-152x1216\"},\"provisionable\":false,\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"dedicated_host\",\"socket_count\":4,\"state\":\"available\",\"supported_instance_profiles\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\",\"resource_type\":\"instance_profile\"}],\"vcpu\":{\"architecture\":\"amd64\",\"count\":4,\"manufacturer\":\"intel\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListDedicatedHostsOptions listDedicatedHostsOptions = new ListDedicatedHostsOptions.Builder()
      .dedicatedHostGroupId("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .zoneName("us-south-1")
      .name("my-name")
      .build();

    DedicatedHostsPager pager = new DedicatedHostsPager(vpcService, listDedicatedHostsOptions);
    List<DedicatedHost> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createDedicatedHost operation with a valid options model parameter
  @Test
  public void testCreateDedicatedHostWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"available_memory\": 128, \"available_vcpu\": {\"architecture\": \"amd64\", \"count\": 4, \"manufacturer\": \"intel\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host:0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"disks\": [{\"available\": 9, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a/disks/0717-bd091a9e-b036-4c65-a79b-56d164911f6e\", \"id\": \"0717-bd091a9e-b036-4c65-a79b-56d164911f6e\", \"instance_disks\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-instance-disk\", \"resource_type\": \"instance_disk\"}], \"interface_type\": \"nvme\", \"lifecycle_state\": \"stable\", \"name\": \"my-dedicated-host-disk\", \"provisionable\": false, \"resource_type\": \"dedicated_host_disk\", \"size\": 4, \"supported_instance_interface_types\": [\"nvme\"]}], \"group\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host-group:0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"id\": \"0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"name\": \"my-dedicated-host-group\", \"resource_type\": \"dedicated_host_group\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"instance_placement_enabled\": true, \"instances\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"id\": \"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"name\": \"my-instance\"}], \"lifecycle_state\": \"stable\", \"memory\": 128, \"name\": \"my-host\", \"numa\": {\"count\": 2, \"nodes\": [{\"available_vcpu\": 24, \"vcpu\": 56}]}, \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"mx2-host-152x1216\"}, \"provisionable\": false, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"dedicated_host\", \"socket_count\": 4, \"state\": \"available\", \"supported_instance_profiles\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\", \"resource_type\": \"instance_profile\"}], \"vcpu\": {\"architecture\": \"amd64\", \"count\": 4, \"manufacturer\": \"intel\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String createDedicatedHostPath = "/dedicated_hosts";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the DedicatedHostProfileIdentityByName model
    DedicatedHostProfileIdentityByName dedicatedHostProfileIdentityModel = new DedicatedHostProfileIdentityByName.Builder()
      .name("mx2-host-152x1216")
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the DedicatedHostGroupIdentityById model
    DedicatedHostGroupIdentityById dedicatedHostGroupIdentityModel = new DedicatedHostGroupIdentityById.Builder()
      .id("0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0")
      .build();

    // Construct an instance of the DedicatedHostPrototypeDedicatedHostByGroup model
    DedicatedHostPrototypeDedicatedHostByGroup dedicatedHostPrototypeModel = new DedicatedHostPrototypeDedicatedHostByGroup.Builder()
      .instancePlacementEnabled(true)
      .name("my-host")
      .profile(dedicatedHostProfileIdentityModel)
      .resourceGroup(resourceGroupIdentityModel)
      .group(dedicatedHostGroupIdentityModel)
      .build();

    // Construct an instance of the CreateDedicatedHostOptions model
    CreateDedicatedHostOptions createDedicatedHostOptionsModel = new CreateDedicatedHostOptions.Builder()
      .dedicatedHostPrototype(dedicatedHostPrototypeModel)
      .build();

    // Invoke createDedicatedHost() with a valid options model and verify the result
    Response<DedicatedHost> response = vpcService.createDedicatedHost(createDedicatedHostOptionsModel).execute();
    assertNotNull(response);
    DedicatedHost responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createDedicatedHostPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createDedicatedHost operation with and without retries enabled
  @Test
  public void testCreateDedicatedHostWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateDedicatedHostWOptions();

    vpcService.disableRetries();
    testCreateDedicatedHostWOptions();
  }

  // Test the createDedicatedHost operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateDedicatedHostNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createDedicatedHost(null).execute();
  }

  // Test the listDedicatedHostDisks operation with a valid options model parameter
  @Test
  public void testListDedicatedHostDisksWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"disks\": [{\"available\": 9, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a/disks/0717-bd091a9e-b036-4c65-a79b-56d164911f6e\", \"id\": \"0717-bd091a9e-b036-4c65-a79b-56d164911f6e\", \"instance_disks\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-instance-disk\", \"resource_type\": \"instance_disk\"}], \"interface_type\": \"nvme\", \"lifecycle_state\": \"stable\", \"name\": \"my-dedicated-host-disk\", \"provisionable\": false, \"resource_type\": \"dedicated_host_disk\", \"size\": 4, \"supported_instance_interface_types\": [\"nvme\"]}]}";
    String listDedicatedHostDisksPath = "/dedicated_hosts/testString/disks";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListDedicatedHostDisksOptions model
    ListDedicatedHostDisksOptions listDedicatedHostDisksOptionsModel = new ListDedicatedHostDisksOptions.Builder()
      .dedicatedHostId("testString")
      .build();

    // Invoke listDedicatedHostDisks() with a valid options model and verify the result
    Response<DedicatedHostDiskCollection> response = vpcService.listDedicatedHostDisks(listDedicatedHostDisksOptionsModel).execute();
    assertNotNull(response);
    DedicatedHostDiskCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listDedicatedHostDisksPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listDedicatedHostDisks operation with and without retries enabled
  @Test
  public void testListDedicatedHostDisksWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListDedicatedHostDisksWOptions();

    vpcService.disableRetries();
    testListDedicatedHostDisksWOptions();
  }

  // Test the listDedicatedHostDisks operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListDedicatedHostDisksNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listDedicatedHostDisks(null).execute();
  }

  // Test the getDedicatedHostDisk operation with a valid options model parameter
  @Test
  public void testGetDedicatedHostDiskWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"available\": 9, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a/disks/0717-bd091a9e-b036-4c65-a79b-56d164911f6e\", \"id\": \"0717-bd091a9e-b036-4c65-a79b-56d164911f6e\", \"instance_disks\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-instance-disk\", \"resource_type\": \"instance_disk\"}], \"interface_type\": \"nvme\", \"lifecycle_state\": \"stable\", \"name\": \"my-dedicated-host-disk\", \"provisionable\": false, \"resource_type\": \"dedicated_host_disk\", \"size\": 4, \"supported_instance_interface_types\": [\"nvme\"]}";
    String getDedicatedHostDiskPath = "/dedicated_hosts/testString/disks/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetDedicatedHostDiskOptions model
    GetDedicatedHostDiskOptions getDedicatedHostDiskOptionsModel = new GetDedicatedHostDiskOptions.Builder()
      .dedicatedHostId("testString")
      .id("testString")
      .build();

    // Invoke getDedicatedHostDisk() with a valid options model and verify the result
    Response<DedicatedHostDisk> response = vpcService.getDedicatedHostDisk(getDedicatedHostDiskOptionsModel).execute();
    assertNotNull(response);
    DedicatedHostDisk responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getDedicatedHostDiskPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getDedicatedHostDisk operation with and without retries enabled
  @Test
  public void testGetDedicatedHostDiskWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetDedicatedHostDiskWOptions();

    vpcService.disableRetries();
    testGetDedicatedHostDiskWOptions();
  }

  // Test the getDedicatedHostDisk operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetDedicatedHostDiskNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getDedicatedHostDisk(null).execute();
  }

  // Test the updateDedicatedHostDisk operation with a valid options model parameter
  @Test
  public void testUpdateDedicatedHostDiskWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"available\": 9, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a/disks/0717-bd091a9e-b036-4c65-a79b-56d164911f6e\", \"id\": \"0717-bd091a9e-b036-4c65-a79b-56d164911f6e\", \"instance_disks\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-instance-disk\", \"resource_type\": \"instance_disk\"}], \"interface_type\": \"nvme\", \"lifecycle_state\": \"stable\", \"name\": \"my-dedicated-host-disk\", \"provisionable\": false, \"resource_type\": \"dedicated_host_disk\", \"size\": 4, \"supported_instance_interface_types\": [\"nvme\"]}";
    String updateDedicatedHostDiskPath = "/dedicated_hosts/testString/disks/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the DedicatedHostDiskPatch model
    DedicatedHostDiskPatch dedicatedHostDiskPatchModel = new DedicatedHostDiskPatch.Builder()
      .name("my-dedicated-host-disk-updated")
      .build();
    Map<String, Object> dedicatedHostDiskPatchModelAsPatch = dedicatedHostDiskPatchModel.asPatch();

    // Construct an instance of the UpdateDedicatedHostDiskOptions model
    UpdateDedicatedHostDiskOptions updateDedicatedHostDiskOptionsModel = new UpdateDedicatedHostDiskOptions.Builder()
      .dedicatedHostId("testString")
      .id("testString")
      .dedicatedHostDiskPatch(dedicatedHostDiskPatchModelAsPatch)
      .build();

    // Invoke updateDedicatedHostDisk() with a valid options model and verify the result
    Response<DedicatedHostDisk> response = vpcService.updateDedicatedHostDisk(updateDedicatedHostDiskOptionsModel).execute();
    assertNotNull(response);
    DedicatedHostDisk responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateDedicatedHostDiskPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateDedicatedHostDisk operation with and without retries enabled
  @Test
  public void testUpdateDedicatedHostDiskWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateDedicatedHostDiskWOptions();

    vpcService.disableRetries();
    testUpdateDedicatedHostDiskWOptions();
  }

  // Test the updateDedicatedHostDisk operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateDedicatedHostDiskNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateDedicatedHostDisk(null).execute();
  }

  // Test the deleteDedicatedHost operation with a valid options model parameter
  @Test
  public void testDeleteDedicatedHostWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteDedicatedHostPath = "/dedicated_hosts/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteDedicatedHostOptions model
    DeleteDedicatedHostOptions deleteDedicatedHostOptionsModel = new DeleteDedicatedHostOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteDedicatedHost() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteDedicatedHost(deleteDedicatedHostOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteDedicatedHostPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteDedicatedHost operation with and without retries enabled
  @Test
  public void testDeleteDedicatedHostWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteDedicatedHostWOptions();

    vpcService.disableRetries();
    testDeleteDedicatedHostWOptions();
  }

  // Test the deleteDedicatedHost operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteDedicatedHostNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteDedicatedHost(null).execute();
  }

  // Test the getDedicatedHost operation with a valid options model parameter
  @Test
  public void testGetDedicatedHostWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"available_memory\": 128, \"available_vcpu\": {\"architecture\": \"amd64\", \"count\": 4, \"manufacturer\": \"intel\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host:0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"disks\": [{\"available\": 9, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a/disks/0717-bd091a9e-b036-4c65-a79b-56d164911f6e\", \"id\": \"0717-bd091a9e-b036-4c65-a79b-56d164911f6e\", \"instance_disks\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-instance-disk\", \"resource_type\": \"instance_disk\"}], \"interface_type\": \"nvme\", \"lifecycle_state\": \"stable\", \"name\": \"my-dedicated-host-disk\", \"provisionable\": false, \"resource_type\": \"dedicated_host_disk\", \"size\": 4, \"supported_instance_interface_types\": [\"nvme\"]}], \"group\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host-group:0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"id\": \"0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"name\": \"my-dedicated-host-group\", \"resource_type\": \"dedicated_host_group\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"instance_placement_enabled\": true, \"instances\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"id\": \"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"name\": \"my-instance\"}], \"lifecycle_state\": \"stable\", \"memory\": 128, \"name\": \"my-host\", \"numa\": {\"count\": 2, \"nodes\": [{\"available_vcpu\": 24, \"vcpu\": 56}]}, \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"mx2-host-152x1216\"}, \"provisionable\": false, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"dedicated_host\", \"socket_count\": 4, \"state\": \"available\", \"supported_instance_profiles\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\", \"resource_type\": \"instance_profile\"}], \"vcpu\": {\"architecture\": \"amd64\", \"count\": 4, \"manufacturer\": \"intel\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getDedicatedHostPath = "/dedicated_hosts/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetDedicatedHostOptions model
    GetDedicatedHostOptions getDedicatedHostOptionsModel = new GetDedicatedHostOptions.Builder()
      .id("testString")
      .build();

    // Invoke getDedicatedHost() with a valid options model and verify the result
    Response<DedicatedHost> response = vpcService.getDedicatedHost(getDedicatedHostOptionsModel).execute();
    assertNotNull(response);
    DedicatedHost responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getDedicatedHostPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getDedicatedHost operation with and without retries enabled
  @Test
  public void testGetDedicatedHostWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetDedicatedHostWOptions();

    vpcService.disableRetries();
    testGetDedicatedHostWOptions();
  }

  // Test the getDedicatedHost operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetDedicatedHostNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getDedicatedHost(null).execute();
  }

  // Test the updateDedicatedHost operation with a valid options model parameter
  @Test
  public void testUpdateDedicatedHostWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"available_memory\": 128, \"available_vcpu\": {\"architecture\": \"amd64\", \"count\": 4, \"manufacturer\": \"intel\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host:0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"disks\": [{\"available\": 9, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a/disks/0717-bd091a9e-b036-4c65-a79b-56d164911f6e\", \"id\": \"0717-bd091a9e-b036-4c65-a79b-56d164911f6e\", \"instance_disks\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/disks/10c02d81-0ecb-4dc5-897d-28392913b81e\", \"id\": \"10c02d81-0ecb-4dc5-897d-28392913b81e\", \"name\": \"my-instance-disk\", \"resource_type\": \"instance_disk\"}], \"interface_type\": \"nvme\", \"lifecycle_state\": \"stable\", \"name\": \"my-dedicated-host-disk\", \"provisionable\": false, \"resource_type\": \"dedicated_host_disk\", \"size\": 4, \"supported_instance_interface_types\": [\"nvme\"]}], \"group\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::dedicated-host-group:0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"id\": \"0717-bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0\", \"name\": \"my-dedicated-host-group\", \"resource_type\": \"dedicated_host_group\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"id\": \"0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"instance_placement_enabled\": true, \"instances\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"id\": \"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"name\": \"my-instance\"}], \"lifecycle_state\": \"stable\", \"memory\": 128, \"name\": \"my-host\", \"numa\": {\"count\": 2, \"nodes\": [{\"available_vcpu\": 24, \"vcpu\": 56}]}, \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/0717-1e09281b-f177-46fb-baf1-bc152b2e391a\", \"name\": \"mx2-host-152x1216\"}, \"provisionable\": false, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"dedicated_host\", \"socket_count\": 4, \"state\": \"available\", \"supported_instance_profiles\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\", \"resource_type\": \"instance_profile\"}], \"vcpu\": {\"architecture\": \"amd64\", \"count\": 4, \"manufacturer\": \"intel\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String updateDedicatedHostPath = "/dedicated_hosts/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the DedicatedHostPatch model
    DedicatedHostPatch dedicatedHostPatchModel = new DedicatedHostPatch.Builder()
      .instancePlacementEnabled(false)
      .name("my-host")
      .build();
    Map<String, Object> dedicatedHostPatchModelAsPatch = dedicatedHostPatchModel.asPatch();

    // Construct an instance of the UpdateDedicatedHostOptions model
    UpdateDedicatedHostOptions updateDedicatedHostOptionsModel = new UpdateDedicatedHostOptions.Builder()
      .id("testString")
      .dedicatedHostPatch(dedicatedHostPatchModelAsPatch)
      .build();

    // Invoke updateDedicatedHost() with a valid options model and verify the result
    Response<DedicatedHost> response = vpcService.updateDedicatedHost(updateDedicatedHostOptionsModel).execute();
    assertNotNull(response);
    DedicatedHost responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateDedicatedHostPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateDedicatedHost operation with and without retries enabled
  @Test
  public void testUpdateDedicatedHostWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateDedicatedHostWOptions();

    vpcService.disableRetries();
    testUpdateDedicatedHostWOptions();
  }

  // Test the updateDedicatedHost operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateDedicatedHostNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateDedicatedHost(null).execute();
  }

  // Test the listPlacementGroups operation with a valid options model parameter
  @Test
  public void testListPlacementGroupsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"placement_groups\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::placement-group:r006-418fe842-a3e9-47b9-a938-1aa5bd632871\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/placement_groups/r006-418fe842-a3e9-47b9-a938-1aa5bd632871\", \"id\": \"r006-418fe842-a3e9-47b9-a938-1aa5bd632871\", \"lifecycle_state\": \"stable\", \"name\": \"my-placement-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"placement_group\", \"strategy\": \"host_spread\"}], \"total_count\": 132}";
    String listPlacementGroupsPath = "/placement_groups";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListPlacementGroupsOptions model
    ListPlacementGroupsOptions listPlacementGroupsOptionsModel = new ListPlacementGroupsOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listPlacementGroups() with a valid options model and verify the result
    Response<PlacementGroupCollection> response = vpcService.listPlacementGroups(listPlacementGroupsOptionsModel).execute();
    assertNotNull(response);
    PlacementGroupCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listPlacementGroupsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listPlacementGroups operation with and without retries enabled
  @Test
  public void testListPlacementGroupsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListPlacementGroupsWOptions();

    vpcService.disableRetries();
    testListPlacementGroupsWOptions();
  }

  // Test the listPlacementGroups operation using the PlacementGroupsPager.getNext() method
  @Test
  public void testListPlacementGroupsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"placement_groups\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::placement-group:r006-418fe842-a3e9-47b9-a938-1aa5bd632871\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/placement_groups/r006-418fe842-a3e9-47b9-a938-1aa5bd632871\",\"id\":\"r006-418fe842-a3e9-47b9-a938-1aa5bd632871\",\"lifecycle_state\":\"stable\",\"name\":\"my-placement-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"placement_group\",\"strategy\":\"host_spread\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"placement_groups\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::placement-group:r006-418fe842-a3e9-47b9-a938-1aa5bd632871\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/placement_groups/r006-418fe842-a3e9-47b9-a938-1aa5bd632871\",\"id\":\"r006-418fe842-a3e9-47b9-a938-1aa5bd632871\",\"lifecycle_state\":\"stable\",\"name\":\"my-placement-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"placement_group\",\"strategy\":\"host_spread\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListPlacementGroupsOptions listPlacementGroupsOptions = new ListPlacementGroupsOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    List<PlacementGroup> allResults = new ArrayList<>();
    PlacementGroupsPager pager = new PlacementGroupsPager(vpcService, listPlacementGroupsOptions);
    while (pager.hasNext()) {
      List<PlacementGroup> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listPlacementGroups operation using the PlacementGroupsPager.getAll() method
  @Test
  public void testListPlacementGroupsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"placement_groups\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::placement-group:r006-418fe842-a3e9-47b9-a938-1aa5bd632871\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/placement_groups/r006-418fe842-a3e9-47b9-a938-1aa5bd632871\",\"id\":\"r006-418fe842-a3e9-47b9-a938-1aa5bd632871\",\"lifecycle_state\":\"stable\",\"name\":\"my-placement-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"placement_group\",\"strategy\":\"host_spread\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"placement_groups\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::placement-group:r006-418fe842-a3e9-47b9-a938-1aa5bd632871\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/placement_groups/r006-418fe842-a3e9-47b9-a938-1aa5bd632871\",\"id\":\"r006-418fe842-a3e9-47b9-a938-1aa5bd632871\",\"lifecycle_state\":\"stable\",\"name\":\"my-placement-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"placement_group\",\"strategy\":\"host_spread\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListPlacementGroupsOptions listPlacementGroupsOptions = new ListPlacementGroupsOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    PlacementGroupsPager pager = new PlacementGroupsPager(vpcService, listPlacementGroupsOptions);
    List<PlacementGroup> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createPlacementGroup operation with a valid options model parameter
  @Test
  public void testCreatePlacementGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::placement-group:r006-418fe842-a3e9-47b9-a938-1aa5bd632871\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/placement_groups/r006-418fe842-a3e9-47b9-a938-1aa5bd632871\", \"id\": \"r006-418fe842-a3e9-47b9-a938-1aa5bd632871\", \"lifecycle_state\": \"stable\", \"name\": \"my-placement-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"placement_group\", \"strategy\": \"host_spread\"}";
    String createPlacementGroupPath = "/placement_groups";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the CreatePlacementGroupOptions model
    CreatePlacementGroupOptions createPlacementGroupOptionsModel = new CreatePlacementGroupOptions.Builder()
      .strategy("host_spread")
      .name("my-placement-group")
      .resourceGroup(resourceGroupIdentityModel)
      .build();

    // Invoke createPlacementGroup() with a valid options model and verify the result
    Response<PlacementGroup> response = vpcService.createPlacementGroup(createPlacementGroupOptionsModel).execute();
    assertNotNull(response);
    PlacementGroup responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createPlacementGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createPlacementGroup operation with and without retries enabled
  @Test
  public void testCreatePlacementGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreatePlacementGroupWOptions();

    vpcService.disableRetries();
    testCreatePlacementGroupWOptions();
  }

  // Test the createPlacementGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreatePlacementGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createPlacementGroup(null).execute();
  }

  // Test the deletePlacementGroup operation with a valid options model parameter
  @Test
  public void testDeletePlacementGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deletePlacementGroupPath = "/placement_groups/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeletePlacementGroupOptions model
    DeletePlacementGroupOptions deletePlacementGroupOptionsModel = new DeletePlacementGroupOptions.Builder()
      .id("testString")
      .build();

    // Invoke deletePlacementGroup() with a valid options model and verify the result
    Response<Void> response = vpcService.deletePlacementGroup(deletePlacementGroupOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deletePlacementGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deletePlacementGroup operation with and without retries enabled
  @Test
  public void testDeletePlacementGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeletePlacementGroupWOptions();

    vpcService.disableRetries();
    testDeletePlacementGroupWOptions();
  }

  // Test the deletePlacementGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeletePlacementGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deletePlacementGroup(null).execute();
  }

  // Test the getPlacementGroup operation with a valid options model parameter
  @Test
  public void testGetPlacementGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::placement-group:r006-418fe842-a3e9-47b9-a938-1aa5bd632871\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/placement_groups/r006-418fe842-a3e9-47b9-a938-1aa5bd632871\", \"id\": \"r006-418fe842-a3e9-47b9-a938-1aa5bd632871\", \"lifecycle_state\": \"stable\", \"name\": \"my-placement-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"placement_group\", \"strategy\": \"host_spread\"}";
    String getPlacementGroupPath = "/placement_groups/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetPlacementGroupOptions model
    GetPlacementGroupOptions getPlacementGroupOptionsModel = new GetPlacementGroupOptions.Builder()
      .id("testString")
      .build();

    // Invoke getPlacementGroup() with a valid options model and verify the result
    Response<PlacementGroup> response = vpcService.getPlacementGroup(getPlacementGroupOptionsModel).execute();
    assertNotNull(response);
    PlacementGroup responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getPlacementGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getPlacementGroup operation with and without retries enabled
  @Test
  public void testGetPlacementGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetPlacementGroupWOptions();

    vpcService.disableRetries();
    testGetPlacementGroupWOptions();
  }

  // Test the getPlacementGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetPlacementGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getPlacementGroup(null).execute();
  }

  // Test the updatePlacementGroup operation with a valid options model parameter
  @Test
  public void testUpdatePlacementGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::placement-group:r006-418fe842-a3e9-47b9-a938-1aa5bd632871\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/placement_groups/r006-418fe842-a3e9-47b9-a938-1aa5bd632871\", \"id\": \"r006-418fe842-a3e9-47b9-a938-1aa5bd632871\", \"lifecycle_state\": \"stable\", \"name\": \"my-placement-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"placement_group\", \"strategy\": \"host_spread\"}";
    String updatePlacementGroupPath = "/placement_groups/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the PlacementGroupPatch model
    PlacementGroupPatch placementGroupPatchModel = new PlacementGroupPatch.Builder()
      .name("my-placement-group-updated")
      .build();
    Map<String, Object> placementGroupPatchModelAsPatch = placementGroupPatchModel.asPatch();

    // Construct an instance of the UpdatePlacementGroupOptions model
    UpdatePlacementGroupOptions updatePlacementGroupOptionsModel = new UpdatePlacementGroupOptions.Builder()
      .id("testString")
      .placementGroupPatch(placementGroupPatchModelAsPatch)
      .build();

    // Invoke updatePlacementGroup() with a valid options model and verify the result
    Response<PlacementGroup> response = vpcService.updatePlacementGroup(updatePlacementGroupOptionsModel).execute();
    assertNotNull(response);
    PlacementGroup responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updatePlacementGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updatePlacementGroup operation with and without retries enabled
  @Test
  public void testUpdatePlacementGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdatePlacementGroupWOptions();

    vpcService.disableRetries();
    testUpdatePlacementGroupWOptions();
  }

  // Test the updatePlacementGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdatePlacementGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updatePlacementGroup(null).execute();
  }

  // Test the listBareMetalServerProfiles operation with a valid options model parameter
  @Test
  public void testListBareMetalServerProfilesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"profiles\": [{\"bandwidth\": {\"type\": \"fixed\", \"value\": 20000}, \"console_types\": {\"type\": \"enum\", \"values\": [\"serial\"]}, \"cpu_architecture\": {\"type\": \"fixed\", \"value\": \"amd64\"}, \"cpu_core_count\": {\"type\": \"fixed\", \"value\": 80}, \"cpu_socket_count\": {\"type\": \"fixed\", \"value\": 4}, \"disks\": [{\"quantity\": {\"type\": \"fixed\", \"value\": 4}, \"size\": {\"type\": \"fixed\", \"value\": 100}, \"supported_interface_types\": {\"default\": \"fcp\", \"type\": \"enum\", \"values\": [\"fcp\"]}}], \"family\": \"balanced\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/profiles/bx2-metal-192x768\", \"memory\": {\"type\": \"fixed\", \"value\": 16}, \"name\": \"bx2-metal-192x768\", \"network_attachment_count\": {\"max\": 128, \"min\": 1, \"type\": \"range\"}, \"network_interface_count\": {\"max\": 128, \"min\": 1, \"type\": \"range\"}, \"os_architecture\": {\"default\": \"amd64\", \"type\": \"enum\", \"values\": [\"amd64\"]}, \"reservation_terms\": {\"type\": \"enum\", \"values\": [\"one_year\"]}, \"resource_type\": \"bare_metal_server_profile\", \"supported_trusted_platform_module_modes\": {\"default\": \"disabled\", \"type\": \"enum\", \"values\": [\"disabled\"]}, \"virtual_network_interfaces_supported\": {\"type\": \"fixed\", \"value\": false}}], \"total_count\": 132}";
    String listBareMetalServerProfilesPath = "/bare_metal_server/profiles";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListBareMetalServerProfilesOptions model
    ListBareMetalServerProfilesOptions listBareMetalServerProfilesOptionsModel = new ListBareMetalServerProfilesOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listBareMetalServerProfiles() with a valid options model and verify the result
    Response<BareMetalServerProfileCollection> response = vpcService.listBareMetalServerProfiles(listBareMetalServerProfilesOptionsModel).execute();
    assertNotNull(response);
    BareMetalServerProfileCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listBareMetalServerProfilesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listBareMetalServerProfiles operation with and without retries enabled
  @Test
  public void testListBareMetalServerProfilesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListBareMetalServerProfilesWOptions();

    vpcService.disableRetries();
    testListBareMetalServerProfilesWOptions();
  }

  // Test the listBareMetalServerProfiles operation using the BareMetalServerProfilesPager.getNext() method
  @Test
  public void testListBareMetalServerProfilesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"profiles\":[{\"bandwidth\":{\"type\":\"fixed\",\"value\":20000},\"console_types\":{\"type\":\"enum\",\"values\":[\"serial\"]},\"cpu_architecture\":{\"type\":\"fixed\",\"value\":\"amd64\"},\"cpu_core_count\":{\"type\":\"fixed\",\"value\":80},\"cpu_socket_count\":{\"type\":\"fixed\",\"value\":4},\"disks\":[{\"quantity\":{\"type\":\"fixed\",\"value\":4},\"size\":{\"type\":\"fixed\",\"value\":100},\"supported_interface_types\":{\"default\":\"fcp\",\"type\":\"enum\",\"values\":[\"fcp\"]}}],\"family\":\"balanced\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/profiles/bx2-metal-192x768\",\"memory\":{\"type\":\"fixed\",\"value\":16},\"name\":\"bx2-metal-192x768\",\"network_attachment_count\":{\"max\":128,\"min\":1,\"type\":\"range\"},\"network_interface_count\":{\"max\":128,\"min\":1,\"type\":\"range\"},\"os_architecture\":{\"default\":\"amd64\",\"type\":\"enum\",\"values\":[\"amd64\"]},\"reservation_terms\":{\"type\":\"enum\",\"values\":[\"one_year\"]},\"resource_type\":\"bare_metal_server_profile\",\"supported_trusted_platform_module_modes\":{\"default\":\"disabled\",\"type\":\"enum\",\"values\":[\"disabled\"]},\"virtual_network_interfaces_supported\":{\"type\":\"fixed\",\"value\":false}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"profiles\":[{\"bandwidth\":{\"type\":\"fixed\",\"value\":20000},\"console_types\":{\"type\":\"enum\",\"values\":[\"serial\"]},\"cpu_architecture\":{\"type\":\"fixed\",\"value\":\"amd64\"},\"cpu_core_count\":{\"type\":\"fixed\",\"value\":80},\"cpu_socket_count\":{\"type\":\"fixed\",\"value\":4},\"disks\":[{\"quantity\":{\"type\":\"fixed\",\"value\":4},\"size\":{\"type\":\"fixed\",\"value\":100},\"supported_interface_types\":{\"default\":\"fcp\",\"type\":\"enum\",\"values\":[\"fcp\"]}}],\"family\":\"balanced\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/profiles/bx2-metal-192x768\",\"memory\":{\"type\":\"fixed\",\"value\":16},\"name\":\"bx2-metal-192x768\",\"network_attachment_count\":{\"max\":128,\"min\":1,\"type\":\"range\"},\"network_interface_count\":{\"max\":128,\"min\":1,\"type\":\"range\"},\"os_architecture\":{\"default\":\"amd64\",\"type\":\"enum\",\"values\":[\"amd64\"]},\"reservation_terms\":{\"type\":\"enum\",\"values\":[\"one_year\"]},\"resource_type\":\"bare_metal_server_profile\",\"supported_trusted_platform_module_modes\":{\"default\":\"disabled\",\"type\":\"enum\",\"values\":[\"disabled\"]},\"virtual_network_interfaces_supported\":{\"type\":\"fixed\",\"value\":false}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListBareMetalServerProfilesOptions listBareMetalServerProfilesOptions = new ListBareMetalServerProfilesOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    List<BareMetalServerProfile> allResults = new ArrayList<>();
    BareMetalServerProfilesPager pager = new BareMetalServerProfilesPager(vpcService, listBareMetalServerProfilesOptions);
    while (pager.hasNext()) {
      List<BareMetalServerProfile> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listBareMetalServerProfiles operation using the BareMetalServerProfilesPager.getAll() method
  @Test
  public void testListBareMetalServerProfilesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"profiles\":[{\"bandwidth\":{\"type\":\"fixed\",\"value\":20000},\"console_types\":{\"type\":\"enum\",\"values\":[\"serial\"]},\"cpu_architecture\":{\"type\":\"fixed\",\"value\":\"amd64\"},\"cpu_core_count\":{\"type\":\"fixed\",\"value\":80},\"cpu_socket_count\":{\"type\":\"fixed\",\"value\":4},\"disks\":[{\"quantity\":{\"type\":\"fixed\",\"value\":4},\"size\":{\"type\":\"fixed\",\"value\":100},\"supported_interface_types\":{\"default\":\"fcp\",\"type\":\"enum\",\"values\":[\"fcp\"]}}],\"family\":\"balanced\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/profiles/bx2-metal-192x768\",\"memory\":{\"type\":\"fixed\",\"value\":16},\"name\":\"bx2-metal-192x768\",\"network_attachment_count\":{\"max\":128,\"min\":1,\"type\":\"range\"},\"network_interface_count\":{\"max\":128,\"min\":1,\"type\":\"range\"},\"os_architecture\":{\"default\":\"amd64\",\"type\":\"enum\",\"values\":[\"amd64\"]},\"reservation_terms\":{\"type\":\"enum\",\"values\":[\"one_year\"]},\"resource_type\":\"bare_metal_server_profile\",\"supported_trusted_platform_module_modes\":{\"default\":\"disabled\",\"type\":\"enum\",\"values\":[\"disabled\"]},\"virtual_network_interfaces_supported\":{\"type\":\"fixed\",\"value\":false}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"profiles\":[{\"bandwidth\":{\"type\":\"fixed\",\"value\":20000},\"console_types\":{\"type\":\"enum\",\"values\":[\"serial\"]},\"cpu_architecture\":{\"type\":\"fixed\",\"value\":\"amd64\"},\"cpu_core_count\":{\"type\":\"fixed\",\"value\":80},\"cpu_socket_count\":{\"type\":\"fixed\",\"value\":4},\"disks\":[{\"quantity\":{\"type\":\"fixed\",\"value\":4},\"size\":{\"type\":\"fixed\",\"value\":100},\"supported_interface_types\":{\"default\":\"fcp\",\"type\":\"enum\",\"values\":[\"fcp\"]}}],\"family\":\"balanced\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/profiles/bx2-metal-192x768\",\"memory\":{\"type\":\"fixed\",\"value\":16},\"name\":\"bx2-metal-192x768\",\"network_attachment_count\":{\"max\":128,\"min\":1,\"type\":\"range\"},\"network_interface_count\":{\"max\":128,\"min\":1,\"type\":\"range\"},\"os_architecture\":{\"default\":\"amd64\",\"type\":\"enum\",\"values\":[\"amd64\"]},\"reservation_terms\":{\"type\":\"enum\",\"values\":[\"one_year\"]},\"resource_type\":\"bare_metal_server_profile\",\"supported_trusted_platform_module_modes\":{\"default\":\"disabled\",\"type\":\"enum\",\"values\":[\"disabled\"]},\"virtual_network_interfaces_supported\":{\"type\":\"fixed\",\"value\":false}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListBareMetalServerProfilesOptions listBareMetalServerProfilesOptions = new ListBareMetalServerProfilesOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    BareMetalServerProfilesPager pager = new BareMetalServerProfilesPager(vpcService, listBareMetalServerProfilesOptions);
    List<BareMetalServerProfile> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the getBareMetalServerProfile operation with a valid options model parameter
  @Test
  public void testGetBareMetalServerProfileWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"bandwidth\": {\"type\": \"fixed\", \"value\": 20000}, \"console_types\": {\"type\": \"enum\", \"values\": [\"serial\"]}, \"cpu_architecture\": {\"type\": \"fixed\", \"value\": \"amd64\"}, \"cpu_core_count\": {\"type\": \"fixed\", \"value\": 80}, \"cpu_socket_count\": {\"type\": \"fixed\", \"value\": 4}, \"disks\": [{\"quantity\": {\"type\": \"fixed\", \"value\": 4}, \"size\": {\"type\": \"fixed\", \"value\": 100}, \"supported_interface_types\": {\"default\": \"fcp\", \"type\": \"enum\", \"values\": [\"fcp\"]}}], \"family\": \"balanced\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/profiles/bx2-metal-192x768\", \"memory\": {\"type\": \"fixed\", \"value\": 16}, \"name\": \"bx2-metal-192x768\", \"network_attachment_count\": {\"max\": 128, \"min\": 1, \"type\": \"range\"}, \"network_interface_count\": {\"max\": 128, \"min\": 1, \"type\": \"range\"}, \"os_architecture\": {\"default\": \"amd64\", \"type\": \"enum\", \"values\": [\"amd64\"]}, \"reservation_terms\": {\"type\": \"enum\", \"values\": [\"one_year\"]}, \"resource_type\": \"bare_metal_server_profile\", \"supported_trusted_platform_module_modes\": {\"default\": \"disabled\", \"type\": \"enum\", \"values\": [\"disabled\"]}, \"virtual_network_interfaces_supported\": {\"type\": \"fixed\", \"value\": false}}";
    String getBareMetalServerProfilePath = "/bare_metal_server/profiles/bx2-metal-192x768";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetBareMetalServerProfileOptions model
    GetBareMetalServerProfileOptions getBareMetalServerProfileOptionsModel = new GetBareMetalServerProfileOptions.Builder()
      .name("bx2-metal-192x768")
      .build();

    // Invoke getBareMetalServerProfile() with a valid options model and verify the result
    Response<BareMetalServerProfile> response = vpcService.getBareMetalServerProfile(getBareMetalServerProfileOptionsModel).execute();
    assertNotNull(response);
    BareMetalServerProfile responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getBareMetalServerProfilePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getBareMetalServerProfile operation with and without retries enabled
  @Test
  public void testGetBareMetalServerProfileWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetBareMetalServerProfileWOptions();

    vpcService.disableRetries();
    testGetBareMetalServerProfileWOptions();
  }

  // Test the getBareMetalServerProfile operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetBareMetalServerProfileNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getBareMetalServerProfile(null).execute();
  }

  // Test the listBareMetalServers operation with a valid options model parameter
  @Test
  public void testListBareMetalServersWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"bare_metal_servers\": [{\"bandwidth\": 20000, \"boot_target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/disks/0717-3744f199-6ccc-4698-8772-bb3937348c96\", \"id\": \"0717-3744f199-6ccc-4698-8772-bb3937348c96\", \"name\": \"my-bare-metal-server-disk\", \"resource_type\": \"bare_metal_server_disk\"}, \"cpu\": {\"architecture\": \"amd64\", \"core_count\": 80, \"socket_count\": 4, \"threads_per_core\": 2}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::bare-metal-server:0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304\", \"disks\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/disks/0717-3744f199-6ccc-4698-8772-bb3937348c96\", \"id\": \"0717-3744f199-6ccc-4698-8772-bb3937348c96\", \"interface_type\": \"fcp\", \"name\": \"my-bare-metal-server-disk\", \"resource_type\": \"bare_metal_server_disk\", \"size\": 100}], \"enable_secure_boot\": false, \"firmware\": {\"update\": \"none\"}, \"health_reasons\": [{\"code\": \"reservation_expired\", \"message\": \"The reservation cannot be used because it has expired.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-server-health-status-reasons\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304\", \"id\": \"0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"memory\": 1536, \"name\": \"my-bare-metal-server\", \"network_attachments\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_attachments/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"id\": \"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"name\": \"my-bare-metal-server-network-attachment\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"bare_metal_server_network_attachment\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"virtual_network_interface\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"name\": \"my-virtual-network-interface\", \"resource_type\": \"virtual_network_interface\"}}], \"network_interfaces\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"id\": \"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"name\": \"my-bare-metal-server-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}}], \"primary_network_attachment\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_attachments/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"id\": \"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"name\": \"my-bare-metal-server-network-attachment\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"bare_metal_server_network_attachment\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"virtual_network_interface\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"name\": \"my-virtual-network-interface\", \"resource_type\": \"virtual_network_interface\"}}, \"primary_network_interface\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"id\": \"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"name\": \"my-bare-metal-server-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}}, \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/profiles/bx2-metal-192x768\", \"name\": \"bx2-metal-192x768\", \"resource_type\": \"bare_metal_server_profile\"}, \"reservation\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"id\": \"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"name\": \"my-reservation\", \"resource_type\": \"reservation\"}, \"reservation_affinity\": {\"policy\": \"automatic\", \"pool\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"id\": \"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"name\": \"my-reservation\", \"resource_type\": \"reservation\"}]}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"bare_metal_server\", \"status\": \"deleting\", \"status_reasons\": [{\"code\": \"cannot_start_capacity\", \"message\": \"The bare metal server cannot start as there is no more capacity in this\nzone for a bare metal server with the requested profile.\", \"more_info\": \"https://console.bluemix.net/docs/iaas/bare_metal_server.html\"}], \"trusted_platform_module\": {\"enabled\": true, \"mode\": \"disabled\", \"supported_modes\": [\"disabled\"]}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listBareMetalServersPath = "/bare_metal_servers";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListBareMetalServersOptions model
    ListBareMetalServersOptions listBareMetalServersOptionsModel = new ListBareMetalServersOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("my-name")
      .reservationId("testString")
      .reservationCrn("crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63")
      .reservationName("my-reservation")
      .vpcId("testString")
      .vpcCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .vpcName("my-vpc")
      .build();

    // Invoke listBareMetalServers() with a valid options model and verify the result
    Response<BareMetalServerCollection> response = vpcService.listBareMetalServers(listBareMetalServersOptionsModel).execute();
    assertNotNull(response);
    BareMetalServerCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listBareMetalServersPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
    assertEquals(query.get("name"), "my-name");
    assertEquals(query.get("reservation.id"), "testString");
    assertEquals(query.get("reservation.crn"), "crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63");
    assertEquals(query.get("reservation.name"), "my-reservation");
    assertEquals(query.get("vpc.id"), "testString");
    assertEquals(query.get("vpc.crn"), "crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b");
    assertEquals(query.get("vpc.name"), "my-vpc");
  }

  // Test the listBareMetalServers operation with and without retries enabled
  @Test
  public void testListBareMetalServersWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListBareMetalServersWOptions();

    vpcService.disableRetries();
    testListBareMetalServersWOptions();
  }

  // Test the listBareMetalServers operation using the BareMetalServersPager.getNext() method
  @Test
  public void testListBareMetalServersWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"bare_metal_servers\":[{\"bandwidth\":20000,\"boot_target\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/disks/0717-3744f199-6ccc-4698-8772-bb3937348c96\",\"id\":\"0717-3744f199-6ccc-4698-8772-bb3937348c96\",\"name\":\"my-bare-metal-server-disk\",\"resource_type\":\"bare_metal_server_disk\"},\"cpu\":{\"architecture\":\"amd64\",\"core_count\":80,\"socket_count\":4,\"threads_per_core\":2},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::bare-metal-server:0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304\",\"disks\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/disks/0717-3744f199-6ccc-4698-8772-bb3937348c96\",\"id\":\"0717-3744f199-6ccc-4698-8772-bb3937348c96\",\"interface_type\":\"fcp\",\"name\":\"my-bare-metal-server-disk\",\"resource_type\":\"bare_metal_server_disk\",\"size\":100}],\"enable_secure_boot\":false,\"firmware\":{\"update\":\"none\"},\"health_reasons\":[{\"code\":\"reservation_expired\",\"message\":\"The reservation cannot be used because it has expired.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-server-health-status-reasons\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304\",\"id\":\"0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"memory\":1536,\"name\":\"my-bare-metal-server\",\"network_attachments\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_attachments/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"id\":\"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"name\":\"my-bare-metal-server-network-attachment\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"bare_metal_server_network_attachment\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"virtual_network_interface\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"id\":\"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"name\":\"my-virtual-network-interface\",\"resource_type\":\"virtual_network_interface\"}}],\"network_interfaces\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"id\":\"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"name\":\"my-bare-metal-server-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}}],\"primary_network_attachment\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_attachments/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"id\":\"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"name\":\"my-bare-metal-server-network-attachment\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"bare_metal_server_network_attachment\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"virtual_network_interface\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"id\":\"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"name\":\"my-virtual-network-interface\",\"resource_type\":\"virtual_network_interface\"}},\"primary_network_interface\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"id\":\"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"name\":\"my-bare-metal-server-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}},\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/profiles/bx2-metal-192x768\",\"name\":\"bx2-metal-192x768\",\"resource_type\":\"bare_metal_server_profile\"},\"reservation\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"id\":\"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"name\":\"my-reservation\",\"resource_type\":\"reservation\"},\"reservation_affinity\":{\"policy\":\"automatic\",\"pool\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"id\":\"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"name\":\"my-reservation\",\"resource_type\":\"reservation\"}]},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"bare_metal_server\",\"status\":\"deleting\",\"status_reasons\":[{\"code\":\"cannot_start_capacity\",\"message\":\"The bare metal server cannot start as there is no more capacity in this\\nzone for a bare metal server with the requested profile.\",\"more_info\":\"https://console.bluemix.net/docs/iaas/bare_metal_server.html\"}],\"trusted_platform_module\":{\"enabled\":true,\"mode\":\"disabled\",\"supported_modes\":[\"disabled\"]},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"bare_metal_servers\":[{\"bandwidth\":20000,\"boot_target\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/disks/0717-3744f199-6ccc-4698-8772-bb3937348c96\",\"id\":\"0717-3744f199-6ccc-4698-8772-bb3937348c96\",\"name\":\"my-bare-metal-server-disk\",\"resource_type\":\"bare_metal_server_disk\"},\"cpu\":{\"architecture\":\"amd64\",\"core_count\":80,\"socket_count\":4,\"threads_per_core\":2},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::bare-metal-server:0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304\",\"disks\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/disks/0717-3744f199-6ccc-4698-8772-bb3937348c96\",\"id\":\"0717-3744f199-6ccc-4698-8772-bb3937348c96\",\"interface_type\":\"fcp\",\"name\":\"my-bare-metal-server-disk\",\"resource_type\":\"bare_metal_server_disk\",\"size\":100}],\"enable_secure_boot\":false,\"firmware\":{\"update\":\"none\"},\"health_reasons\":[{\"code\":\"reservation_expired\",\"message\":\"The reservation cannot be used because it has expired.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-server-health-status-reasons\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304\",\"id\":\"0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"memory\":1536,\"name\":\"my-bare-metal-server\",\"network_attachments\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_attachments/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"id\":\"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"name\":\"my-bare-metal-server-network-attachment\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"bare_metal_server_network_attachment\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"virtual_network_interface\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"id\":\"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"name\":\"my-virtual-network-interface\",\"resource_type\":\"virtual_network_interface\"}}],\"network_interfaces\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"id\":\"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"name\":\"my-bare-metal-server-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}}],\"primary_network_attachment\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_attachments/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"id\":\"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"name\":\"my-bare-metal-server-network-attachment\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"bare_metal_server_network_attachment\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"virtual_network_interface\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"id\":\"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"name\":\"my-virtual-network-interface\",\"resource_type\":\"virtual_network_interface\"}},\"primary_network_interface\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"id\":\"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"name\":\"my-bare-metal-server-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}},\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/profiles/bx2-metal-192x768\",\"name\":\"bx2-metal-192x768\",\"resource_type\":\"bare_metal_server_profile\"},\"reservation\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"id\":\"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"name\":\"my-reservation\",\"resource_type\":\"reservation\"},\"reservation_affinity\":{\"policy\":\"automatic\",\"pool\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"id\":\"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"name\":\"my-reservation\",\"resource_type\":\"reservation\"}]},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"bare_metal_server\",\"status\":\"deleting\",\"status_reasons\":[{\"code\":\"cannot_start_capacity\",\"message\":\"The bare metal server cannot start as there is no more capacity in this\\nzone for a bare metal server with the requested profile.\",\"more_info\":\"https://console.bluemix.net/docs/iaas/bare_metal_server.html\"}],\"trusted_platform_module\":{\"enabled\":true,\"mode\":\"disabled\",\"supported_modes\":[\"disabled\"]},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListBareMetalServersOptions listBareMetalServersOptions = new ListBareMetalServersOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("my-name")
      .reservationId("testString")
      .reservationCrn("crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63")
      .reservationName("my-reservation")
      .vpcId("testString")
      .vpcCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .vpcName("my-vpc")
      .build();

    List<BareMetalServer> allResults = new ArrayList<>();
    BareMetalServersPager pager = new BareMetalServersPager(vpcService, listBareMetalServersOptions);
    while (pager.hasNext()) {
      List<BareMetalServer> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listBareMetalServers operation using the BareMetalServersPager.getAll() method
  @Test
  public void testListBareMetalServersWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"bare_metal_servers\":[{\"bandwidth\":20000,\"boot_target\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/disks/0717-3744f199-6ccc-4698-8772-bb3937348c96\",\"id\":\"0717-3744f199-6ccc-4698-8772-bb3937348c96\",\"name\":\"my-bare-metal-server-disk\",\"resource_type\":\"bare_metal_server_disk\"},\"cpu\":{\"architecture\":\"amd64\",\"core_count\":80,\"socket_count\":4,\"threads_per_core\":2},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::bare-metal-server:0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304\",\"disks\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/disks/0717-3744f199-6ccc-4698-8772-bb3937348c96\",\"id\":\"0717-3744f199-6ccc-4698-8772-bb3937348c96\",\"interface_type\":\"fcp\",\"name\":\"my-bare-metal-server-disk\",\"resource_type\":\"bare_metal_server_disk\",\"size\":100}],\"enable_secure_boot\":false,\"firmware\":{\"update\":\"none\"},\"health_reasons\":[{\"code\":\"reservation_expired\",\"message\":\"The reservation cannot be used because it has expired.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-server-health-status-reasons\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304\",\"id\":\"0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"memory\":1536,\"name\":\"my-bare-metal-server\",\"network_attachments\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_attachments/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"id\":\"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"name\":\"my-bare-metal-server-network-attachment\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"bare_metal_server_network_attachment\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"virtual_network_interface\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"id\":\"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"name\":\"my-virtual-network-interface\",\"resource_type\":\"virtual_network_interface\"}}],\"network_interfaces\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"id\":\"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"name\":\"my-bare-metal-server-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}}],\"primary_network_attachment\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_attachments/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"id\":\"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"name\":\"my-bare-metal-server-network-attachment\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"bare_metal_server_network_attachment\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"virtual_network_interface\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"id\":\"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"name\":\"my-virtual-network-interface\",\"resource_type\":\"virtual_network_interface\"}},\"primary_network_interface\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"id\":\"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"name\":\"my-bare-metal-server-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}},\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/profiles/bx2-metal-192x768\",\"name\":\"bx2-metal-192x768\",\"resource_type\":\"bare_metal_server_profile\"},\"reservation\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"id\":\"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"name\":\"my-reservation\",\"resource_type\":\"reservation\"},\"reservation_affinity\":{\"policy\":\"automatic\",\"pool\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"id\":\"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"name\":\"my-reservation\",\"resource_type\":\"reservation\"}]},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"bare_metal_server\",\"status\":\"deleting\",\"status_reasons\":[{\"code\":\"cannot_start_capacity\",\"message\":\"The bare metal server cannot start as there is no more capacity in this\\nzone for a bare metal server with the requested profile.\",\"more_info\":\"https://console.bluemix.net/docs/iaas/bare_metal_server.html\"}],\"trusted_platform_module\":{\"enabled\":true,\"mode\":\"disabled\",\"supported_modes\":[\"disabled\"]},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"bare_metal_servers\":[{\"bandwidth\":20000,\"boot_target\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/disks/0717-3744f199-6ccc-4698-8772-bb3937348c96\",\"id\":\"0717-3744f199-6ccc-4698-8772-bb3937348c96\",\"name\":\"my-bare-metal-server-disk\",\"resource_type\":\"bare_metal_server_disk\"},\"cpu\":{\"architecture\":\"amd64\",\"core_count\":80,\"socket_count\":4,\"threads_per_core\":2},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::bare-metal-server:0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304\",\"disks\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/disks/0717-3744f199-6ccc-4698-8772-bb3937348c96\",\"id\":\"0717-3744f199-6ccc-4698-8772-bb3937348c96\",\"interface_type\":\"fcp\",\"name\":\"my-bare-metal-server-disk\",\"resource_type\":\"bare_metal_server_disk\",\"size\":100}],\"enable_secure_boot\":false,\"firmware\":{\"update\":\"none\"},\"health_reasons\":[{\"code\":\"reservation_expired\",\"message\":\"The reservation cannot be used because it has expired.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-server-health-status-reasons\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304\",\"id\":\"0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"memory\":1536,\"name\":\"my-bare-metal-server\",\"network_attachments\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_attachments/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"id\":\"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"name\":\"my-bare-metal-server-network-attachment\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"bare_metal_server_network_attachment\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"virtual_network_interface\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"id\":\"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"name\":\"my-virtual-network-interface\",\"resource_type\":\"virtual_network_interface\"}}],\"network_interfaces\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"id\":\"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"name\":\"my-bare-metal-server-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}}],\"primary_network_attachment\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_attachments/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"id\":\"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"name\":\"my-bare-metal-server-network-attachment\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"bare_metal_server_network_attachment\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"virtual_network_interface\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"id\":\"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"name\":\"my-virtual-network-interface\",\"resource_type\":\"virtual_network_interface\"}},\"primary_network_interface\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"id\":\"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"name\":\"my-bare-metal-server-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}},\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/profiles/bx2-metal-192x768\",\"name\":\"bx2-metal-192x768\",\"resource_type\":\"bare_metal_server_profile\"},\"reservation\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"id\":\"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"name\":\"my-reservation\",\"resource_type\":\"reservation\"},\"reservation_affinity\":{\"policy\":\"automatic\",\"pool\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"id\":\"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\",\"name\":\"my-reservation\",\"resource_type\":\"reservation\"}]},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"bare_metal_server\",\"status\":\"deleting\",\"status_reasons\":[{\"code\":\"cannot_start_capacity\",\"message\":\"The bare metal server cannot start as there is no more capacity in this\\nzone for a bare metal server with the requested profile.\",\"more_info\":\"https://console.bluemix.net/docs/iaas/bare_metal_server.html\"}],\"trusted_platform_module\":{\"enabled\":true,\"mode\":\"disabled\",\"supported_modes\":[\"disabled\"]},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListBareMetalServersOptions listBareMetalServersOptions = new ListBareMetalServersOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("my-name")
      .reservationId("testString")
      .reservationCrn("crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63")
      .reservationName("my-reservation")
      .vpcId("testString")
      .vpcCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .vpcName("my-vpc")
      .build();

    BareMetalServersPager pager = new BareMetalServersPager(vpcService, listBareMetalServersOptions);
    List<BareMetalServer> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createBareMetalServer operation with a valid options model parameter
  @Test
  public void testCreateBareMetalServerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"bandwidth\": 20000, \"boot_target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/disks/0717-3744f199-6ccc-4698-8772-bb3937348c96\", \"id\": \"0717-3744f199-6ccc-4698-8772-bb3937348c96\", \"name\": \"my-bare-metal-server-disk\", \"resource_type\": \"bare_metal_server_disk\"}, \"cpu\": {\"architecture\": \"amd64\", \"core_count\": 80, \"socket_count\": 4, \"threads_per_core\": 2}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::bare-metal-server:0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304\", \"disks\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/disks/0717-3744f199-6ccc-4698-8772-bb3937348c96\", \"id\": \"0717-3744f199-6ccc-4698-8772-bb3937348c96\", \"interface_type\": \"fcp\", \"name\": \"my-bare-metal-server-disk\", \"resource_type\": \"bare_metal_server_disk\", \"size\": 100}], \"enable_secure_boot\": false, \"firmware\": {\"update\": \"none\"}, \"health_reasons\": [{\"code\": \"reservation_expired\", \"message\": \"The reservation cannot be used because it has expired.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-server-health-status-reasons\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304\", \"id\": \"0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"memory\": 1536, \"name\": \"my-bare-metal-server\", \"network_attachments\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_attachments/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"id\": \"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"name\": \"my-bare-metal-server-network-attachment\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"bare_metal_server_network_attachment\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"virtual_network_interface\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"name\": \"my-virtual-network-interface\", \"resource_type\": \"virtual_network_interface\"}}], \"network_interfaces\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"id\": \"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"name\": \"my-bare-metal-server-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}}], \"primary_network_attachment\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_attachments/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"id\": \"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"name\": \"my-bare-metal-server-network-attachment\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"bare_metal_server_network_attachment\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"virtual_network_interface\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"name\": \"my-virtual-network-interface\", \"resource_type\": \"virtual_network_interface\"}}, \"primary_network_interface\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"id\": \"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"name\": \"my-bare-metal-server-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}}, \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/profiles/bx2-metal-192x768\", \"name\": \"bx2-metal-192x768\", \"resource_type\": \"bare_metal_server_profile\"}, \"reservation\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"id\": \"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"name\": \"my-reservation\", \"resource_type\": \"reservation\"}, \"reservation_affinity\": {\"policy\": \"automatic\", \"pool\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"id\": \"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"name\": \"my-reservation\", \"resource_type\": \"reservation\"}]}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"bare_metal_server\", \"status\": \"deleting\", \"status_reasons\": [{\"code\": \"cannot_start_capacity\", \"message\": \"The bare metal server cannot start as there is no more capacity in this\nzone for a bare metal server with the requested profile.\", \"more_info\": \"https://console.bluemix.net/docs/iaas/bare_metal_server.html\"}], \"trusted_platform_module\": {\"enabled\": true, \"mode\": \"disabled\", \"supported_modes\": [\"disabled\"]}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String createBareMetalServerPath = "/bare_metal_servers";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ImageIdentityById model
    ImageIdentityById imageIdentityModel = new ImageIdentityById.Builder()
      .id("r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8")
      .build();

    // Construct an instance of the KeyIdentityById model
    KeyIdentityById keyIdentityModel = new KeyIdentityById.Builder()
      .id("r006-82679077-ac3b-4c10-be16-63e9c21f0f45")
      .build();

    // Construct an instance of the BareMetalServerInitializationPrototype model
    BareMetalServerInitializationPrototype bareMetalServerInitializationPrototypeModel = new BareMetalServerInitializationPrototype.Builder()
      .image(imageIdentityModel)
      .keys(java.util.Arrays.asList(keyIdentityModel))
      .userData("testString")
      .build();

    // Construct an instance of the BareMetalServerProfileIdentityByName model
    BareMetalServerProfileIdentityByName bareMetalServerProfileIdentityModel = new BareMetalServerProfileIdentityByName.Builder()
      .name("bx2-metal-192x768")
      .build();

    // Construct an instance of the ReservationIdentityById model
    ReservationIdentityById reservationIdentityModel = new ReservationIdentityById.Builder()
      .id("0717-ba49df72-37b8-43ac-98da-f8e029de0e63")
      .build();

    // Construct an instance of the BareMetalServerReservationAffinityPrototype model
    BareMetalServerReservationAffinityPrototype bareMetalServerReservationAffinityPrototypeModel = new BareMetalServerReservationAffinityPrototype.Builder()
      .policy("automatic")
      .pool(java.util.Arrays.asList(reservationIdentityModel))
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the BareMetalServerTrustedPlatformModulePrototype model
    BareMetalServerTrustedPlatformModulePrototype bareMetalServerTrustedPlatformModulePrototypeModel = new BareMetalServerTrustedPlatformModulePrototype.Builder()
      .mode("disabled")
      .build();

    // Construct an instance of the VPCIdentityById model
    VPCIdentityById vpcIdentityModel = new VPCIdentityById.Builder()
      .id("r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .build();

    // Construct an instance of the ZoneIdentityByName model
    ZoneIdentityByName zoneIdentityModel = new ZoneIdentityByName.Builder()
      .name("us-south-1")
      .build();

    // Construct an instance of the VirtualNetworkInterfaceIPPrototypeReservedIPPrototypeVirtualNetworkInterfaceIPsContext model
    VirtualNetworkInterfaceIPPrototypeReservedIPPrototypeVirtualNetworkInterfaceIPsContext virtualNetworkInterfaceIpPrototypeModel = new VirtualNetworkInterfaceIPPrototypeReservedIPPrototypeVirtualNetworkInterfaceIPsContext.Builder()
      .address("10.0.0.5")
      .autoDelete(false)
      .name("my-reserved-ip")
      .build();

    // Construct an instance of the VirtualNetworkInterfacePrimaryIPPrototypeReservedIPPrototypeVirtualNetworkInterfacePrimaryIPContext model
    VirtualNetworkInterfacePrimaryIPPrototypeReservedIPPrototypeVirtualNetworkInterfacePrimaryIPContext virtualNetworkInterfacePrimaryIpPrototypeModel = new VirtualNetworkInterfacePrimaryIPPrototypeReservedIPPrototypeVirtualNetworkInterfacePrimaryIPContext.Builder()
      .address("10.0.0.5")
      .autoDelete(false)
      .name("my-reserved-ip")
      .build();

    // Construct an instance of the SecurityGroupIdentityById model
    SecurityGroupIdentityById securityGroupIdentityModel = new SecurityGroupIdentityById.Builder()
      .id("r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271")
      .build();

    // Construct an instance of the SubnetIdentityById model
    SubnetIdentityById subnetIdentityModel = new SubnetIdentityById.Builder()
      .id("0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
      .build();

    // Construct an instance of the BareMetalServerNetworkAttachmentPrototypeVirtualNetworkInterfaceVirtualNetworkInterfacePrototypeBareMetalServerNetworkAttachmentContext model
    BareMetalServerNetworkAttachmentPrototypeVirtualNetworkInterfaceVirtualNetworkInterfacePrototypeBareMetalServerNetworkAttachmentContext bareMetalServerNetworkAttachmentPrototypeVirtualNetworkInterfaceModel = new BareMetalServerNetworkAttachmentPrototypeVirtualNetworkInterfaceVirtualNetworkInterfacePrototypeBareMetalServerNetworkAttachmentContext.Builder()
      .allowIpSpoofing(true)
      .autoDelete(false)
      .enableInfrastructureNat(true)
      .ips(java.util.Arrays.asList(virtualNetworkInterfaceIpPrototypeModel))
      .name("my-virtual-network-interface")
      .primaryIp(virtualNetworkInterfacePrimaryIpPrototypeModel)
      .protocolStateFilteringMode("auto")
      .resourceGroup(resourceGroupIdentityModel)
      .securityGroups(java.util.Arrays.asList(securityGroupIdentityModel))
      .subnet(subnetIdentityModel)
      .build();

    // Construct an instance of the BareMetalServerNetworkAttachmentPrototypeBareMetalServerNetworkAttachmentByPCIPrototype model
    BareMetalServerNetworkAttachmentPrototypeBareMetalServerNetworkAttachmentByPCIPrototype bareMetalServerNetworkAttachmentPrototypeModel = new BareMetalServerNetworkAttachmentPrototypeBareMetalServerNetworkAttachmentByPCIPrototype.Builder()
      .name("my-bare-metal-server-network-attachment")
      .virtualNetworkInterface(bareMetalServerNetworkAttachmentPrototypeVirtualNetworkInterfaceModel)
      .allowedVlans(java.util.Arrays.asList(Long.valueOf("4")))
      .interfaceType("pci")
      .build();

    // Construct an instance of the BareMetalServerPrimaryNetworkAttachmentPrototypeBareMetalServerPrimaryNetworkAttachmentByPCIPrototype model
    BareMetalServerPrimaryNetworkAttachmentPrototypeBareMetalServerPrimaryNetworkAttachmentByPCIPrototype bareMetalServerPrimaryNetworkAttachmentPrototypeModel = new BareMetalServerPrimaryNetworkAttachmentPrototypeBareMetalServerPrimaryNetworkAttachmentByPCIPrototype.Builder()
      .name("my-bare-metal-server-network-attachment")
      .virtualNetworkInterface(bareMetalServerNetworkAttachmentPrototypeVirtualNetworkInterfaceModel)
      .allowedVlans(java.util.Arrays.asList(Long.valueOf("4")))
      .interfaceType("pci")
      .build();

    // Construct an instance of the BareMetalServerPrototypeBareMetalServerByNetworkAttachment model
    BareMetalServerPrototypeBareMetalServerByNetworkAttachment bareMetalServerPrototypeModel = new BareMetalServerPrototypeBareMetalServerByNetworkAttachment.Builder()
      .bandwidth(Long.valueOf("20000"))
      .enableSecureBoot(false)
      .initialization(bareMetalServerInitializationPrototypeModel)
      .name("my-bare-metal-server")
      .profile(bareMetalServerProfileIdentityModel)
      .reservationAffinity(bareMetalServerReservationAffinityPrototypeModel)
      .resourceGroup(resourceGroupIdentityModel)
      .trustedPlatformModule(bareMetalServerTrustedPlatformModulePrototypeModel)
      .vpc(vpcIdentityModel)
      .zone(zoneIdentityModel)
      .networkAttachments(java.util.Arrays.asList(bareMetalServerNetworkAttachmentPrototypeModel))
      .primaryNetworkAttachment(bareMetalServerPrimaryNetworkAttachmentPrototypeModel)
      .build();

    // Construct an instance of the CreateBareMetalServerOptions model
    CreateBareMetalServerOptions createBareMetalServerOptionsModel = new CreateBareMetalServerOptions.Builder()
      .bareMetalServerPrototype(bareMetalServerPrototypeModel)
      .build();

    // Invoke createBareMetalServer() with a valid options model and verify the result
    Response<BareMetalServer> response = vpcService.createBareMetalServer(createBareMetalServerOptionsModel).execute();
    assertNotNull(response);
    BareMetalServer responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createBareMetalServerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createBareMetalServer operation with and without retries enabled
  @Test
  public void testCreateBareMetalServerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateBareMetalServerWOptions();

    vpcService.disableRetries();
    testCreateBareMetalServerWOptions();
  }

  // Test the createBareMetalServer operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateBareMetalServerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createBareMetalServer(null).execute();
  }

  // Test the createBareMetalServerConsoleAccessToken operation with a valid options model parameter
  @Test
  public void testCreateBareMetalServerConsoleAccessTokenWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiYWEyNDMyYjFmYTRkNGFjZTg5MWU5YjgwZmMxMDRlMzQiLCJzZWNyZXQiOiJRVzRnWlhoaGJYQnNaU0J6WldOeVpYUUsiLCJleHAiOjE3MjYwNzU1OTR9.UFDVzzGJ54Go9Z4jgyPSLG49zNx-AjHTQrJA6ee8KLI\", \"console_type\": \"serial\", \"created_at\": \"2020-07-27T21:50:14.000Z\", \"expires_at\": \"2020-07-27T21:51:14.000Z\", \"force\": false, \"href\": \"wss://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/console?access_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiYWEyNDMyYjFmYTRkNGFjZTg5MWU5YjgwZmMxMDRlMzQiLCJzZWNyZXQiOiJRVzRnWlhoaGJYQnNaU0J6WldOeVpYUUsiLCJleHAiOjE3MjYwNzU1OTR9.UFDVzzGJ54Go9Z4jgyPSLG49zNx-AjHTQrJA6ee8KLI\"}";
    String createBareMetalServerConsoleAccessTokenPath = "/bare_metal_servers/testString/console_access_token";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the CreateBareMetalServerConsoleAccessTokenOptions model
    CreateBareMetalServerConsoleAccessTokenOptions createBareMetalServerConsoleAccessTokenOptionsModel = new CreateBareMetalServerConsoleAccessTokenOptions.Builder()
      .bareMetalServerId("testString")
      .consoleType("serial")
      .force(false)
      .build();

    // Invoke createBareMetalServerConsoleAccessToken() with a valid options model and verify the result
    Response<BareMetalServerConsoleAccessToken> response = vpcService.createBareMetalServerConsoleAccessToken(createBareMetalServerConsoleAccessTokenOptionsModel).execute();
    assertNotNull(response);
    BareMetalServerConsoleAccessToken responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createBareMetalServerConsoleAccessTokenPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createBareMetalServerConsoleAccessToken operation with and without retries enabled
  @Test
  public void testCreateBareMetalServerConsoleAccessTokenWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateBareMetalServerConsoleAccessTokenWOptions();

    vpcService.disableRetries();
    testCreateBareMetalServerConsoleAccessTokenWOptions();
  }

  // Test the createBareMetalServerConsoleAccessToken operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateBareMetalServerConsoleAccessTokenNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createBareMetalServerConsoleAccessToken(null).execute();
  }

  // Test the listBareMetalServerDisks operation with a valid options model parameter
  @Test
  public void testListBareMetalServerDisksWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"disks\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/disks/0717-3744f199-6ccc-4698-8772-bb3937348c96\", \"id\": \"0717-3744f199-6ccc-4698-8772-bb3937348c96\", \"interface_type\": \"fcp\", \"name\": \"my-bare-metal-server-disk\", \"resource_type\": \"bare_metal_server_disk\", \"size\": 100}]}";
    String listBareMetalServerDisksPath = "/bare_metal_servers/testString/disks";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListBareMetalServerDisksOptions model
    ListBareMetalServerDisksOptions listBareMetalServerDisksOptionsModel = new ListBareMetalServerDisksOptions.Builder()
      .bareMetalServerId("testString")
      .build();

    // Invoke listBareMetalServerDisks() with a valid options model and verify the result
    Response<BareMetalServerDiskCollection> response = vpcService.listBareMetalServerDisks(listBareMetalServerDisksOptionsModel).execute();
    assertNotNull(response);
    BareMetalServerDiskCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listBareMetalServerDisksPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listBareMetalServerDisks operation with and without retries enabled
  @Test
  public void testListBareMetalServerDisksWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListBareMetalServerDisksWOptions();

    vpcService.disableRetries();
    testListBareMetalServerDisksWOptions();
  }

  // Test the listBareMetalServerDisks operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListBareMetalServerDisksNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listBareMetalServerDisks(null).execute();
  }

  // Test the getBareMetalServerDisk operation with a valid options model parameter
  @Test
  public void testGetBareMetalServerDiskWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/disks/0717-3744f199-6ccc-4698-8772-bb3937348c96\", \"id\": \"0717-3744f199-6ccc-4698-8772-bb3937348c96\", \"interface_type\": \"fcp\", \"name\": \"my-bare-metal-server-disk\", \"resource_type\": \"bare_metal_server_disk\", \"size\": 100}";
    String getBareMetalServerDiskPath = "/bare_metal_servers/testString/disks/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetBareMetalServerDiskOptions model
    GetBareMetalServerDiskOptions getBareMetalServerDiskOptionsModel = new GetBareMetalServerDiskOptions.Builder()
      .bareMetalServerId("testString")
      .id("testString")
      .build();

    // Invoke getBareMetalServerDisk() with a valid options model and verify the result
    Response<BareMetalServerDisk> response = vpcService.getBareMetalServerDisk(getBareMetalServerDiskOptionsModel).execute();
    assertNotNull(response);
    BareMetalServerDisk responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getBareMetalServerDiskPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getBareMetalServerDisk operation with and without retries enabled
  @Test
  public void testGetBareMetalServerDiskWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetBareMetalServerDiskWOptions();

    vpcService.disableRetries();
    testGetBareMetalServerDiskWOptions();
  }

  // Test the getBareMetalServerDisk operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetBareMetalServerDiskNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getBareMetalServerDisk(null).execute();
  }

  // Test the updateBareMetalServerDisk operation with a valid options model parameter
  @Test
  public void testUpdateBareMetalServerDiskWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/disks/0717-3744f199-6ccc-4698-8772-bb3937348c96\", \"id\": \"0717-3744f199-6ccc-4698-8772-bb3937348c96\", \"interface_type\": \"fcp\", \"name\": \"my-bare-metal-server-disk\", \"resource_type\": \"bare_metal_server_disk\", \"size\": 100}";
    String updateBareMetalServerDiskPath = "/bare_metal_servers/testString/disks/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the BareMetalServerDiskPatch model
    BareMetalServerDiskPatch bareMetalServerDiskPatchModel = new BareMetalServerDiskPatch.Builder()
      .name("my-bare-metal-server-disk-updated")
      .build();
    Map<String, Object> bareMetalServerDiskPatchModelAsPatch = bareMetalServerDiskPatchModel.asPatch();

    // Construct an instance of the UpdateBareMetalServerDiskOptions model
    UpdateBareMetalServerDiskOptions updateBareMetalServerDiskOptionsModel = new UpdateBareMetalServerDiskOptions.Builder()
      .bareMetalServerId("testString")
      .id("testString")
      .bareMetalServerDiskPatch(bareMetalServerDiskPatchModelAsPatch)
      .build();

    // Invoke updateBareMetalServerDisk() with a valid options model and verify the result
    Response<BareMetalServerDisk> response = vpcService.updateBareMetalServerDisk(updateBareMetalServerDiskOptionsModel).execute();
    assertNotNull(response);
    BareMetalServerDisk responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateBareMetalServerDiskPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateBareMetalServerDisk operation with and without retries enabled
  @Test
  public void testUpdateBareMetalServerDiskWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateBareMetalServerDiskWOptions();

    vpcService.disableRetries();
    testUpdateBareMetalServerDiskWOptions();
  }

  // Test the updateBareMetalServerDisk operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateBareMetalServerDiskNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateBareMetalServerDisk(null).execute();
  }

  // Test the listBareMetalServerNetworkAttachments operation with a valid options model parameter
  @Test
  public void testListBareMetalServerNetworkAttachmentsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"network_attachments\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_attachments/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"id\": \"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"lifecycle_state\": \"stable\", \"name\": \"my-bare-metal-server-network-attachment\", \"port_speed\": 1000, \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"bare_metal_server_network_attachment\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"type\": \"primary\", \"virtual_network_interface\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"name\": \"my-virtual-network-interface\", \"resource_type\": \"virtual_network_interface\"}, \"allowed_vlans\": [4], \"interface_type\": \"pci\"}], \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listBareMetalServerNetworkAttachmentsPath = "/bare_metal_servers/testString/network_attachments";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListBareMetalServerNetworkAttachmentsOptions model
    ListBareMetalServerNetworkAttachmentsOptions listBareMetalServerNetworkAttachmentsOptionsModel = new ListBareMetalServerNetworkAttachmentsOptions.Builder()
      .bareMetalServerId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listBareMetalServerNetworkAttachments() with a valid options model and verify the result
    Response<BareMetalServerNetworkAttachmentCollection> response = vpcService.listBareMetalServerNetworkAttachments(listBareMetalServerNetworkAttachmentsOptionsModel).execute();
    assertNotNull(response);
    BareMetalServerNetworkAttachmentCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listBareMetalServerNetworkAttachmentsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listBareMetalServerNetworkAttachments operation with and without retries enabled
  @Test
  public void testListBareMetalServerNetworkAttachmentsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListBareMetalServerNetworkAttachmentsWOptions();

    vpcService.disableRetries();
    testListBareMetalServerNetworkAttachmentsWOptions();
  }

  // Test the listBareMetalServerNetworkAttachments operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListBareMetalServerNetworkAttachmentsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listBareMetalServerNetworkAttachments(null).execute();
  }

  // Test the listBareMetalServerNetworkAttachments operation using the BareMetalServerNetworkAttachmentsPager.getNext() method
  @Test
  public void testListBareMetalServerNetworkAttachmentsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"network_attachments\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_attachments/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"id\":\"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"lifecycle_state\":\"stable\",\"name\":\"my-bare-metal-server-network-attachment\",\"port_speed\":1000,\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"bare_metal_server_network_attachment\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"type\":\"primary\",\"virtual_network_interface\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"id\":\"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"name\":\"my-virtual-network-interface\",\"resource_type\":\"virtual_network_interface\"},\"allowed_vlans\":[4],\"interface_type\":\"pci\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"network_attachments\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_attachments/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"id\":\"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"lifecycle_state\":\"stable\",\"name\":\"my-bare-metal-server-network-attachment\",\"port_speed\":1000,\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"bare_metal_server_network_attachment\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"type\":\"primary\",\"virtual_network_interface\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"id\":\"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"name\":\"my-virtual-network-interface\",\"resource_type\":\"virtual_network_interface\"},\"allowed_vlans\":[4],\"interface_type\":\"pci\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListBareMetalServerNetworkAttachmentsOptions listBareMetalServerNetworkAttachmentsOptions = new ListBareMetalServerNetworkAttachmentsOptions.Builder()
      .bareMetalServerId("testString")
      .limit(Long.valueOf("10"))
      .build();

    List<BareMetalServerNetworkAttachment> allResults = new ArrayList<>();
    BareMetalServerNetworkAttachmentsPager pager = new BareMetalServerNetworkAttachmentsPager(vpcService, listBareMetalServerNetworkAttachmentsOptions);
    while (pager.hasNext()) {
      List<BareMetalServerNetworkAttachment> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listBareMetalServerNetworkAttachments operation using the BareMetalServerNetworkAttachmentsPager.getAll() method
  @Test
  public void testListBareMetalServerNetworkAttachmentsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"network_attachments\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_attachments/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"id\":\"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"lifecycle_state\":\"stable\",\"name\":\"my-bare-metal-server-network-attachment\",\"port_speed\":1000,\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"bare_metal_server_network_attachment\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"type\":\"primary\",\"virtual_network_interface\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"id\":\"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"name\":\"my-virtual-network-interface\",\"resource_type\":\"virtual_network_interface\"},\"allowed_vlans\":[4],\"interface_type\":\"pci\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"network_attachments\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_attachments/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"id\":\"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"lifecycle_state\":\"stable\",\"name\":\"my-bare-metal-server-network-attachment\",\"port_speed\":1000,\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"bare_metal_server_network_attachment\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"type\":\"primary\",\"virtual_network_interface\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"id\":\"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"name\":\"my-virtual-network-interface\",\"resource_type\":\"virtual_network_interface\"},\"allowed_vlans\":[4],\"interface_type\":\"pci\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListBareMetalServerNetworkAttachmentsOptions listBareMetalServerNetworkAttachmentsOptions = new ListBareMetalServerNetworkAttachmentsOptions.Builder()
      .bareMetalServerId("testString")
      .limit(Long.valueOf("10"))
      .build();

    BareMetalServerNetworkAttachmentsPager pager = new BareMetalServerNetworkAttachmentsPager(vpcService, listBareMetalServerNetworkAttachmentsOptions);
    List<BareMetalServerNetworkAttachment> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createBareMetalServerNetworkAttachment operation with a valid options model parameter
  @Test
  public void testCreateBareMetalServerNetworkAttachmentWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_attachments/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"id\": \"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"lifecycle_state\": \"stable\", \"name\": \"my-bare-metal-server-network-attachment\", \"port_speed\": 1000, \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"bare_metal_server_network_attachment\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"type\": \"primary\", \"virtual_network_interface\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"name\": \"my-virtual-network-interface\", \"resource_type\": \"virtual_network_interface\"}, \"allowed_vlans\": [4], \"interface_type\": \"pci\"}";
    String createBareMetalServerNetworkAttachmentPath = "/bare_metal_servers/testString/network_attachments";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the VirtualNetworkInterfaceIPPrototypeReservedIPPrototypeVirtualNetworkInterfaceIPsContext model
    VirtualNetworkInterfaceIPPrototypeReservedIPPrototypeVirtualNetworkInterfaceIPsContext virtualNetworkInterfaceIpPrototypeModel = new VirtualNetworkInterfaceIPPrototypeReservedIPPrototypeVirtualNetworkInterfaceIPsContext.Builder()
      .address("10.0.0.5")
      .autoDelete(false)
      .name("my-reserved-ip")
      .build();

    // Construct an instance of the VirtualNetworkInterfacePrimaryIPPrototypeReservedIPPrototypeVirtualNetworkInterfacePrimaryIPContext model
    VirtualNetworkInterfacePrimaryIPPrototypeReservedIPPrototypeVirtualNetworkInterfacePrimaryIPContext virtualNetworkInterfacePrimaryIpPrototypeModel = new VirtualNetworkInterfacePrimaryIPPrototypeReservedIPPrototypeVirtualNetworkInterfacePrimaryIPContext.Builder()
      .address("10.0.0.5")
      .autoDelete(false)
      .name("my-reserved-ip")
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the SecurityGroupIdentityById model
    SecurityGroupIdentityById securityGroupIdentityModel = new SecurityGroupIdentityById.Builder()
      .id("r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271")
      .build();

    // Construct an instance of the SubnetIdentityById model
    SubnetIdentityById subnetIdentityModel = new SubnetIdentityById.Builder()
      .id("0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
      .build();

    // Construct an instance of the BareMetalServerNetworkAttachmentPrototypeVirtualNetworkInterfaceVirtualNetworkInterfacePrototypeBareMetalServerNetworkAttachmentContext model
    BareMetalServerNetworkAttachmentPrototypeVirtualNetworkInterfaceVirtualNetworkInterfacePrototypeBareMetalServerNetworkAttachmentContext bareMetalServerNetworkAttachmentPrototypeVirtualNetworkInterfaceModel = new BareMetalServerNetworkAttachmentPrototypeVirtualNetworkInterfaceVirtualNetworkInterfacePrototypeBareMetalServerNetworkAttachmentContext.Builder()
      .allowIpSpoofing(true)
      .autoDelete(false)
      .enableInfrastructureNat(true)
      .ips(java.util.Arrays.asList(virtualNetworkInterfaceIpPrototypeModel))
      .name("my-virtual-network-interface")
      .primaryIp(virtualNetworkInterfacePrimaryIpPrototypeModel)
      .protocolStateFilteringMode("auto")
      .resourceGroup(resourceGroupIdentityModel)
      .securityGroups(java.util.Arrays.asList(securityGroupIdentityModel))
      .subnet(subnetIdentityModel)
      .build();

    // Construct an instance of the BareMetalServerNetworkAttachmentPrototypeBareMetalServerNetworkAttachmentByPCIPrototype model
    BareMetalServerNetworkAttachmentPrototypeBareMetalServerNetworkAttachmentByPCIPrototype bareMetalServerNetworkAttachmentPrototypeModel = new BareMetalServerNetworkAttachmentPrototypeBareMetalServerNetworkAttachmentByPCIPrototype.Builder()
      .name("my-bare-metal-server-network-attachment")
      .virtualNetworkInterface(bareMetalServerNetworkAttachmentPrototypeVirtualNetworkInterfaceModel)
      .allowedVlans(java.util.Arrays.asList(Long.valueOf("4")))
      .interfaceType("pci")
      .build();

    // Construct an instance of the CreateBareMetalServerNetworkAttachmentOptions model
    CreateBareMetalServerNetworkAttachmentOptions createBareMetalServerNetworkAttachmentOptionsModel = new CreateBareMetalServerNetworkAttachmentOptions.Builder()
      .bareMetalServerId("testString")
      .bareMetalServerNetworkAttachmentPrototype(bareMetalServerNetworkAttachmentPrototypeModel)
      .build();

    // Invoke createBareMetalServerNetworkAttachment() with a valid options model and verify the result
    Response<BareMetalServerNetworkAttachment> response = vpcService.createBareMetalServerNetworkAttachment(createBareMetalServerNetworkAttachmentOptionsModel).execute();
    assertNotNull(response);
    BareMetalServerNetworkAttachment responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createBareMetalServerNetworkAttachmentPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createBareMetalServerNetworkAttachment operation with and without retries enabled
  @Test
  public void testCreateBareMetalServerNetworkAttachmentWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateBareMetalServerNetworkAttachmentWOptions();

    vpcService.disableRetries();
    testCreateBareMetalServerNetworkAttachmentWOptions();
  }

  // Test the createBareMetalServerNetworkAttachment operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateBareMetalServerNetworkAttachmentNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createBareMetalServerNetworkAttachment(null).execute();
  }

  // Test the deleteBareMetalServerNetworkAttachment operation with a valid options model parameter
  @Test
  public void testDeleteBareMetalServerNetworkAttachmentWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteBareMetalServerNetworkAttachmentPath = "/bare_metal_servers/testString/network_attachments/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteBareMetalServerNetworkAttachmentOptions model
    DeleteBareMetalServerNetworkAttachmentOptions deleteBareMetalServerNetworkAttachmentOptionsModel = new DeleteBareMetalServerNetworkAttachmentOptions.Builder()
      .bareMetalServerId("testString")
      .id("testString")
      .build();

    // Invoke deleteBareMetalServerNetworkAttachment() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteBareMetalServerNetworkAttachment(deleteBareMetalServerNetworkAttachmentOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteBareMetalServerNetworkAttachmentPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteBareMetalServerNetworkAttachment operation with and without retries enabled
  @Test
  public void testDeleteBareMetalServerNetworkAttachmentWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteBareMetalServerNetworkAttachmentWOptions();

    vpcService.disableRetries();
    testDeleteBareMetalServerNetworkAttachmentWOptions();
  }

  // Test the deleteBareMetalServerNetworkAttachment operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteBareMetalServerNetworkAttachmentNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteBareMetalServerNetworkAttachment(null).execute();
  }

  // Test the getBareMetalServerNetworkAttachment operation with a valid options model parameter
  @Test
  public void testGetBareMetalServerNetworkAttachmentWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_attachments/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"id\": \"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"lifecycle_state\": \"stable\", \"name\": \"my-bare-metal-server-network-attachment\", \"port_speed\": 1000, \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"bare_metal_server_network_attachment\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"type\": \"primary\", \"virtual_network_interface\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"name\": \"my-virtual-network-interface\", \"resource_type\": \"virtual_network_interface\"}, \"allowed_vlans\": [4], \"interface_type\": \"pci\"}";
    String getBareMetalServerNetworkAttachmentPath = "/bare_metal_servers/testString/network_attachments/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetBareMetalServerNetworkAttachmentOptions model
    GetBareMetalServerNetworkAttachmentOptions getBareMetalServerNetworkAttachmentOptionsModel = new GetBareMetalServerNetworkAttachmentOptions.Builder()
      .bareMetalServerId("testString")
      .id("testString")
      .build();

    // Invoke getBareMetalServerNetworkAttachment() with a valid options model and verify the result
    Response<BareMetalServerNetworkAttachment> response = vpcService.getBareMetalServerNetworkAttachment(getBareMetalServerNetworkAttachmentOptionsModel).execute();
    assertNotNull(response);
    BareMetalServerNetworkAttachment responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getBareMetalServerNetworkAttachmentPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getBareMetalServerNetworkAttachment operation with and without retries enabled
  @Test
  public void testGetBareMetalServerNetworkAttachmentWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetBareMetalServerNetworkAttachmentWOptions();

    vpcService.disableRetries();
    testGetBareMetalServerNetworkAttachmentWOptions();
  }

  // Test the getBareMetalServerNetworkAttachment operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetBareMetalServerNetworkAttachmentNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getBareMetalServerNetworkAttachment(null).execute();
  }

  // Test the updateBareMetalServerNetworkAttachment operation with a valid options model parameter
  @Test
  public void testUpdateBareMetalServerNetworkAttachmentWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_attachments/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"id\": \"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"lifecycle_state\": \"stable\", \"name\": \"my-bare-metal-server-network-attachment\", \"port_speed\": 1000, \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"bare_metal_server_network_attachment\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"type\": \"primary\", \"virtual_network_interface\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"name\": \"my-virtual-network-interface\", \"resource_type\": \"virtual_network_interface\"}, \"allowed_vlans\": [4], \"interface_type\": \"pci\"}";
    String updateBareMetalServerNetworkAttachmentPath = "/bare_metal_servers/testString/network_attachments/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the BareMetalServerNetworkAttachmentPatch model
    BareMetalServerNetworkAttachmentPatch bareMetalServerNetworkAttachmentPatchModel = new BareMetalServerNetworkAttachmentPatch.Builder()
      .allowedVlans(java.util.Arrays.asList(Long.valueOf("4")))
      .name("my-bare-metal-server-network-attachment-updated")
      .build();
    Map<String, Object> bareMetalServerNetworkAttachmentPatchModelAsPatch = bareMetalServerNetworkAttachmentPatchModel.asPatch();

    // Construct an instance of the UpdateBareMetalServerNetworkAttachmentOptions model
    UpdateBareMetalServerNetworkAttachmentOptions updateBareMetalServerNetworkAttachmentOptionsModel = new UpdateBareMetalServerNetworkAttachmentOptions.Builder()
      .bareMetalServerId("testString")
      .id("testString")
      .bareMetalServerNetworkAttachmentPatch(bareMetalServerNetworkAttachmentPatchModelAsPatch)
      .build();

    // Invoke updateBareMetalServerNetworkAttachment() with a valid options model and verify the result
    Response<BareMetalServerNetworkAttachment> response = vpcService.updateBareMetalServerNetworkAttachment(updateBareMetalServerNetworkAttachmentOptionsModel).execute();
    assertNotNull(response);
    BareMetalServerNetworkAttachment responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateBareMetalServerNetworkAttachmentPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateBareMetalServerNetworkAttachment operation with and without retries enabled
  @Test
  public void testUpdateBareMetalServerNetworkAttachmentWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateBareMetalServerNetworkAttachmentWOptions();

    vpcService.disableRetries();
    testUpdateBareMetalServerNetworkAttachmentWOptions();
  }

  // Test the updateBareMetalServerNetworkAttachment operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateBareMetalServerNetworkAttachmentNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateBareMetalServerNetworkAttachment(null).execute();
  }

  // Test the listBareMetalServerNetworkInterfaces operation with a valid options model parameter
  @Test
  public void testListBareMetalServerNetworkInterfacesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"network_interfaces\": [{\"allow_ip_spoofing\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"enable_infrastructure_nat\": true, \"floating_ips\": [{\"address\": \"203.0.113.1\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"id\": \"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"name\": \"my-floating-ip\"}], \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"id\": \"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"mac_address\": \"02:00:04:00:C4:6A\", \"name\": \"my-bare-metal-server-network-interface\", \"port_speed\": 1000, \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"status\": \"available\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"type\": \"primary\", \"interface_type\": \"hipersocket\"}], \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listBareMetalServerNetworkInterfacesPath = "/bare_metal_servers/testString/network_interfaces";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListBareMetalServerNetworkInterfacesOptions model
    ListBareMetalServerNetworkInterfacesOptions listBareMetalServerNetworkInterfacesOptionsModel = new ListBareMetalServerNetworkInterfacesOptions.Builder()
      .bareMetalServerId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listBareMetalServerNetworkInterfaces() with a valid options model and verify the result
    Response<BareMetalServerNetworkInterfaceCollection> response = vpcService.listBareMetalServerNetworkInterfaces(listBareMetalServerNetworkInterfacesOptionsModel).execute();
    assertNotNull(response);
    BareMetalServerNetworkInterfaceCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listBareMetalServerNetworkInterfacesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listBareMetalServerNetworkInterfaces operation with and without retries enabled
  @Test
  public void testListBareMetalServerNetworkInterfacesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListBareMetalServerNetworkInterfacesWOptions();

    vpcService.disableRetries();
    testListBareMetalServerNetworkInterfacesWOptions();
  }

  // Test the listBareMetalServerNetworkInterfaces operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListBareMetalServerNetworkInterfacesNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listBareMetalServerNetworkInterfaces(null).execute();
  }

  // Test the listBareMetalServerNetworkInterfaces operation using the BareMetalServerNetworkInterfacesPager.getNext() method
  @Test
  public void testListBareMetalServerNetworkInterfacesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"network_interfaces\":[{\"allow_ip_spoofing\":true,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"enable_infrastructure_nat\":true,\"floating_ips\":[{\"address\":\"203.0.113.1\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"id\":\"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"name\":\"my-floating-ip\"}],\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"id\":\"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"mac_address\":\"02:00:04:00:C4:6A\",\"name\":\"my-bare-metal-server-network-interface\",\"port_speed\":1000,\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"status\":\"available\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"type\":\"primary\",\"interface_type\":\"hipersocket\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"network_interfaces\":[{\"allow_ip_spoofing\":true,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"enable_infrastructure_nat\":true,\"floating_ips\":[{\"address\":\"203.0.113.1\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"id\":\"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"name\":\"my-floating-ip\"}],\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"id\":\"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"mac_address\":\"02:00:04:00:C4:6A\",\"name\":\"my-bare-metal-server-network-interface\",\"port_speed\":1000,\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"status\":\"available\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"type\":\"primary\",\"interface_type\":\"hipersocket\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListBareMetalServerNetworkInterfacesOptions listBareMetalServerNetworkInterfacesOptions = new ListBareMetalServerNetworkInterfacesOptions.Builder()
      .bareMetalServerId("testString")
      .limit(Long.valueOf("10"))
      .build();

    List<BareMetalServerNetworkInterface> allResults = new ArrayList<>();
    BareMetalServerNetworkInterfacesPager pager = new BareMetalServerNetworkInterfacesPager(vpcService, listBareMetalServerNetworkInterfacesOptions);
    while (pager.hasNext()) {
      List<BareMetalServerNetworkInterface> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listBareMetalServerNetworkInterfaces operation using the BareMetalServerNetworkInterfacesPager.getAll() method
  @Test
  public void testListBareMetalServerNetworkInterfacesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"network_interfaces\":[{\"allow_ip_spoofing\":true,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"enable_infrastructure_nat\":true,\"floating_ips\":[{\"address\":\"203.0.113.1\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"id\":\"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"name\":\"my-floating-ip\"}],\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"id\":\"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"mac_address\":\"02:00:04:00:C4:6A\",\"name\":\"my-bare-metal-server-network-interface\",\"port_speed\":1000,\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"status\":\"available\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"type\":\"primary\",\"interface_type\":\"hipersocket\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"network_interfaces\":[{\"allow_ip_spoofing\":true,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"enable_infrastructure_nat\":true,\"floating_ips\":[{\"address\":\"203.0.113.1\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"id\":\"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"name\":\"my-floating-ip\"}],\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"id\":\"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"mac_address\":\"02:00:04:00:C4:6A\",\"name\":\"my-bare-metal-server-network-interface\",\"port_speed\":1000,\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\",\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"status\":\"available\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"type\":\"primary\",\"interface_type\":\"hipersocket\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListBareMetalServerNetworkInterfacesOptions listBareMetalServerNetworkInterfacesOptions = new ListBareMetalServerNetworkInterfacesOptions.Builder()
      .bareMetalServerId("testString")
      .limit(Long.valueOf("10"))
      .build();

    BareMetalServerNetworkInterfacesPager pager = new BareMetalServerNetworkInterfacesPager(vpcService, listBareMetalServerNetworkInterfacesOptions);
    List<BareMetalServerNetworkInterface> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createBareMetalServerNetworkInterface operation with a valid options model parameter
  @Test
  public void testCreateBareMetalServerNetworkInterfaceWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"allow_ip_spoofing\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"enable_infrastructure_nat\": true, \"floating_ips\": [{\"address\": \"203.0.113.1\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"id\": \"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"name\": \"my-floating-ip\"}], \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"id\": \"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"mac_address\": \"02:00:04:00:C4:6A\", \"name\": \"my-bare-metal-server-network-interface\", \"port_speed\": 1000, \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"status\": \"available\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"type\": \"primary\", \"interface_type\": \"hipersocket\"}";
    String createBareMetalServerNetworkInterfacePath = "/bare_metal_servers/testString/network_interfaces";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the NetworkInterfaceIPPrototypeReservedIPPrototypeNetworkInterfaceContext model
    NetworkInterfaceIPPrototypeReservedIPPrototypeNetworkInterfaceContext networkInterfaceIpPrototypeModel = new NetworkInterfaceIPPrototypeReservedIPPrototypeNetworkInterfaceContext.Builder()
      .address("10.0.0.5")
      .autoDelete(false)
      .name("my-reserved-ip")
      .build();

    // Construct an instance of the SecurityGroupIdentityById model
    SecurityGroupIdentityById securityGroupIdentityModel = new SecurityGroupIdentityById.Builder()
      .id("r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271")
      .build();

    // Construct an instance of the SubnetIdentityById model
    SubnetIdentityById subnetIdentityModel = new SubnetIdentityById.Builder()
      .id("0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
      .build();

    // Construct an instance of the BareMetalServerNetworkInterfacePrototypeBareMetalServerNetworkInterfaceByHiperSocketPrototype model
    BareMetalServerNetworkInterfacePrototypeBareMetalServerNetworkInterfaceByHiperSocketPrototype bareMetalServerNetworkInterfacePrototypeModel = new BareMetalServerNetworkInterfacePrototypeBareMetalServerNetworkInterfaceByHiperSocketPrototype.Builder()
      .allowIpSpoofing(true)
      .enableInfrastructureNat(true)
      .name("my-bare-metal-server-network-interface")
      .primaryIp(networkInterfaceIpPrototypeModel)
      .securityGroups(java.util.Arrays.asList(securityGroupIdentityModel))
      .subnet(subnetIdentityModel)
      .interfaceType("hipersocket")
      .build();

    // Construct an instance of the CreateBareMetalServerNetworkInterfaceOptions model
    CreateBareMetalServerNetworkInterfaceOptions createBareMetalServerNetworkInterfaceOptionsModel = new CreateBareMetalServerNetworkInterfaceOptions.Builder()
      .bareMetalServerId("testString")
      .bareMetalServerNetworkInterfacePrototype(bareMetalServerNetworkInterfacePrototypeModel)
      .build();

    // Invoke createBareMetalServerNetworkInterface() with a valid options model and verify the result
    Response<BareMetalServerNetworkInterface> response = vpcService.createBareMetalServerNetworkInterface(createBareMetalServerNetworkInterfaceOptionsModel).execute();
    assertNotNull(response);
    BareMetalServerNetworkInterface responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createBareMetalServerNetworkInterfacePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createBareMetalServerNetworkInterface operation with and without retries enabled
  @Test
  public void testCreateBareMetalServerNetworkInterfaceWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateBareMetalServerNetworkInterfaceWOptions();

    vpcService.disableRetries();
    testCreateBareMetalServerNetworkInterfaceWOptions();
  }

  // Test the createBareMetalServerNetworkInterface operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateBareMetalServerNetworkInterfaceNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createBareMetalServerNetworkInterface(null).execute();
  }

  // Test the deleteBareMetalServerNetworkInterface operation with a valid options model parameter
  @Test
  public void testDeleteBareMetalServerNetworkInterfaceWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteBareMetalServerNetworkInterfacePath = "/bare_metal_servers/testString/network_interfaces/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteBareMetalServerNetworkInterfaceOptions model
    DeleteBareMetalServerNetworkInterfaceOptions deleteBareMetalServerNetworkInterfaceOptionsModel = new DeleteBareMetalServerNetworkInterfaceOptions.Builder()
      .bareMetalServerId("testString")
      .id("testString")
      .build();

    // Invoke deleteBareMetalServerNetworkInterface() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteBareMetalServerNetworkInterface(deleteBareMetalServerNetworkInterfaceOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteBareMetalServerNetworkInterfacePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteBareMetalServerNetworkInterface operation with and without retries enabled
  @Test
  public void testDeleteBareMetalServerNetworkInterfaceWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteBareMetalServerNetworkInterfaceWOptions();

    vpcService.disableRetries();
    testDeleteBareMetalServerNetworkInterfaceWOptions();
  }

  // Test the deleteBareMetalServerNetworkInterface operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteBareMetalServerNetworkInterfaceNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteBareMetalServerNetworkInterface(null).execute();
  }

  // Test the getBareMetalServerNetworkInterface operation with a valid options model parameter
  @Test
  public void testGetBareMetalServerNetworkInterfaceWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"allow_ip_spoofing\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"enable_infrastructure_nat\": true, \"floating_ips\": [{\"address\": \"203.0.113.1\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"id\": \"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"name\": \"my-floating-ip\"}], \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"id\": \"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"mac_address\": \"02:00:04:00:C4:6A\", \"name\": \"my-bare-metal-server-network-interface\", \"port_speed\": 1000, \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"status\": \"available\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"type\": \"primary\", \"interface_type\": \"hipersocket\"}";
    String getBareMetalServerNetworkInterfacePath = "/bare_metal_servers/testString/network_interfaces/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetBareMetalServerNetworkInterfaceOptions model
    GetBareMetalServerNetworkInterfaceOptions getBareMetalServerNetworkInterfaceOptionsModel = new GetBareMetalServerNetworkInterfaceOptions.Builder()
      .bareMetalServerId("testString")
      .id("testString")
      .build();

    // Invoke getBareMetalServerNetworkInterface() with a valid options model and verify the result
    Response<BareMetalServerNetworkInterface> response = vpcService.getBareMetalServerNetworkInterface(getBareMetalServerNetworkInterfaceOptionsModel).execute();
    assertNotNull(response);
    BareMetalServerNetworkInterface responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getBareMetalServerNetworkInterfacePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getBareMetalServerNetworkInterface operation with and without retries enabled
  @Test
  public void testGetBareMetalServerNetworkInterfaceWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetBareMetalServerNetworkInterfaceWOptions();

    vpcService.disableRetries();
    testGetBareMetalServerNetworkInterfaceWOptions();
  }

  // Test the getBareMetalServerNetworkInterface operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetBareMetalServerNetworkInterfaceNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getBareMetalServerNetworkInterface(null).execute();
  }

  // Test the updateBareMetalServerNetworkInterface operation with a valid options model parameter
  @Test
  public void testUpdateBareMetalServerNetworkInterfaceWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"allow_ip_spoofing\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"enable_infrastructure_nat\": true, \"floating_ips\": [{\"address\": \"203.0.113.1\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"id\": \"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"name\": \"my-floating-ip\"}], \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"id\": \"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"mac_address\": \"02:00:04:00:C4:6A\", \"name\": \"my-bare-metal-server-network-interface\", \"port_speed\": 1000, \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"status\": \"available\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"type\": \"primary\", \"interface_type\": \"hipersocket\"}";
    String updateBareMetalServerNetworkInterfacePath = "/bare_metal_servers/testString/network_interfaces/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the BareMetalServerNetworkInterfacePatch model
    BareMetalServerNetworkInterfacePatch bareMetalServerNetworkInterfacePatchModel = new BareMetalServerNetworkInterfacePatch.Builder()
      .allowIpSpoofing(true)
      .allowedVlans(java.util.Arrays.asList(Long.valueOf("4")))
      .enableInfrastructureNat(true)
      .name("my-bare-metal-server-network-interface")
      .build();
    Map<String, Object> bareMetalServerNetworkInterfacePatchModelAsPatch = bareMetalServerNetworkInterfacePatchModel.asPatch();

    // Construct an instance of the UpdateBareMetalServerNetworkInterfaceOptions model
    UpdateBareMetalServerNetworkInterfaceOptions updateBareMetalServerNetworkInterfaceOptionsModel = new UpdateBareMetalServerNetworkInterfaceOptions.Builder()
      .bareMetalServerId("testString")
      .id("testString")
      .bareMetalServerNetworkInterfacePatch(bareMetalServerNetworkInterfacePatchModelAsPatch)
      .build();

    // Invoke updateBareMetalServerNetworkInterface() with a valid options model and verify the result
    Response<BareMetalServerNetworkInterface> response = vpcService.updateBareMetalServerNetworkInterface(updateBareMetalServerNetworkInterfaceOptionsModel).execute();
    assertNotNull(response);
    BareMetalServerNetworkInterface responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateBareMetalServerNetworkInterfacePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateBareMetalServerNetworkInterface operation with and without retries enabled
  @Test
  public void testUpdateBareMetalServerNetworkInterfaceWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateBareMetalServerNetworkInterfaceWOptions();

    vpcService.disableRetries();
    testUpdateBareMetalServerNetworkInterfaceWOptions();
  }

  // Test the updateBareMetalServerNetworkInterface operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateBareMetalServerNetworkInterfaceNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateBareMetalServerNetworkInterface(null).execute();
  }

  // Test the listBareMetalServerNetworkInterfaceFloatingIps operation with a valid options model parameter
  @Test
  public void testListBareMetalServerNetworkInterfaceFloatingIpsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"floating_ips\": [{\"address\": \"203.0.113.1\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"id\": \"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"name\": \"my-floating-ip\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"status\": \"available\", \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}]}";
    String listBareMetalServerNetworkInterfaceFloatingIpsPath = "/bare_metal_servers/testString/network_interfaces/testString/floating_ips";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListBareMetalServerNetworkInterfaceFloatingIpsOptions model
    ListBareMetalServerNetworkInterfaceFloatingIpsOptions listBareMetalServerNetworkInterfaceFloatingIpsOptionsModel = new ListBareMetalServerNetworkInterfaceFloatingIpsOptions.Builder()
      .bareMetalServerId("testString")
      .networkInterfaceId("testString")
      .build();

    // Invoke listBareMetalServerNetworkInterfaceFloatingIps() with a valid options model and verify the result
    Response<FloatingIPUnpaginatedCollection> response = vpcService.listBareMetalServerNetworkInterfaceFloatingIps(listBareMetalServerNetworkInterfaceFloatingIpsOptionsModel).execute();
    assertNotNull(response);
    FloatingIPUnpaginatedCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listBareMetalServerNetworkInterfaceFloatingIpsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listBareMetalServerNetworkInterfaceFloatingIps operation with and without retries enabled
  @Test
  public void testListBareMetalServerNetworkInterfaceFloatingIpsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListBareMetalServerNetworkInterfaceFloatingIpsWOptions();

    vpcService.disableRetries();
    testListBareMetalServerNetworkInterfaceFloatingIpsWOptions();
  }

  // Test the listBareMetalServerNetworkInterfaceFloatingIps operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListBareMetalServerNetworkInterfaceFloatingIpsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listBareMetalServerNetworkInterfaceFloatingIps(null).execute();
  }

  // Test the removeBareMetalServerNetworkInterfaceFloatingIp operation with a valid options model parameter
  @Test
  public void testRemoveBareMetalServerNetworkInterfaceFloatingIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String removeBareMetalServerNetworkInterfaceFloatingIpPath = "/bare_metal_servers/testString/network_interfaces/testString/floating_ips/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the RemoveBareMetalServerNetworkInterfaceFloatingIpOptions model
    RemoveBareMetalServerNetworkInterfaceFloatingIpOptions removeBareMetalServerNetworkInterfaceFloatingIpOptionsModel = new RemoveBareMetalServerNetworkInterfaceFloatingIpOptions.Builder()
      .bareMetalServerId("testString")
      .networkInterfaceId("testString")
      .id("testString")
      .build();

    // Invoke removeBareMetalServerNetworkInterfaceFloatingIp() with a valid options model and verify the result
    Response<Void> response = vpcService.removeBareMetalServerNetworkInterfaceFloatingIp(removeBareMetalServerNetworkInterfaceFloatingIpOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, removeBareMetalServerNetworkInterfaceFloatingIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the removeBareMetalServerNetworkInterfaceFloatingIp operation with and without retries enabled
  @Test
  public void testRemoveBareMetalServerNetworkInterfaceFloatingIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testRemoveBareMetalServerNetworkInterfaceFloatingIpWOptions();

    vpcService.disableRetries();
    testRemoveBareMetalServerNetworkInterfaceFloatingIpWOptions();
  }

  // Test the removeBareMetalServerNetworkInterfaceFloatingIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testRemoveBareMetalServerNetworkInterfaceFloatingIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.removeBareMetalServerNetworkInterfaceFloatingIp(null).execute();
  }

  // Test the getBareMetalServerNetworkInterfaceFloatingIp operation with a valid options model parameter
  @Test
  public void testGetBareMetalServerNetworkInterfaceFloatingIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"203.0.113.1\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"id\": \"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"name\": \"my-floating-ip\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"status\": \"available\", \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getBareMetalServerNetworkInterfaceFloatingIpPath = "/bare_metal_servers/testString/network_interfaces/testString/floating_ips/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetBareMetalServerNetworkInterfaceFloatingIpOptions model
    GetBareMetalServerNetworkInterfaceFloatingIpOptions getBareMetalServerNetworkInterfaceFloatingIpOptionsModel = new GetBareMetalServerNetworkInterfaceFloatingIpOptions.Builder()
      .bareMetalServerId("testString")
      .networkInterfaceId("testString")
      .id("testString")
      .build();

    // Invoke getBareMetalServerNetworkInterfaceFloatingIp() with a valid options model and verify the result
    Response<FloatingIP> response = vpcService.getBareMetalServerNetworkInterfaceFloatingIp(getBareMetalServerNetworkInterfaceFloatingIpOptionsModel).execute();
    assertNotNull(response);
    FloatingIP responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getBareMetalServerNetworkInterfaceFloatingIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getBareMetalServerNetworkInterfaceFloatingIp operation with and without retries enabled
  @Test
  public void testGetBareMetalServerNetworkInterfaceFloatingIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetBareMetalServerNetworkInterfaceFloatingIpWOptions();

    vpcService.disableRetries();
    testGetBareMetalServerNetworkInterfaceFloatingIpWOptions();
  }

  // Test the getBareMetalServerNetworkInterfaceFloatingIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetBareMetalServerNetworkInterfaceFloatingIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getBareMetalServerNetworkInterfaceFloatingIp(null).execute();
  }

  // Test the addBareMetalServerNetworkInterfaceFloatingIp operation with a valid options model parameter
  @Test
  public void testAddBareMetalServerNetworkInterfaceFloatingIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"203.0.113.1\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"id\": \"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"name\": \"my-floating-ip\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"status\": \"available\", \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String addBareMetalServerNetworkInterfaceFloatingIpPath = "/bare_metal_servers/testString/network_interfaces/testString/floating_ips/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the AddBareMetalServerNetworkInterfaceFloatingIpOptions model
    AddBareMetalServerNetworkInterfaceFloatingIpOptions addBareMetalServerNetworkInterfaceFloatingIpOptionsModel = new AddBareMetalServerNetworkInterfaceFloatingIpOptions.Builder()
      .bareMetalServerId("testString")
      .networkInterfaceId("testString")
      .id("testString")
      .build();

    // Invoke addBareMetalServerNetworkInterfaceFloatingIp() with a valid options model and verify the result
    Response<FloatingIP> response = vpcService.addBareMetalServerNetworkInterfaceFloatingIp(addBareMetalServerNetworkInterfaceFloatingIpOptionsModel).execute();
    assertNotNull(response);
    FloatingIP responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PUT");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, addBareMetalServerNetworkInterfaceFloatingIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the addBareMetalServerNetworkInterfaceFloatingIp operation with and without retries enabled
  @Test
  public void testAddBareMetalServerNetworkInterfaceFloatingIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testAddBareMetalServerNetworkInterfaceFloatingIpWOptions();

    vpcService.disableRetries();
    testAddBareMetalServerNetworkInterfaceFloatingIpWOptions();
  }

  // Test the addBareMetalServerNetworkInterfaceFloatingIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testAddBareMetalServerNetworkInterfaceFloatingIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.addBareMetalServerNetworkInterfaceFloatingIp(null).execute();
  }

  // Test the listBareMetalServerNetworkInterfaceIps operation with a valid options model parameter
  @Test
  public void testListBareMetalServerNetworkInterfaceIpsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"ips\": [{\"address\": \"192.168.3.4\", \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"lifecycle_state\": \"stable\", \"name\": \"my-reserved-ip\", \"owner\": \"provider\", \"resource_type\": \"subnet_reserved_ip\", \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"id\": \"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"name\": \"my-endpoint-gateway\", \"resource_type\": \"endpoint_gateway\"}}], \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listBareMetalServerNetworkInterfaceIpsPath = "/bare_metal_servers/testString/network_interfaces/testString/ips";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListBareMetalServerNetworkInterfaceIpsOptions model
    ListBareMetalServerNetworkInterfaceIpsOptions listBareMetalServerNetworkInterfaceIpsOptionsModel = new ListBareMetalServerNetworkInterfaceIpsOptions.Builder()
      .bareMetalServerId("testString")
      .networkInterfaceId("testString")
      .build();

    // Invoke listBareMetalServerNetworkInterfaceIps() with a valid options model and verify the result
    Response<ReservedIPCollectionBareMetalServerNetworkInterfaceContext> response = vpcService.listBareMetalServerNetworkInterfaceIps(listBareMetalServerNetworkInterfaceIpsOptionsModel).execute();
    assertNotNull(response);
    ReservedIPCollectionBareMetalServerNetworkInterfaceContext responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listBareMetalServerNetworkInterfaceIpsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listBareMetalServerNetworkInterfaceIps operation with and without retries enabled
  @Test
  public void testListBareMetalServerNetworkInterfaceIpsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListBareMetalServerNetworkInterfaceIpsWOptions();

    vpcService.disableRetries();
    testListBareMetalServerNetworkInterfaceIpsWOptions();
  }

  // Test the listBareMetalServerNetworkInterfaceIps operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListBareMetalServerNetworkInterfaceIpsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listBareMetalServerNetworkInterfaceIps(null).execute();
  }

  // Test the getBareMetalServerNetworkInterfaceIp operation with a valid options model parameter
  @Test
  public void testGetBareMetalServerNetworkInterfaceIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"192.168.3.4\", \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"lifecycle_state\": \"stable\", \"name\": \"my-reserved-ip\", \"owner\": \"provider\", \"resource_type\": \"subnet_reserved_ip\", \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"id\": \"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"name\": \"my-endpoint-gateway\", \"resource_type\": \"endpoint_gateway\"}}";
    String getBareMetalServerNetworkInterfaceIpPath = "/bare_metal_servers/testString/network_interfaces/testString/ips/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetBareMetalServerNetworkInterfaceIpOptions model
    GetBareMetalServerNetworkInterfaceIpOptions getBareMetalServerNetworkInterfaceIpOptionsModel = new GetBareMetalServerNetworkInterfaceIpOptions.Builder()
      .bareMetalServerId("testString")
      .networkInterfaceId("testString")
      .id("testString")
      .build();

    // Invoke getBareMetalServerNetworkInterfaceIp() with a valid options model and verify the result
    Response<ReservedIP> response = vpcService.getBareMetalServerNetworkInterfaceIp(getBareMetalServerNetworkInterfaceIpOptionsModel).execute();
    assertNotNull(response);
    ReservedIP responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getBareMetalServerNetworkInterfaceIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getBareMetalServerNetworkInterfaceIp operation with and without retries enabled
  @Test
  public void testGetBareMetalServerNetworkInterfaceIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetBareMetalServerNetworkInterfaceIpWOptions();

    vpcService.disableRetries();
    testGetBareMetalServerNetworkInterfaceIpWOptions();
  }

  // Test the getBareMetalServerNetworkInterfaceIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetBareMetalServerNetworkInterfaceIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getBareMetalServerNetworkInterfaceIp(null).execute();
  }

  // Test the deleteBareMetalServer operation with a valid options model parameter
  @Test
  public void testDeleteBareMetalServerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteBareMetalServerPath = "/bare_metal_servers/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteBareMetalServerOptions model
    DeleteBareMetalServerOptions deleteBareMetalServerOptionsModel = new DeleteBareMetalServerOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteBareMetalServer() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteBareMetalServer(deleteBareMetalServerOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteBareMetalServerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteBareMetalServer operation with and without retries enabled
  @Test
  public void testDeleteBareMetalServerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteBareMetalServerWOptions();

    vpcService.disableRetries();
    testDeleteBareMetalServerWOptions();
  }

  // Test the deleteBareMetalServer operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteBareMetalServerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteBareMetalServer(null).execute();
  }

  // Test the getBareMetalServer operation with a valid options model parameter
  @Test
  public void testGetBareMetalServerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"bandwidth\": 20000, \"boot_target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/disks/0717-3744f199-6ccc-4698-8772-bb3937348c96\", \"id\": \"0717-3744f199-6ccc-4698-8772-bb3937348c96\", \"name\": \"my-bare-metal-server-disk\", \"resource_type\": \"bare_metal_server_disk\"}, \"cpu\": {\"architecture\": \"amd64\", \"core_count\": 80, \"socket_count\": 4, \"threads_per_core\": 2}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::bare-metal-server:0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304\", \"disks\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/disks/0717-3744f199-6ccc-4698-8772-bb3937348c96\", \"id\": \"0717-3744f199-6ccc-4698-8772-bb3937348c96\", \"interface_type\": \"fcp\", \"name\": \"my-bare-metal-server-disk\", \"resource_type\": \"bare_metal_server_disk\", \"size\": 100}], \"enable_secure_boot\": false, \"firmware\": {\"update\": \"none\"}, \"health_reasons\": [{\"code\": \"reservation_expired\", \"message\": \"The reservation cannot be used because it has expired.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-server-health-status-reasons\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304\", \"id\": \"0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"memory\": 1536, \"name\": \"my-bare-metal-server\", \"network_attachments\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_attachments/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"id\": \"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"name\": \"my-bare-metal-server-network-attachment\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"bare_metal_server_network_attachment\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"virtual_network_interface\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"name\": \"my-virtual-network-interface\", \"resource_type\": \"virtual_network_interface\"}}], \"network_interfaces\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"id\": \"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"name\": \"my-bare-metal-server-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}}], \"primary_network_attachment\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_attachments/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"id\": \"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"name\": \"my-bare-metal-server-network-attachment\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"bare_metal_server_network_attachment\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"virtual_network_interface\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"name\": \"my-virtual-network-interface\", \"resource_type\": \"virtual_network_interface\"}}, \"primary_network_interface\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"id\": \"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"name\": \"my-bare-metal-server-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}}, \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/profiles/bx2-metal-192x768\", \"name\": \"bx2-metal-192x768\", \"resource_type\": \"bare_metal_server_profile\"}, \"reservation\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"id\": \"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"name\": \"my-reservation\", \"resource_type\": \"reservation\"}, \"reservation_affinity\": {\"policy\": \"automatic\", \"pool\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"id\": \"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"name\": \"my-reservation\", \"resource_type\": \"reservation\"}]}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"bare_metal_server\", \"status\": \"deleting\", \"status_reasons\": [{\"code\": \"cannot_start_capacity\", \"message\": \"The bare metal server cannot start as there is no more capacity in this\nzone for a bare metal server with the requested profile.\", \"more_info\": \"https://console.bluemix.net/docs/iaas/bare_metal_server.html\"}], \"trusted_platform_module\": {\"enabled\": true, \"mode\": \"disabled\", \"supported_modes\": [\"disabled\"]}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getBareMetalServerPath = "/bare_metal_servers/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetBareMetalServerOptions model
    GetBareMetalServerOptions getBareMetalServerOptionsModel = new GetBareMetalServerOptions.Builder()
      .id("testString")
      .build();

    // Invoke getBareMetalServer() with a valid options model and verify the result
    Response<BareMetalServer> response = vpcService.getBareMetalServer(getBareMetalServerOptionsModel).execute();
    assertNotNull(response);
    BareMetalServer responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getBareMetalServerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getBareMetalServer operation with and without retries enabled
  @Test
  public void testGetBareMetalServerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetBareMetalServerWOptions();

    vpcService.disableRetries();
    testGetBareMetalServerWOptions();
  }

  // Test the getBareMetalServer operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetBareMetalServerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getBareMetalServer(null).execute();
  }

  // Test the updateBareMetalServer operation with a valid options model parameter
  @Test
  public void testUpdateBareMetalServerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"bandwidth\": 20000, \"boot_target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/disks/0717-3744f199-6ccc-4698-8772-bb3937348c96\", \"id\": \"0717-3744f199-6ccc-4698-8772-bb3937348c96\", \"name\": \"my-bare-metal-server-disk\", \"resource_type\": \"bare_metal_server_disk\"}, \"cpu\": {\"architecture\": \"amd64\", \"core_count\": 80, \"socket_count\": 4, \"threads_per_core\": 2}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::bare-metal-server:0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304\", \"disks\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/disks/0717-3744f199-6ccc-4698-8772-bb3937348c96\", \"id\": \"0717-3744f199-6ccc-4698-8772-bb3937348c96\", \"interface_type\": \"fcp\", \"name\": \"my-bare-metal-server-disk\", \"resource_type\": \"bare_metal_server_disk\", \"size\": 100}], \"enable_secure_boot\": false, \"firmware\": {\"update\": \"none\"}, \"health_reasons\": [{\"code\": \"reservation_expired\", \"message\": \"The reservation cannot be used because it has expired.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-server-health-status-reasons\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304\", \"id\": \"0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"memory\": 1536, \"name\": \"my-bare-metal-server\", \"network_attachments\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_attachments/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"id\": \"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"name\": \"my-bare-metal-server-network-attachment\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"bare_metal_server_network_attachment\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"virtual_network_interface\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"name\": \"my-virtual-network-interface\", \"resource_type\": \"virtual_network_interface\"}}], \"network_interfaces\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"id\": \"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"name\": \"my-bare-metal-server-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}}], \"primary_network_attachment\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_attachments/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"id\": \"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"name\": \"my-bare-metal-server-network-attachment\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"bare_metal_server_network_attachment\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"virtual_network_interface\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"name\": \"my-virtual-network-interface\", \"resource_type\": \"virtual_network_interface\"}}, \"primary_network_interface\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"id\": \"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"name\": \"my-bare-metal-server-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}}, \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/profiles/bx2-metal-192x768\", \"name\": \"bx2-metal-192x768\", \"resource_type\": \"bare_metal_server_profile\"}, \"reservation\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"id\": \"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"name\": \"my-reservation\", \"resource_type\": \"reservation\"}, \"reservation_affinity\": {\"policy\": \"automatic\", \"pool\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::reservation:0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/reservations/0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"id\": \"0717-ba49df72-37b8-43ac-98da-f8e029de0e63\", \"name\": \"my-reservation\", \"resource_type\": \"reservation\"}]}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"bare_metal_server\", \"status\": \"deleting\", \"status_reasons\": [{\"code\": \"cannot_start_capacity\", \"message\": \"The bare metal server cannot start as there is no more capacity in this\nzone for a bare metal server with the requested profile.\", \"more_info\": \"https://console.bluemix.net/docs/iaas/bare_metal_server.html\"}], \"trusted_platform_module\": {\"enabled\": true, \"mode\": \"disabled\", \"supported_modes\": [\"disabled\"]}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String updateBareMetalServerPath = "/bare_metal_servers/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ReservationIdentityById model
    ReservationIdentityById reservationIdentityModel = new ReservationIdentityById.Builder()
      .id("0717-ba49df72-37b8-43ac-98da-f8e029de0e63")
      .build();

    // Construct an instance of the BareMetalServerReservationAffinityPatch model
    BareMetalServerReservationAffinityPatch bareMetalServerReservationAffinityPatchModel = new BareMetalServerReservationAffinityPatch.Builder()
      .policy("automatic")
      .pool(java.util.Arrays.asList(reservationIdentityModel))
      .build();

    // Construct an instance of the BareMetalServerTrustedPlatformModulePatch model
    BareMetalServerTrustedPlatformModulePatch bareMetalServerTrustedPlatformModulePatchModel = new BareMetalServerTrustedPlatformModulePatch.Builder()
      .mode("disabled")
      .build();

    // Construct an instance of the BareMetalServerPatch model
    BareMetalServerPatch bareMetalServerPatchModel = new BareMetalServerPatch.Builder()
      .bandwidth(Long.valueOf("20000"))
      .enableSecureBoot(false)
      .name("my-bare-metal-server")
      .reservationAffinity(bareMetalServerReservationAffinityPatchModel)
      .trustedPlatformModule(bareMetalServerTrustedPlatformModulePatchModel)
      .build();
    Map<String, Object> bareMetalServerPatchModelAsPatch = bareMetalServerPatchModel.asPatch();

    // Construct an instance of the UpdateBareMetalServerOptions model
    UpdateBareMetalServerOptions updateBareMetalServerOptionsModel = new UpdateBareMetalServerOptions.Builder()
      .id("testString")
      .bareMetalServerPatch(bareMetalServerPatchModelAsPatch)
      .build();

    // Invoke updateBareMetalServer() with a valid options model and verify the result
    Response<BareMetalServer> response = vpcService.updateBareMetalServer(updateBareMetalServerOptionsModel).execute();
    assertNotNull(response);
    BareMetalServer responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateBareMetalServerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateBareMetalServer operation with and without retries enabled
  @Test
  public void testUpdateBareMetalServerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateBareMetalServerWOptions();

    vpcService.disableRetries();
    testUpdateBareMetalServerWOptions();
  }

  // Test the updateBareMetalServer operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateBareMetalServerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateBareMetalServer(null).execute();
  }

  // Test the updateFirmwareForBareMetalServer operation with a valid options model parameter
  @Test
  public void testUpdateFirmwareForBareMetalServerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String updateFirmwareForBareMetalServerPath = "/bare_metal_servers/testString/firmware/update";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the UpdateFirmwareForBareMetalServerOptions model
    UpdateFirmwareForBareMetalServerOptions updateFirmwareForBareMetalServerOptionsModel = new UpdateFirmwareForBareMetalServerOptions.Builder()
      .id("testString")
      .autoStart(true)
      .build();

    // Invoke updateFirmwareForBareMetalServer() with a valid options model and verify the result
    Response<Void> response = vpcService.updateFirmwareForBareMetalServer(updateFirmwareForBareMetalServerOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateFirmwareForBareMetalServerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateFirmwareForBareMetalServer operation with and without retries enabled
  @Test
  public void testUpdateFirmwareForBareMetalServerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateFirmwareForBareMetalServerWOptions();

    vpcService.disableRetries();
    testUpdateFirmwareForBareMetalServerWOptions();
  }

  // Test the updateFirmwareForBareMetalServer operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateFirmwareForBareMetalServerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateFirmwareForBareMetalServer(null).execute();
  }

  // Test the getBareMetalServerInitialization operation with a valid options model parameter
  @Test
  public void testGetBareMetalServerInitializationWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"image\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"name\": \"my-image\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"image\"}, \"keys\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::key:r006-82679077-ac3b-4c10-be16-63e9c21f0f45\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"fingerprint\": \"SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/keys/r006-82679077-ac3b-4c10-be16-63e9c21f0f45\", \"id\": \"r006-82679077-ac3b-4c10-be16-63e9c21f0f45\", \"name\": \"my-key-1\"}], \"user_accounts\": [{\"encrypted_password\": \"qQ+/YEApnl1ZtEgIrfprzb065307thTkzlnLqL5ICpesdbBN03dyCQ==\", \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::key:r006-82679077-ac3b-4c10-be16-63e9c21f0f45\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"fingerprint\": \"SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/keys/r006-82679077-ac3b-4c10-be16-63e9c21f0f45\", \"id\": \"r006-82679077-ac3b-4c10-be16-63e9c21f0f45\", \"name\": \"my-key-1\"}, \"resource_type\": \"host_user_account\", \"username\": \"Administrator\"}]}";
    String getBareMetalServerInitializationPath = "/bare_metal_servers/testString/initialization";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetBareMetalServerInitializationOptions model
    GetBareMetalServerInitializationOptions getBareMetalServerInitializationOptionsModel = new GetBareMetalServerInitializationOptions.Builder()
      .id("testString")
      .build();

    // Invoke getBareMetalServerInitialization() with a valid options model and verify the result
    Response<BareMetalServerInitialization> response = vpcService.getBareMetalServerInitialization(getBareMetalServerInitializationOptionsModel).execute();
    assertNotNull(response);
    BareMetalServerInitialization responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getBareMetalServerInitializationPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getBareMetalServerInitialization operation with and without retries enabled
  @Test
  public void testGetBareMetalServerInitializationWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetBareMetalServerInitializationWOptions();

    vpcService.disableRetries();
    testGetBareMetalServerInitializationWOptions();
  }

  // Test the getBareMetalServerInitialization operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetBareMetalServerInitializationNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getBareMetalServerInitialization(null).execute();
  }

  // Test the replaceBareMetalServerInitialization operation with a valid options model parameter
  @Test
  public void testReplaceBareMetalServerInitializationWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"image\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"name\": \"my-image\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"image\"}, \"keys\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::key:r006-82679077-ac3b-4c10-be16-63e9c21f0f45\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"fingerprint\": \"SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/keys/r006-82679077-ac3b-4c10-be16-63e9c21f0f45\", \"id\": \"r006-82679077-ac3b-4c10-be16-63e9c21f0f45\", \"name\": \"my-key-1\"}], \"user_accounts\": [{\"encrypted_password\": \"qQ+/YEApnl1ZtEgIrfprzb065307thTkzlnLqL5ICpesdbBN03dyCQ==\", \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::key:r006-82679077-ac3b-4c10-be16-63e9c21f0f45\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"fingerprint\": \"SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/keys/r006-82679077-ac3b-4c10-be16-63e9c21f0f45\", \"id\": \"r006-82679077-ac3b-4c10-be16-63e9c21f0f45\", \"name\": \"my-key-1\"}, \"resource_type\": \"host_user_account\", \"username\": \"Administrator\"}]}";
    String replaceBareMetalServerInitializationPath = "/bare_metal_servers/testString/initialization";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ImageIdentityById model
    ImageIdentityById imageIdentityModel = new ImageIdentityById.Builder()
      .id("r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8")
      .build();

    // Construct an instance of the KeyIdentityById model
    KeyIdentityById keyIdentityModel = new KeyIdentityById.Builder()
      .id("r006-82679077-ac3b-4c10-be16-63e9c21f0f45")
      .build();

    // Construct an instance of the ReplaceBareMetalServerInitializationOptions model
    ReplaceBareMetalServerInitializationOptions replaceBareMetalServerInitializationOptionsModel = new ReplaceBareMetalServerInitializationOptions.Builder()
      .id("testString")
      .image(imageIdentityModel)
      .keys(java.util.Arrays.asList(keyIdentityModel))
      .userData("testString")
      .build();

    // Invoke replaceBareMetalServerInitialization() with a valid options model and verify the result
    Response<BareMetalServerInitialization> response = vpcService.replaceBareMetalServerInitialization(replaceBareMetalServerInitializationOptionsModel).execute();
    assertNotNull(response);
    BareMetalServerInitialization responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PUT");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, replaceBareMetalServerInitializationPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the replaceBareMetalServerInitialization operation with and without retries enabled
  @Test
  public void testReplaceBareMetalServerInitializationWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testReplaceBareMetalServerInitializationWOptions();

    vpcService.disableRetries();
    testReplaceBareMetalServerInitializationWOptions();
  }

  // Test the replaceBareMetalServerInitialization operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testReplaceBareMetalServerInitializationNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.replaceBareMetalServerInitialization(null).execute();
  }

  // Test the restartBareMetalServer operation with a valid options model parameter
  @Test
  public void testRestartBareMetalServerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String restartBareMetalServerPath = "/bare_metal_servers/testString/restart";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the RestartBareMetalServerOptions model
    RestartBareMetalServerOptions restartBareMetalServerOptionsModel = new RestartBareMetalServerOptions.Builder()
      .id("testString")
      .build();

    // Invoke restartBareMetalServer() with a valid options model and verify the result
    Response<Void> response = vpcService.restartBareMetalServer(restartBareMetalServerOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, restartBareMetalServerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the restartBareMetalServer operation with and without retries enabled
  @Test
  public void testRestartBareMetalServerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testRestartBareMetalServerWOptions();

    vpcService.disableRetries();
    testRestartBareMetalServerWOptions();
  }

  // Test the restartBareMetalServer operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testRestartBareMetalServerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.restartBareMetalServer(null).execute();
  }

  // Test the startBareMetalServer operation with a valid options model parameter
  @Test
  public void testStartBareMetalServerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String startBareMetalServerPath = "/bare_metal_servers/testString/start";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the StartBareMetalServerOptions model
    StartBareMetalServerOptions startBareMetalServerOptionsModel = new StartBareMetalServerOptions.Builder()
      .id("testString")
      .build();

    // Invoke startBareMetalServer() with a valid options model and verify the result
    Response<Void> response = vpcService.startBareMetalServer(startBareMetalServerOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, startBareMetalServerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the startBareMetalServer operation with and without retries enabled
  @Test
  public void testStartBareMetalServerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testStartBareMetalServerWOptions();

    vpcService.disableRetries();
    testStartBareMetalServerWOptions();
  }

  // Test the startBareMetalServer operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testStartBareMetalServerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.startBareMetalServer(null).execute();
  }

  // Test the stopBareMetalServer operation with a valid options model parameter
  @Test
  public void testStopBareMetalServerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String stopBareMetalServerPath = "/bare_metal_servers/testString/stop";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the StopBareMetalServerOptions model
    StopBareMetalServerOptions stopBareMetalServerOptionsModel = new StopBareMetalServerOptions.Builder()
      .id("testString")
      .type("hard")
      .build();

    // Invoke stopBareMetalServer() with a valid options model and verify the result
    Response<Void> response = vpcService.stopBareMetalServer(stopBareMetalServerOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, stopBareMetalServerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the stopBareMetalServer operation with and without retries enabled
  @Test
  public void testStopBareMetalServerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testStopBareMetalServerWOptions();

    vpcService.disableRetries();
    testStopBareMetalServerWOptions();
  }

  // Test the stopBareMetalServer operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testStopBareMetalServerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.stopBareMetalServer(null).execute();
  }

  // Test the listVolumeProfiles operation with a valid options model parameter
  @Test
  public void testListVolumeProfilesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"profiles\": [{\"adjustable_capacity_states\": {\"type\": \"enum\", \"values\": [\"attached\"]}, \"adjustable_iops_states\": {\"type\": \"enum\", \"values\": [\"attached\"]}, \"bandwidth\": {\"type\": \"fixed\", \"value\": 4000}, \"boot_capacity\": {\"type\": \"fixed\", \"value\": 4800}, \"capacity\": {\"type\": \"fixed\", \"value\": 4800}, \"family\": \"tiered\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose\", \"iops\": {\"type\": \"fixed\", \"value\": 4000}, \"name\": \"general-purpose\", \"storage_generation\": {\"type\": \"fixed\", \"value\": 1}}], \"total_count\": 132}";
    String listVolumeProfilesPath = "/volume/profiles";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListVolumeProfilesOptions model
    ListVolumeProfilesOptions listVolumeProfilesOptionsModel = new ListVolumeProfilesOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listVolumeProfiles() with a valid options model and verify the result
    Response<VolumeProfileCollection> response = vpcService.listVolumeProfiles(listVolumeProfilesOptionsModel).execute();
    assertNotNull(response);
    VolumeProfileCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listVolumeProfilesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listVolumeProfiles operation with and without retries enabled
  @Test
  public void testListVolumeProfilesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListVolumeProfilesWOptions();

    vpcService.disableRetries();
    testListVolumeProfilesWOptions();
  }

  // Test the listVolumeProfiles operation using the VolumeProfilesPager.getNext() method
  @Test
  public void testListVolumeProfilesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"profiles\":[{\"adjustable_capacity_states\":{\"type\":\"enum\",\"values\":[\"attached\"]},\"adjustable_iops_states\":{\"type\":\"enum\",\"values\":[\"attached\"]},\"bandwidth\":{\"type\":\"fixed\",\"value\":4000},\"boot_capacity\":{\"type\":\"fixed\",\"value\":4800},\"capacity\":{\"type\":\"fixed\",\"value\":4800},\"family\":\"tiered\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose\",\"iops\":{\"type\":\"fixed\",\"value\":4000},\"name\":\"general-purpose\",\"storage_generation\":{\"type\":\"fixed\",\"value\":1}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"profiles\":[{\"adjustable_capacity_states\":{\"type\":\"enum\",\"values\":[\"attached\"]},\"adjustable_iops_states\":{\"type\":\"enum\",\"values\":[\"attached\"]},\"bandwidth\":{\"type\":\"fixed\",\"value\":4000},\"boot_capacity\":{\"type\":\"fixed\",\"value\":4800},\"capacity\":{\"type\":\"fixed\",\"value\":4800},\"family\":\"tiered\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose\",\"iops\":{\"type\":\"fixed\",\"value\":4000},\"name\":\"general-purpose\",\"storage_generation\":{\"type\":\"fixed\",\"value\":1}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVolumeProfilesOptions listVolumeProfilesOptions = new ListVolumeProfilesOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    List<VolumeProfile> allResults = new ArrayList<>();
    VolumeProfilesPager pager = new VolumeProfilesPager(vpcService, listVolumeProfilesOptions);
    while (pager.hasNext()) {
      List<VolumeProfile> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listVolumeProfiles operation using the VolumeProfilesPager.getAll() method
  @Test
  public void testListVolumeProfilesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"profiles\":[{\"adjustable_capacity_states\":{\"type\":\"enum\",\"values\":[\"attached\"]},\"adjustable_iops_states\":{\"type\":\"enum\",\"values\":[\"attached\"]},\"bandwidth\":{\"type\":\"fixed\",\"value\":4000},\"boot_capacity\":{\"type\":\"fixed\",\"value\":4800},\"capacity\":{\"type\":\"fixed\",\"value\":4800},\"family\":\"tiered\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose\",\"iops\":{\"type\":\"fixed\",\"value\":4000},\"name\":\"general-purpose\",\"storage_generation\":{\"type\":\"fixed\",\"value\":1}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"profiles\":[{\"adjustable_capacity_states\":{\"type\":\"enum\",\"values\":[\"attached\"]},\"adjustable_iops_states\":{\"type\":\"enum\",\"values\":[\"attached\"]},\"bandwidth\":{\"type\":\"fixed\",\"value\":4000},\"boot_capacity\":{\"type\":\"fixed\",\"value\":4800},\"capacity\":{\"type\":\"fixed\",\"value\":4800},\"family\":\"tiered\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose\",\"iops\":{\"type\":\"fixed\",\"value\":4000},\"name\":\"general-purpose\",\"storage_generation\":{\"type\":\"fixed\",\"value\":1}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVolumeProfilesOptions listVolumeProfilesOptions = new ListVolumeProfilesOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    VolumeProfilesPager pager = new VolumeProfilesPager(vpcService, listVolumeProfilesOptions);
    List<VolumeProfile> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the getVolumeProfile operation with a valid options model parameter
  @Test
  public void testGetVolumeProfileWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"adjustable_capacity_states\": {\"type\": \"enum\", \"values\": [\"attached\"]}, \"adjustable_iops_states\": {\"type\": \"enum\", \"values\": [\"attached\"]}, \"bandwidth\": {\"type\": \"fixed\", \"value\": 4000}, \"boot_capacity\": {\"type\": \"fixed\", \"value\": 4800}, \"capacity\": {\"type\": \"fixed\", \"value\": 4800}, \"family\": \"tiered\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose\", \"iops\": {\"type\": \"fixed\", \"value\": 4000}, \"name\": \"general-purpose\", \"storage_generation\": {\"type\": \"fixed\", \"value\": 1}}";
    String getVolumeProfilePath = "/volume/profiles/10iops-tier";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVolumeProfileOptions model
    GetVolumeProfileOptions getVolumeProfileOptionsModel = new GetVolumeProfileOptions.Builder()
      .name("10iops-tier")
      .build();

    // Invoke getVolumeProfile() with a valid options model and verify the result
    Response<VolumeProfile> response = vpcService.getVolumeProfile(getVolumeProfileOptionsModel).execute();
    assertNotNull(response);
    VolumeProfile responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVolumeProfilePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVolumeProfile operation with and without retries enabled
  @Test
  public void testGetVolumeProfileWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVolumeProfileWOptions();

    vpcService.disableRetries();
    testGetVolumeProfileWOptions();
  }

  // Test the getVolumeProfile operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVolumeProfileNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVolumeProfile(null).execute();
  }

  // Test the listVolumes operation with a valid options model parameter
  @Test
  public void testListVolumesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132, \"volumes\": [{\"active\": true, \"adjustable_capacity_states\": [\"attached\"], \"adjustable_iops_states\": [\"attached\"], \"attachment_state\": \"attached\", \"bandwidth\": 100, \"busy\": true, \"capacity\": 1000, \"catalog_offering\": {\"plan\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:51c9e0db-2911-45a6-adb0-ac5332d27cf2:plan:sw.51c9e0db-2911-45a6-adb0-ac5332d27cf2.772c0dbe-aa62-482e-adbe-a3fc20101e0e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}}, \"version\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"encryption\": \"provider_managed\", \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"health_reasons\": [{\"code\": \"initializing_from_snapshot\", \"message\": \"Performance will be degraded while this volume is being initialized from its snapshot\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-snapshots-vpc-troubleshooting&interface=ui#snapshot_ts_degraded_perf\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"iops\": 10000, \"name\": \"my-volume\", \"operating_system\": {\"allow_user_image_creation\": true, \"architecture\": \"amd64\", \"dedicated_host_only\": false, \"display_name\": \"Ubuntu Server 16.04 LTS amd64\", \"family\": \"Ubuntu Server\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-24-04-amd64\", \"name\": \"ubuntu-24-04-amd64\", \"user_data_format\": \"cloud_init\", \"vendor\": \"Canonical\", \"version\": \"16.04 LTS\"}, \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose\", \"name\": \"general-purpose\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"volume\", \"source_image\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"name\": \"my-image\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"image\"}, \"source_snapshot\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"id\": \"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"name\": \"my-snapshot\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"snapshot\"}, \"status\": \"available\", \"status_reasons\": [{\"code\": \"encryption_key_deleted\", \"message\": \"message\", \"more_info\": \"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}], \"storage_generation\": 1, \"user_tags\": [\"userTags\"], \"volume_attachments\": [{\"delete_volume_on_instance_delete\": true, \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"device\": {\"id\": \"id\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/volume_attachments/0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"id\": \"0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"instance\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"id\": \"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"name\": \"my-instance\"}, \"name\": \"my-volume-attachment\", \"type\": \"boot\"}], \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}]}";
    String listVolumesPath = "/volumes";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListVolumesOptions model
    ListVolumesOptions listVolumesOptionsModel = new ListVolumesOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .attachmentState("attached")
      .encryption("provider_managed")
      .name("my-name")
      .operatingSystemFamily("Ubuntu Server")
      .operatingSystemArchitecture("amd64")
      .tag("testString")
      .zoneName("us-south-1")
      .build();

    // Invoke listVolumes() with a valid options model and verify the result
    Response<VolumeCollection> response = vpcService.listVolumes(listVolumesOptionsModel).execute();
    assertNotNull(response);
    VolumeCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listVolumesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("attachment_state"), "attached");
    assertEquals(query.get("encryption"), "provider_managed");
    assertEquals(query.get("name"), "my-name");
    assertEquals(query.get("operating_system.family"), "Ubuntu Server");
    assertEquals(query.get("operating_system.architecture"), "amd64");
    assertEquals(query.get("tag"), "testString");
    assertEquals(query.get("zone.name"), "us-south-1");
  }

  // Test the listVolumes operation with and without retries enabled
  @Test
  public void testListVolumesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListVolumesWOptions();

    vpcService.disableRetries();
    testListVolumesWOptions();
  }

  // Test the listVolumes operation using the VolumesPager.getNext() method
  @Test
  public void testListVolumesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"volumes\":[{\"active\":true,\"adjustable_capacity_states\":[\"attached\"],\"adjustable_iops_states\":[\"attached\"],\"attachment_state\":\"attached\",\"bandwidth\":100,\"busy\":true,\"capacity\":1000,\"catalog_offering\":{\"plan\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:51c9e0db-2911-45a6-adb0-ac5332d27cf2:plan:sw.51c9e0db-2911-45a6-adb0-ac5332d27cf2.772c0dbe-aa62-482e-adbe-a3fc20101e0e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}},\"version\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"encryption\":\"provider_managed\",\"encryption_key\":{\"crn\":\"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"},\"health_reasons\":[{\"code\":\"initializing_from_snapshot\",\"message\":\"Performance will be degraded while this volume is being initialized from its snapshot\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-snapshots-vpc-troubleshooting&interface=ui#snapshot_ts_degraded_perf\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"iops\":10000,\"name\":\"my-volume\",\"operating_system\":{\"allow_user_image_creation\":true,\"architecture\":\"amd64\",\"dedicated_host_only\":false,\"display_name\":\"Ubuntu Server 16.04 LTS amd64\",\"family\":\"Ubuntu Server\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-24-04-amd64\",\"name\":\"ubuntu-24-04-amd64\",\"user_data_format\":\"cloud_init\",\"vendor\":\"Canonical\",\"version\":\"16.04 LTS\"},\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose\",\"name\":\"general-purpose\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"volume\",\"source_image\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"id\":\"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"name\":\"my-image\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"image\"},\"source_snapshot\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"name\":\"my-snapshot\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"snapshot\"},\"status\":\"available\",\"status_reasons\":[{\"code\":\"encryption_key_deleted\",\"message\":\"message\",\"more_info\":\"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}],\"storage_generation\":1,\"user_tags\":[\"userTags\"],\"volume_attachments\":[{\"delete_volume_on_instance_delete\":true,\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"device\":{\"id\":\"id\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/volume_attachments/0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"id\":\"0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"instance\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"id\":\"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"name\":\"my-instance\"},\"name\":\"my-volume-attachment\",\"type\":\"boot\"}],\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"volumes\":[{\"active\":true,\"adjustable_capacity_states\":[\"attached\"],\"adjustable_iops_states\":[\"attached\"],\"attachment_state\":\"attached\",\"bandwidth\":100,\"busy\":true,\"capacity\":1000,\"catalog_offering\":{\"plan\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:51c9e0db-2911-45a6-adb0-ac5332d27cf2:plan:sw.51c9e0db-2911-45a6-adb0-ac5332d27cf2.772c0dbe-aa62-482e-adbe-a3fc20101e0e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}},\"version\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"encryption\":\"provider_managed\",\"encryption_key\":{\"crn\":\"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"},\"health_reasons\":[{\"code\":\"initializing_from_snapshot\",\"message\":\"Performance will be degraded while this volume is being initialized from its snapshot\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-snapshots-vpc-troubleshooting&interface=ui#snapshot_ts_degraded_perf\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"iops\":10000,\"name\":\"my-volume\",\"operating_system\":{\"allow_user_image_creation\":true,\"architecture\":\"amd64\",\"dedicated_host_only\":false,\"display_name\":\"Ubuntu Server 16.04 LTS amd64\",\"family\":\"Ubuntu Server\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-24-04-amd64\",\"name\":\"ubuntu-24-04-amd64\",\"user_data_format\":\"cloud_init\",\"vendor\":\"Canonical\",\"version\":\"16.04 LTS\"},\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose\",\"name\":\"general-purpose\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"volume\",\"source_image\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"id\":\"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"name\":\"my-image\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"image\"},\"source_snapshot\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"name\":\"my-snapshot\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"snapshot\"},\"status\":\"available\",\"status_reasons\":[{\"code\":\"encryption_key_deleted\",\"message\":\"message\",\"more_info\":\"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}],\"storage_generation\":1,\"user_tags\":[\"userTags\"],\"volume_attachments\":[{\"delete_volume_on_instance_delete\":true,\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"device\":{\"id\":\"id\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/volume_attachments/0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"id\":\"0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"instance\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"id\":\"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"name\":\"my-instance\"},\"name\":\"my-volume-attachment\",\"type\":\"boot\"}],\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVolumesOptions listVolumesOptions = new ListVolumesOptions.Builder()
      .limit(Long.valueOf("10"))
      .attachmentState("attached")
      .encryption("provider_managed")
      .name("my-name")
      .operatingSystemFamily("Ubuntu Server")
      .operatingSystemArchitecture("amd64")
      .tag("testString")
      .zoneName("us-south-1")
      .build();

    List<Volume> allResults = new ArrayList<>();
    VolumesPager pager = new VolumesPager(vpcService, listVolumesOptions);
    while (pager.hasNext()) {
      List<Volume> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listVolumes operation using the VolumesPager.getAll() method
  @Test
  public void testListVolumesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"volumes\":[{\"active\":true,\"adjustable_capacity_states\":[\"attached\"],\"adjustable_iops_states\":[\"attached\"],\"attachment_state\":\"attached\",\"bandwidth\":100,\"busy\":true,\"capacity\":1000,\"catalog_offering\":{\"plan\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:51c9e0db-2911-45a6-adb0-ac5332d27cf2:plan:sw.51c9e0db-2911-45a6-adb0-ac5332d27cf2.772c0dbe-aa62-482e-adbe-a3fc20101e0e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}},\"version\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"encryption\":\"provider_managed\",\"encryption_key\":{\"crn\":\"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"},\"health_reasons\":[{\"code\":\"initializing_from_snapshot\",\"message\":\"Performance will be degraded while this volume is being initialized from its snapshot\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-snapshots-vpc-troubleshooting&interface=ui#snapshot_ts_degraded_perf\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"iops\":10000,\"name\":\"my-volume\",\"operating_system\":{\"allow_user_image_creation\":true,\"architecture\":\"amd64\",\"dedicated_host_only\":false,\"display_name\":\"Ubuntu Server 16.04 LTS amd64\",\"family\":\"Ubuntu Server\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-24-04-amd64\",\"name\":\"ubuntu-24-04-amd64\",\"user_data_format\":\"cloud_init\",\"vendor\":\"Canonical\",\"version\":\"16.04 LTS\"},\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose\",\"name\":\"general-purpose\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"volume\",\"source_image\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"id\":\"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"name\":\"my-image\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"image\"},\"source_snapshot\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"name\":\"my-snapshot\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"snapshot\"},\"status\":\"available\",\"status_reasons\":[{\"code\":\"encryption_key_deleted\",\"message\":\"message\",\"more_info\":\"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}],\"storage_generation\":1,\"user_tags\":[\"userTags\"],\"volume_attachments\":[{\"delete_volume_on_instance_delete\":true,\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"device\":{\"id\":\"id\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/volume_attachments/0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"id\":\"0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"instance\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"id\":\"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"name\":\"my-instance\"},\"name\":\"my-volume-attachment\",\"type\":\"boot\"}],\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"volumes\":[{\"active\":true,\"adjustable_capacity_states\":[\"attached\"],\"adjustable_iops_states\":[\"attached\"],\"attachment_state\":\"attached\",\"bandwidth\":100,\"busy\":true,\"capacity\":1000,\"catalog_offering\":{\"plan\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:51c9e0db-2911-45a6-adb0-ac5332d27cf2:plan:sw.51c9e0db-2911-45a6-adb0-ac5332d27cf2.772c0dbe-aa62-482e-adbe-a3fc20101e0e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}},\"version\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"encryption\":\"provider_managed\",\"encryption_key\":{\"crn\":\"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"},\"health_reasons\":[{\"code\":\"initializing_from_snapshot\",\"message\":\"Performance will be degraded while this volume is being initialized from its snapshot\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-snapshots-vpc-troubleshooting&interface=ui#snapshot_ts_degraded_perf\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"iops\":10000,\"name\":\"my-volume\",\"operating_system\":{\"allow_user_image_creation\":true,\"architecture\":\"amd64\",\"dedicated_host_only\":false,\"display_name\":\"Ubuntu Server 16.04 LTS amd64\",\"family\":\"Ubuntu Server\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-24-04-amd64\",\"name\":\"ubuntu-24-04-amd64\",\"user_data_format\":\"cloud_init\",\"vendor\":\"Canonical\",\"version\":\"16.04 LTS\"},\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose\",\"name\":\"general-purpose\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"volume\",\"source_image\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"id\":\"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"name\":\"my-image\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"image\"},\"source_snapshot\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"name\":\"my-snapshot\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"snapshot\"},\"status\":\"available\",\"status_reasons\":[{\"code\":\"encryption_key_deleted\",\"message\":\"message\",\"more_info\":\"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}],\"storage_generation\":1,\"user_tags\":[\"userTags\"],\"volume_attachments\":[{\"delete_volume_on_instance_delete\":true,\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"device\":{\"id\":\"id\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/volume_attachments/0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"id\":\"0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\",\"instance\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"id\":\"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\",\"name\":\"my-instance\"},\"name\":\"my-volume-attachment\",\"type\":\"boot\"}],\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVolumesOptions listVolumesOptions = new ListVolumesOptions.Builder()
      .limit(Long.valueOf("10"))
      .attachmentState("attached")
      .encryption("provider_managed")
      .name("my-name")
      .operatingSystemFamily("Ubuntu Server")
      .operatingSystemArchitecture("amd64")
      .tag("testString")
      .zoneName("us-south-1")
      .build();

    VolumesPager pager = new VolumesPager(vpcService, listVolumesOptions);
    List<Volume> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createVolume operation with a valid options model parameter
  @Test
  public void testCreateVolumeWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"active\": true, \"adjustable_capacity_states\": [\"attached\"], \"adjustable_iops_states\": [\"attached\"], \"attachment_state\": \"attached\", \"bandwidth\": 100, \"busy\": true, \"capacity\": 1000, \"catalog_offering\": {\"plan\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:51c9e0db-2911-45a6-adb0-ac5332d27cf2:plan:sw.51c9e0db-2911-45a6-adb0-ac5332d27cf2.772c0dbe-aa62-482e-adbe-a3fc20101e0e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}}, \"version\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"encryption\": \"provider_managed\", \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"health_reasons\": [{\"code\": \"initializing_from_snapshot\", \"message\": \"Performance will be degraded while this volume is being initialized from its snapshot\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-snapshots-vpc-troubleshooting&interface=ui#snapshot_ts_degraded_perf\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"iops\": 10000, \"name\": \"my-volume\", \"operating_system\": {\"allow_user_image_creation\": true, \"architecture\": \"amd64\", \"dedicated_host_only\": false, \"display_name\": \"Ubuntu Server 16.04 LTS amd64\", \"family\": \"Ubuntu Server\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-24-04-amd64\", \"name\": \"ubuntu-24-04-amd64\", \"user_data_format\": \"cloud_init\", \"vendor\": \"Canonical\", \"version\": \"16.04 LTS\"}, \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose\", \"name\": \"general-purpose\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"volume\", \"source_image\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"name\": \"my-image\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"image\"}, \"source_snapshot\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"id\": \"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"name\": \"my-snapshot\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"snapshot\"}, \"status\": \"available\", \"status_reasons\": [{\"code\": \"encryption_key_deleted\", \"message\": \"message\", \"more_info\": \"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}], \"storage_generation\": 1, \"user_tags\": [\"userTags\"], \"volume_attachments\": [{\"delete_volume_on_instance_delete\": true, \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"device\": {\"id\": \"id\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/volume_attachments/0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"id\": \"0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"instance\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"id\": \"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"name\": \"my-instance\"}, \"name\": \"my-volume-attachment\", \"type\": \"boot\"}], \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String createVolumePath = "/volumes";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the VolumeProfileIdentityByName model
    VolumeProfileIdentityByName volumeProfileIdentityModel = new VolumeProfileIdentityByName.Builder()
      .name("custom")
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the ZoneIdentityByName model
    ZoneIdentityByName zoneIdentityModel = new ZoneIdentityByName.Builder()
      .name("us-south-1")
      .build();

    // Construct an instance of the EncryptionKeyIdentityByCRN model
    EncryptionKeyIdentityByCRN encryptionKeyIdentityModel = new EncryptionKeyIdentityByCRN.Builder()
      .crn("crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")
      .build();

    // Construct an instance of the VolumePrototypeVolumeByCapacity model
    VolumePrototypeVolumeByCapacity volumePrototypeModel = new VolumePrototypeVolumeByCapacity.Builder()
      .bandwidth(Long.valueOf("1000"))
      .iops(Long.valueOf("10000"))
      .name("my-volume")
      .profile(volumeProfileIdentityModel)
      .resourceGroup(resourceGroupIdentityModel)
      .userTags(java.util.Arrays.asList())
      .zone(zoneIdentityModel)
      .capacity(Long.valueOf("100"))
      .encryptionKey(encryptionKeyIdentityModel)
      .build();

    // Construct an instance of the CreateVolumeOptions model
    CreateVolumeOptions createVolumeOptionsModel = new CreateVolumeOptions.Builder()
      .volumePrototype(volumePrototypeModel)
      .build();

    // Invoke createVolume() with a valid options model and verify the result
    Response<Volume> response = vpcService.createVolume(createVolumeOptionsModel).execute();
    assertNotNull(response);
    Volume responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createVolumePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createVolume operation with and without retries enabled
  @Test
  public void testCreateVolumeWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateVolumeWOptions();

    vpcService.disableRetries();
    testCreateVolumeWOptions();
  }

  // Test the createVolume operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateVolumeNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createVolume(null).execute();
  }

  // Test the deleteVolume operation with a valid options model parameter
  @Test
  public void testDeleteVolumeWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteVolumePath = "/volumes/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteVolumeOptions model
    DeleteVolumeOptions deleteVolumeOptionsModel = new DeleteVolumeOptions.Builder()
      .id("testString")
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke deleteVolume() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteVolume(deleteVolumeOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteVolumePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteVolume operation with and without retries enabled
  @Test
  public void testDeleteVolumeWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteVolumeWOptions();

    vpcService.disableRetries();
    testDeleteVolumeWOptions();
  }

  // Test the deleteVolume operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteVolumeNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteVolume(null).execute();
  }

  // Test the getVolume operation with a valid options model parameter
  @Test
  public void testGetVolumeWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"active\": true, \"adjustable_capacity_states\": [\"attached\"], \"adjustable_iops_states\": [\"attached\"], \"attachment_state\": \"attached\", \"bandwidth\": 100, \"busy\": true, \"capacity\": 1000, \"catalog_offering\": {\"plan\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:51c9e0db-2911-45a6-adb0-ac5332d27cf2:plan:sw.51c9e0db-2911-45a6-adb0-ac5332d27cf2.772c0dbe-aa62-482e-adbe-a3fc20101e0e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}}, \"version\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"encryption\": \"provider_managed\", \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"health_reasons\": [{\"code\": \"initializing_from_snapshot\", \"message\": \"Performance will be degraded while this volume is being initialized from its snapshot\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-snapshots-vpc-troubleshooting&interface=ui#snapshot_ts_degraded_perf\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"iops\": 10000, \"name\": \"my-volume\", \"operating_system\": {\"allow_user_image_creation\": true, \"architecture\": \"amd64\", \"dedicated_host_only\": false, \"display_name\": \"Ubuntu Server 16.04 LTS amd64\", \"family\": \"Ubuntu Server\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-24-04-amd64\", \"name\": \"ubuntu-24-04-amd64\", \"user_data_format\": \"cloud_init\", \"vendor\": \"Canonical\", \"version\": \"16.04 LTS\"}, \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose\", \"name\": \"general-purpose\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"volume\", \"source_image\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"name\": \"my-image\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"image\"}, \"source_snapshot\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"id\": \"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"name\": \"my-snapshot\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"snapshot\"}, \"status\": \"available\", \"status_reasons\": [{\"code\": \"encryption_key_deleted\", \"message\": \"message\", \"more_info\": \"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}], \"storage_generation\": 1, \"user_tags\": [\"userTags\"], \"volume_attachments\": [{\"delete_volume_on_instance_delete\": true, \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"device\": {\"id\": \"id\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/volume_attachments/0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"id\": \"0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"instance\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"id\": \"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"name\": \"my-instance\"}, \"name\": \"my-volume-attachment\", \"type\": \"boot\"}], \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getVolumePath = "/volumes/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVolumeOptions model
    GetVolumeOptions getVolumeOptionsModel = new GetVolumeOptions.Builder()
      .id("testString")
      .build();

    // Invoke getVolume() with a valid options model and verify the result
    Response<Volume> response = vpcService.getVolume(getVolumeOptionsModel).execute();
    assertNotNull(response);
    Volume responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVolumePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVolume operation with and without retries enabled
  @Test
  public void testGetVolumeWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVolumeWOptions();

    vpcService.disableRetries();
    testGetVolumeWOptions();
  }

  // Test the getVolume operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVolumeNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVolume(null).execute();
  }

  // Test the updateVolume operation with a valid options model parameter
  @Test
  public void testUpdateVolumeWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"active\": true, \"adjustable_capacity_states\": [\"attached\"], \"adjustable_iops_states\": [\"attached\"], \"attachment_state\": \"attached\", \"bandwidth\": 100, \"busy\": true, \"capacity\": 1000, \"catalog_offering\": {\"plan\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:51c9e0db-2911-45a6-adb0-ac5332d27cf2:plan:sw.51c9e0db-2911-45a6-adb0-ac5332d27cf2.772c0dbe-aa62-482e-adbe-a3fc20101e0e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}}, \"version\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"encryption\": \"provider_managed\", \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"health_reasons\": [{\"code\": \"initializing_from_snapshot\", \"message\": \"Performance will be degraded while this volume is being initialized from its snapshot\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-snapshots-vpc-troubleshooting&interface=ui#snapshot_ts_degraded_perf\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"iops\": 10000, \"name\": \"my-volume\", \"operating_system\": {\"allow_user_image_creation\": true, \"architecture\": \"amd64\", \"dedicated_host_only\": false, \"display_name\": \"Ubuntu Server 16.04 LTS amd64\", \"family\": \"Ubuntu Server\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-24-04-amd64\", \"name\": \"ubuntu-24-04-amd64\", \"user_data_format\": \"cloud_init\", \"vendor\": \"Canonical\", \"version\": \"16.04 LTS\"}, \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose\", \"name\": \"general-purpose\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"volume\", \"source_image\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"name\": \"my-image\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"image\"}, \"source_snapshot\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"id\": \"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"name\": \"my-snapshot\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"snapshot\"}, \"status\": \"available\", \"status_reasons\": [{\"code\": \"encryption_key_deleted\", \"message\": \"message\", \"more_info\": \"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}], \"storage_generation\": 1, \"user_tags\": [\"userTags\"], \"volume_attachments\": [{\"delete_volume_on_instance_delete\": true, \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"device\": {\"id\": \"id\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/volume_attachments/0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"id\": \"0717-82cbf856-9cbb-45fb-b62f-d7bcef32399a\", \"instance\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"id\": \"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"name\": \"my-instance\"}, \"name\": \"my-volume-attachment\", \"type\": \"boot\"}], \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String updateVolumePath = "/volumes/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the VolumeProfileIdentityByName model
    VolumeProfileIdentityByName volumeProfileIdentityModel = new VolumeProfileIdentityByName.Builder()
      .name("general-purpose")
      .build();

    // Construct an instance of the VolumePatch model
    VolumePatch volumePatchModel = new VolumePatch.Builder()
      .bandwidth(Long.valueOf("1000"))
      .capacity(Long.valueOf("100"))
      .iops(Long.valueOf("10000"))
      .name("my-volume")
      .profile(volumeProfileIdentityModel)
      .userTags(java.util.Arrays.asList("testString"))
      .build();
    Map<String, Object> volumePatchModelAsPatch = volumePatchModel.asPatch();

    // Construct an instance of the UpdateVolumeOptions model
    UpdateVolumeOptions updateVolumeOptionsModel = new UpdateVolumeOptions.Builder()
      .id("testString")
      .volumePatch(volumePatchModelAsPatch)
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke updateVolume() with a valid options model and verify the result
    Response<Volume> response = vpcService.updateVolume(updateVolumeOptionsModel).execute();
    assertNotNull(response);
    Volume responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateVolumePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateVolume operation with and without retries enabled
  @Test
  public void testUpdateVolumeWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateVolumeWOptions();

    vpcService.disableRetries();
    testUpdateVolumeWOptions();
  }

  // Test the updateVolume operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateVolumeNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateVolume(null).execute();
  }

  // Test the listSnapshotConsistencyGroups operation with a valid options model parameter
  @Test
  public void testListSnapshotConsistencyGroupsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"snapshot_consistency_groups\": [{\"backup_policy_plan\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"name\": \"my-policy-plan\", \"remote\": {\"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"backup_policy_plan\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot-consistency-group:r006-fa329f6b-0e36-433f-a3bb-0df632e79263\", \"delete_snapshots_on_delete\": false, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshot_consistency_groups/r006-fa329f6b-0e36-433f-a3bb-0df632e79263\", \"id\": \"r006-fa329f6b-0e36-433f-a3bb-0df632e79263\", \"lifecycle_state\": \"stable\", \"name\": \"my-snapshot-consistency-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"snapshot_consistency_group\", \"service_tags\": [\"serviceTags\"], \"snapshots\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"id\": \"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"name\": \"my-snapshot\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"snapshot\"}]}], \"total_count\": 132}";
    String listSnapshotConsistencyGroupsPath = "/snapshot_consistency_groups";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListSnapshotConsistencyGroupsOptions model
    ListSnapshotConsistencyGroupsOptions listSnapshotConsistencyGroupsOptionsModel = new ListSnapshotConsistencyGroupsOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("my-name")
      .sort("name")
      .backupPolicyPlanId("testString")
      .build();

    // Invoke listSnapshotConsistencyGroups() with a valid options model and verify the result
    Response<SnapshotConsistencyGroupCollection> response = vpcService.listSnapshotConsistencyGroups(listSnapshotConsistencyGroupsOptionsModel).execute();
    assertNotNull(response);
    SnapshotConsistencyGroupCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listSnapshotConsistencyGroupsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
    assertEquals(query.get("name"), "my-name");
    assertEquals(query.get("sort"), "name");
    assertEquals(query.get("backup_policy_plan.id"), "testString");
  }

  // Test the listSnapshotConsistencyGroups operation with and without retries enabled
  @Test
  public void testListSnapshotConsistencyGroupsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListSnapshotConsistencyGroupsWOptions();

    vpcService.disableRetries();
    testListSnapshotConsistencyGroupsWOptions();
  }

  // Test the listSnapshotConsistencyGroups operation using the SnapshotConsistencyGroupsPager.getNext() method
  @Test
  public void testListSnapshotConsistencyGroupsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"snapshot_consistency_groups\":[{\"backup_policy_plan\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"id\":\"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"name\":\"my-policy-plan\",\"remote\":{\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"backup_policy_plan\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot-consistency-group:r006-fa329f6b-0e36-433f-a3bb-0df632e79263\",\"delete_snapshots_on_delete\":false,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshot_consistency_groups/r006-fa329f6b-0e36-433f-a3bb-0df632e79263\",\"id\":\"r006-fa329f6b-0e36-433f-a3bb-0df632e79263\",\"lifecycle_state\":\"stable\",\"name\":\"my-snapshot-consistency-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"snapshot_consistency_group\",\"service_tags\":[\"serviceTags\"],\"snapshots\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"name\":\"my-snapshot\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"snapshot\"}]}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"snapshot_consistency_groups\":[{\"backup_policy_plan\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"id\":\"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"name\":\"my-policy-plan\",\"remote\":{\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"backup_policy_plan\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot-consistency-group:r006-fa329f6b-0e36-433f-a3bb-0df632e79263\",\"delete_snapshots_on_delete\":false,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshot_consistency_groups/r006-fa329f6b-0e36-433f-a3bb-0df632e79263\",\"id\":\"r006-fa329f6b-0e36-433f-a3bb-0df632e79263\",\"lifecycle_state\":\"stable\",\"name\":\"my-snapshot-consistency-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"snapshot_consistency_group\",\"service_tags\":[\"serviceTags\"],\"snapshots\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"name\":\"my-snapshot\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"snapshot\"}]}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListSnapshotConsistencyGroupsOptions listSnapshotConsistencyGroupsOptions = new ListSnapshotConsistencyGroupsOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("my-name")
      .sort("name")
      .backupPolicyPlanId("testString")
      .build();

    List<SnapshotConsistencyGroup> allResults = new ArrayList<>();
    SnapshotConsistencyGroupsPager pager = new SnapshotConsistencyGroupsPager(vpcService, listSnapshotConsistencyGroupsOptions);
    while (pager.hasNext()) {
      List<SnapshotConsistencyGroup> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listSnapshotConsistencyGroups operation using the SnapshotConsistencyGroupsPager.getAll() method
  @Test
  public void testListSnapshotConsistencyGroupsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"snapshot_consistency_groups\":[{\"backup_policy_plan\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"id\":\"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"name\":\"my-policy-plan\",\"remote\":{\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"backup_policy_plan\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot-consistency-group:r006-fa329f6b-0e36-433f-a3bb-0df632e79263\",\"delete_snapshots_on_delete\":false,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshot_consistency_groups/r006-fa329f6b-0e36-433f-a3bb-0df632e79263\",\"id\":\"r006-fa329f6b-0e36-433f-a3bb-0df632e79263\",\"lifecycle_state\":\"stable\",\"name\":\"my-snapshot-consistency-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"snapshot_consistency_group\",\"service_tags\":[\"serviceTags\"],\"snapshots\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"name\":\"my-snapshot\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"snapshot\"}]}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"snapshot_consistency_groups\":[{\"backup_policy_plan\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"id\":\"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"name\":\"my-policy-plan\",\"remote\":{\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"backup_policy_plan\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot-consistency-group:r006-fa329f6b-0e36-433f-a3bb-0df632e79263\",\"delete_snapshots_on_delete\":false,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshot_consistency_groups/r006-fa329f6b-0e36-433f-a3bb-0df632e79263\",\"id\":\"r006-fa329f6b-0e36-433f-a3bb-0df632e79263\",\"lifecycle_state\":\"stable\",\"name\":\"my-snapshot-consistency-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"snapshot_consistency_group\",\"service_tags\":[\"serviceTags\"],\"snapshots\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"name\":\"my-snapshot\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"snapshot\"}]}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListSnapshotConsistencyGroupsOptions listSnapshotConsistencyGroupsOptions = new ListSnapshotConsistencyGroupsOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("my-name")
      .sort("name")
      .backupPolicyPlanId("testString")
      .build();

    SnapshotConsistencyGroupsPager pager = new SnapshotConsistencyGroupsPager(vpcService, listSnapshotConsistencyGroupsOptions);
    List<SnapshotConsistencyGroup> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createSnapshotConsistencyGroup operation with a valid options model parameter
  @Test
  public void testCreateSnapshotConsistencyGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"backup_policy_plan\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"name\": \"my-policy-plan\", \"remote\": {\"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"backup_policy_plan\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot-consistency-group:r006-fa329f6b-0e36-433f-a3bb-0df632e79263\", \"delete_snapshots_on_delete\": false, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshot_consistency_groups/r006-fa329f6b-0e36-433f-a3bb-0df632e79263\", \"id\": \"r006-fa329f6b-0e36-433f-a3bb-0df632e79263\", \"lifecycle_state\": \"stable\", \"name\": \"my-snapshot-consistency-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"snapshot_consistency_group\", \"service_tags\": [\"serviceTags\"], \"snapshots\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"id\": \"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"name\": \"my-snapshot\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"snapshot\"}]}";
    String createSnapshotConsistencyGroupPath = "/snapshot_consistency_groups";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the VolumeIdentityById model
    VolumeIdentityById volumeIdentityModel = new VolumeIdentityById.Builder()
      .id("r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5")
      .build();

    // Construct an instance of the SnapshotPrototypeSnapshotConsistencyGroupContext model
    SnapshotPrototypeSnapshotConsistencyGroupContext snapshotPrototypeSnapshotConsistencyGroupContextModel = new SnapshotPrototypeSnapshotConsistencyGroupContext.Builder()
      .name("my-snapshot")
      .sourceVolume(volumeIdentityModel)
      .userTags(java.util.Arrays.asList("testString"))
      .build();

    // Construct an instance of the SnapshotConsistencyGroupPrototypeSnapshotConsistencyGroupBySnapshots model
    SnapshotConsistencyGroupPrototypeSnapshotConsistencyGroupBySnapshots snapshotConsistencyGroupPrototypeModel = new SnapshotConsistencyGroupPrototypeSnapshotConsistencyGroupBySnapshots.Builder()
      .deleteSnapshotsOnDelete(true)
      .name("my-snapshot-consistency-group")
      .resourceGroup(resourceGroupIdentityModel)
      .snapshots(java.util.Arrays.asList(snapshotPrototypeSnapshotConsistencyGroupContextModel))
      .build();

    // Construct an instance of the CreateSnapshotConsistencyGroupOptions model
    CreateSnapshotConsistencyGroupOptions createSnapshotConsistencyGroupOptionsModel = new CreateSnapshotConsistencyGroupOptions.Builder()
      .snapshotConsistencyGroupPrototype(snapshotConsistencyGroupPrototypeModel)
      .build();

    // Invoke createSnapshotConsistencyGroup() with a valid options model and verify the result
    Response<SnapshotConsistencyGroup> response = vpcService.createSnapshotConsistencyGroup(createSnapshotConsistencyGroupOptionsModel).execute();
    assertNotNull(response);
    SnapshotConsistencyGroup responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createSnapshotConsistencyGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createSnapshotConsistencyGroup operation with and without retries enabled
  @Test
  public void testCreateSnapshotConsistencyGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateSnapshotConsistencyGroupWOptions();

    vpcService.disableRetries();
    testCreateSnapshotConsistencyGroupWOptions();
  }

  // Test the createSnapshotConsistencyGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateSnapshotConsistencyGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createSnapshotConsistencyGroup(null).execute();
  }

  // Test the deleteSnapshotConsistencyGroup operation with a valid options model parameter
  @Test
  public void testDeleteSnapshotConsistencyGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"backup_policy_plan\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"name\": \"my-policy-plan\", \"remote\": {\"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"backup_policy_plan\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot-consistency-group:r006-fa329f6b-0e36-433f-a3bb-0df632e79263\", \"delete_snapshots_on_delete\": false, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshot_consistency_groups/r006-fa329f6b-0e36-433f-a3bb-0df632e79263\", \"id\": \"r006-fa329f6b-0e36-433f-a3bb-0df632e79263\", \"lifecycle_state\": \"stable\", \"name\": \"my-snapshot-consistency-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"snapshot_consistency_group\", \"service_tags\": [\"serviceTags\"], \"snapshots\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"id\": \"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"name\": \"my-snapshot\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"snapshot\"}]}";
    String deleteSnapshotConsistencyGroupPath = "/snapshot_consistency_groups/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteSnapshotConsistencyGroupOptions model
    DeleteSnapshotConsistencyGroupOptions deleteSnapshotConsistencyGroupOptionsModel = new DeleteSnapshotConsistencyGroupOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteSnapshotConsistencyGroup() with a valid options model and verify the result
    Response<SnapshotConsistencyGroup> response = vpcService.deleteSnapshotConsistencyGroup(deleteSnapshotConsistencyGroupOptionsModel).execute();
    assertNotNull(response);
    SnapshotConsistencyGroup responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteSnapshotConsistencyGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteSnapshotConsistencyGroup operation with and without retries enabled
  @Test
  public void testDeleteSnapshotConsistencyGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteSnapshotConsistencyGroupWOptions();

    vpcService.disableRetries();
    testDeleteSnapshotConsistencyGroupWOptions();
  }

  // Test the deleteSnapshotConsistencyGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteSnapshotConsistencyGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteSnapshotConsistencyGroup(null).execute();
  }

  // Test the getSnapshotConsistencyGroup operation with a valid options model parameter
  @Test
  public void testGetSnapshotConsistencyGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"backup_policy_plan\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"name\": \"my-policy-plan\", \"remote\": {\"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"backup_policy_plan\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot-consistency-group:r006-fa329f6b-0e36-433f-a3bb-0df632e79263\", \"delete_snapshots_on_delete\": false, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshot_consistency_groups/r006-fa329f6b-0e36-433f-a3bb-0df632e79263\", \"id\": \"r006-fa329f6b-0e36-433f-a3bb-0df632e79263\", \"lifecycle_state\": \"stable\", \"name\": \"my-snapshot-consistency-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"snapshot_consistency_group\", \"service_tags\": [\"serviceTags\"], \"snapshots\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"id\": \"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"name\": \"my-snapshot\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"snapshot\"}]}";
    String getSnapshotConsistencyGroupPath = "/snapshot_consistency_groups/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetSnapshotConsistencyGroupOptions model
    GetSnapshotConsistencyGroupOptions getSnapshotConsistencyGroupOptionsModel = new GetSnapshotConsistencyGroupOptions.Builder()
      .id("testString")
      .build();

    // Invoke getSnapshotConsistencyGroup() with a valid options model and verify the result
    Response<SnapshotConsistencyGroup> response = vpcService.getSnapshotConsistencyGroup(getSnapshotConsistencyGroupOptionsModel).execute();
    assertNotNull(response);
    SnapshotConsistencyGroup responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getSnapshotConsistencyGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getSnapshotConsistencyGroup operation with and without retries enabled
  @Test
  public void testGetSnapshotConsistencyGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetSnapshotConsistencyGroupWOptions();

    vpcService.disableRetries();
    testGetSnapshotConsistencyGroupWOptions();
  }

  // Test the getSnapshotConsistencyGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetSnapshotConsistencyGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getSnapshotConsistencyGroup(null).execute();
  }

  // Test the updateSnapshotConsistencyGroup operation with a valid options model parameter
  @Test
  public void testUpdateSnapshotConsistencyGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"backup_policy_plan\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"name\": \"my-policy-plan\", \"remote\": {\"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"backup_policy_plan\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot-consistency-group:r006-fa329f6b-0e36-433f-a3bb-0df632e79263\", \"delete_snapshots_on_delete\": false, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshot_consistency_groups/r006-fa329f6b-0e36-433f-a3bb-0df632e79263\", \"id\": \"r006-fa329f6b-0e36-433f-a3bb-0df632e79263\", \"lifecycle_state\": \"stable\", \"name\": \"my-snapshot-consistency-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"snapshot_consistency_group\", \"service_tags\": [\"serviceTags\"], \"snapshots\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"id\": \"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"name\": \"my-snapshot\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"snapshot\"}]}";
    String updateSnapshotConsistencyGroupPath = "/snapshot_consistency_groups/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the SnapshotConsistencyGroupPatch model
    SnapshotConsistencyGroupPatch snapshotConsistencyGroupPatchModel = new SnapshotConsistencyGroupPatch.Builder()
      .deleteSnapshotsOnDelete(false)
      .name("my-snapshot-consistency-group")
      .build();
    Map<String, Object> snapshotConsistencyGroupPatchModelAsPatch = snapshotConsistencyGroupPatchModel.asPatch();

    // Construct an instance of the UpdateSnapshotConsistencyGroupOptions model
    UpdateSnapshotConsistencyGroupOptions updateSnapshotConsistencyGroupOptionsModel = new UpdateSnapshotConsistencyGroupOptions.Builder()
      .id("testString")
      .snapshotConsistencyGroupPatch(snapshotConsistencyGroupPatchModelAsPatch)
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke updateSnapshotConsistencyGroup() with a valid options model and verify the result
    Response<SnapshotConsistencyGroup> response = vpcService.updateSnapshotConsistencyGroup(updateSnapshotConsistencyGroupOptionsModel).execute();
    assertNotNull(response);
    SnapshotConsistencyGroup responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateSnapshotConsistencyGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateSnapshotConsistencyGroup operation with and without retries enabled
  @Test
  public void testUpdateSnapshotConsistencyGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateSnapshotConsistencyGroupWOptions();

    vpcService.disableRetries();
    testUpdateSnapshotConsistencyGroupWOptions();
  }

  // Test the updateSnapshotConsistencyGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateSnapshotConsistencyGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateSnapshotConsistencyGroup(null).execute();
  }

  // Test the deleteSnapshots operation with a valid options model parameter
  @Test
  public void testDeleteSnapshotsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteSnapshotsPath = "/snapshots";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteSnapshotsOptions model
    DeleteSnapshotsOptions deleteSnapshotsOptionsModel = new DeleteSnapshotsOptions.Builder()
      .sourceVolumeId("testString")
      .build();

    // Invoke deleteSnapshots() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteSnapshots(deleteSnapshotsOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteSnapshotsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("source_volume.id"), "testString");
  }

  // Test the deleteSnapshots operation with and without retries enabled
  @Test
  public void testDeleteSnapshotsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteSnapshotsWOptions();

    vpcService.disableRetries();
    testDeleteSnapshotsWOptions();
  }

  // Test the deleteSnapshots operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteSnapshotsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteSnapshots(null).execute();
  }

  // Test the listSnapshots operation with a valid options model parameter
  @Test
  public void testListSnapshotsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"snapshots\": [{\"backup_policy_plan\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"name\": \"my-policy-plan\", \"remote\": {\"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"backup_policy_plan\"}, \"bootable\": true, \"captured_at\": \"2019-01-01T12:00:00.000Z\", \"catalog_offering\": {\"plan\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:51c9e0db-2911-45a6-adb0-ac5332d27cf2:plan:sw.51c9e0db-2911-45a6-adb0-ac5332d27cf2.772c0dbe-aa62-482e-adbe-a3fc20101e0e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}}, \"version\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}}, \"clones\": [{\"available\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"copies\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"id\": \"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"name\": \"my-snapshot\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"snapshot\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"deletable\": false, \"encryption\": \"provider_managed\", \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"id\": \"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"lifecycle_state\": \"stable\", \"minimum_capacity\": 1, \"name\": \"my-snapshot\", \"operating_system\": {\"allow_user_image_creation\": true, \"architecture\": \"amd64\", \"dedicated_host_only\": false, \"display_name\": \"Ubuntu Server 16.04 LTS amd64\", \"family\": \"Ubuntu Server\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-24-04-amd64\", \"name\": \"ubuntu-24-04-amd64\", \"user_data_format\": \"cloud_init\", \"vendor\": \"Canonical\", \"version\": \"16.04 LTS\"}, \"progress\": 55, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"snapshot\", \"service_tags\": [\"serviceTags\"], \"size\": 1, \"snapshot_consistency_group\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot-consistency-group:r006-fa329f6b-0e36-433f-a3bb-0df632e79263\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshot_consistency_groups/r006-fa329f6b-0e36-433f-a3bb-0df632e79263\", \"id\": \"r006-fa329f6b-0e36-433f-a3bb-0df632e79263\", \"name\": \"my-snapshot-consistency-group\", \"resource_type\": \"snapshot_consistency_group\"}, \"source_image\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"name\": \"my-image\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"image\"}, \"source_snapshot\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"id\": \"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"name\": \"my-snapshot\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"snapshot\"}, \"source_volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\", \"remote\": {\"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"volume\"}, \"storage_generation\": 1, \"user_tags\": [\"userTags\"]}], \"total_count\": 132}";
    String listSnapshotsPath = "/snapshots";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListSnapshotsOptions model
    ListSnapshotsOptions listSnapshotsOptionsModel = new ListSnapshotsOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .tag("testString")
      .resourceGroupId("testString")
      .name("my-name")
      .sourceVolumeId("testString")
      .sourceVolumeCrn("crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5")
      .sourceImageId("testString")
      .sourceImageCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8")
      .sort("name")
      .backupPolicyPlanId("testString")
      .copiesId("testString")
      .copiesName("my-snapshot-copy")
      .copiesCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263")
      .copiesRemoteRegionName("us-south")
      .sourceSnapshotId("testString")
      .sourceSnapshotRemoteRegionName("us-south")
      .sourceVolumeRemoteRegionName("us-east")
      .sourceImageRemoteRegionName("us-south")
      .clonesZoneName("us-south-1")
      .snapshotConsistencyGroupId("testString")
      .snapshotConsistencyGroupCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot-consistency-group:r006-fa329f6b-0e36-433f-a3bb-0df632e79263")
      .build();

    // Invoke listSnapshots() with a valid options model and verify the result
    Response<SnapshotCollection> response = vpcService.listSnapshots(listSnapshotsOptionsModel).execute();
    assertNotNull(response);
    SnapshotCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listSnapshotsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("tag"), "testString");
    assertEquals(query.get("resource_group.id"), "testString");
    assertEquals(query.get("name"), "my-name");
    assertEquals(query.get("source_volume.id"), "testString");
    assertEquals(query.get("source_volume.crn"), "crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5");
    assertEquals(query.get("source_image.id"), "testString");
    assertEquals(query.get("source_image.crn"), "crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8");
    assertEquals(query.get("sort"), "name");
    assertEquals(query.get("backup_policy_plan.id"), "testString");
    assertEquals(query.get("copies[].id"), "testString");
    assertEquals(query.get("copies[].name"), "my-snapshot-copy");
    assertEquals(query.get("copies[].crn"), "crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263");
    assertEquals(query.get("copies[].remote.region.name"), "us-south");
    assertEquals(query.get("source_snapshot.id"), "testString");
    assertEquals(query.get("source_snapshot.remote.region.name"), "us-south");
    assertEquals(query.get("source_volume.remote.region.name"), "us-east");
    assertEquals(query.get("source_image.remote.region.name"), "us-south");
    assertEquals(query.get("clones[].zone.name"), "us-south-1");
    assertEquals(query.get("snapshot_consistency_group.id"), "testString");
    assertEquals(query.get("snapshot_consistency_group.crn"), "crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot-consistency-group:r006-fa329f6b-0e36-433f-a3bb-0df632e79263");
  }

  // Test the listSnapshots operation with and without retries enabled
  @Test
  public void testListSnapshotsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListSnapshotsWOptions();

    vpcService.disableRetries();
    testListSnapshotsWOptions();
  }

  // Test the listSnapshots operation using the SnapshotsPager.getNext() method
  @Test
  public void testListSnapshotsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"snapshots\":[{\"backup_policy_plan\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"id\":\"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"name\":\"my-policy-plan\",\"remote\":{\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"backup_policy_plan\"},\"bootable\":true,\"captured_at\":\"2019-01-01T12:00:00.000Z\",\"catalog_offering\":{\"plan\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:51c9e0db-2911-45a6-adb0-ac5332d27cf2:plan:sw.51c9e0db-2911-45a6-adb0-ac5332d27cf2.772c0dbe-aa62-482e-adbe-a3fc20101e0e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}},\"version\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}},\"clones\":[{\"available\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"copies\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"name\":\"my-snapshot\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"snapshot\"}],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deletable\":false,\"encryption\":\"provider_managed\",\"encryption_key\":{\"crn\":\"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"lifecycle_state\":\"stable\",\"minimum_capacity\":1,\"name\":\"my-snapshot\",\"operating_system\":{\"allow_user_image_creation\":true,\"architecture\":\"amd64\",\"dedicated_host_only\":false,\"display_name\":\"Ubuntu Server 16.04 LTS amd64\",\"family\":\"Ubuntu Server\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-24-04-amd64\",\"name\":\"ubuntu-24-04-amd64\",\"user_data_format\":\"cloud_init\",\"vendor\":\"Canonical\",\"version\":\"16.04 LTS\"},\"progress\":55,\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"snapshot\",\"service_tags\":[\"serviceTags\"],\"size\":1,\"snapshot_consistency_group\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot-consistency-group:r006-fa329f6b-0e36-433f-a3bb-0df632e79263\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshot_consistency_groups/r006-fa329f6b-0e36-433f-a3bb-0df632e79263\",\"id\":\"r006-fa329f6b-0e36-433f-a3bb-0df632e79263\",\"name\":\"my-snapshot-consistency-group\",\"resource_type\":\"snapshot_consistency_group\"},\"source_image\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"id\":\"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"name\":\"my-image\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"image\"},\"source_snapshot\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"name\":\"my-snapshot\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"snapshot\"},\"source_volume\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\",\"remote\":{\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"volume\"},\"storage_generation\":1,\"user_tags\":[\"userTags\"]}],\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"snapshots\":[{\"backup_policy_plan\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"id\":\"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"name\":\"my-policy-plan\",\"remote\":{\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"backup_policy_plan\"},\"bootable\":true,\"captured_at\":\"2019-01-01T12:00:00.000Z\",\"catalog_offering\":{\"plan\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:51c9e0db-2911-45a6-adb0-ac5332d27cf2:plan:sw.51c9e0db-2911-45a6-adb0-ac5332d27cf2.772c0dbe-aa62-482e-adbe-a3fc20101e0e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}},\"version\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}},\"clones\":[{\"available\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"copies\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"name\":\"my-snapshot\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"snapshot\"}],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deletable\":false,\"encryption\":\"provider_managed\",\"encryption_key\":{\"crn\":\"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"lifecycle_state\":\"stable\",\"minimum_capacity\":1,\"name\":\"my-snapshot\",\"operating_system\":{\"allow_user_image_creation\":true,\"architecture\":\"amd64\",\"dedicated_host_only\":false,\"display_name\":\"Ubuntu Server 16.04 LTS amd64\",\"family\":\"Ubuntu Server\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-24-04-amd64\",\"name\":\"ubuntu-24-04-amd64\",\"user_data_format\":\"cloud_init\",\"vendor\":\"Canonical\",\"version\":\"16.04 LTS\"},\"progress\":55,\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"snapshot\",\"service_tags\":[\"serviceTags\"],\"size\":1,\"snapshot_consistency_group\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot-consistency-group:r006-fa329f6b-0e36-433f-a3bb-0df632e79263\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshot_consistency_groups/r006-fa329f6b-0e36-433f-a3bb-0df632e79263\",\"id\":\"r006-fa329f6b-0e36-433f-a3bb-0df632e79263\",\"name\":\"my-snapshot-consistency-group\",\"resource_type\":\"snapshot_consistency_group\"},\"source_image\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"id\":\"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"name\":\"my-image\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"image\"},\"source_snapshot\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"name\":\"my-snapshot\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"snapshot\"},\"source_volume\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\",\"remote\":{\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"volume\"},\"storage_generation\":1,\"user_tags\":[\"userTags\"]}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListSnapshotsOptions listSnapshotsOptions = new ListSnapshotsOptions.Builder()
      .limit(Long.valueOf("10"))
      .tag("testString")
      .resourceGroupId("testString")
      .name("my-name")
      .sourceVolumeId("testString")
      .sourceVolumeCrn("crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5")
      .sourceImageId("testString")
      .sourceImageCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8")
      .sort("name")
      .backupPolicyPlanId("testString")
      .copiesId("testString")
      .copiesName("my-snapshot-copy")
      .copiesCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263")
      .copiesRemoteRegionName("us-south")
      .sourceSnapshotId("testString")
      .sourceSnapshotRemoteRegionName("us-south")
      .sourceVolumeRemoteRegionName("us-east")
      .sourceImageRemoteRegionName("us-south")
      .clonesZoneName("us-south-1")
      .snapshotConsistencyGroupId("testString")
      .snapshotConsistencyGroupCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot-consistency-group:r006-fa329f6b-0e36-433f-a3bb-0df632e79263")
      .build();

    List<Snapshot> allResults = new ArrayList<>();
    SnapshotsPager pager = new SnapshotsPager(vpcService, listSnapshotsOptions);
    while (pager.hasNext()) {
      List<Snapshot> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listSnapshots operation using the SnapshotsPager.getAll() method
  @Test
  public void testListSnapshotsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"snapshots\":[{\"backup_policy_plan\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"id\":\"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"name\":\"my-policy-plan\",\"remote\":{\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"backup_policy_plan\"},\"bootable\":true,\"captured_at\":\"2019-01-01T12:00:00.000Z\",\"catalog_offering\":{\"plan\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:51c9e0db-2911-45a6-adb0-ac5332d27cf2:plan:sw.51c9e0db-2911-45a6-adb0-ac5332d27cf2.772c0dbe-aa62-482e-adbe-a3fc20101e0e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}},\"version\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}},\"clones\":[{\"available\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"copies\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"name\":\"my-snapshot\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"snapshot\"}],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deletable\":false,\"encryption\":\"provider_managed\",\"encryption_key\":{\"crn\":\"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"lifecycle_state\":\"stable\",\"minimum_capacity\":1,\"name\":\"my-snapshot\",\"operating_system\":{\"allow_user_image_creation\":true,\"architecture\":\"amd64\",\"dedicated_host_only\":false,\"display_name\":\"Ubuntu Server 16.04 LTS amd64\",\"family\":\"Ubuntu Server\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-24-04-amd64\",\"name\":\"ubuntu-24-04-amd64\",\"user_data_format\":\"cloud_init\",\"vendor\":\"Canonical\",\"version\":\"16.04 LTS\"},\"progress\":55,\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"snapshot\",\"service_tags\":[\"serviceTags\"],\"size\":1,\"snapshot_consistency_group\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot-consistency-group:r006-fa329f6b-0e36-433f-a3bb-0df632e79263\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshot_consistency_groups/r006-fa329f6b-0e36-433f-a3bb-0df632e79263\",\"id\":\"r006-fa329f6b-0e36-433f-a3bb-0df632e79263\",\"name\":\"my-snapshot-consistency-group\",\"resource_type\":\"snapshot_consistency_group\"},\"source_image\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"id\":\"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"name\":\"my-image\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"image\"},\"source_snapshot\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"name\":\"my-snapshot\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"snapshot\"},\"source_volume\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\",\"remote\":{\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"volume\"},\"storage_generation\":1,\"user_tags\":[\"userTags\"]}],\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"snapshots\":[{\"backup_policy_plan\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"id\":\"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"name\":\"my-policy-plan\",\"remote\":{\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"backup_policy_plan\"},\"bootable\":true,\"captured_at\":\"2019-01-01T12:00:00.000Z\",\"catalog_offering\":{\"plan\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:51c9e0db-2911-45a6-adb0-ac5332d27cf2:plan:sw.51c9e0db-2911-45a6-adb0-ac5332d27cf2.772c0dbe-aa62-482e-adbe-a3fc20101e0e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}},\"version\":{\"crn\":\"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}},\"clones\":[{\"available\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"copies\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"name\":\"my-snapshot\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"snapshot\"}],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deletable\":false,\"encryption\":\"provider_managed\",\"encryption_key\":{\"crn\":\"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"lifecycle_state\":\"stable\",\"minimum_capacity\":1,\"name\":\"my-snapshot\",\"operating_system\":{\"allow_user_image_creation\":true,\"architecture\":\"amd64\",\"dedicated_host_only\":false,\"display_name\":\"Ubuntu Server 16.04 LTS amd64\",\"family\":\"Ubuntu Server\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-24-04-amd64\",\"name\":\"ubuntu-24-04-amd64\",\"user_data_format\":\"cloud_init\",\"vendor\":\"Canonical\",\"version\":\"16.04 LTS\"},\"progress\":55,\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"snapshot\",\"service_tags\":[\"serviceTags\"],\"size\":1,\"snapshot_consistency_group\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot-consistency-group:r006-fa329f6b-0e36-433f-a3bb-0df632e79263\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshot_consistency_groups/r006-fa329f6b-0e36-433f-a3bb-0df632e79263\",\"id\":\"r006-fa329f6b-0e36-433f-a3bb-0df632e79263\",\"name\":\"my-snapshot-consistency-group\",\"resource_type\":\"snapshot_consistency_group\"},\"source_image\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"id\":\"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\",\"name\":\"my-image\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"image\"},\"source_snapshot\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"name\":\"my-snapshot\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"snapshot\"},\"source_volume\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\",\"remote\":{\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"volume\"},\"storage_generation\":1,\"user_tags\":[\"userTags\"]}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListSnapshotsOptions listSnapshotsOptions = new ListSnapshotsOptions.Builder()
      .limit(Long.valueOf("10"))
      .tag("testString")
      .resourceGroupId("testString")
      .name("my-name")
      .sourceVolumeId("testString")
      .sourceVolumeCrn("crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5")
      .sourceImageId("testString")
      .sourceImageCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8")
      .sort("name")
      .backupPolicyPlanId("testString")
      .copiesId("testString")
      .copiesName("my-snapshot-copy")
      .copiesCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263")
      .copiesRemoteRegionName("us-south")
      .sourceSnapshotId("testString")
      .sourceSnapshotRemoteRegionName("us-south")
      .sourceVolumeRemoteRegionName("us-east")
      .sourceImageRemoteRegionName("us-south")
      .clonesZoneName("us-south-1")
      .snapshotConsistencyGroupId("testString")
      .snapshotConsistencyGroupCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot-consistency-group:r006-fa329f6b-0e36-433f-a3bb-0df632e79263")
      .build();

    SnapshotsPager pager = new SnapshotsPager(vpcService, listSnapshotsOptions);
    List<Snapshot> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createSnapshot operation with a valid options model parameter
  @Test
  public void testCreateSnapshotWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"backup_policy_plan\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"name\": \"my-policy-plan\", \"remote\": {\"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"backup_policy_plan\"}, \"bootable\": true, \"captured_at\": \"2019-01-01T12:00:00.000Z\", \"catalog_offering\": {\"plan\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:51c9e0db-2911-45a6-adb0-ac5332d27cf2:plan:sw.51c9e0db-2911-45a6-adb0-ac5332d27cf2.772c0dbe-aa62-482e-adbe-a3fc20101e0e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}}, \"version\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}}, \"clones\": [{\"available\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"copies\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"id\": \"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"name\": \"my-snapshot\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"snapshot\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"deletable\": false, \"encryption\": \"provider_managed\", \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"id\": \"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"lifecycle_state\": \"stable\", \"minimum_capacity\": 1, \"name\": \"my-snapshot\", \"operating_system\": {\"allow_user_image_creation\": true, \"architecture\": \"amd64\", \"dedicated_host_only\": false, \"display_name\": \"Ubuntu Server 16.04 LTS amd64\", \"family\": \"Ubuntu Server\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-24-04-amd64\", \"name\": \"ubuntu-24-04-amd64\", \"user_data_format\": \"cloud_init\", \"vendor\": \"Canonical\", \"version\": \"16.04 LTS\"}, \"progress\": 55, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"snapshot\", \"service_tags\": [\"serviceTags\"], \"size\": 1, \"snapshot_consistency_group\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot-consistency-group:r006-fa329f6b-0e36-433f-a3bb-0df632e79263\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshot_consistency_groups/r006-fa329f6b-0e36-433f-a3bb-0df632e79263\", \"id\": \"r006-fa329f6b-0e36-433f-a3bb-0df632e79263\", \"name\": \"my-snapshot-consistency-group\", \"resource_type\": \"snapshot_consistency_group\"}, \"source_image\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"name\": \"my-image\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"image\"}, \"source_snapshot\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"id\": \"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"name\": \"my-snapshot\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"snapshot\"}, \"source_volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\", \"remote\": {\"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"volume\"}, \"storage_generation\": 1, \"user_tags\": [\"userTags\"]}";
    String createSnapshotPath = "/snapshots";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ZoneIdentityByName model
    ZoneIdentityByName zoneIdentityModel = new ZoneIdentityByName.Builder()
      .name("us-south-1")
      .build();

    // Construct an instance of the SnapshotClonePrototype model
    SnapshotClonePrototype snapshotClonePrototypeModel = new SnapshotClonePrototype.Builder()
      .zone(zoneIdentityModel)
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the VolumeIdentityById model
    VolumeIdentityById volumeIdentityModel = new VolumeIdentityById.Builder()
      .id("r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5")
      .build();

    // Construct an instance of the SnapshotPrototypeSnapshotBySourceVolume model
    SnapshotPrototypeSnapshotBySourceVolume snapshotPrototypeModel = new SnapshotPrototypeSnapshotBySourceVolume.Builder()
      .clones(java.util.Arrays.asList(snapshotClonePrototypeModel))
      .name("my-snapshot")
      .resourceGroup(resourceGroupIdentityModel)
      .userTags(java.util.Arrays.asList())
      .sourceVolume(volumeIdentityModel)
      .build();

    // Construct an instance of the CreateSnapshotOptions model
    CreateSnapshotOptions createSnapshotOptionsModel = new CreateSnapshotOptions.Builder()
      .snapshotPrototype(snapshotPrototypeModel)
      .build();

    // Invoke createSnapshot() with a valid options model and verify the result
    Response<Snapshot> response = vpcService.createSnapshot(createSnapshotOptionsModel).execute();
    assertNotNull(response);
    Snapshot responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createSnapshotPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createSnapshot operation with and without retries enabled
  @Test
  public void testCreateSnapshotWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateSnapshotWOptions();

    vpcService.disableRetries();
    testCreateSnapshotWOptions();
  }

  // Test the createSnapshot operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateSnapshotNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createSnapshot(null).execute();
  }

  // Test the deleteSnapshot operation with a valid options model parameter
  @Test
  public void testDeleteSnapshotWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteSnapshotPath = "/snapshots/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteSnapshotOptions model
    DeleteSnapshotOptions deleteSnapshotOptionsModel = new DeleteSnapshotOptions.Builder()
      .id("testString")
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke deleteSnapshot() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteSnapshot(deleteSnapshotOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteSnapshotPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteSnapshot operation with and without retries enabled
  @Test
  public void testDeleteSnapshotWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteSnapshotWOptions();

    vpcService.disableRetries();
    testDeleteSnapshotWOptions();
  }

  // Test the deleteSnapshot operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteSnapshotNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteSnapshot(null).execute();
  }

  // Test the getSnapshot operation with a valid options model parameter
  @Test
  public void testGetSnapshotWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"backup_policy_plan\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"name\": \"my-policy-plan\", \"remote\": {\"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"backup_policy_plan\"}, \"bootable\": true, \"captured_at\": \"2019-01-01T12:00:00.000Z\", \"catalog_offering\": {\"plan\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:51c9e0db-2911-45a6-adb0-ac5332d27cf2:plan:sw.51c9e0db-2911-45a6-adb0-ac5332d27cf2.772c0dbe-aa62-482e-adbe-a3fc20101e0e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}}, \"version\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}}, \"clones\": [{\"available\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"copies\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"id\": \"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"name\": \"my-snapshot\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"snapshot\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"deletable\": false, \"encryption\": \"provider_managed\", \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"id\": \"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"lifecycle_state\": \"stable\", \"minimum_capacity\": 1, \"name\": \"my-snapshot\", \"operating_system\": {\"allow_user_image_creation\": true, \"architecture\": \"amd64\", \"dedicated_host_only\": false, \"display_name\": \"Ubuntu Server 16.04 LTS amd64\", \"family\": \"Ubuntu Server\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-24-04-amd64\", \"name\": \"ubuntu-24-04-amd64\", \"user_data_format\": \"cloud_init\", \"vendor\": \"Canonical\", \"version\": \"16.04 LTS\"}, \"progress\": 55, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"snapshot\", \"service_tags\": [\"serviceTags\"], \"size\": 1, \"snapshot_consistency_group\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot-consistency-group:r006-fa329f6b-0e36-433f-a3bb-0df632e79263\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshot_consistency_groups/r006-fa329f6b-0e36-433f-a3bb-0df632e79263\", \"id\": \"r006-fa329f6b-0e36-433f-a3bb-0df632e79263\", \"name\": \"my-snapshot-consistency-group\", \"resource_type\": \"snapshot_consistency_group\"}, \"source_image\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"name\": \"my-image\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"image\"}, \"source_snapshot\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"id\": \"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"name\": \"my-snapshot\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"snapshot\"}, \"source_volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\", \"remote\": {\"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"volume\"}, \"storage_generation\": 1, \"user_tags\": [\"userTags\"]}";
    String getSnapshotPath = "/snapshots/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetSnapshotOptions model
    GetSnapshotOptions getSnapshotOptionsModel = new GetSnapshotOptions.Builder()
      .id("testString")
      .build();

    // Invoke getSnapshot() with a valid options model and verify the result
    Response<Snapshot> response = vpcService.getSnapshot(getSnapshotOptionsModel).execute();
    assertNotNull(response);
    Snapshot responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getSnapshotPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getSnapshot operation with and without retries enabled
  @Test
  public void testGetSnapshotWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetSnapshotWOptions();

    vpcService.disableRetries();
    testGetSnapshotWOptions();
  }

  // Test the getSnapshot operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetSnapshotNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getSnapshot(null).execute();
  }

  // Test the updateSnapshot operation with a valid options model parameter
  @Test
  public void testUpdateSnapshotWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"backup_policy_plan\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"name\": \"my-policy-plan\", \"remote\": {\"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"backup_policy_plan\"}, \"bootable\": true, \"captured_at\": \"2019-01-01T12:00:00.000Z\", \"catalog_offering\": {\"plan\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:51c9e0db-2911-45a6-adb0-ac5332d27cf2:plan:sw.51c9e0db-2911-45a6-adb0-ac5332d27cf2.772c0dbe-aa62-482e-adbe-a3fc20101e0e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}}, \"version\": {\"crn\": \"crn:v1:bluemix:public:globalcatalog-collection:global:a/aa2432b1fa4d4ace891e9b80fc104e34:1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc:version:00111601-0ec5-41ac-b142-96d1e64e6442/ec66bec2-6a33-42d6-9323-26dd4dc8875d\"}}, \"clones\": [{\"available\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"copies\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"id\": \"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"name\": \"my-snapshot\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"snapshot\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"deletable\": false, \"encryption\": \"provider_managed\", \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"id\": \"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"lifecycle_state\": \"stable\", \"minimum_capacity\": 1, \"name\": \"my-snapshot\", \"operating_system\": {\"allow_user_image_creation\": true, \"architecture\": \"amd64\", \"dedicated_host_only\": false, \"display_name\": \"Ubuntu Server 16.04 LTS amd64\", \"family\": \"Ubuntu Server\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-24-04-amd64\", \"name\": \"ubuntu-24-04-amd64\", \"user_data_format\": \"cloud_init\", \"vendor\": \"Canonical\", \"version\": \"16.04 LTS\"}, \"progress\": 55, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"snapshot\", \"service_tags\": [\"serviceTags\"], \"size\": 1, \"snapshot_consistency_group\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot-consistency-group:r006-fa329f6b-0e36-433f-a3bb-0df632e79263\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshot_consistency_groups/r006-fa329f6b-0e36-433f-a3bb-0df632e79263\", \"id\": \"r006-fa329f6b-0e36-433f-a3bb-0df632e79263\", \"name\": \"my-snapshot-consistency-group\", \"resource_type\": \"snapshot_consistency_group\"}, \"source_image\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::image:r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/images/r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"id\": \"r006-72b27b5c-f4b0-48bb-b954-5becc7c1dcb8\", \"name\": \"my-image\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"image\"}, \"source_snapshot\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"id\": \"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"name\": \"my-snapshot\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"snapshot\"}, \"source_volume\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\", \"remote\": {\"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"volume\"}, \"storage_generation\": 1, \"user_tags\": [\"userTags\"]}";
    String updateSnapshotPath = "/snapshots/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the SnapshotPatch model
    SnapshotPatch snapshotPatchModel = new SnapshotPatch.Builder()
      .name("my-snapshot-updated")
      .userTags(java.util.Arrays.asList("testString"))
      .build();
    Map<String, Object> snapshotPatchModelAsPatch = snapshotPatchModel.asPatch();

    // Construct an instance of the UpdateSnapshotOptions model
    UpdateSnapshotOptions updateSnapshotOptionsModel = new UpdateSnapshotOptions.Builder()
      .id("testString")
      .snapshotPatch(snapshotPatchModelAsPatch)
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke updateSnapshot() with a valid options model and verify the result
    Response<Snapshot> response = vpcService.updateSnapshot(updateSnapshotOptionsModel).execute();
    assertNotNull(response);
    Snapshot responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateSnapshotPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateSnapshot operation with and without retries enabled
  @Test
  public void testUpdateSnapshotWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateSnapshotWOptions();

    vpcService.disableRetries();
    testUpdateSnapshotWOptions();
  }

  // Test the updateSnapshot operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateSnapshotNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateSnapshot(null).execute();
  }

  // Test the listSnapshotClones operation with a valid options model parameter
  @Test
  public void testListSnapshotClonesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"clones\": [{\"available\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}]}";
    String listSnapshotClonesPath = "/snapshots/testString/clones";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListSnapshotClonesOptions model
    ListSnapshotClonesOptions listSnapshotClonesOptionsModel = new ListSnapshotClonesOptions.Builder()
      .id("testString")
      .build();

    // Invoke listSnapshotClones() with a valid options model and verify the result
    Response<SnapshotCloneCollection> response = vpcService.listSnapshotClones(listSnapshotClonesOptionsModel).execute();
    assertNotNull(response);
    SnapshotCloneCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listSnapshotClonesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listSnapshotClones operation with and without retries enabled
  @Test
  public void testListSnapshotClonesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListSnapshotClonesWOptions();

    vpcService.disableRetries();
    testListSnapshotClonesWOptions();
  }

  // Test the listSnapshotClones operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListSnapshotClonesNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listSnapshotClones(null).execute();
  }

  // Test the deleteSnapshotClone operation with a valid options model parameter
  @Test
  public void testDeleteSnapshotCloneWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteSnapshotClonePath = "/snapshots/testString/clones/us-south-1";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteSnapshotCloneOptions model
    DeleteSnapshotCloneOptions deleteSnapshotCloneOptionsModel = new DeleteSnapshotCloneOptions.Builder()
      .id("testString")
      .zoneName("us-south-1")
      .build();

    // Invoke deleteSnapshotClone() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteSnapshotClone(deleteSnapshotCloneOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteSnapshotClonePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteSnapshotClone operation with and without retries enabled
  @Test
  public void testDeleteSnapshotCloneWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteSnapshotCloneWOptions();

    vpcService.disableRetries();
    testDeleteSnapshotCloneWOptions();
  }

  // Test the deleteSnapshotClone operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteSnapshotCloneNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteSnapshotClone(null).execute();
  }

  // Test the getSnapshotClone operation with a valid options model parameter
  @Test
  public void testGetSnapshotCloneWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"available\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getSnapshotClonePath = "/snapshots/testString/clones/us-south-1";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetSnapshotCloneOptions model
    GetSnapshotCloneOptions getSnapshotCloneOptionsModel = new GetSnapshotCloneOptions.Builder()
      .id("testString")
      .zoneName("us-south-1")
      .build();

    // Invoke getSnapshotClone() with a valid options model and verify the result
    Response<SnapshotClone> response = vpcService.getSnapshotClone(getSnapshotCloneOptionsModel).execute();
    assertNotNull(response);
    SnapshotClone responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getSnapshotClonePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getSnapshotClone operation with and without retries enabled
  @Test
  public void testGetSnapshotCloneWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetSnapshotCloneWOptions();

    vpcService.disableRetries();
    testGetSnapshotCloneWOptions();
  }

  // Test the getSnapshotClone operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetSnapshotCloneNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getSnapshotClone(null).execute();
  }

  // Test the createSnapshotClone operation with a valid options model parameter
  @Test
  public void testCreateSnapshotCloneWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"available\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String createSnapshotClonePath = "/snapshots/testString/clones/us-south-1";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the CreateSnapshotCloneOptions model
    CreateSnapshotCloneOptions createSnapshotCloneOptionsModel = new CreateSnapshotCloneOptions.Builder()
      .id("testString")
      .zoneName("us-south-1")
      .build();

    // Invoke createSnapshotClone() with a valid options model and verify the result
    Response<SnapshotClone> response = vpcService.createSnapshotClone(createSnapshotCloneOptionsModel).execute();
    assertNotNull(response);
    SnapshotClone responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PUT");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createSnapshotClonePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createSnapshotClone operation with and without retries enabled
  @Test
  public void testCreateSnapshotCloneWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateSnapshotCloneWOptions();

    vpcService.disableRetries();
    testCreateSnapshotCloneWOptions();
  }

  // Test the createSnapshotClone operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateSnapshotCloneNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createSnapshotClone(null).execute();
  }

  // Test the listShareProfiles operation with a valid options model parameter
  @Test
  public void testListShareProfilesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"profiles\": [{\"capacity\": {\"type\": \"fixed\", \"value\": 4800}, \"family\": \"defined_performance\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/share/profiles/tier-3iops\", \"iops\": {\"type\": \"fixed\", \"value\": 4000}, \"name\": \"tier-3iops\", \"resource_type\": \"share_profile\"}], \"total_count\": 132}";
    String listShareProfilesPath = "/share/profiles";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListShareProfilesOptions model
    ListShareProfilesOptions listShareProfilesOptionsModel = new ListShareProfilesOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .sort("name")
      .build();

    // Invoke listShareProfiles() with a valid options model and verify the result
    Response<ShareProfileCollection> response = vpcService.listShareProfiles(listShareProfilesOptionsModel).execute();
    assertNotNull(response);
    ShareProfileCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listShareProfilesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("sort"), "name");
  }

  // Test the listShareProfiles operation with and without retries enabled
  @Test
  public void testListShareProfilesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListShareProfilesWOptions();

    vpcService.disableRetries();
    testListShareProfilesWOptions();
  }

  // Test the listShareProfiles operation using the ShareProfilesPager.getNext() method
  @Test
  public void testListShareProfilesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"profiles\":[{\"capacity\":{\"type\":\"fixed\",\"value\":4800},\"family\":\"defined_performance\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/share/profiles/tier-3iops\",\"iops\":{\"type\":\"fixed\",\"value\":4000},\"name\":\"tier-3iops\",\"resource_type\":\"share_profile\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"profiles\":[{\"capacity\":{\"type\":\"fixed\",\"value\":4800},\"family\":\"defined_performance\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/share/profiles/tier-3iops\",\"iops\":{\"type\":\"fixed\",\"value\":4000},\"name\":\"tier-3iops\",\"resource_type\":\"share_profile\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListShareProfilesOptions listShareProfilesOptions = new ListShareProfilesOptions.Builder()
      .limit(Long.valueOf("10"))
      .sort("name")
      .build();

    List<ShareProfile> allResults = new ArrayList<>();
    ShareProfilesPager pager = new ShareProfilesPager(vpcService, listShareProfilesOptions);
    while (pager.hasNext()) {
      List<ShareProfile> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listShareProfiles operation using the ShareProfilesPager.getAll() method
  @Test
  public void testListShareProfilesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"profiles\":[{\"capacity\":{\"type\":\"fixed\",\"value\":4800},\"family\":\"defined_performance\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/share/profiles/tier-3iops\",\"iops\":{\"type\":\"fixed\",\"value\":4000},\"name\":\"tier-3iops\",\"resource_type\":\"share_profile\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"profiles\":[{\"capacity\":{\"type\":\"fixed\",\"value\":4800},\"family\":\"defined_performance\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/share/profiles/tier-3iops\",\"iops\":{\"type\":\"fixed\",\"value\":4000},\"name\":\"tier-3iops\",\"resource_type\":\"share_profile\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListShareProfilesOptions listShareProfilesOptions = new ListShareProfilesOptions.Builder()
      .limit(Long.valueOf("10"))
      .sort("name")
      .build();

    ShareProfilesPager pager = new ShareProfilesPager(vpcService, listShareProfilesOptions);
    List<ShareProfile> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the getShareProfile operation with a valid options model parameter
  @Test
  public void testGetShareProfileWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"capacity\": {\"type\": \"fixed\", \"value\": 4800}, \"family\": \"defined_performance\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/share/profiles/tier-3iops\", \"iops\": {\"type\": \"fixed\", \"value\": 4000}, \"name\": \"tier-3iops\", \"resource_type\": \"share_profile\"}";
    String getShareProfilePath = "/share/profiles/dp2";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetShareProfileOptions model
    GetShareProfileOptions getShareProfileOptionsModel = new GetShareProfileOptions.Builder()
      .name("dp2")
      .build();

    // Invoke getShareProfile() with a valid options model and verify the result
    Response<ShareProfile> response = vpcService.getShareProfile(getShareProfileOptionsModel).execute();
    assertNotNull(response);
    ShareProfile responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getShareProfilePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getShareProfile operation with and without retries enabled
  @Test
  public void testGetShareProfileWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetShareProfileWOptions();

    vpcService.disableRetries();
    testGetShareProfileWOptions();
  }

  // Test the getShareProfile operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetShareProfileNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getShareProfile(null).execute();
  }

  // Test the listShares operation with a valid options model parameter
  @Test
  public void testListSharesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"shares\": [{\"access_control_mode\": \"security_group\", \"accessor_binding_role\": \"accessor\", \"accessor_bindings\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/accessor_bindings/r006-ae9bdc18-aed0-4392-841c-142d3300674f\", \"id\": \"r006-ce9dac18-dea0-4392-841c-142d3300674f\", \"resource_type\": \"share_accessor_binding\"}], \"allowed_transit_encryption_modes\": [\"none\"], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"encryption\": \"provider_managed\", \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"id\": \"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"initial_owner\": {\"gid\": 50, \"uid\": 50}, \"iops\": 100, \"latest_job\": {\"status\": \"cancelled\", \"status_reasons\": [{\"code\": \"cannot_reach_source_share\", \"message\": \"The replication failover failed because the source share cannot be reached.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-file-storage-planning\"}], \"type\": \"replication_failover\"}, \"latest_sync\": {\"completed_at\": \"2019-01-01T12:00:00.000Z\", \"data_transferred\": 0, \"started_at\": \"2019-01-01T12:00:00.000Z\"}, \"lifecycle_reasons\": [{\"code\": \"cloning_in_progress\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"mount_targets\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/mount_targets/r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\", \"id\": \"r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\", \"name\": \"my-share-mount-target\", \"resource_type\": \"share_mount_target\"}], \"name\": \"my-share\", \"origin_share\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"id\": \"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"name\": \"my-share\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"share\"}, \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/share/profiles/tier-3iops\", \"name\": \"tier-3iops\", \"resource_type\": \"share_profile\"}, \"replica_share\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"id\": \"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"name\": \"my-share\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"share\"}, \"replication_cron_spec\": \"0 */5 * * *\", \"replication_role\": \"none\", \"replication_status\": \"active\", \"replication_status_reasons\": [{\"code\": \"cannot_reach_source_share\", \"message\": \"The replication failover failed because the source share cannot be reached.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-file-storage-planning\"}], \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"share\", \"size\": 200, \"snapshot_count\": 0, \"snapshot_size\": 0, \"source_share\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"id\": \"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"name\": \"my-share\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"share\"}, \"source_snapshot\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share-snapshot:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/snapshots/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\", \"id\": \"r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\", \"name\": \"my-share-snapshot\", \"resource_type\": \"share_snapshot\"}, \"user_tags\": [\"userTags\"], \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"total_count\": 132}";
    String listSharesPath = "/shares";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListSharesOptions model
    ListSharesOptions listSharesOptionsModel = new ListSharesOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("my-name")
      .sort("name")
      .replicationRole("none")
      .build();

    // Invoke listShares() with a valid options model and verify the result
    Response<ShareCollection> response = vpcService.listShares(listSharesOptionsModel).execute();
    assertNotNull(response);
    ShareCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listSharesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
    assertEquals(query.get("name"), "my-name");
    assertEquals(query.get("sort"), "name");
    assertEquals(query.get("replication_role"), "none");
  }

  // Test the listShares operation with and without retries enabled
  @Test
  public void testListSharesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListSharesWOptions();

    vpcService.disableRetries();
    testListSharesWOptions();
  }

  // Test the listShares operation using the SharesPager.getNext() method
  @Test
  public void testListSharesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"shares\":[{\"access_control_mode\":\"security_group\",\"accessor_binding_role\":\"accessor\",\"accessor_bindings\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/accessor_bindings/r006-ae9bdc18-aed0-4392-841c-142d3300674f\",\"id\":\"r006-ce9dac18-dea0-4392-841c-142d3300674f\",\"resource_type\":\"share_accessor_binding\"}],\"allowed_transit_encryption_modes\":[\"none\"],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"encryption\":\"provider_managed\",\"encryption_key\":{\"crn\":\"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"id\":\"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"initial_owner\":{\"gid\":50,\"uid\":50},\"iops\":100,\"latest_job\":{\"status\":\"cancelled\",\"status_reasons\":[{\"code\":\"cannot_reach_source_share\",\"message\":\"The replication failover failed because the source share cannot be reached.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-file-storage-planning\"}],\"type\":\"replication_failover\"},\"latest_sync\":{\"completed_at\":\"2019-01-01T12:00:00.000Z\",\"data_transferred\":0,\"started_at\":\"2019-01-01T12:00:00.000Z\"},\"lifecycle_reasons\":[{\"code\":\"cloning_in_progress\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"mount_targets\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/mount_targets/r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\",\"id\":\"r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\",\"name\":\"my-share-mount-target\",\"resource_type\":\"share_mount_target\"}],\"name\":\"my-share\",\"origin_share\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"id\":\"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"name\":\"my-share\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"share\"},\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/share/profiles/tier-3iops\",\"name\":\"tier-3iops\",\"resource_type\":\"share_profile\"},\"replica_share\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"id\":\"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"name\":\"my-share\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"share\"},\"replication_cron_spec\":\"0 */5 * * *\",\"replication_role\":\"none\",\"replication_status\":\"active\",\"replication_status_reasons\":[{\"code\":\"cannot_reach_source_share\",\"message\":\"The replication failover failed because the source share cannot be reached.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-file-storage-planning\"}],\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"share\",\"size\":200,\"snapshot_count\":0,\"snapshot_size\":0,\"source_share\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"id\":\"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"name\":\"my-share\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"share\"},\"source_snapshot\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share-snapshot:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/snapshots/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\",\"id\":\"r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\",\"name\":\"my-share-snapshot\",\"resource_type\":\"share_snapshot\"},\"user_tags\":[\"userTags\"],\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"shares\":[{\"access_control_mode\":\"security_group\",\"accessor_binding_role\":\"accessor\",\"accessor_bindings\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/accessor_bindings/r006-ae9bdc18-aed0-4392-841c-142d3300674f\",\"id\":\"r006-ce9dac18-dea0-4392-841c-142d3300674f\",\"resource_type\":\"share_accessor_binding\"}],\"allowed_transit_encryption_modes\":[\"none\"],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"encryption\":\"provider_managed\",\"encryption_key\":{\"crn\":\"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"id\":\"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"initial_owner\":{\"gid\":50,\"uid\":50},\"iops\":100,\"latest_job\":{\"status\":\"cancelled\",\"status_reasons\":[{\"code\":\"cannot_reach_source_share\",\"message\":\"The replication failover failed because the source share cannot be reached.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-file-storage-planning\"}],\"type\":\"replication_failover\"},\"latest_sync\":{\"completed_at\":\"2019-01-01T12:00:00.000Z\",\"data_transferred\":0,\"started_at\":\"2019-01-01T12:00:00.000Z\"},\"lifecycle_reasons\":[{\"code\":\"cloning_in_progress\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"mount_targets\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/mount_targets/r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\",\"id\":\"r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\",\"name\":\"my-share-mount-target\",\"resource_type\":\"share_mount_target\"}],\"name\":\"my-share\",\"origin_share\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"id\":\"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"name\":\"my-share\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"share\"},\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/share/profiles/tier-3iops\",\"name\":\"tier-3iops\",\"resource_type\":\"share_profile\"},\"replica_share\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"id\":\"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"name\":\"my-share\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"share\"},\"replication_cron_spec\":\"0 */5 * * *\",\"replication_role\":\"none\",\"replication_status\":\"active\",\"replication_status_reasons\":[{\"code\":\"cannot_reach_source_share\",\"message\":\"The replication failover failed because the source share cannot be reached.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-file-storage-planning\"}],\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"share\",\"size\":200,\"snapshot_count\":0,\"snapshot_size\":0,\"source_share\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"id\":\"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"name\":\"my-share\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"share\"},\"source_snapshot\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share-snapshot:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/snapshots/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\",\"id\":\"r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\",\"name\":\"my-share-snapshot\",\"resource_type\":\"share_snapshot\"},\"user_tags\":[\"userTags\"],\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListSharesOptions listSharesOptions = new ListSharesOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("my-name")
      .sort("name")
      .replicationRole("none")
      .build();

    List<Share> allResults = new ArrayList<>();
    SharesPager pager = new SharesPager(vpcService, listSharesOptions);
    while (pager.hasNext()) {
      List<Share> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listShares operation using the SharesPager.getAll() method
  @Test
  public void testListSharesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"shares\":[{\"access_control_mode\":\"security_group\",\"accessor_binding_role\":\"accessor\",\"accessor_bindings\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/accessor_bindings/r006-ae9bdc18-aed0-4392-841c-142d3300674f\",\"id\":\"r006-ce9dac18-dea0-4392-841c-142d3300674f\",\"resource_type\":\"share_accessor_binding\"}],\"allowed_transit_encryption_modes\":[\"none\"],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"encryption\":\"provider_managed\",\"encryption_key\":{\"crn\":\"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"id\":\"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"initial_owner\":{\"gid\":50,\"uid\":50},\"iops\":100,\"latest_job\":{\"status\":\"cancelled\",\"status_reasons\":[{\"code\":\"cannot_reach_source_share\",\"message\":\"The replication failover failed because the source share cannot be reached.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-file-storage-planning\"}],\"type\":\"replication_failover\"},\"latest_sync\":{\"completed_at\":\"2019-01-01T12:00:00.000Z\",\"data_transferred\":0,\"started_at\":\"2019-01-01T12:00:00.000Z\"},\"lifecycle_reasons\":[{\"code\":\"cloning_in_progress\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"mount_targets\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/mount_targets/r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\",\"id\":\"r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\",\"name\":\"my-share-mount-target\",\"resource_type\":\"share_mount_target\"}],\"name\":\"my-share\",\"origin_share\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"id\":\"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"name\":\"my-share\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"share\"},\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/share/profiles/tier-3iops\",\"name\":\"tier-3iops\",\"resource_type\":\"share_profile\"},\"replica_share\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"id\":\"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"name\":\"my-share\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"share\"},\"replication_cron_spec\":\"0 */5 * * *\",\"replication_role\":\"none\",\"replication_status\":\"active\",\"replication_status_reasons\":[{\"code\":\"cannot_reach_source_share\",\"message\":\"The replication failover failed because the source share cannot be reached.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-file-storage-planning\"}],\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"share\",\"size\":200,\"snapshot_count\":0,\"snapshot_size\":0,\"source_share\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"id\":\"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"name\":\"my-share\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"share\"},\"source_snapshot\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share-snapshot:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/snapshots/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\",\"id\":\"r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\",\"name\":\"my-share-snapshot\",\"resource_type\":\"share_snapshot\"},\"user_tags\":[\"userTags\"],\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"shares\":[{\"access_control_mode\":\"security_group\",\"accessor_binding_role\":\"accessor\",\"accessor_bindings\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/accessor_bindings/r006-ae9bdc18-aed0-4392-841c-142d3300674f\",\"id\":\"r006-ce9dac18-dea0-4392-841c-142d3300674f\",\"resource_type\":\"share_accessor_binding\"}],\"allowed_transit_encryption_modes\":[\"none\"],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"encryption\":\"provider_managed\",\"encryption_key\":{\"crn\":\"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"id\":\"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"initial_owner\":{\"gid\":50,\"uid\":50},\"iops\":100,\"latest_job\":{\"status\":\"cancelled\",\"status_reasons\":[{\"code\":\"cannot_reach_source_share\",\"message\":\"The replication failover failed because the source share cannot be reached.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-file-storage-planning\"}],\"type\":\"replication_failover\"},\"latest_sync\":{\"completed_at\":\"2019-01-01T12:00:00.000Z\",\"data_transferred\":0,\"started_at\":\"2019-01-01T12:00:00.000Z\"},\"lifecycle_reasons\":[{\"code\":\"cloning_in_progress\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"mount_targets\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/mount_targets/r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\",\"id\":\"r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\",\"name\":\"my-share-mount-target\",\"resource_type\":\"share_mount_target\"}],\"name\":\"my-share\",\"origin_share\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"id\":\"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"name\":\"my-share\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"share\"},\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/share/profiles/tier-3iops\",\"name\":\"tier-3iops\",\"resource_type\":\"share_profile\"},\"replica_share\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"id\":\"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"name\":\"my-share\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"share\"},\"replication_cron_spec\":\"0 */5 * * *\",\"replication_role\":\"none\",\"replication_status\":\"active\",\"replication_status_reasons\":[{\"code\":\"cannot_reach_source_share\",\"message\":\"The replication failover failed because the source share cannot be reached.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-file-storage-planning\"}],\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"share\",\"size\":200,\"snapshot_count\":0,\"snapshot_size\":0,\"source_share\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"id\":\"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"name\":\"my-share\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"share\"},\"source_snapshot\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share-snapshot:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/snapshots/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\",\"id\":\"r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\",\"name\":\"my-share-snapshot\",\"resource_type\":\"share_snapshot\"},\"user_tags\":[\"userTags\"],\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListSharesOptions listSharesOptions = new ListSharesOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("my-name")
      .sort("name")
      .replicationRole("none")
      .build();

    SharesPager pager = new SharesPager(vpcService, listSharesOptions);
    List<Share> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createShare operation with a valid options model parameter
  @Test
  public void testCreateShareWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"access_control_mode\": \"security_group\", \"accessor_binding_role\": \"accessor\", \"accessor_bindings\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/accessor_bindings/r006-ae9bdc18-aed0-4392-841c-142d3300674f\", \"id\": \"r006-ce9dac18-dea0-4392-841c-142d3300674f\", \"resource_type\": \"share_accessor_binding\"}], \"allowed_transit_encryption_modes\": [\"none\"], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"encryption\": \"provider_managed\", \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"id\": \"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"initial_owner\": {\"gid\": 50, \"uid\": 50}, \"iops\": 100, \"latest_job\": {\"status\": \"cancelled\", \"status_reasons\": [{\"code\": \"cannot_reach_source_share\", \"message\": \"The replication failover failed because the source share cannot be reached.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-file-storage-planning\"}], \"type\": \"replication_failover\"}, \"latest_sync\": {\"completed_at\": \"2019-01-01T12:00:00.000Z\", \"data_transferred\": 0, \"started_at\": \"2019-01-01T12:00:00.000Z\"}, \"lifecycle_reasons\": [{\"code\": \"cloning_in_progress\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"mount_targets\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/mount_targets/r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\", \"id\": \"r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\", \"name\": \"my-share-mount-target\", \"resource_type\": \"share_mount_target\"}], \"name\": \"my-share\", \"origin_share\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"id\": \"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"name\": \"my-share\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"share\"}, \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/share/profiles/tier-3iops\", \"name\": \"tier-3iops\", \"resource_type\": \"share_profile\"}, \"replica_share\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"id\": \"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"name\": \"my-share\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"share\"}, \"replication_cron_spec\": \"0 */5 * * *\", \"replication_role\": \"none\", \"replication_status\": \"active\", \"replication_status_reasons\": [{\"code\": \"cannot_reach_source_share\", \"message\": \"The replication failover failed because the source share cannot be reached.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-file-storage-planning\"}], \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"share\", \"size\": 200, \"snapshot_count\": 0, \"snapshot_size\": 0, \"source_share\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"id\": \"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"name\": \"my-share\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"share\"}, \"source_snapshot\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share-snapshot:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/snapshots/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\", \"id\": \"r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\", \"name\": \"my-share-snapshot\", \"resource_type\": \"share_snapshot\"}, \"user_tags\": [\"userTags\"], \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String createSharePath = "/shares";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the VirtualNetworkInterfaceIPPrototypeReservedIPPrototypeVirtualNetworkInterfaceIPsContext model
    VirtualNetworkInterfaceIPPrototypeReservedIPPrototypeVirtualNetworkInterfaceIPsContext virtualNetworkInterfaceIpPrototypeModel = new VirtualNetworkInterfaceIPPrototypeReservedIPPrototypeVirtualNetworkInterfaceIPsContext.Builder()
      .address("10.0.0.5")
      .autoDelete(false)
      .name("my-reserved-ip")
      .build();

    // Construct an instance of the VirtualNetworkInterfacePrimaryIPPrototypeReservedIPPrototypeVirtualNetworkInterfacePrimaryIPContext model
    VirtualNetworkInterfacePrimaryIPPrototypeReservedIPPrototypeVirtualNetworkInterfacePrimaryIPContext virtualNetworkInterfacePrimaryIpPrototypeModel = new VirtualNetworkInterfacePrimaryIPPrototypeReservedIPPrototypeVirtualNetworkInterfacePrimaryIPContext.Builder()
      .address("10.0.0.5")
      .autoDelete(false)
      .name("my-reserved-ip")
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the SecurityGroupIdentityById model
    SecurityGroupIdentityById securityGroupIdentityModel = new SecurityGroupIdentityById.Builder()
      .id("r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271")
      .build();

    // Construct an instance of the SubnetIdentityById model
    SubnetIdentityById subnetIdentityModel = new SubnetIdentityById.Builder()
      .id("0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
      .build();

    // Construct an instance of the ShareMountTargetVirtualNetworkInterfacePrototypeVirtualNetworkInterfacePrototypeShareMountTargetContext model
    ShareMountTargetVirtualNetworkInterfacePrototypeVirtualNetworkInterfacePrototypeShareMountTargetContext shareMountTargetVirtualNetworkInterfacePrototypeModel = new ShareMountTargetVirtualNetworkInterfacePrototypeVirtualNetworkInterfacePrototypeShareMountTargetContext.Builder()
      .allowIpSpoofing(true)
      .autoDelete(false)
      .enableInfrastructureNat(true)
      .ips(java.util.Arrays.asList(virtualNetworkInterfaceIpPrototypeModel))
      .name("my-virtual-network-interface")
      .primaryIp(virtualNetworkInterfacePrimaryIpPrototypeModel)
      .protocolStateFilteringMode("auto")
      .resourceGroup(resourceGroupIdentityModel)
      .securityGroups(java.util.Arrays.asList(securityGroupIdentityModel))
      .subnet(subnetIdentityModel)
      .build();

    // Construct an instance of the ShareMountTargetPrototypeShareMountTargetByAccessControlModeSecurityGroup model
    ShareMountTargetPrototypeShareMountTargetByAccessControlModeSecurityGroup shareMountTargetPrototypeModel = new ShareMountTargetPrototypeShareMountTargetByAccessControlModeSecurityGroup.Builder()
      .name("my-share-mount-target")
      .transitEncryption("none")
      .virtualNetworkInterface(shareMountTargetVirtualNetworkInterfacePrototypeModel)
      .build();

    // Construct an instance of the ShareProfileIdentityByName model
    ShareProfileIdentityByName shareProfileIdentityModel = new ShareProfileIdentityByName.Builder()
      .name("tier-3iops")
      .build();

    // Construct an instance of the ZoneIdentityByName model
    ZoneIdentityByName zoneIdentityModel = new ZoneIdentityByName.Builder()
      .name("us-south-1")
      .build();

    // Construct an instance of the SharePrototypeShareContext model
    SharePrototypeShareContext sharePrototypeShareContextModel = new SharePrototypeShareContext.Builder()
      .allowedTransitEncryptionModes(java.util.Arrays.asList("none"))
      .iops(Long.valueOf("100"))
      .mountTargets(java.util.Arrays.asList(shareMountTargetPrototypeModel))
      .name("my-share")
      .profile(shareProfileIdentityModel)
      .replicationCronSpec("0 */5 * * *")
      .resourceGroup(resourceGroupIdentityModel)
      .userTags(java.util.Arrays.asList())
      .zone(zoneIdentityModel)
      .build();

    // Construct an instance of the EncryptionKeyIdentityByCRN model
    EncryptionKeyIdentityByCRN encryptionKeyIdentityModel = new EncryptionKeyIdentityByCRN.Builder()
      .crn("crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")
      .build();

    // Construct an instance of the ShareInitialOwner model
    ShareInitialOwner shareInitialOwnerModel = new ShareInitialOwner.Builder()
      .gid(Long.valueOf("50"))
      .uid(Long.valueOf("50"))
      .build();

    // Construct an instance of the SharePrototypeShareBySize model
    SharePrototypeShareBySize sharePrototypeModel = new SharePrototypeShareBySize.Builder()
      .allowedTransitEncryptionModes(java.util.Arrays.asList("none"))
      .mountTargets(java.util.Arrays.asList(shareMountTargetPrototypeModel))
      .name("my-share")
      .replicaShare(sharePrototypeShareContextModel)
      .userTags(java.util.Arrays.asList())
      .accessControlMode("security_group")
      .encryptionKey(encryptionKeyIdentityModel)
      .initialOwner(shareInitialOwnerModel)
      .iops(Long.valueOf("100"))
      .profile(shareProfileIdentityModel)
      .resourceGroup(resourceGroupIdentityModel)
      .size(Long.valueOf("200"))
      .zone(zoneIdentityModel)
      .build();

    // Construct an instance of the CreateShareOptions model
    CreateShareOptions createShareOptionsModel = new CreateShareOptions.Builder()
      .sharePrototype(sharePrototypeModel)
      .build();

    // Invoke createShare() with a valid options model and verify the result
    Response<Share> response = vpcService.createShare(createShareOptionsModel).execute();
    assertNotNull(response);
    Share responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createSharePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createShare operation with and without retries enabled
  @Test
  public void testCreateShareWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateShareWOptions();

    vpcService.disableRetries();
    testCreateShareWOptions();
  }

  // Test the createShare operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateShareNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createShare(null).execute();
  }

  // Test the deleteShare operation with a valid options model parameter
  @Test
  public void testDeleteShareWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"access_control_mode\": \"security_group\", \"accessor_binding_role\": \"accessor\", \"accessor_bindings\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/accessor_bindings/r006-ae9bdc18-aed0-4392-841c-142d3300674f\", \"id\": \"r006-ce9dac18-dea0-4392-841c-142d3300674f\", \"resource_type\": \"share_accessor_binding\"}], \"allowed_transit_encryption_modes\": [\"none\"], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"encryption\": \"provider_managed\", \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"id\": \"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"initial_owner\": {\"gid\": 50, \"uid\": 50}, \"iops\": 100, \"latest_job\": {\"status\": \"cancelled\", \"status_reasons\": [{\"code\": \"cannot_reach_source_share\", \"message\": \"The replication failover failed because the source share cannot be reached.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-file-storage-planning\"}], \"type\": \"replication_failover\"}, \"latest_sync\": {\"completed_at\": \"2019-01-01T12:00:00.000Z\", \"data_transferred\": 0, \"started_at\": \"2019-01-01T12:00:00.000Z\"}, \"lifecycle_reasons\": [{\"code\": \"cloning_in_progress\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"mount_targets\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/mount_targets/r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\", \"id\": \"r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\", \"name\": \"my-share-mount-target\", \"resource_type\": \"share_mount_target\"}], \"name\": \"my-share\", \"origin_share\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"id\": \"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"name\": \"my-share\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"share\"}, \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/share/profiles/tier-3iops\", \"name\": \"tier-3iops\", \"resource_type\": \"share_profile\"}, \"replica_share\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"id\": \"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"name\": \"my-share\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"share\"}, \"replication_cron_spec\": \"0 */5 * * *\", \"replication_role\": \"none\", \"replication_status\": \"active\", \"replication_status_reasons\": [{\"code\": \"cannot_reach_source_share\", \"message\": \"The replication failover failed because the source share cannot be reached.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-file-storage-planning\"}], \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"share\", \"size\": 200, \"snapshot_count\": 0, \"snapshot_size\": 0, \"source_share\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"id\": \"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"name\": \"my-share\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"share\"}, \"source_snapshot\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share-snapshot:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/snapshots/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\", \"id\": \"r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\", \"name\": \"my-share-snapshot\", \"resource_type\": \"share_snapshot\"}, \"user_tags\": [\"userTags\"], \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String deleteSharePath = "/shares/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteShareOptions model
    DeleteShareOptions deleteShareOptionsModel = new DeleteShareOptions.Builder()
      .id("testString")
      .ifMatch("W/96d225c4-56bd-43d9-98fc-d7148e5c5028")
      .build();

    // Invoke deleteShare() with a valid options model and verify the result
    Response<Share> response = vpcService.deleteShare(deleteShareOptionsModel).execute();
    assertNotNull(response);
    Share responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteSharePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteShare operation with and without retries enabled
  @Test
  public void testDeleteShareWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteShareWOptions();

    vpcService.disableRetries();
    testDeleteShareWOptions();
  }

  // Test the deleteShare operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteShareNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteShare(null).execute();
  }

  // Test the getShare operation with a valid options model parameter
  @Test
  public void testGetShareWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"access_control_mode\": \"security_group\", \"accessor_binding_role\": \"accessor\", \"accessor_bindings\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/accessor_bindings/r006-ae9bdc18-aed0-4392-841c-142d3300674f\", \"id\": \"r006-ce9dac18-dea0-4392-841c-142d3300674f\", \"resource_type\": \"share_accessor_binding\"}], \"allowed_transit_encryption_modes\": [\"none\"], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"encryption\": \"provider_managed\", \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"id\": \"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"initial_owner\": {\"gid\": 50, \"uid\": 50}, \"iops\": 100, \"latest_job\": {\"status\": \"cancelled\", \"status_reasons\": [{\"code\": \"cannot_reach_source_share\", \"message\": \"The replication failover failed because the source share cannot be reached.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-file-storage-planning\"}], \"type\": \"replication_failover\"}, \"latest_sync\": {\"completed_at\": \"2019-01-01T12:00:00.000Z\", \"data_transferred\": 0, \"started_at\": \"2019-01-01T12:00:00.000Z\"}, \"lifecycle_reasons\": [{\"code\": \"cloning_in_progress\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"mount_targets\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/mount_targets/r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\", \"id\": \"r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\", \"name\": \"my-share-mount-target\", \"resource_type\": \"share_mount_target\"}], \"name\": \"my-share\", \"origin_share\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"id\": \"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"name\": \"my-share\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"share\"}, \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/share/profiles/tier-3iops\", \"name\": \"tier-3iops\", \"resource_type\": \"share_profile\"}, \"replica_share\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"id\": \"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"name\": \"my-share\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"share\"}, \"replication_cron_spec\": \"0 */5 * * *\", \"replication_role\": \"none\", \"replication_status\": \"active\", \"replication_status_reasons\": [{\"code\": \"cannot_reach_source_share\", \"message\": \"The replication failover failed because the source share cannot be reached.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-file-storage-planning\"}], \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"share\", \"size\": 200, \"snapshot_count\": 0, \"snapshot_size\": 0, \"source_share\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"id\": \"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"name\": \"my-share\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"share\"}, \"source_snapshot\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share-snapshot:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/snapshots/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\", \"id\": \"r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\", \"name\": \"my-share-snapshot\", \"resource_type\": \"share_snapshot\"}, \"user_tags\": [\"userTags\"], \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getSharePath = "/shares/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetShareOptions model
    GetShareOptions getShareOptionsModel = new GetShareOptions.Builder()
      .id("testString")
      .build();

    // Invoke getShare() with a valid options model and verify the result
    Response<Share> response = vpcService.getShare(getShareOptionsModel).execute();
    assertNotNull(response);
    Share responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getSharePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getShare operation with and without retries enabled
  @Test
  public void testGetShareWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetShareWOptions();

    vpcService.disableRetries();
    testGetShareWOptions();
  }

  // Test the getShare operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetShareNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getShare(null).execute();
  }

  // Test the updateShare operation with a valid options model parameter
  @Test
  public void testUpdateShareWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"access_control_mode\": \"security_group\", \"accessor_binding_role\": \"accessor\", \"accessor_bindings\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/accessor_bindings/r006-ae9bdc18-aed0-4392-841c-142d3300674f\", \"id\": \"r006-ce9dac18-dea0-4392-841c-142d3300674f\", \"resource_type\": \"share_accessor_binding\"}], \"allowed_transit_encryption_modes\": [\"none\"], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"encryption\": \"provider_managed\", \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"id\": \"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"initial_owner\": {\"gid\": 50, \"uid\": 50}, \"iops\": 100, \"latest_job\": {\"status\": \"cancelled\", \"status_reasons\": [{\"code\": \"cannot_reach_source_share\", \"message\": \"The replication failover failed because the source share cannot be reached.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-file-storage-planning\"}], \"type\": \"replication_failover\"}, \"latest_sync\": {\"completed_at\": \"2019-01-01T12:00:00.000Z\", \"data_transferred\": 0, \"started_at\": \"2019-01-01T12:00:00.000Z\"}, \"lifecycle_reasons\": [{\"code\": \"cloning_in_progress\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"mount_targets\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/mount_targets/r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\", \"id\": \"r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\", \"name\": \"my-share-mount-target\", \"resource_type\": \"share_mount_target\"}], \"name\": \"my-share\", \"origin_share\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"id\": \"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"name\": \"my-share\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"share\"}, \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/share/profiles/tier-3iops\", \"name\": \"tier-3iops\", \"resource_type\": \"share_profile\"}, \"replica_share\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"id\": \"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"name\": \"my-share\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"share\"}, \"replication_cron_spec\": \"0 */5 * * *\", \"replication_role\": \"none\", \"replication_status\": \"active\", \"replication_status_reasons\": [{\"code\": \"cannot_reach_source_share\", \"message\": \"The replication failover failed because the source share cannot be reached.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-file-storage-planning\"}], \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"share\", \"size\": 200, \"snapshot_count\": 0, \"snapshot_size\": 0, \"source_share\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"id\": \"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"name\": \"my-share\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"share\"}, \"source_snapshot\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share-snapshot:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/snapshots/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\", \"id\": \"r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\", \"name\": \"my-share-snapshot\", \"resource_type\": \"share_snapshot\"}, \"user_tags\": [\"userTags\"], \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String updateSharePath = "/shares/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ShareProfileIdentityByName model
    ShareProfileIdentityByName shareProfileIdentityModel = new ShareProfileIdentityByName.Builder()
      .name("tier-3iops")
      .build();

    // Construct an instance of the SharePatch model
    SharePatch sharePatchModel = new SharePatch.Builder()
      .accessControlMode("security_group")
      .allowedTransitEncryptionModes(java.util.Arrays.asList("none"))
      .iops(Long.valueOf("100"))
      .name("my-share")
      .profile(shareProfileIdentityModel)
      .replicationCronSpec("0 */5 * * *")
      .size(Long.valueOf("8000"))
      .userTags(java.util.Arrays.asList("testString"))
      .build();
    Map<String, Object> sharePatchModelAsPatch = sharePatchModel.asPatch();

    // Construct an instance of the UpdateShareOptions model
    UpdateShareOptions updateShareOptionsModel = new UpdateShareOptions.Builder()
      .id("testString")
      .sharePatch(sharePatchModelAsPatch)
      .ifMatch("W/96d225c4-56bd-43d9-98fc-d7148e5c5028")
      .build();

    // Invoke updateShare() with a valid options model and verify the result
    Response<Share> response = vpcService.updateShare(updateShareOptionsModel).execute();
    assertNotNull(response);
    Share responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateSharePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateShare operation with and without retries enabled
  @Test
  public void testUpdateShareWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateShareWOptions();

    vpcService.disableRetries();
    testUpdateShareWOptions();
  }

  // Test the updateShare operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateShareNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateShare(null).execute();
  }

  // Test the listShareAccessorBindings operation with a valid options model parameter
  @Test
  public void testListShareAccessorBindingsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"accessor_bindings\": [{\"accessor\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"id\": \"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"name\": \"my-share\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"share\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/accessor_bindings/r006-ae9bdc18-aed0-4392-841c-142d3300674f\", \"id\": \"r006-ce9dac18-dea0-4392-841c-142d3300674f\", \"lifecycle_state\": \"stable\", \"resource_type\": \"share_accessor_binding\"}], \"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listShareAccessorBindingsPath = "/shares/testString/accessor_bindings";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListShareAccessorBindingsOptions model
    ListShareAccessorBindingsOptions listShareAccessorBindingsOptionsModel = new ListShareAccessorBindingsOptions.Builder()
      .id("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listShareAccessorBindings() with a valid options model and verify the result
    Response<ShareAccessorBindingCollection> response = vpcService.listShareAccessorBindings(listShareAccessorBindingsOptionsModel).execute();
    assertNotNull(response);
    ShareAccessorBindingCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listShareAccessorBindingsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listShareAccessorBindings operation with and without retries enabled
  @Test
  public void testListShareAccessorBindingsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListShareAccessorBindingsWOptions();

    vpcService.disableRetries();
    testListShareAccessorBindingsWOptions();
  }

  // Test the listShareAccessorBindings operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListShareAccessorBindingsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listShareAccessorBindings(null).execute();
  }

  // Test the listShareAccessorBindings operation using the ShareAccessorBindingsPager.getNext() method
  @Test
  public void testListShareAccessorBindingsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"accessor_bindings\":[{\"accessor\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"id\":\"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"name\":\"my-share\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"share\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/accessor_bindings/r006-ae9bdc18-aed0-4392-841c-142d3300674f\",\"id\":\"r006-ce9dac18-dea0-4392-841c-142d3300674f\",\"lifecycle_state\":\"stable\",\"resource_type\":\"share_accessor_binding\"}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"accessor_bindings\":[{\"accessor\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"id\":\"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"name\":\"my-share\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"share\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/accessor_bindings/r006-ae9bdc18-aed0-4392-841c-142d3300674f\",\"id\":\"r006-ce9dac18-dea0-4392-841c-142d3300674f\",\"lifecycle_state\":\"stable\",\"resource_type\":\"share_accessor_binding\"}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListShareAccessorBindingsOptions listShareAccessorBindingsOptions = new ListShareAccessorBindingsOptions.Builder()
      .id("testString")
      .limit(Long.valueOf("10"))
      .build();

    List<ShareAccessorBinding> allResults = new ArrayList<>();
    ShareAccessorBindingsPager pager = new ShareAccessorBindingsPager(vpcService, listShareAccessorBindingsOptions);
    while (pager.hasNext()) {
      List<ShareAccessorBinding> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listShareAccessorBindings operation using the ShareAccessorBindingsPager.getAll() method
  @Test
  public void testListShareAccessorBindingsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"accessor_bindings\":[{\"accessor\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"id\":\"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"name\":\"my-share\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"share\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/accessor_bindings/r006-ae9bdc18-aed0-4392-841c-142d3300674f\",\"id\":\"r006-ce9dac18-dea0-4392-841c-142d3300674f\",\"lifecycle_state\":\"stable\",\"resource_type\":\"share_accessor_binding\"}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"accessor_bindings\":[{\"accessor\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"id\":\"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\",\"name\":\"my-share\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"share\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/accessor_bindings/r006-ae9bdc18-aed0-4392-841c-142d3300674f\",\"id\":\"r006-ce9dac18-dea0-4392-841c-142d3300674f\",\"lifecycle_state\":\"stable\",\"resource_type\":\"share_accessor_binding\"}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListShareAccessorBindingsOptions listShareAccessorBindingsOptions = new ListShareAccessorBindingsOptions.Builder()
      .id("testString")
      .limit(Long.valueOf("10"))
      .build();

    ShareAccessorBindingsPager pager = new ShareAccessorBindingsPager(vpcService, listShareAccessorBindingsOptions);
    List<ShareAccessorBinding> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the deleteShareAccessorBinding operation with a valid options model parameter
  @Test
  public void testDeleteShareAccessorBindingWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteShareAccessorBindingPath = "/shares/testString/accessor_bindings/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteShareAccessorBindingOptions model
    DeleteShareAccessorBindingOptions deleteShareAccessorBindingOptionsModel = new DeleteShareAccessorBindingOptions.Builder()
      .shareId("testString")
      .id("testString")
      .build();

    // Invoke deleteShareAccessorBinding() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteShareAccessorBinding(deleteShareAccessorBindingOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteShareAccessorBindingPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteShareAccessorBinding operation with and without retries enabled
  @Test
  public void testDeleteShareAccessorBindingWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteShareAccessorBindingWOptions();

    vpcService.disableRetries();
    testDeleteShareAccessorBindingWOptions();
  }

  // Test the deleteShareAccessorBinding operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteShareAccessorBindingNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteShareAccessorBinding(null).execute();
  }

  // Test the getShareAccessorBinding operation with a valid options model parameter
  @Test
  public void testGetShareAccessorBindingWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"accessor\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"id\": \"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"name\": \"my-share\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"share\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/accessor_bindings/r006-ae9bdc18-aed0-4392-841c-142d3300674f\", \"id\": \"r006-ce9dac18-dea0-4392-841c-142d3300674f\", \"lifecycle_state\": \"stable\", \"resource_type\": \"share_accessor_binding\"}";
    String getShareAccessorBindingPath = "/shares/testString/accessor_bindings/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetShareAccessorBindingOptions model
    GetShareAccessorBindingOptions getShareAccessorBindingOptionsModel = new GetShareAccessorBindingOptions.Builder()
      .shareId("testString")
      .id("testString")
      .build();

    // Invoke getShareAccessorBinding() with a valid options model and verify the result
    Response<ShareAccessorBinding> response = vpcService.getShareAccessorBinding(getShareAccessorBindingOptionsModel).execute();
    assertNotNull(response);
    ShareAccessorBinding responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getShareAccessorBindingPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getShareAccessorBinding operation with and without retries enabled
  @Test
  public void testGetShareAccessorBindingWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetShareAccessorBindingWOptions();

    vpcService.disableRetries();
    testGetShareAccessorBindingWOptions();
  }

  // Test the getShareAccessorBinding operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetShareAccessorBindingNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getShareAccessorBinding(null).execute();
  }

  // Test the failoverShare operation with a valid options model parameter
  @Test
  public void testFailoverShareWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String failoverSharePath = "/shares/testString/failover";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the FailoverShareOptions model
    FailoverShareOptions failoverShareOptionsModel = new FailoverShareOptions.Builder()
      .shareId("testString")
      .fallbackPolicy("fail")
      .timeout(Long.valueOf("600"))
      .build();

    // Invoke failoverShare() with a valid options model and verify the result
    Response<Void> response = vpcService.failoverShare(failoverShareOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, failoverSharePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the failoverShare operation with and without retries enabled
  @Test
  public void testFailoverShareWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testFailoverShareWOptions();

    vpcService.disableRetries();
    testFailoverShareWOptions();
  }

  // Test the failoverShare operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testFailoverShareNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.failoverShare(null).execute();
  }

  // Test the listShareMountTargets operation with a valid options model parameter
  @Test
  public void testListShareMountTargetsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"mount_targets\": [{\"access_control_mode\": \"security_group\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/mount_targets/r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\", \"id\": \"r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\", \"lifecycle_state\": \"stable\", \"mount_path\": \"10.240.1.23:/nxg_s_voll_mz7121_58e7e963_8f4b_4a0c_b71a_8ba8d9cd1e2e\", \"name\": \"my-share-mount-target\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"share_mount_target\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"transit_encryption\": \"none\", \"virtual_network_interface\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"name\": \"my-virtual-network-interface\", \"resource_type\": \"virtual_network_interface\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}], \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listShareMountTargetsPath = "/shares/testString/mount_targets";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListShareMountTargetsOptions model
    ListShareMountTargetsOptions listShareMountTargetsOptionsModel = new ListShareMountTargetsOptions.Builder()
      .shareId("testString")
      .name("my-name")
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listShareMountTargets() with a valid options model and verify the result
    Response<ShareMountTargetCollection> response = vpcService.listShareMountTargets(listShareMountTargetsOptionsModel).execute();
    assertNotNull(response);
    ShareMountTargetCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listShareMountTargetsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("name"), "my-name");
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listShareMountTargets operation with and without retries enabled
  @Test
  public void testListShareMountTargetsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListShareMountTargetsWOptions();

    vpcService.disableRetries();
    testListShareMountTargetsWOptions();
  }

  // Test the listShareMountTargets operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListShareMountTargetsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listShareMountTargets(null).execute();
  }

  // Test the listShareMountTargets operation using the ShareMountTargetsPager.getNext() method
  @Test
  public void testListShareMountTargetsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"mount_targets\":[{\"access_control_mode\":\"security_group\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/mount_targets/r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\",\"id\":\"r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\",\"lifecycle_state\":\"stable\",\"mount_path\":\"10.240.1.23:/nxg_s_voll_mz7121_58e7e963_8f4b_4a0c_b71a_8ba8d9cd1e2e\",\"name\":\"my-share-mount-target\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"share_mount_target\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"transit_encryption\":\"none\",\"virtual_network_interface\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"id\":\"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"name\":\"my-virtual-network-interface\",\"resource_type\":\"virtual_network_interface\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"mount_targets\":[{\"access_control_mode\":\"security_group\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/mount_targets/r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\",\"id\":\"r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\",\"lifecycle_state\":\"stable\",\"mount_path\":\"10.240.1.23:/nxg_s_voll_mz7121_58e7e963_8f4b_4a0c_b71a_8ba8d9cd1e2e\",\"name\":\"my-share-mount-target\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"share_mount_target\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"transit_encryption\":\"none\",\"virtual_network_interface\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"id\":\"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"name\":\"my-virtual-network-interface\",\"resource_type\":\"virtual_network_interface\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListShareMountTargetsOptions listShareMountTargetsOptions = new ListShareMountTargetsOptions.Builder()
      .shareId("testString")
      .name("my-name")
      .limit(Long.valueOf("10"))
      .build();

    List<ShareMountTarget> allResults = new ArrayList<>();
    ShareMountTargetsPager pager = new ShareMountTargetsPager(vpcService, listShareMountTargetsOptions);
    while (pager.hasNext()) {
      List<ShareMountTarget> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listShareMountTargets operation using the ShareMountTargetsPager.getAll() method
  @Test
  public void testListShareMountTargetsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"mount_targets\":[{\"access_control_mode\":\"security_group\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/mount_targets/r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\",\"id\":\"r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\",\"lifecycle_state\":\"stable\",\"mount_path\":\"10.240.1.23:/nxg_s_voll_mz7121_58e7e963_8f4b_4a0c_b71a_8ba8d9cd1e2e\",\"name\":\"my-share-mount-target\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"share_mount_target\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"transit_encryption\":\"none\",\"virtual_network_interface\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"id\":\"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"name\":\"my-virtual-network-interface\",\"resource_type\":\"virtual_network_interface\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"mount_targets\":[{\"access_control_mode\":\"security_group\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/mount_targets/r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\",\"id\":\"r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\",\"lifecycle_state\":\"stable\",\"mount_path\":\"10.240.1.23:/nxg_s_voll_mz7121_58e7e963_8f4b_4a0c_b71a_8ba8d9cd1e2e\",\"name\":\"my-share-mount-target\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"share_mount_target\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"transit_encryption\":\"none\",\"virtual_network_interface\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"id\":\"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"name\":\"my-virtual-network-interface\",\"resource_type\":\"virtual_network_interface\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListShareMountTargetsOptions listShareMountTargetsOptions = new ListShareMountTargetsOptions.Builder()
      .shareId("testString")
      .name("my-name")
      .limit(Long.valueOf("10"))
      .build();

    ShareMountTargetsPager pager = new ShareMountTargetsPager(vpcService, listShareMountTargetsOptions);
    List<ShareMountTarget> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createShareMountTarget operation with a valid options model parameter
  @Test
  public void testCreateShareMountTargetWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"access_control_mode\": \"security_group\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/mount_targets/r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\", \"id\": \"r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\", \"lifecycle_state\": \"stable\", \"mount_path\": \"10.240.1.23:/nxg_s_voll_mz7121_58e7e963_8f4b_4a0c_b71a_8ba8d9cd1e2e\", \"name\": \"my-share-mount-target\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"share_mount_target\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"transit_encryption\": \"none\", \"virtual_network_interface\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"name\": \"my-virtual-network-interface\", \"resource_type\": \"virtual_network_interface\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String createShareMountTargetPath = "/shares/testString/mount_targets";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the VirtualNetworkInterfaceIPPrototypeReservedIPPrototypeVirtualNetworkInterfaceIPsContext model
    VirtualNetworkInterfaceIPPrototypeReservedIPPrototypeVirtualNetworkInterfaceIPsContext virtualNetworkInterfaceIpPrototypeModel = new VirtualNetworkInterfaceIPPrototypeReservedIPPrototypeVirtualNetworkInterfaceIPsContext.Builder()
      .address("10.0.0.5")
      .autoDelete(false)
      .name("my-reserved-ip")
      .build();

    // Construct an instance of the VirtualNetworkInterfacePrimaryIPPrototypeReservedIPPrototypeVirtualNetworkInterfacePrimaryIPContext model
    VirtualNetworkInterfacePrimaryIPPrototypeReservedIPPrototypeVirtualNetworkInterfacePrimaryIPContext virtualNetworkInterfacePrimaryIpPrototypeModel = new VirtualNetworkInterfacePrimaryIPPrototypeReservedIPPrototypeVirtualNetworkInterfacePrimaryIPContext.Builder()
      .address("10.0.0.5")
      .autoDelete(false)
      .name("my-reserved-ip")
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the SecurityGroupIdentityById model
    SecurityGroupIdentityById securityGroupIdentityModel = new SecurityGroupIdentityById.Builder()
      .id("r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271")
      .build();

    // Construct an instance of the SubnetIdentityById model
    SubnetIdentityById subnetIdentityModel = new SubnetIdentityById.Builder()
      .id("0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
      .build();

    // Construct an instance of the ShareMountTargetVirtualNetworkInterfacePrototypeVirtualNetworkInterfacePrototypeShareMountTargetContext model
    ShareMountTargetVirtualNetworkInterfacePrototypeVirtualNetworkInterfacePrototypeShareMountTargetContext shareMountTargetVirtualNetworkInterfacePrototypeModel = new ShareMountTargetVirtualNetworkInterfacePrototypeVirtualNetworkInterfacePrototypeShareMountTargetContext.Builder()
      .allowIpSpoofing(true)
      .autoDelete(false)
      .enableInfrastructureNat(true)
      .ips(java.util.Arrays.asList(virtualNetworkInterfaceIpPrototypeModel))
      .name("my-virtual-network-interface")
      .primaryIp(virtualNetworkInterfacePrimaryIpPrototypeModel)
      .protocolStateFilteringMode("auto")
      .resourceGroup(resourceGroupIdentityModel)
      .securityGroups(java.util.Arrays.asList(securityGroupIdentityModel))
      .subnet(subnetIdentityModel)
      .build();

    // Construct an instance of the ShareMountTargetPrototypeShareMountTargetByAccessControlModeSecurityGroup model
    ShareMountTargetPrototypeShareMountTargetByAccessControlModeSecurityGroup shareMountTargetPrototypeModel = new ShareMountTargetPrototypeShareMountTargetByAccessControlModeSecurityGroup.Builder()
      .name("my-share-mount-target")
      .transitEncryption("none")
      .virtualNetworkInterface(shareMountTargetVirtualNetworkInterfacePrototypeModel)
      .build();

    // Construct an instance of the CreateShareMountTargetOptions model
    CreateShareMountTargetOptions createShareMountTargetOptionsModel = new CreateShareMountTargetOptions.Builder()
      .shareId("testString")
      .shareMountTargetPrototype(shareMountTargetPrototypeModel)
      .build();

    // Invoke createShareMountTarget() with a valid options model and verify the result
    Response<ShareMountTarget> response = vpcService.createShareMountTarget(createShareMountTargetOptionsModel).execute();
    assertNotNull(response);
    ShareMountTarget responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createShareMountTargetPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createShareMountTarget operation with and without retries enabled
  @Test
  public void testCreateShareMountTargetWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateShareMountTargetWOptions();

    vpcService.disableRetries();
    testCreateShareMountTargetWOptions();
  }

  // Test the createShareMountTarget operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateShareMountTargetNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createShareMountTarget(null).execute();
  }

  // Test the deleteShareMountTarget operation with a valid options model parameter
  @Test
  public void testDeleteShareMountTargetWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"access_control_mode\": \"security_group\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/mount_targets/r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\", \"id\": \"r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\", \"lifecycle_state\": \"stable\", \"mount_path\": \"10.240.1.23:/nxg_s_voll_mz7121_58e7e963_8f4b_4a0c_b71a_8ba8d9cd1e2e\", \"name\": \"my-share-mount-target\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"share_mount_target\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"transit_encryption\": \"none\", \"virtual_network_interface\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"name\": \"my-virtual-network-interface\", \"resource_type\": \"virtual_network_interface\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String deleteShareMountTargetPath = "/shares/testString/mount_targets/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteShareMountTargetOptions model
    DeleteShareMountTargetOptions deleteShareMountTargetOptionsModel = new DeleteShareMountTargetOptions.Builder()
      .shareId("testString")
      .id("testString")
      .build();

    // Invoke deleteShareMountTarget() with a valid options model and verify the result
    Response<ShareMountTarget> response = vpcService.deleteShareMountTarget(deleteShareMountTargetOptionsModel).execute();
    assertNotNull(response);
    ShareMountTarget responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteShareMountTargetPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteShareMountTarget operation with and without retries enabled
  @Test
  public void testDeleteShareMountTargetWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteShareMountTargetWOptions();

    vpcService.disableRetries();
    testDeleteShareMountTargetWOptions();
  }

  // Test the deleteShareMountTarget operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteShareMountTargetNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteShareMountTarget(null).execute();
  }

  // Test the getShareMountTarget operation with a valid options model parameter
  @Test
  public void testGetShareMountTargetWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"access_control_mode\": \"security_group\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/mount_targets/r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\", \"id\": \"r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\", \"lifecycle_state\": \"stable\", \"mount_path\": \"10.240.1.23:/nxg_s_voll_mz7121_58e7e963_8f4b_4a0c_b71a_8ba8d9cd1e2e\", \"name\": \"my-share-mount-target\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"share_mount_target\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"transit_encryption\": \"none\", \"virtual_network_interface\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"name\": \"my-virtual-network-interface\", \"resource_type\": \"virtual_network_interface\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String getShareMountTargetPath = "/shares/testString/mount_targets/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetShareMountTargetOptions model
    GetShareMountTargetOptions getShareMountTargetOptionsModel = new GetShareMountTargetOptions.Builder()
      .shareId("testString")
      .id("testString")
      .build();

    // Invoke getShareMountTarget() with a valid options model and verify the result
    Response<ShareMountTarget> response = vpcService.getShareMountTarget(getShareMountTargetOptionsModel).execute();
    assertNotNull(response);
    ShareMountTarget responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getShareMountTargetPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getShareMountTarget operation with and without retries enabled
  @Test
  public void testGetShareMountTargetWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetShareMountTargetWOptions();

    vpcService.disableRetries();
    testGetShareMountTargetWOptions();
  }

  // Test the getShareMountTarget operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetShareMountTargetNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getShareMountTarget(null).execute();
  }

  // Test the updateShareMountTarget operation with a valid options model parameter
  @Test
  public void testUpdateShareMountTargetWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"access_control_mode\": \"security_group\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/mount_targets/r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\", \"id\": \"r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\", \"lifecycle_state\": \"stable\", \"mount_path\": \"10.240.1.23:/nxg_s_voll_mz7121_58e7e963_8f4b_4a0c_b71a_8ba8d9cd1e2e\", \"name\": \"my-share-mount-target\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"share_mount_target\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"transit_encryption\": \"none\", \"virtual_network_interface\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"name\": \"my-virtual-network-interface\", \"resource_type\": \"virtual_network_interface\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String updateShareMountTargetPath = "/shares/testString/mount_targets/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ShareMountTargetPatch model
    ShareMountTargetPatch shareMountTargetPatchModel = new ShareMountTargetPatch.Builder()
      .name("my-share-mount-target")
      .build();
    Map<String, Object> shareMountTargetPatchModelAsPatch = shareMountTargetPatchModel.asPatch();

    // Construct an instance of the UpdateShareMountTargetOptions model
    UpdateShareMountTargetOptions updateShareMountTargetOptionsModel = new UpdateShareMountTargetOptions.Builder()
      .shareId("testString")
      .id("testString")
      .shareMountTargetPatch(shareMountTargetPatchModelAsPatch)
      .build();

    // Invoke updateShareMountTarget() with a valid options model and verify the result
    Response<ShareMountTarget> response = vpcService.updateShareMountTarget(updateShareMountTargetOptionsModel).execute();
    assertNotNull(response);
    ShareMountTarget responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateShareMountTargetPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateShareMountTarget operation with and without retries enabled
  @Test
  public void testUpdateShareMountTargetWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateShareMountTargetWOptions();

    vpcService.disableRetries();
    testUpdateShareMountTargetWOptions();
  }

  // Test the updateShareMountTarget operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateShareMountTargetNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateShareMountTarget(null).execute();
  }

  // Test the listShareSnapshots operation with a valid options model parameter
  @Test
  public void testListShareSnapshotsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"snapshots\": [{\"backup_policy_plan\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"name\": \"my-policy-plan\", \"remote\": {\"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"backup_policy_plan\"}, \"captured_at\": \"2019-01-01T12:00:00.000Z\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share-snapshot:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\", \"fingerprint\": \"7abc3aef-c2bc-4f65-a296-2928e534d498\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/snapshots/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\", \"id\": \"r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"minimum_size\": 10, \"name\": \"my-share-snapshot\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"share_snapshot\", \"status\": \"available\", \"status_reasons\": [{\"code\": \"encryption_key_deleted\", \"message\": \"message\", \"more_info\": \"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}], \"user_tags\": [\"userTags\"], \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"total_count\": 132}";
    String listShareSnapshotsPath = "/shares/testString/snapshots";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListShareSnapshotsOptions model
    ListShareSnapshotsOptions listShareSnapshotsOptionsModel = new ListShareSnapshotsOptions.Builder()
      .shareId("testString")
      .backupPolicyPlanId("testString")
      .name("my-name")
      .start("testString")
      .limit(Long.valueOf("10"))
      .sort("name")
      .build();

    // Invoke listShareSnapshots() with a valid options model and verify the result
    Response<ShareSnapshotCollection> response = vpcService.listShareSnapshots(listShareSnapshotsOptionsModel).execute();
    assertNotNull(response);
    ShareSnapshotCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listShareSnapshotsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("backup_policy_plan.id"), "testString");
    assertEquals(query.get("name"), "my-name");
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("sort"), "name");
  }

  // Test the listShareSnapshots operation with and without retries enabled
  @Test
  public void testListShareSnapshotsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListShareSnapshotsWOptions();

    vpcService.disableRetries();
    testListShareSnapshotsWOptions();
  }

  // Test the listShareSnapshots operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListShareSnapshotsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listShareSnapshots(null).execute();
  }

  // Test the listShareSnapshots operation using the ShareSnapshotsPager.getNext() method
  @Test
  public void testListShareSnapshotsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"snapshots\":[{\"backup_policy_plan\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"id\":\"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"name\":\"my-policy-plan\",\"remote\":{\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"backup_policy_plan\"},\"captured_at\":\"2019-01-01T12:00:00.000Z\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share-snapshot:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\",\"fingerprint\":\"7abc3aef-c2bc-4f65-a296-2928e534d498\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/snapshots/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\",\"id\":\"r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"minimum_size\":10,\"name\":\"my-share-snapshot\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"share_snapshot\",\"status\":\"available\",\"status_reasons\":[{\"code\":\"encryption_key_deleted\",\"message\":\"message\",\"more_info\":\"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}],\"user_tags\":[\"userTags\"],\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"snapshots\":[{\"backup_policy_plan\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"id\":\"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"name\":\"my-policy-plan\",\"remote\":{\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"backup_policy_plan\"},\"captured_at\":\"2019-01-01T12:00:00.000Z\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share-snapshot:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\",\"fingerprint\":\"7abc3aef-c2bc-4f65-a296-2928e534d498\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/snapshots/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\",\"id\":\"r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"minimum_size\":10,\"name\":\"my-share-snapshot\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"share_snapshot\",\"status\":\"available\",\"status_reasons\":[{\"code\":\"encryption_key_deleted\",\"message\":\"message\",\"more_info\":\"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}],\"user_tags\":[\"userTags\"],\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListShareSnapshotsOptions listShareSnapshotsOptions = new ListShareSnapshotsOptions.Builder()
      .shareId("testString")
      .backupPolicyPlanId("testString")
      .name("my-name")
      .limit(Long.valueOf("10"))
      .sort("name")
      .build();

    List<ShareSnapshot> allResults = new ArrayList<>();
    ShareSnapshotsPager pager = new ShareSnapshotsPager(vpcService, listShareSnapshotsOptions);
    while (pager.hasNext()) {
      List<ShareSnapshot> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listShareSnapshots operation using the ShareSnapshotsPager.getAll() method
  @Test
  public void testListShareSnapshotsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"snapshots\":[{\"backup_policy_plan\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"id\":\"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"name\":\"my-policy-plan\",\"remote\":{\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"backup_policy_plan\"},\"captured_at\":\"2019-01-01T12:00:00.000Z\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share-snapshot:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\",\"fingerprint\":\"7abc3aef-c2bc-4f65-a296-2928e534d498\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/snapshots/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\",\"id\":\"r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"minimum_size\":10,\"name\":\"my-share-snapshot\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"share_snapshot\",\"status\":\"available\",\"status_reasons\":[{\"code\":\"encryption_key_deleted\",\"message\":\"message\",\"more_info\":\"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}],\"user_tags\":[\"userTags\"],\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"snapshots\":[{\"backup_policy_plan\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"id\":\"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"name\":\"my-policy-plan\",\"remote\":{\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"backup_policy_plan\"},\"captured_at\":\"2019-01-01T12:00:00.000Z\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share-snapshot:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\",\"fingerprint\":\"7abc3aef-c2bc-4f65-a296-2928e534d498\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/snapshots/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\",\"id\":\"r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"minimum_size\":10,\"name\":\"my-share-snapshot\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"share_snapshot\",\"status\":\"available\",\"status_reasons\":[{\"code\":\"encryption_key_deleted\",\"message\":\"message\",\"more_info\":\"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}],\"user_tags\":[\"userTags\"],\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListShareSnapshotsOptions listShareSnapshotsOptions = new ListShareSnapshotsOptions.Builder()
      .shareId("testString")
      .backupPolicyPlanId("testString")
      .name("my-name")
      .limit(Long.valueOf("10"))
      .sort("name")
      .build();

    ShareSnapshotsPager pager = new ShareSnapshotsPager(vpcService, listShareSnapshotsOptions);
    List<ShareSnapshot> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createShareSnapshot operation with a valid options model parameter
  @Test
  public void testCreateShareSnapshotWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"backup_policy_plan\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"name\": \"my-policy-plan\", \"remote\": {\"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"backup_policy_plan\"}, \"captured_at\": \"2019-01-01T12:00:00.000Z\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share-snapshot:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\", \"fingerprint\": \"7abc3aef-c2bc-4f65-a296-2928e534d498\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/snapshots/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\", \"id\": \"r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"minimum_size\": 10, \"name\": \"my-share-snapshot\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"share_snapshot\", \"status\": \"available\", \"status_reasons\": [{\"code\": \"encryption_key_deleted\", \"message\": \"message\", \"more_info\": \"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}], \"user_tags\": [\"userTags\"], \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String createShareSnapshotPath = "/shares/testString/snapshots";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the CreateShareSnapshotOptions model
    CreateShareSnapshotOptions createShareSnapshotOptionsModel = new CreateShareSnapshotOptions.Builder()
      .shareId("testString")
      .name("my-share-snapshot")
      .userTags(java.util.Arrays.asList("testString"))
      .build();

    // Invoke createShareSnapshot() with a valid options model and verify the result
    Response<ShareSnapshot> response = vpcService.createShareSnapshot(createShareSnapshotOptionsModel).execute();
    assertNotNull(response);
    ShareSnapshot responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createShareSnapshotPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createShareSnapshot operation with and without retries enabled
  @Test
  public void testCreateShareSnapshotWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateShareSnapshotWOptions();

    vpcService.disableRetries();
    testCreateShareSnapshotWOptions();
  }

  // Test the createShareSnapshot operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateShareSnapshotNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createShareSnapshot(null).execute();
  }

  // Test the deleteShareSnapshot operation with a valid options model parameter
  @Test
  public void testDeleteShareSnapshotWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"backup_policy_plan\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"name\": \"my-policy-plan\", \"remote\": {\"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"backup_policy_plan\"}, \"captured_at\": \"2019-01-01T12:00:00.000Z\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share-snapshot:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\", \"fingerprint\": \"7abc3aef-c2bc-4f65-a296-2928e534d498\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/snapshots/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\", \"id\": \"r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"minimum_size\": 10, \"name\": \"my-share-snapshot\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"share_snapshot\", \"status\": \"available\", \"status_reasons\": [{\"code\": \"encryption_key_deleted\", \"message\": \"message\", \"more_info\": \"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}], \"user_tags\": [\"userTags\"], \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String deleteShareSnapshotPath = "/shares/testString/snapshots/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteShareSnapshotOptions model
    DeleteShareSnapshotOptions deleteShareSnapshotOptionsModel = new DeleteShareSnapshotOptions.Builder()
      .shareId("testString")
      .id("testString")
      .build();

    // Invoke deleteShareSnapshot() with a valid options model and verify the result
    Response<ShareSnapshot> response = vpcService.deleteShareSnapshot(deleteShareSnapshotOptionsModel).execute();
    assertNotNull(response);
    ShareSnapshot responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteShareSnapshotPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteShareSnapshot operation with and without retries enabled
  @Test
  public void testDeleteShareSnapshotWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteShareSnapshotWOptions();

    vpcService.disableRetries();
    testDeleteShareSnapshotWOptions();
  }

  // Test the deleteShareSnapshot operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteShareSnapshotNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteShareSnapshot(null).execute();
  }

  // Test the getShareSnapshot operation with a valid options model parameter
  @Test
  public void testGetShareSnapshotWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"backup_policy_plan\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"name\": \"my-policy-plan\", \"remote\": {\"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"backup_policy_plan\"}, \"captured_at\": \"2019-01-01T12:00:00.000Z\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share-snapshot:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\", \"fingerprint\": \"7abc3aef-c2bc-4f65-a296-2928e534d498\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/snapshots/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\", \"id\": \"r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"minimum_size\": 10, \"name\": \"my-share-snapshot\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"share_snapshot\", \"status\": \"available\", \"status_reasons\": [{\"code\": \"encryption_key_deleted\", \"message\": \"message\", \"more_info\": \"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}], \"user_tags\": [\"userTags\"], \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getShareSnapshotPath = "/shares/testString/snapshots/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetShareSnapshotOptions model
    GetShareSnapshotOptions getShareSnapshotOptionsModel = new GetShareSnapshotOptions.Builder()
      .shareId("testString")
      .id("testString")
      .build();

    // Invoke getShareSnapshot() with a valid options model and verify the result
    Response<ShareSnapshot> response = vpcService.getShareSnapshot(getShareSnapshotOptionsModel).execute();
    assertNotNull(response);
    ShareSnapshot responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getShareSnapshotPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getShareSnapshot operation with and without retries enabled
  @Test
  public void testGetShareSnapshotWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetShareSnapshotWOptions();

    vpcService.disableRetries();
    testGetShareSnapshotWOptions();
  }

  // Test the getShareSnapshot operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetShareSnapshotNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getShareSnapshot(null).execute();
  }

  // Test the updateShareSnapshot operation with a valid options model parameter
  @Test
  public void testUpdateShareSnapshotWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"backup_policy_plan\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"name\": \"my-policy-plan\", \"remote\": {\"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"backup_policy_plan\"}, \"captured_at\": \"2019-01-01T12:00:00.000Z\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share-snapshot:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\", \"fingerprint\": \"7abc3aef-c2bc-4f65-a296-2928e534d498\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/snapshots/r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\", \"id\": \"r006-e13ee54f-baa4-40d3-b35c-b9ec163972b4\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"minimum_size\": 10, \"name\": \"my-share-snapshot\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"share_snapshot\", \"status\": \"available\", \"status_reasons\": [{\"code\": \"encryption_key_deleted\", \"message\": \"message\", \"more_info\": \"https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys\"}], \"user_tags\": [\"userTags\"], \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String updateShareSnapshotPath = "/shares/testString/snapshots/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ShareSnapshotPatch model
    ShareSnapshotPatch shareSnapshotPatchModel = new ShareSnapshotPatch.Builder()
      .userTags(java.util.Arrays.asList("testString"))
      .build();
    Map<String, Object> shareSnapshotPatchModelAsPatch = shareSnapshotPatchModel.asPatch();

    // Construct an instance of the UpdateShareSnapshotOptions model
    UpdateShareSnapshotOptions updateShareSnapshotOptionsModel = new UpdateShareSnapshotOptions.Builder()
      .shareId("testString")
      .id("testString")
      .shareSnapshotPatch(shareSnapshotPatchModelAsPatch)
      .ifMatch("W/96d225c4-56bd-43d9-98fc-d7148e5c5028")
      .build();

    // Invoke updateShareSnapshot() with a valid options model and verify the result
    Response<ShareSnapshot> response = vpcService.updateShareSnapshot(updateShareSnapshotOptionsModel).execute();
    assertNotNull(response);
    ShareSnapshot responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateShareSnapshotPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateShareSnapshot operation with and without retries enabled
  @Test
  public void testUpdateShareSnapshotWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateShareSnapshotWOptions();

    vpcService.disableRetries();
    testUpdateShareSnapshotWOptions();
  }

  // Test the updateShareSnapshot operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateShareSnapshotNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateShareSnapshot(null).execute();
  }

  // Test the deleteShareSource operation with a valid options model parameter
  @Test
  public void testDeleteShareSourceWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteShareSourcePath = "/shares/testString/source";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteShareSourceOptions model
    DeleteShareSourceOptions deleteShareSourceOptionsModel = new DeleteShareSourceOptions.Builder()
      .shareId("testString")
      .build();

    // Invoke deleteShareSource() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteShareSource(deleteShareSourceOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteShareSourcePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteShareSource operation with and without retries enabled
  @Test
  public void testDeleteShareSourceWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteShareSourceWOptions();

    vpcService.disableRetries();
    testDeleteShareSourceWOptions();
  }

  // Test the deleteShareSource operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteShareSourceNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteShareSource(null).execute();
  }

  // Test the getShareSource operation with a valid options model parameter
  @Test
  public void testGetShareSourceWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::share:r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"id\": \"r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58\", \"name\": \"my-share\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"share\"}";
    String getShareSourcePath = "/shares/testString/source";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetShareSourceOptions model
    GetShareSourceOptions getShareSourceOptionsModel = new GetShareSourceOptions.Builder()
      .shareId("testString")
      .build();

    // Invoke getShareSource() with a valid options model and verify the result
    Response<ShareReference> response = vpcService.getShareSource(getShareSourceOptionsModel).execute();
    assertNotNull(response);
    ShareReference responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getShareSourcePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getShareSource operation with and without retries enabled
  @Test
  public void testGetShareSourceWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetShareSourceWOptions();

    vpcService.disableRetries();
    testGetShareSourceWOptions();
  }

  // Test the getShareSource operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetShareSourceNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getShareSource(null).execute();
  }

  // Test the listBackupPolicies operation with a valid options model parameter
  @Test
  public void testListBackupPoliciesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"backup_policies\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::backup-policy:r006-076191ba-49c2-4763-94fd-c70de73ee2e6\", \"health_reasons\": [{\"code\": \"missing_service_authorization_policies\", \"message\": \"One or more accounts are missing service authorization policies\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-backup-service-about&interface=ui\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6\", \"id\": \"r006-076191ba-49c2-4763-94fd-c70de73ee2e6\", \"last_job_completed_at\": \"2019-01-01T12:00:00.000Z\", \"lifecycle_state\": \"stable\", \"match_user_tags\": [\"matchUserTags\"], \"name\": \"my-backup-policy\", \"plans\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"name\": \"my-policy-plan\", \"remote\": {\"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"backup_policy_plan\"}], \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"backup_policy\", \"scope\": {\"crn\": \"crn:v1:bluemix:public:enterprise::a/aa2432b1fa4d4ace891e9b80fc104e34::enterprise:ebc2b430240943458b9e91e1432cfcce\", \"id\": \"ebc2b430240943458b9e91e1432cfcce\", \"resource_type\": \"enterprise\"}, \"included_content\": [\"data_volumes\"], \"match_resource_type\": \"instance\"}], \"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listBackupPoliciesPath = "/backup_policies";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListBackupPoliciesOptions model
    ListBackupPoliciesOptions listBackupPoliciesOptionsModel = new ListBackupPoliciesOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("my-name")
      .tag("testString")
      .build();

    // Invoke listBackupPolicies() with a valid options model and verify the result
    Response<BackupPolicyCollection> response = vpcService.listBackupPolicies(listBackupPoliciesOptionsModel).execute();
    assertNotNull(response);
    BackupPolicyCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listBackupPoliciesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
    assertEquals(query.get("name"), "my-name");
    assertEquals(query.get("tag"), "testString");
  }

  // Test the listBackupPolicies operation with and without retries enabled
  @Test
  public void testListBackupPoliciesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListBackupPoliciesWOptions();

    vpcService.disableRetries();
    testListBackupPoliciesWOptions();
  }

  // Test the listBackupPolicies operation using the BackupPoliciesPager.getNext() method
  @Test
  public void testListBackupPoliciesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"backup_policies\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::backup-policy:r006-076191ba-49c2-4763-94fd-c70de73ee2e6\",\"health_reasons\":[{\"code\":\"missing_service_authorization_policies\",\"message\":\"One or more accounts are missing service authorization policies\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-backup-service-about&interface=ui\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6\",\"id\":\"r006-076191ba-49c2-4763-94fd-c70de73ee2e6\",\"last_job_completed_at\":\"2019-01-01T12:00:00.000Z\",\"lifecycle_state\":\"stable\",\"match_user_tags\":[\"matchUserTags\"],\"name\":\"my-backup-policy\",\"plans\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"id\":\"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"name\":\"my-policy-plan\",\"remote\":{\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"backup_policy_plan\"}],\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"backup_policy\",\"scope\":{\"crn\":\"crn:v1:bluemix:public:enterprise::a/aa2432b1fa4d4ace891e9b80fc104e34::enterprise:ebc2b430240943458b9e91e1432cfcce\",\"id\":\"ebc2b430240943458b9e91e1432cfcce\",\"resource_type\":\"enterprise\"},\"included_content\":[\"data_volumes\"],\"match_resource_type\":\"instance\"}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"backup_policies\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::backup-policy:r006-076191ba-49c2-4763-94fd-c70de73ee2e6\",\"health_reasons\":[{\"code\":\"missing_service_authorization_policies\",\"message\":\"One or more accounts are missing service authorization policies\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-backup-service-about&interface=ui\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6\",\"id\":\"r006-076191ba-49c2-4763-94fd-c70de73ee2e6\",\"last_job_completed_at\":\"2019-01-01T12:00:00.000Z\",\"lifecycle_state\":\"stable\",\"match_user_tags\":[\"matchUserTags\"],\"name\":\"my-backup-policy\",\"plans\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"id\":\"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"name\":\"my-policy-plan\",\"remote\":{\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"backup_policy_plan\"}],\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"backup_policy\",\"scope\":{\"crn\":\"crn:v1:bluemix:public:enterprise::a/aa2432b1fa4d4ace891e9b80fc104e34::enterprise:ebc2b430240943458b9e91e1432cfcce\",\"id\":\"ebc2b430240943458b9e91e1432cfcce\",\"resource_type\":\"enterprise\"},\"included_content\":[\"data_volumes\"],\"match_resource_type\":\"instance\"}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListBackupPoliciesOptions listBackupPoliciesOptions = new ListBackupPoliciesOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("my-name")
      .tag("testString")
      .build();

    List<BackupPolicy> allResults = new ArrayList<>();
    BackupPoliciesPager pager = new BackupPoliciesPager(vpcService, listBackupPoliciesOptions);
    while (pager.hasNext()) {
      List<BackupPolicy> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listBackupPolicies operation using the BackupPoliciesPager.getAll() method
  @Test
  public void testListBackupPoliciesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"backup_policies\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::backup-policy:r006-076191ba-49c2-4763-94fd-c70de73ee2e6\",\"health_reasons\":[{\"code\":\"missing_service_authorization_policies\",\"message\":\"One or more accounts are missing service authorization policies\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-backup-service-about&interface=ui\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6\",\"id\":\"r006-076191ba-49c2-4763-94fd-c70de73ee2e6\",\"last_job_completed_at\":\"2019-01-01T12:00:00.000Z\",\"lifecycle_state\":\"stable\",\"match_user_tags\":[\"matchUserTags\"],\"name\":\"my-backup-policy\",\"plans\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"id\":\"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"name\":\"my-policy-plan\",\"remote\":{\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"backup_policy_plan\"}],\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"backup_policy\",\"scope\":{\"crn\":\"crn:v1:bluemix:public:enterprise::a/aa2432b1fa4d4ace891e9b80fc104e34::enterprise:ebc2b430240943458b9e91e1432cfcce\",\"id\":\"ebc2b430240943458b9e91e1432cfcce\",\"resource_type\":\"enterprise\"},\"included_content\":[\"data_volumes\"],\"match_resource_type\":\"instance\"}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"backup_policies\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::backup-policy:r006-076191ba-49c2-4763-94fd-c70de73ee2e6\",\"health_reasons\":[{\"code\":\"missing_service_authorization_policies\",\"message\":\"One or more accounts are missing service authorization policies\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-backup-service-about&interface=ui\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6\",\"id\":\"r006-076191ba-49c2-4763-94fd-c70de73ee2e6\",\"last_job_completed_at\":\"2019-01-01T12:00:00.000Z\",\"lifecycle_state\":\"stable\",\"match_user_tags\":[\"matchUserTags\"],\"name\":\"my-backup-policy\",\"plans\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"id\":\"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"name\":\"my-policy-plan\",\"remote\":{\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"backup_policy_plan\"}],\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"backup_policy\",\"scope\":{\"crn\":\"crn:v1:bluemix:public:enterprise::a/aa2432b1fa4d4ace891e9b80fc104e34::enterprise:ebc2b430240943458b9e91e1432cfcce\",\"id\":\"ebc2b430240943458b9e91e1432cfcce\",\"resource_type\":\"enterprise\"},\"included_content\":[\"data_volumes\"],\"match_resource_type\":\"instance\"}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListBackupPoliciesOptions listBackupPoliciesOptions = new ListBackupPoliciesOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("my-name")
      .tag("testString")
      .build();

    BackupPoliciesPager pager = new BackupPoliciesPager(vpcService, listBackupPoliciesOptions);
    List<BackupPolicy> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createBackupPolicy operation with a valid options model parameter
  @Test
  public void testCreateBackupPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::backup-policy:r006-076191ba-49c2-4763-94fd-c70de73ee2e6\", \"health_reasons\": [{\"code\": \"missing_service_authorization_policies\", \"message\": \"One or more accounts are missing service authorization policies\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-backup-service-about&interface=ui\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6\", \"id\": \"r006-076191ba-49c2-4763-94fd-c70de73ee2e6\", \"last_job_completed_at\": \"2019-01-01T12:00:00.000Z\", \"lifecycle_state\": \"stable\", \"match_user_tags\": [\"matchUserTags\"], \"name\": \"my-backup-policy\", \"plans\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"name\": \"my-policy-plan\", \"remote\": {\"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"backup_policy_plan\"}], \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"backup_policy\", \"scope\": {\"crn\": \"crn:v1:bluemix:public:enterprise::a/aa2432b1fa4d4ace891e9b80fc104e34::enterprise:ebc2b430240943458b9e91e1432cfcce\", \"id\": \"ebc2b430240943458b9e91e1432cfcce\", \"resource_type\": \"enterprise\"}, \"included_content\": [\"data_volumes\"], \"match_resource_type\": \"instance\"}";
    String createBackupPolicyPath = "/backup_policies";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ZoneIdentityByName model
    ZoneIdentityByName zoneIdentityModel = new ZoneIdentityByName.Builder()
      .name("us-south-1")
      .build();

    // Construct an instance of the BackupPolicyPlanClonePolicyPrototype model
    BackupPolicyPlanClonePolicyPrototype backupPolicyPlanClonePolicyPrototypeModel = new BackupPolicyPlanClonePolicyPrototype.Builder()
      .maxSnapshots(Long.valueOf("5"))
      .zones(java.util.Arrays.asList(zoneIdentityModel))
      .build();

    // Construct an instance of the BackupPolicyPlanDeletionTriggerPrototype model
    BackupPolicyPlanDeletionTriggerPrototype backupPolicyPlanDeletionTriggerPrototypeModel = new BackupPolicyPlanDeletionTriggerPrototype.Builder()
      .deleteAfter(Long.valueOf("20"))
      .deleteOverCount(Long.valueOf("20"))
      .build();

    // Construct an instance of the EncryptionKeyIdentityByCRN model
    EncryptionKeyIdentityByCRN encryptionKeyIdentityModel = new EncryptionKeyIdentityByCRN.Builder()
      .crn("crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")
      .build();

    // Construct an instance of the RegionIdentityByName model
    RegionIdentityByName regionIdentityModel = new RegionIdentityByName.Builder()
      .name("us-south")
      .build();

    // Construct an instance of the BackupPolicyPlanRemoteRegionPolicyPrototype model
    BackupPolicyPlanRemoteRegionPolicyPrototype backupPolicyPlanRemoteRegionPolicyPrototypeModel = new BackupPolicyPlanRemoteRegionPolicyPrototype.Builder()
      .deleteOverCount(Long.valueOf("5"))
      .encryptionKey(encryptionKeyIdentityModel)
      .region(regionIdentityModel)
      .build();

    // Construct an instance of the BackupPolicyPlanPrototype model
    BackupPolicyPlanPrototype backupPolicyPlanPrototypeModel = new BackupPolicyPlanPrototype.Builder()
      .active(true)
      .attachUserTags(java.util.Arrays.asList("my-daily-backup-plan"))
      .clonePolicy(backupPolicyPlanClonePolicyPrototypeModel)
      .copyUserTags(true)
      .cronSpec("30 */2 * * 1-5")
      .deletionTrigger(backupPolicyPlanDeletionTriggerPrototypeModel)
      .name("my-policy-plan")
      .remoteRegionPolicies(java.util.Arrays.asList(backupPolicyPlanRemoteRegionPolicyPrototypeModel))
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the BackupPolicyScopePrototypeEnterpriseIdentityEnterpriseIdentityByCRN model
    BackupPolicyScopePrototypeEnterpriseIdentityEnterpriseIdentityByCRN backupPolicyScopePrototypeModel = new BackupPolicyScopePrototypeEnterpriseIdentityEnterpriseIdentityByCRN.Builder()
      .crn("crn:v1:bluemix:public:enterprise::a/aa2432b1fa4d4ace891e9b80fc104e34::enterprise:ebc2b430240943458b9e91e1432cfcce")
      .build();

    // Construct an instance of the BackupPolicyPrototypeBackupPolicyMatchResourceTypeVolumePrototype model
    BackupPolicyPrototypeBackupPolicyMatchResourceTypeVolumePrototype backupPolicyPrototypeModel = new BackupPolicyPrototypeBackupPolicyMatchResourceTypeVolumePrototype.Builder()
      .matchUserTags(java.util.Arrays.asList("my-daily-backup-policy"))
      .name("my-backup-policy")
      .plans(java.util.Arrays.asList(backupPolicyPlanPrototypeModel))
      .resourceGroup(resourceGroupIdentityModel)
      .scope(backupPolicyScopePrototypeModel)
      .matchResourceType("volume")
      .build();

    // Construct an instance of the CreateBackupPolicyOptions model
    CreateBackupPolicyOptions createBackupPolicyOptionsModel = new CreateBackupPolicyOptions.Builder()
      .backupPolicyPrototype(backupPolicyPrototypeModel)
      .build();

    // Invoke createBackupPolicy() with a valid options model and verify the result
    Response<BackupPolicy> response = vpcService.createBackupPolicy(createBackupPolicyOptionsModel).execute();
    assertNotNull(response);
    BackupPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createBackupPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createBackupPolicy operation with and without retries enabled
  @Test
  public void testCreateBackupPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateBackupPolicyWOptions();

    vpcService.disableRetries();
    testCreateBackupPolicyWOptions();
  }

  // Test the createBackupPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateBackupPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createBackupPolicy(null).execute();
  }

  // Test the listBackupPolicyJobs operation with a valid options model parameter
  @Test
  public void testListBackupPolicyJobsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"jobs\": [{\"auto_delete\": true, \"auto_delete_after\": 90, \"backup_policy_plan\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"name\": \"my-policy-plan\", \"remote\": {\"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"backup_policy_plan\"}, \"completed_at\": \"2019-01-01T12:00:00.000Z\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/jobs/r006-fc4b7fbc-38af-45d9-9fb6-bf0533acbf90\", \"id\": \"r006-fc4b7fbc-38af-45d9-9fb6-bf0533acbf90\", \"job_type\": \"creation\", \"resource_type\": \"backup_policy_job\", \"source\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\", \"remote\": {\"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"volume\"}, \"status\": \"failed\", \"status_reasons\": [{\"code\": \"source_volume_busy\", \"message\": \"message\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-baas-troubleshoot\"}], \"target_snapshots\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"id\": \"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"name\": \"my-snapshot\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"snapshot\"}]}], \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listBackupPolicyJobsPath = "/backup_policies/testString/jobs";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListBackupPolicyJobsOptions model
    ListBackupPolicyJobsOptions listBackupPolicyJobsOptionsModel = new ListBackupPolicyJobsOptions.Builder()
      .backupPolicyId("testString")
      .status("failed")
      .backupPolicyPlanId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .sort("name")
      .sourceId("testString")
      .targetSnapshotsId("testString")
      .targetSnapshotsCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263")
      .build();

    // Invoke listBackupPolicyJobs() with a valid options model and verify the result
    Response<BackupPolicyJobCollection> response = vpcService.listBackupPolicyJobs(listBackupPolicyJobsOptionsModel).execute();
    assertNotNull(response);
    BackupPolicyJobCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listBackupPolicyJobsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("status"), "failed");
    assertEquals(query.get("backup_policy_plan.id"), "testString");
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("sort"), "name");
    assertEquals(query.get("source.id"), "testString");
    assertEquals(query.get("target_snapshots[].id"), "testString");
    assertEquals(query.get("target_snapshots[].crn"), "crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263");
  }

  // Test the listBackupPolicyJobs operation with and without retries enabled
  @Test
  public void testListBackupPolicyJobsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListBackupPolicyJobsWOptions();

    vpcService.disableRetries();
    testListBackupPolicyJobsWOptions();
  }

  // Test the listBackupPolicyJobs operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListBackupPolicyJobsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listBackupPolicyJobs(null).execute();
  }

  // Test the listBackupPolicyJobs operation using the BackupPolicyJobsPager.getNext() method
  @Test
  public void testListBackupPolicyJobsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"jobs\":[{\"auto_delete\":true,\"auto_delete_after\":90,\"backup_policy_plan\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"id\":\"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"name\":\"my-policy-plan\",\"remote\":{\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"backup_policy_plan\"},\"completed_at\":\"2019-01-01T12:00:00.000Z\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/jobs/r006-fc4b7fbc-38af-45d9-9fb6-bf0533acbf90\",\"id\":\"r006-fc4b7fbc-38af-45d9-9fb6-bf0533acbf90\",\"job_type\":\"creation\",\"resource_type\":\"backup_policy_job\",\"source\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\",\"remote\":{\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"volume\"},\"status\":\"failed\",\"status_reasons\":[{\"code\":\"source_volume_busy\",\"message\":\"message\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-baas-troubleshoot\"}],\"target_snapshots\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"name\":\"my-snapshot\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"snapshot\"}]}],\"limit\":1}";
    String mockResponsePage2 = "{\"total_count\":2,\"jobs\":[{\"auto_delete\":true,\"auto_delete_after\":90,\"backup_policy_plan\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"id\":\"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"name\":\"my-policy-plan\",\"remote\":{\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"backup_policy_plan\"},\"completed_at\":\"2019-01-01T12:00:00.000Z\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/jobs/r006-fc4b7fbc-38af-45d9-9fb6-bf0533acbf90\",\"id\":\"r006-fc4b7fbc-38af-45d9-9fb6-bf0533acbf90\",\"job_type\":\"creation\",\"resource_type\":\"backup_policy_job\",\"source\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\",\"remote\":{\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"volume\"},\"status\":\"failed\",\"status_reasons\":[{\"code\":\"source_volume_busy\",\"message\":\"message\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-baas-troubleshoot\"}],\"target_snapshots\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"name\":\"my-snapshot\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"snapshot\"}]}],\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListBackupPolicyJobsOptions listBackupPolicyJobsOptions = new ListBackupPolicyJobsOptions.Builder()
      .backupPolicyId("testString")
      .status("failed")
      .backupPolicyPlanId("testString")
      .limit(Long.valueOf("10"))
      .sort("name")
      .sourceId("testString")
      .targetSnapshotsId("testString")
      .targetSnapshotsCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263")
      .build();

    List<BackupPolicyJob> allResults = new ArrayList<>();
    BackupPolicyJobsPager pager = new BackupPolicyJobsPager(vpcService, listBackupPolicyJobsOptions);
    while (pager.hasNext()) {
      List<BackupPolicyJob> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listBackupPolicyJobs operation using the BackupPolicyJobsPager.getAll() method
  @Test
  public void testListBackupPolicyJobsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"jobs\":[{\"auto_delete\":true,\"auto_delete_after\":90,\"backup_policy_plan\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"id\":\"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"name\":\"my-policy-plan\",\"remote\":{\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"backup_policy_plan\"},\"completed_at\":\"2019-01-01T12:00:00.000Z\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/jobs/r006-fc4b7fbc-38af-45d9-9fb6-bf0533acbf90\",\"id\":\"r006-fc4b7fbc-38af-45d9-9fb6-bf0533acbf90\",\"job_type\":\"creation\",\"resource_type\":\"backup_policy_job\",\"source\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\",\"remote\":{\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"volume\"},\"status\":\"failed\",\"status_reasons\":[{\"code\":\"source_volume_busy\",\"message\":\"message\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-baas-troubleshoot\"}],\"target_snapshots\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"name\":\"my-snapshot\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"snapshot\"}]}],\"limit\":1}";
    String mockResponsePage2 = "{\"total_count\":2,\"jobs\":[{\"auto_delete\":true,\"auto_delete_after\":90,\"backup_policy_plan\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"id\":\"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\",\"name\":\"my-policy-plan\",\"remote\":{\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"backup_policy_plan\"},\"completed_at\":\"2019-01-01T12:00:00.000Z\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/jobs/r006-fc4b7fbc-38af-45d9-9fb6-bf0533acbf90\",\"id\":\"r006-fc4b7fbc-38af-45d9-9fb6-bf0533acbf90\",\"job_type\":\"creation\",\"resource_type\":\"backup_policy_job\",\"source\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"id\":\"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\",\"name\":\"my-volume\",\"remote\":{\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"volume\"},\"status\":\"failed\",\"status_reasons\":[{\"code\":\"source_volume_busy\",\"message\":\"message\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-baas-troubleshoot\"}],\"target_snapshots\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"id\":\"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\",\"name\":\"my-snapshot\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"snapshot\"}]}],\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListBackupPolicyJobsOptions listBackupPolicyJobsOptions = new ListBackupPolicyJobsOptions.Builder()
      .backupPolicyId("testString")
      .status("failed")
      .backupPolicyPlanId("testString")
      .limit(Long.valueOf("10"))
      .sort("name")
      .sourceId("testString")
      .targetSnapshotsId("testString")
      .targetSnapshotsCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263")
      .build();

    BackupPolicyJobsPager pager = new BackupPolicyJobsPager(vpcService, listBackupPolicyJobsOptions);
    List<BackupPolicyJob> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the getBackupPolicyJob operation with a valid options model parameter
  @Test
  public void testGetBackupPolicyJobWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"auto_delete\": true, \"auto_delete_after\": 90, \"backup_policy_plan\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"name\": \"my-policy-plan\", \"remote\": {\"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"backup_policy_plan\"}, \"completed_at\": \"2019-01-01T12:00:00.000Z\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/jobs/r006-fc4b7fbc-38af-45d9-9fb6-bf0533acbf90\", \"id\": \"r006-fc4b7fbc-38af-45d9-9fb6-bf0533acbf90\", \"job_type\": \"creation\", \"resource_type\": \"backup_policy_job\", \"source\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::volume:r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/volumes/r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"id\": \"r006-1a6b7274-678d-4dfb-8981-c71dd9d4daa5\", \"name\": \"my-volume\", \"remote\": {\"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"volume\"}, \"status\": \"failed\", \"status_reasons\": [{\"code\": \"source_volume_busy\", \"message\": \"message\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-baas-troubleshoot\"}], \"target_snapshots\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::snapshot:r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/snapshots/r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"id\": \"r006-f6bfa329-0e36-433f-a3bb-0df632e79263\", \"name\": \"my-snapshot\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"snapshot\"}]}";
    String getBackupPolicyJobPath = "/backup_policies/testString/jobs/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetBackupPolicyJobOptions model
    GetBackupPolicyJobOptions getBackupPolicyJobOptionsModel = new GetBackupPolicyJobOptions.Builder()
      .backupPolicyId("testString")
      .id("testString")
      .build();

    // Invoke getBackupPolicyJob() with a valid options model and verify the result
    Response<BackupPolicyJob> response = vpcService.getBackupPolicyJob(getBackupPolicyJobOptionsModel).execute();
    assertNotNull(response);
    BackupPolicyJob responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getBackupPolicyJobPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getBackupPolicyJob operation with and without retries enabled
  @Test
  public void testGetBackupPolicyJobWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetBackupPolicyJobWOptions();

    vpcService.disableRetries();
    testGetBackupPolicyJobWOptions();
  }

  // Test the getBackupPolicyJob operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetBackupPolicyJobNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getBackupPolicyJob(null).execute();
  }

  // Test the listBackupPolicyPlans operation with a valid options model parameter
  @Test
  public void testListBackupPolicyPlansWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"plans\": [{\"active\": true, \"attach_user_tags\": [\"attachUserTags\"], \"clone_policy\": {\"max_snapshots\": 1, \"zones\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}]}, \"copy_user_tags\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"cron_spec\": \"30 */2 * * 1-5\", \"deletion_trigger\": {\"delete_after\": 20, \"delete_over_count\": 20}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"lifecycle_state\": \"stable\", \"name\": \"my-policy-plan\", \"remote_region_policies\": [{\"delete_over_count\": 1, \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}], \"resource_type\": \"backup_policy_plan\"}], \"total_count\": 132}";
    String listBackupPolicyPlansPath = "/backup_policies/testString/plans";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListBackupPolicyPlansOptions model
    ListBackupPolicyPlansOptions listBackupPolicyPlansOptionsModel = new ListBackupPolicyPlansOptions.Builder()
      .backupPolicyId("testString")
      .name("my-name")
      .build();

    // Invoke listBackupPolicyPlans() with a valid options model and verify the result
    Response<BackupPolicyPlanCollection> response = vpcService.listBackupPolicyPlans(listBackupPolicyPlansOptionsModel).execute();
    assertNotNull(response);
    BackupPolicyPlanCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listBackupPolicyPlansPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("name"), "my-name");
  }

  // Test the listBackupPolicyPlans operation with and without retries enabled
  @Test
  public void testListBackupPolicyPlansWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListBackupPolicyPlansWOptions();

    vpcService.disableRetries();
    testListBackupPolicyPlansWOptions();
  }

  // Test the listBackupPolicyPlans operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListBackupPolicyPlansNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listBackupPolicyPlans(null).execute();
  }

  // Test the createBackupPolicyPlan operation with a valid options model parameter
  @Test
  public void testCreateBackupPolicyPlanWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"active\": true, \"attach_user_tags\": [\"attachUserTags\"], \"clone_policy\": {\"max_snapshots\": 1, \"zones\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}]}, \"copy_user_tags\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"cron_spec\": \"30 */2 * * 1-5\", \"deletion_trigger\": {\"delete_after\": 20, \"delete_over_count\": 20}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"lifecycle_state\": \"stable\", \"name\": \"my-policy-plan\", \"remote_region_policies\": [{\"delete_over_count\": 1, \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}], \"resource_type\": \"backup_policy_plan\"}";
    String createBackupPolicyPlanPath = "/backup_policies/testString/plans";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ZoneIdentityByName model
    ZoneIdentityByName zoneIdentityModel = new ZoneIdentityByName.Builder()
      .name("us-south-1")
      .build();

    // Construct an instance of the BackupPolicyPlanClonePolicyPrototype model
    BackupPolicyPlanClonePolicyPrototype backupPolicyPlanClonePolicyPrototypeModel = new BackupPolicyPlanClonePolicyPrototype.Builder()
      .maxSnapshots(Long.valueOf("5"))
      .zones(java.util.Arrays.asList(zoneIdentityModel))
      .build();

    // Construct an instance of the BackupPolicyPlanDeletionTriggerPrototype model
    BackupPolicyPlanDeletionTriggerPrototype backupPolicyPlanDeletionTriggerPrototypeModel = new BackupPolicyPlanDeletionTriggerPrototype.Builder()
      .deleteAfter(Long.valueOf("20"))
      .deleteOverCount(Long.valueOf("20"))
      .build();

    // Construct an instance of the EncryptionKeyIdentityByCRN model
    EncryptionKeyIdentityByCRN encryptionKeyIdentityModel = new EncryptionKeyIdentityByCRN.Builder()
      .crn("crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")
      .build();

    // Construct an instance of the RegionIdentityByName model
    RegionIdentityByName regionIdentityModel = new RegionIdentityByName.Builder()
      .name("us-south")
      .build();

    // Construct an instance of the BackupPolicyPlanRemoteRegionPolicyPrototype model
    BackupPolicyPlanRemoteRegionPolicyPrototype backupPolicyPlanRemoteRegionPolicyPrototypeModel = new BackupPolicyPlanRemoteRegionPolicyPrototype.Builder()
      .deleteOverCount(Long.valueOf("5"))
      .encryptionKey(encryptionKeyIdentityModel)
      .region(regionIdentityModel)
      .build();

    // Construct an instance of the CreateBackupPolicyPlanOptions model
    CreateBackupPolicyPlanOptions createBackupPolicyPlanOptionsModel = new CreateBackupPolicyPlanOptions.Builder()
      .backupPolicyId("testString")
      .cronSpec("30 */2 * * 1-5")
      .active(true)
      .attachUserTags(java.util.Arrays.asList("my-daily-backup-plan"))
      .clonePolicy(backupPolicyPlanClonePolicyPrototypeModel)
      .copyUserTags(true)
      .deletionTrigger(backupPolicyPlanDeletionTriggerPrototypeModel)
      .name("my-policy-plan")
      .remoteRegionPolicies(java.util.Arrays.asList(backupPolicyPlanRemoteRegionPolicyPrototypeModel))
      .build();

    // Invoke createBackupPolicyPlan() with a valid options model and verify the result
    Response<BackupPolicyPlan> response = vpcService.createBackupPolicyPlan(createBackupPolicyPlanOptionsModel).execute();
    assertNotNull(response);
    BackupPolicyPlan responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createBackupPolicyPlanPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createBackupPolicyPlan operation with and without retries enabled
  @Test
  public void testCreateBackupPolicyPlanWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateBackupPolicyPlanWOptions();

    vpcService.disableRetries();
    testCreateBackupPolicyPlanWOptions();
  }

  // Test the createBackupPolicyPlan operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateBackupPolicyPlanNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createBackupPolicyPlan(null).execute();
  }

  // Test the deleteBackupPolicyPlan operation with a valid options model parameter
  @Test
  public void testDeleteBackupPolicyPlanWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"active\": true, \"attach_user_tags\": [\"attachUserTags\"], \"clone_policy\": {\"max_snapshots\": 1, \"zones\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}]}, \"copy_user_tags\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"cron_spec\": \"30 */2 * * 1-5\", \"deletion_trigger\": {\"delete_after\": 20, \"delete_over_count\": 20}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"lifecycle_state\": \"stable\", \"name\": \"my-policy-plan\", \"remote_region_policies\": [{\"delete_over_count\": 1, \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}], \"resource_type\": \"backup_policy_plan\"}";
    String deleteBackupPolicyPlanPath = "/backup_policies/testString/plans/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteBackupPolicyPlanOptions model
    DeleteBackupPolicyPlanOptions deleteBackupPolicyPlanOptionsModel = new DeleteBackupPolicyPlanOptions.Builder()
      .backupPolicyId("testString")
      .id("testString")
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke deleteBackupPolicyPlan() with a valid options model and verify the result
    Response<BackupPolicyPlan> response = vpcService.deleteBackupPolicyPlan(deleteBackupPolicyPlanOptionsModel).execute();
    assertNotNull(response);
    BackupPolicyPlan responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteBackupPolicyPlanPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteBackupPolicyPlan operation with and without retries enabled
  @Test
  public void testDeleteBackupPolicyPlanWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteBackupPolicyPlanWOptions();

    vpcService.disableRetries();
    testDeleteBackupPolicyPlanWOptions();
  }

  // Test the deleteBackupPolicyPlan operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteBackupPolicyPlanNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteBackupPolicyPlan(null).execute();
  }

  // Test the getBackupPolicyPlan operation with a valid options model parameter
  @Test
  public void testGetBackupPolicyPlanWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"active\": true, \"attach_user_tags\": [\"attachUserTags\"], \"clone_policy\": {\"max_snapshots\": 1, \"zones\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}]}, \"copy_user_tags\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"cron_spec\": \"30 */2 * * 1-5\", \"deletion_trigger\": {\"delete_after\": 20, \"delete_over_count\": 20}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"lifecycle_state\": \"stable\", \"name\": \"my-policy-plan\", \"remote_region_policies\": [{\"delete_over_count\": 1, \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}], \"resource_type\": \"backup_policy_plan\"}";
    String getBackupPolicyPlanPath = "/backup_policies/testString/plans/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetBackupPolicyPlanOptions model
    GetBackupPolicyPlanOptions getBackupPolicyPlanOptionsModel = new GetBackupPolicyPlanOptions.Builder()
      .backupPolicyId("testString")
      .id("testString")
      .build();

    // Invoke getBackupPolicyPlan() with a valid options model and verify the result
    Response<BackupPolicyPlan> response = vpcService.getBackupPolicyPlan(getBackupPolicyPlanOptionsModel).execute();
    assertNotNull(response);
    BackupPolicyPlan responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getBackupPolicyPlanPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getBackupPolicyPlan operation with and without retries enabled
  @Test
  public void testGetBackupPolicyPlanWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetBackupPolicyPlanWOptions();

    vpcService.disableRetries();
    testGetBackupPolicyPlanWOptions();
  }

  // Test the getBackupPolicyPlan operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetBackupPolicyPlanNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getBackupPolicyPlan(null).execute();
  }

  // Test the updateBackupPolicyPlan operation with a valid options model parameter
  @Test
  public void testUpdateBackupPolicyPlanWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"active\": true, \"attach_user_tags\": [\"attachUserTags\"], \"clone_policy\": {\"max_snapshots\": 1, \"zones\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}]}, \"copy_user_tags\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"cron_spec\": \"30 */2 * * 1-5\", \"deletion_trigger\": {\"delete_after\": 20, \"delete_over_count\": 20}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"lifecycle_state\": \"stable\", \"name\": \"my-policy-plan\", \"remote_region_policies\": [{\"delete_over_count\": 1, \"encryption_key\": {\"crn\": \"crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}], \"resource_type\": \"backup_policy_plan\"}";
    String updateBackupPolicyPlanPath = "/backup_policies/testString/plans/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ZoneIdentityByName model
    ZoneIdentityByName zoneIdentityModel = new ZoneIdentityByName.Builder()
      .name("us-south-1")
      .build();

    // Construct an instance of the BackupPolicyPlanClonePolicyPatch model
    BackupPolicyPlanClonePolicyPatch backupPolicyPlanClonePolicyPatchModel = new BackupPolicyPlanClonePolicyPatch.Builder()
      .maxSnapshots(Long.valueOf("1"))
      .zones(java.util.Arrays.asList(zoneIdentityModel))
      .build();

    // Construct an instance of the BackupPolicyPlanDeletionTriggerPatch model
    BackupPolicyPlanDeletionTriggerPatch backupPolicyPlanDeletionTriggerPatchModel = new BackupPolicyPlanDeletionTriggerPatch.Builder()
      .deleteAfter(Long.valueOf("20"))
      .deleteOverCount(Long.valueOf("1"))
      .build();

    // Construct an instance of the EncryptionKeyIdentityByCRN model
    EncryptionKeyIdentityByCRN encryptionKeyIdentityModel = new EncryptionKeyIdentityByCRN.Builder()
      .crn("crn:v1:bluemix:public:kms:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")
      .build();

    // Construct an instance of the RegionIdentityByName model
    RegionIdentityByName regionIdentityModel = new RegionIdentityByName.Builder()
      .name("us-south")
      .build();

    // Construct an instance of the BackupPolicyPlanRemoteRegionPolicyPrototype model
    BackupPolicyPlanRemoteRegionPolicyPrototype backupPolicyPlanRemoteRegionPolicyPrototypeModel = new BackupPolicyPlanRemoteRegionPolicyPrototype.Builder()
      .deleteOverCount(Long.valueOf("5"))
      .encryptionKey(encryptionKeyIdentityModel)
      .region(regionIdentityModel)
      .build();

    // Construct an instance of the BackupPolicyPlanPatch model
    BackupPolicyPlanPatch backupPolicyPlanPatchModel = new BackupPolicyPlanPatch.Builder()
      .active(true)
      .attachUserTags(java.util.Arrays.asList("my-daily-backup-plan"))
      .clonePolicy(backupPolicyPlanClonePolicyPatchModel)
      .copyUserTags(false)
      .cronSpec("30 */2 * * 1-5")
      .deletionTrigger(backupPolicyPlanDeletionTriggerPatchModel)
      .name("my-policy-plan")
      .remoteRegionPolicies(java.util.Arrays.asList(backupPolicyPlanRemoteRegionPolicyPrototypeModel))
      .build();
    Map<String, Object> backupPolicyPlanPatchModelAsPatch = backupPolicyPlanPatchModel.asPatch();

    // Construct an instance of the UpdateBackupPolicyPlanOptions model
    UpdateBackupPolicyPlanOptions updateBackupPolicyPlanOptionsModel = new UpdateBackupPolicyPlanOptions.Builder()
      .backupPolicyId("testString")
      .id("testString")
      .backupPolicyPlanPatch(backupPolicyPlanPatchModelAsPatch)
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke updateBackupPolicyPlan() with a valid options model and verify the result
    Response<BackupPolicyPlan> response = vpcService.updateBackupPolicyPlan(updateBackupPolicyPlanOptionsModel).execute();
    assertNotNull(response);
    BackupPolicyPlan responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateBackupPolicyPlanPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateBackupPolicyPlan operation with and without retries enabled
  @Test
  public void testUpdateBackupPolicyPlanWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateBackupPolicyPlanWOptions();

    vpcService.disableRetries();
    testUpdateBackupPolicyPlanWOptions();
  }

  // Test the updateBackupPolicyPlan operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateBackupPolicyPlanNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateBackupPolicyPlan(null).execute();
  }

  // Test the deleteBackupPolicy operation with a valid options model parameter
  @Test
  public void testDeleteBackupPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::backup-policy:r006-076191ba-49c2-4763-94fd-c70de73ee2e6\", \"health_reasons\": [{\"code\": \"missing_service_authorization_policies\", \"message\": \"One or more accounts are missing service authorization policies\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-backup-service-about&interface=ui\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6\", \"id\": \"r006-076191ba-49c2-4763-94fd-c70de73ee2e6\", \"last_job_completed_at\": \"2019-01-01T12:00:00.000Z\", \"lifecycle_state\": \"stable\", \"match_user_tags\": [\"matchUserTags\"], \"name\": \"my-backup-policy\", \"plans\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"name\": \"my-policy-plan\", \"remote\": {\"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"backup_policy_plan\"}], \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"backup_policy\", \"scope\": {\"crn\": \"crn:v1:bluemix:public:enterprise::a/aa2432b1fa4d4ace891e9b80fc104e34::enterprise:ebc2b430240943458b9e91e1432cfcce\", \"id\": \"ebc2b430240943458b9e91e1432cfcce\", \"resource_type\": \"enterprise\"}, \"included_content\": [\"data_volumes\"], \"match_resource_type\": \"instance\"}";
    String deleteBackupPolicyPath = "/backup_policies/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteBackupPolicyOptions model
    DeleteBackupPolicyOptions deleteBackupPolicyOptionsModel = new DeleteBackupPolicyOptions.Builder()
      .id("testString")
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke deleteBackupPolicy() with a valid options model and verify the result
    Response<BackupPolicy> response = vpcService.deleteBackupPolicy(deleteBackupPolicyOptionsModel).execute();
    assertNotNull(response);
    BackupPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteBackupPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteBackupPolicy operation with and without retries enabled
  @Test
  public void testDeleteBackupPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteBackupPolicyWOptions();

    vpcService.disableRetries();
    testDeleteBackupPolicyWOptions();
  }

  // Test the deleteBackupPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteBackupPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteBackupPolicy(null).execute();
  }

  // Test the getBackupPolicy operation with a valid options model parameter
  @Test
  public void testGetBackupPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::backup-policy:r006-076191ba-49c2-4763-94fd-c70de73ee2e6\", \"health_reasons\": [{\"code\": \"missing_service_authorization_policies\", \"message\": \"One or more accounts are missing service authorization policies\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-backup-service-about&interface=ui\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6\", \"id\": \"r006-076191ba-49c2-4763-94fd-c70de73ee2e6\", \"last_job_completed_at\": \"2019-01-01T12:00:00.000Z\", \"lifecycle_state\": \"stable\", \"match_user_tags\": [\"matchUserTags\"], \"name\": \"my-backup-policy\", \"plans\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"name\": \"my-policy-plan\", \"remote\": {\"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"backup_policy_plan\"}], \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"backup_policy\", \"scope\": {\"crn\": \"crn:v1:bluemix:public:enterprise::a/aa2432b1fa4d4ace891e9b80fc104e34::enterprise:ebc2b430240943458b9e91e1432cfcce\", \"id\": \"ebc2b430240943458b9e91e1432cfcce\", \"resource_type\": \"enterprise\"}, \"included_content\": [\"data_volumes\"], \"match_resource_type\": \"instance\"}";
    String getBackupPolicyPath = "/backup_policies/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetBackupPolicyOptions model
    GetBackupPolicyOptions getBackupPolicyOptionsModel = new GetBackupPolicyOptions.Builder()
      .id("testString")
      .build();

    // Invoke getBackupPolicy() with a valid options model and verify the result
    Response<BackupPolicy> response = vpcService.getBackupPolicy(getBackupPolicyOptionsModel).execute();
    assertNotNull(response);
    BackupPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getBackupPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getBackupPolicy operation with and without retries enabled
  @Test
  public void testGetBackupPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetBackupPolicyWOptions();

    vpcService.disableRetries();
    testGetBackupPolicyWOptions();
  }

  // Test the getBackupPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetBackupPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getBackupPolicy(null).execute();
  }

  // Test the updateBackupPolicy operation with a valid options model parameter
  @Test
  public void testUpdateBackupPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::backup-policy:r006-076191ba-49c2-4763-94fd-c70de73ee2e6\", \"health_reasons\": [{\"code\": \"missing_service_authorization_policies\", \"message\": \"One or more accounts are missing service authorization policies\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-backup-service-about&interface=ui\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6\", \"id\": \"r006-076191ba-49c2-4763-94fd-c70de73ee2e6\", \"last_job_completed_at\": \"2019-01-01T12:00:00.000Z\", \"lifecycle_state\": \"stable\", \"match_user_tags\": [\"matchUserTags\"], \"name\": \"my-backup-policy\", \"plans\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/backup_policies/r006-076191ba-49c2-4763-94fd-c70de73ee2e6/plans/r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"id\": \"r006-6da51cfe-6f7b-4638-a6ba-00e9c327b178\", \"name\": \"my-policy-plan\", \"remote\": {\"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"backup_policy_plan\"}], \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"backup_policy\", \"scope\": {\"crn\": \"crn:v1:bluemix:public:enterprise::a/aa2432b1fa4d4ace891e9b80fc104e34::enterprise:ebc2b430240943458b9e91e1432cfcce\", \"id\": \"ebc2b430240943458b9e91e1432cfcce\", \"resource_type\": \"enterprise\"}, \"included_content\": [\"data_volumes\"], \"match_resource_type\": \"instance\"}";
    String updateBackupPolicyPath = "/backup_policies/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the BackupPolicyPatch model
    BackupPolicyPatch backupPolicyPatchModel = new BackupPolicyPatch.Builder()
      .includedContent(java.util.Arrays.asList("data_volumes"))
      .matchUserTags(java.util.Arrays.asList("my-tag-1", "my-tag-2", "my-tag-3"))
      .name("my-backup-policy")
      .build();
    Map<String, Object> backupPolicyPatchModelAsPatch = backupPolicyPatchModel.asPatch();

    // Construct an instance of the UpdateBackupPolicyOptions model
    UpdateBackupPolicyOptions updateBackupPolicyOptionsModel = new UpdateBackupPolicyOptions.Builder()
      .id("testString")
      .backupPolicyPatch(backupPolicyPatchModelAsPatch)
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke updateBackupPolicy() with a valid options model and verify the result
    Response<BackupPolicy> response = vpcService.updateBackupPolicy(updateBackupPolicyOptionsModel).execute();
    assertNotNull(response);
    BackupPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateBackupPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateBackupPolicy operation with and without retries enabled
  @Test
  public void testUpdateBackupPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateBackupPolicyWOptions();

    vpcService.disableRetries();
    testUpdateBackupPolicyWOptions();
  }

  // Test the updateBackupPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateBackupPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateBackupPolicy(null).execute();
  }

  // Test the listRegions operation with a valid options model parameter
  @Test
  public void testListRegionsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"regions\": [{\"endpoint\": \"https://us-south.iaas.cloud.ibm.com\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\", \"status\": \"available\"}]}";
    String listRegionsPath = "/regions";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListRegionsOptions model
    ListRegionsOptions listRegionsOptionsModel = new ListRegionsOptions();

    // Invoke listRegions() with a valid options model and verify the result
    Response<RegionCollection> response = vpcService.listRegions(listRegionsOptionsModel).execute();
    assertNotNull(response);
    RegionCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listRegionsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listRegions operation with and without retries enabled
  @Test
  public void testListRegionsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListRegionsWOptions();

    vpcService.disableRetries();
    testListRegionsWOptions();
  }

  // Test the getRegion operation with a valid options model parameter
  @Test
  public void testGetRegionWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"endpoint\": \"https://us-south.iaas.cloud.ibm.com\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\", \"status\": \"available\"}";
    String getRegionPath = "/regions/us-south";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetRegionOptions model
    GetRegionOptions getRegionOptionsModel = new GetRegionOptions.Builder()
      .name("us-south")
      .build();

    // Invoke getRegion() with a valid options model and verify the result
    Response<Region> response = vpcService.getRegion(getRegionOptionsModel).execute();
    assertNotNull(response);
    Region responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getRegionPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getRegion operation with and without retries enabled
  @Test
  public void testGetRegionWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetRegionWOptions();

    vpcService.disableRetries();
    testGetRegionWOptions();
  }

  // Test the getRegion operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetRegionNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getRegion(null).execute();
  }

  // Test the listRegionZones operation with a valid options model parameter
  @Test
  public void testListRegionZonesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"zones\": [{\"data_center\": \"DAL12\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\", \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}, \"status\": \"available\", \"universal_name\": \"us-south-dal10-a\"}]}";
    String listRegionZonesPath = "/regions/us-south/zones";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListRegionZonesOptions model
    ListRegionZonesOptions listRegionZonesOptionsModel = new ListRegionZonesOptions.Builder()
      .regionName("us-south")
      .build();

    // Invoke listRegionZones() with a valid options model and verify the result
    Response<ZoneCollection> response = vpcService.listRegionZones(listRegionZonesOptionsModel).execute();
    assertNotNull(response);
    ZoneCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listRegionZonesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listRegionZones operation with and without retries enabled
  @Test
  public void testListRegionZonesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListRegionZonesWOptions();

    vpcService.disableRetries();
    testListRegionZonesWOptions();
  }

  // Test the listRegionZones operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListRegionZonesNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listRegionZones(null).execute();
  }

  // Test the getRegionZone operation with a valid options model parameter
  @Test
  public void testGetRegionZoneWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"data_center\": \"DAL12\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\", \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}, \"status\": \"available\", \"universal_name\": \"us-south-dal10-a\"}";
    String getRegionZonePath = "/regions/us-south/zones/us-south-1";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetRegionZoneOptions model
    GetRegionZoneOptions getRegionZoneOptionsModel = new GetRegionZoneOptions.Builder()
      .regionName("us-south")
      .name("us-south-1")
      .build();

    // Invoke getRegionZone() with a valid options model and verify the result
    Response<Zone> response = vpcService.getRegionZone(getRegionZoneOptionsModel).execute();
    assertNotNull(response);
    Zone responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getRegionZonePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getRegionZone operation with and without retries enabled
  @Test
  public void testGetRegionZoneWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetRegionZoneWOptions();

    vpcService.disableRetries();
    testGetRegionZoneWOptions();
  }

  // Test the getRegionZone operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetRegionZoneNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getRegionZone(null).execute();
  }

  // Test the listVirtualNetworkInterfaces operation with a valid options model parameter
  @Test
  public void testListVirtualNetworkInterfacesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132, \"virtual_network_interfaces\": [{\"allow_ip_spoofing\": true, \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"enable_infrastructure_nat\": true, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"ips\": [{\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}], \"lifecycle_state\": \"stable\", \"mac_address\": \"02:00:4D:45:45:4D\", \"name\": \"my-virtual-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"protocol_state_filtering_mode\": \"auto\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"virtual_network_interface\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/mount_targets/r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\", \"id\": \"r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\", \"name\": \"my-share-mount-target\", \"resource_type\": \"share_mount_target\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}]}";
    String listVirtualNetworkInterfacesPath = "/virtual_network_interfaces";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListVirtualNetworkInterfacesOptions model
    ListVirtualNetworkInterfacesOptions listVirtualNetworkInterfacesOptionsModel = new ListVirtualNetworkInterfacesOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .build();

    // Invoke listVirtualNetworkInterfaces() with a valid options model and verify the result
    Response<VirtualNetworkInterfaceCollection> response = vpcService.listVirtualNetworkInterfaces(listVirtualNetworkInterfacesOptionsModel).execute();
    assertNotNull(response);
    VirtualNetworkInterfaceCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listVirtualNetworkInterfacesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
  }

  // Test the listVirtualNetworkInterfaces operation with and without retries enabled
  @Test
  public void testListVirtualNetworkInterfacesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListVirtualNetworkInterfacesWOptions();

    vpcService.disableRetries();
    testListVirtualNetworkInterfacesWOptions();
  }

  // Test the listVirtualNetworkInterfaces operation using the VirtualNetworkInterfacesPager.getNext() method
  @Test
  public void testListVirtualNetworkInterfacesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"virtual_network_interfaces\":[{\"allow_ip_spoofing\":true,\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"enable_infrastructure_nat\":true,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"id\":\"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"ips\":[{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"}],\"lifecycle_state\":\"stable\",\"mac_address\":\"02:00:4D:45:45:4D\",\"name\":\"my-virtual-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"protocol_state_filtering_mode\":\"auto\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"virtual_network_interface\",\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"target\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/mount_targets/r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\",\"id\":\"r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\",\"name\":\"my-share-mount-target\",\"resource_type\":\"share_mount_target\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"virtual_network_interfaces\":[{\"allow_ip_spoofing\":true,\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"enable_infrastructure_nat\":true,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"id\":\"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"ips\":[{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"}],\"lifecycle_state\":\"stable\",\"mac_address\":\"02:00:4D:45:45:4D\",\"name\":\"my-virtual-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"protocol_state_filtering_mode\":\"auto\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"virtual_network_interface\",\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"target\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/mount_targets/r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\",\"id\":\"r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\",\"name\":\"my-share-mount-target\",\"resource_type\":\"share_mount_target\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVirtualNetworkInterfacesOptions listVirtualNetworkInterfacesOptions = new ListVirtualNetworkInterfacesOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .build();

    List<VirtualNetworkInterface> allResults = new ArrayList<>();
    VirtualNetworkInterfacesPager pager = new VirtualNetworkInterfacesPager(vpcService, listVirtualNetworkInterfacesOptions);
    while (pager.hasNext()) {
      List<VirtualNetworkInterface> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listVirtualNetworkInterfaces operation using the VirtualNetworkInterfacesPager.getAll() method
  @Test
  public void testListVirtualNetworkInterfacesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"virtual_network_interfaces\":[{\"allow_ip_spoofing\":true,\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"enable_infrastructure_nat\":true,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"id\":\"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"ips\":[{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"}],\"lifecycle_state\":\"stable\",\"mac_address\":\"02:00:4D:45:45:4D\",\"name\":\"my-virtual-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"protocol_state_filtering_mode\":\"auto\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"virtual_network_interface\",\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"target\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/mount_targets/r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\",\"id\":\"r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\",\"name\":\"my-share-mount-target\",\"resource_type\":\"share_mount_target\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"virtual_network_interfaces\":[{\"allow_ip_spoofing\":true,\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"enable_infrastructure_nat\":true,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"id\":\"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\",\"ips\":[{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"}],\"lifecycle_state\":\"stable\",\"mac_address\":\"02:00:4D:45:45:4D\",\"name\":\"my-virtual-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"protocol_state_filtering_mode\":\"auto\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"virtual_network_interface\",\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"target\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/mount_targets/r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\",\"id\":\"r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\",\"name\":\"my-share-mount-target\",\"resource_type\":\"share_mount_target\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVirtualNetworkInterfacesOptions listVirtualNetworkInterfacesOptions = new ListVirtualNetworkInterfacesOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .build();

    VirtualNetworkInterfacesPager pager = new VirtualNetworkInterfacesPager(vpcService, listVirtualNetworkInterfacesOptions);
    List<VirtualNetworkInterface> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createVirtualNetworkInterface operation with a valid options model parameter
  @Test
  public void testCreateVirtualNetworkInterfaceWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"allow_ip_spoofing\": true, \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"enable_infrastructure_nat\": true, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"ips\": [{\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}], \"lifecycle_state\": \"stable\", \"mac_address\": \"02:00:4D:45:45:4D\", \"name\": \"my-virtual-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"protocol_state_filtering_mode\": \"auto\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"virtual_network_interface\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/mount_targets/r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\", \"id\": \"r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\", \"name\": \"my-share-mount-target\", \"resource_type\": \"share_mount_target\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String createVirtualNetworkInterfacePath = "/virtual_network_interfaces";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the VirtualNetworkInterfaceIPPrototypeReservedIPIdentityVirtualNetworkInterfaceIPsContextById model
    VirtualNetworkInterfaceIPPrototypeReservedIPIdentityVirtualNetworkInterfaceIPsContextById virtualNetworkInterfaceIpPrototypeModel = new VirtualNetworkInterfaceIPPrototypeReservedIPIdentityVirtualNetworkInterfaceIPsContextById.Builder()
      .id("0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb")
      .build();

    // Construct an instance of the VirtualNetworkInterfacePrimaryIPPrototypeReservedIPIdentityVirtualNetworkInterfacePrimaryIPContextById model
    VirtualNetworkInterfacePrimaryIPPrototypeReservedIPIdentityVirtualNetworkInterfacePrimaryIPContextById virtualNetworkInterfacePrimaryIpPrototypeModel = new VirtualNetworkInterfacePrimaryIPPrototypeReservedIPIdentityVirtualNetworkInterfacePrimaryIPContextById.Builder()
      .id("0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb")
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the SecurityGroupIdentityById model
    SecurityGroupIdentityById securityGroupIdentityModel = new SecurityGroupIdentityById.Builder()
      .id("r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271")
      .build();

    // Construct an instance of the SubnetIdentityById model
    SubnetIdentityById subnetIdentityModel = new SubnetIdentityById.Builder()
      .id("69e55145-cc7d-4d8e-9e1f-cc3fb60b1793")
      .build();

    // Construct an instance of the CreateVirtualNetworkInterfaceOptions model
    CreateVirtualNetworkInterfaceOptions createVirtualNetworkInterfaceOptionsModel = new CreateVirtualNetworkInterfaceOptions.Builder()
      .allowIpSpoofing(false)
      .autoDelete(false)
      .enableInfrastructureNat(true)
      .ips(java.util.Arrays.asList(virtualNetworkInterfaceIpPrototypeModel))
      .name("my-virtual-network-interface")
      .primaryIp(virtualNetworkInterfacePrimaryIpPrototypeModel)
      .protocolStateFilteringMode("auto")
      .resourceGroup(resourceGroupIdentityModel)
      .securityGroups(java.util.Arrays.asList(securityGroupIdentityModel))
      .subnet(subnetIdentityModel)
      .build();

    // Invoke createVirtualNetworkInterface() with a valid options model and verify the result
    Response<VirtualNetworkInterface> response = vpcService.createVirtualNetworkInterface(createVirtualNetworkInterfaceOptionsModel).execute();
    assertNotNull(response);
    VirtualNetworkInterface responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createVirtualNetworkInterfacePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createVirtualNetworkInterface operation with and without retries enabled
  @Test
  public void testCreateVirtualNetworkInterfaceWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateVirtualNetworkInterfaceWOptions();

    vpcService.disableRetries();
    testCreateVirtualNetworkInterfaceWOptions();
  }

  // Test the deleteVirtualNetworkInterfaces operation with a valid options model parameter
  @Test
  public void testDeleteVirtualNetworkInterfacesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"allow_ip_spoofing\": true, \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"enable_infrastructure_nat\": true, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"ips\": [{\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}], \"lifecycle_state\": \"stable\", \"mac_address\": \"02:00:4D:45:45:4D\", \"name\": \"my-virtual-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"protocol_state_filtering_mode\": \"auto\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"virtual_network_interface\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/mount_targets/r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\", \"id\": \"r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\", \"name\": \"my-share-mount-target\", \"resource_type\": \"share_mount_target\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String deleteVirtualNetworkInterfacesPath = "/virtual_network_interfaces/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteVirtualNetworkInterfacesOptions model
    DeleteVirtualNetworkInterfacesOptions deleteVirtualNetworkInterfacesOptionsModel = new DeleteVirtualNetworkInterfacesOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteVirtualNetworkInterfaces() with a valid options model and verify the result
    Response<VirtualNetworkInterface> response = vpcService.deleteVirtualNetworkInterfaces(deleteVirtualNetworkInterfacesOptionsModel).execute();
    assertNotNull(response);
    VirtualNetworkInterface responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteVirtualNetworkInterfacesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteVirtualNetworkInterfaces operation with and without retries enabled
  @Test
  public void testDeleteVirtualNetworkInterfacesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteVirtualNetworkInterfacesWOptions();

    vpcService.disableRetries();
    testDeleteVirtualNetworkInterfacesWOptions();
  }

  // Test the deleteVirtualNetworkInterfaces operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteVirtualNetworkInterfacesNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteVirtualNetworkInterfaces(null).execute();
  }

  // Test the getVirtualNetworkInterface operation with a valid options model parameter
  @Test
  public void testGetVirtualNetworkInterfaceWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"allow_ip_spoofing\": true, \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"enable_infrastructure_nat\": true, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"ips\": [{\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}], \"lifecycle_state\": \"stable\", \"mac_address\": \"02:00:4D:45:45:4D\", \"name\": \"my-virtual-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"protocol_state_filtering_mode\": \"auto\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"virtual_network_interface\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/mount_targets/r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\", \"id\": \"r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\", \"name\": \"my-share-mount-target\", \"resource_type\": \"share_mount_target\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getVirtualNetworkInterfacePath = "/virtual_network_interfaces/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVirtualNetworkInterfaceOptions model
    GetVirtualNetworkInterfaceOptions getVirtualNetworkInterfaceOptionsModel = new GetVirtualNetworkInterfaceOptions.Builder()
      .id("testString")
      .build();

    // Invoke getVirtualNetworkInterface() with a valid options model and verify the result
    Response<VirtualNetworkInterface> response = vpcService.getVirtualNetworkInterface(getVirtualNetworkInterfaceOptionsModel).execute();
    assertNotNull(response);
    VirtualNetworkInterface responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVirtualNetworkInterfacePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVirtualNetworkInterface operation with and without retries enabled
  @Test
  public void testGetVirtualNetworkInterfaceWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVirtualNetworkInterfaceWOptions();

    vpcService.disableRetries();
    testGetVirtualNetworkInterfaceWOptions();
  }

  // Test the getVirtualNetworkInterface operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVirtualNetworkInterfaceNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVirtualNetworkInterface(null).execute();
  }

  // Test the updateVirtualNetworkInterface operation with a valid options model parameter
  @Test
  public void testUpdateVirtualNetworkInterfaceWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"allow_ip_spoofing\": true, \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::virtual-network-interface:0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"enable_infrastructure_nat\": true, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/virtual_network_interfaces/0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"id\": \"0717-54eb57ee-86f2-4796-90bb-d7874e0831ef\", \"ips\": [{\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}], \"lifecycle_state\": \"stable\", \"mac_address\": \"02:00:4D:45:45:4D\", \"name\": \"my-virtual-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"protocol_state_filtering_mode\": \"auto\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"virtual_network_interface\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/shares/r006-0fe9e5d8-0a4d-4818-96ec-e99708644a58/mount_targets/r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\", \"id\": \"r006-76083f29-e320-4c3f-a1ff-ec479f7249d1\", \"name\": \"my-share-mount-target\", \"resource_type\": \"share_mount_target\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String updateVirtualNetworkInterfacePath = "/virtual_network_interfaces/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the VirtualNetworkInterfacePatch model
    VirtualNetworkInterfacePatch virtualNetworkInterfacePatchModel = new VirtualNetworkInterfacePatch.Builder()
      .allowIpSpoofing(true)
      .autoDelete(false)
      .enableInfrastructureNat(true)
      .name("my-virtual-network-interface")
      .protocolStateFilteringMode("auto")
      .build();
    Map<String, Object> virtualNetworkInterfacePatchModelAsPatch = virtualNetworkInterfacePatchModel.asPatch();

    // Construct an instance of the UpdateVirtualNetworkInterfaceOptions model
    UpdateVirtualNetworkInterfaceOptions updateVirtualNetworkInterfaceOptionsModel = new UpdateVirtualNetworkInterfaceOptions.Builder()
      .id("testString")
      .virtualNetworkInterfacePatch(virtualNetworkInterfacePatchModelAsPatch)
      .build();

    // Invoke updateVirtualNetworkInterface() with a valid options model and verify the result
    Response<VirtualNetworkInterface> response = vpcService.updateVirtualNetworkInterface(updateVirtualNetworkInterfaceOptionsModel).execute();
    assertNotNull(response);
    VirtualNetworkInterface responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateVirtualNetworkInterfacePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateVirtualNetworkInterface operation with and without retries enabled
  @Test
  public void testUpdateVirtualNetworkInterfaceWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateVirtualNetworkInterfaceWOptions();

    vpcService.disableRetries();
    testUpdateVirtualNetworkInterfaceWOptions();
  }

  // Test the updateVirtualNetworkInterface operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateVirtualNetworkInterfaceNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateVirtualNetworkInterface(null).execute();
  }

  // Test the listNetworkInterfaceFloatingIps operation with a valid options model parameter
  @Test
  public void testListNetworkInterfaceFloatingIpsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"floating_ips\": [{\"address\": \"203.0.113.1\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"id\": \"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"name\": \"my-floating-ip\"}], \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listNetworkInterfaceFloatingIpsPath = "/virtual_network_interfaces/testString/floating_ips";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListNetworkInterfaceFloatingIpsOptions model
    ListNetworkInterfaceFloatingIpsOptions listNetworkInterfaceFloatingIpsOptionsModel = new ListNetworkInterfaceFloatingIpsOptions.Builder()
      .virtualNetworkInterfaceId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .sort("name")
      .build();

    // Invoke listNetworkInterfaceFloatingIps() with a valid options model and verify the result
    Response<FloatingIPCollectionVirtualNetworkInterfaceContext> response = vpcService.listNetworkInterfaceFloatingIps(listNetworkInterfaceFloatingIpsOptionsModel).execute();
    assertNotNull(response);
    FloatingIPCollectionVirtualNetworkInterfaceContext responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listNetworkInterfaceFloatingIpsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("sort"), "name");
  }

  // Test the listNetworkInterfaceFloatingIps operation with and without retries enabled
  @Test
  public void testListNetworkInterfaceFloatingIpsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListNetworkInterfaceFloatingIpsWOptions();

    vpcService.disableRetries();
    testListNetworkInterfaceFloatingIpsWOptions();
  }

  // Test the listNetworkInterfaceFloatingIps operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListNetworkInterfaceFloatingIpsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listNetworkInterfaceFloatingIps(null).execute();
  }

  // Test the listNetworkInterfaceFloatingIps operation using the NetworkInterfaceFloatingIpsPager.getNext() method
  @Test
  public void testListNetworkInterfaceFloatingIpsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"floating_ips\":[{\"address\":\"203.0.113.1\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"id\":\"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"name\":\"my-floating-ip\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"floating_ips\":[{\"address\":\"203.0.113.1\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"id\":\"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"name\":\"my-floating-ip\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListNetworkInterfaceFloatingIpsOptions listNetworkInterfaceFloatingIpsOptions = new ListNetworkInterfaceFloatingIpsOptions.Builder()
      .virtualNetworkInterfaceId("testString")
      .limit(Long.valueOf("10"))
      .sort("name")
      .build();

    List<FloatingIPReference> allResults = new ArrayList<>();
    NetworkInterfaceFloatingIpsPager pager = new NetworkInterfaceFloatingIpsPager(vpcService, listNetworkInterfaceFloatingIpsOptions);
    while (pager.hasNext()) {
      List<FloatingIPReference> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listNetworkInterfaceFloatingIps operation using the NetworkInterfaceFloatingIpsPager.getAll() method
  @Test
  public void testListNetworkInterfaceFloatingIpsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"floating_ips\":[{\"address\":\"203.0.113.1\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"id\":\"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"name\":\"my-floating-ip\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"floating_ips\":[{\"address\":\"203.0.113.1\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"id\":\"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"name\":\"my-floating-ip\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListNetworkInterfaceFloatingIpsOptions listNetworkInterfaceFloatingIpsOptions = new ListNetworkInterfaceFloatingIpsOptions.Builder()
      .virtualNetworkInterfaceId("testString")
      .limit(Long.valueOf("10"))
      .sort("name")
      .build();

    NetworkInterfaceFloatingIpsPager pager = new NetworkInterfaceFloatingIpsPager(vpcService, listNetworkInterfaceFloatingIpsOptions);
    List<FloatingIPReference> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the removeNetworkInterfaceFloatingIp operation with a valid options model parameter
  @Test
  public void testRemoveNetworkInterfaceFloatingIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String removeNetworkInterfaceFloatingIpPath = "/virtual_network_interfaces/testString/floating_ips/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the RemoveNetworkInterfaceFloatingIpOptions model
    RemoveNetworkInterfaceFloatingIpOptions removeNetworkInterfaceFloatingIpOptionsModel = new RemoveNetworkInterfaceFloatingIpOptions.Builder()
      .virtualNetworkInterfaceId("testString")
      .id("testString")
      .build();

    // Invoke removeNetworkInterfaceFloatingIp() with a valid options model and verify the result
    Response<Void> response = vpcService.removeNetworkInterfaceFloatingIp(removeNetworkInterfaceFloatingIpOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, removeNetworkInterfaceFloatingIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the removeNetworkInterfaceFloatingIp operation with and without retries enabled
  @Test
  public void testRemoveNetworkInterfaceFloatingIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testRemoveNetworkInterfaceFloatingIpWOptions();

    vpcService.disableRetries();
    testRemoveNetworkInterfaceFloatingIpWOptions();
  }

  // Test the removeNetworkInterfaceFloatingIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testRemoveNetworkInterfaceFloatingIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.removeNetworkInterfaceFloatingIp(null).execute();
  }

  // Test the getNetworkInterfaceFloatingIp operation with a valid options model parameter
  @Test
  public void testGetNetworkInterfaceFloatingIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"203.0.113.1\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"id\": \"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"name\": \"my-floating-ip\"}";
    String getNetworkInterfaceFloatingIpPath = "/virtual_network_interfaces/testString/floating_ips/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetNetworkInterfaceFloatingIpOptions model
    GetNetworkInterfaceFloatingIpOptions getNetworkInterfaceFloatingIpOptionsModel = new GetNetworkInterfaceFloatingIpOptions.Builder()
      .virtualNetworkInterfaceId("testString")
      .id("testString")
      .build();

    // Invoke getNetworkInterfaceFloatingIp() with a valid options model and verify the result
    Response<FloatingIPReference> response = vpcService.getNetworkInterfaceFloatingIp(getNetworkInterfaceFloatingIpOptionsModel).execute();
    assertNotNull(response);
    FloatingIPReference responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getNetworkInterfaceFloatingIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getNetworkInterfaceFloatingIp operation with and without retries enabled
  @Test
  public void testGetNetworkInterfaceFloatingIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetNetworkInterfaceFloatingIpWOptions();

    vpcService.disableRetries();
    testGetNetworkInterfaceFloatingIpWOptions();
  }

  // Test the getNetworkInterfaceFloatingIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetNetworkInterfaceFloatingIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getNetworkInterfaceFloatingIp(null).execute();
  }

  // Test the addNetworkInterfaceFloatingIp operation with a valid options model parameter
  @Test
  public void testAddNetworkInterfaceFloatingIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"203.0.113.1\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"id\": \"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"name\": \"my-floating-ip\"}";
    String addNetworkInterfaceFloatingIpPath = "/virtual_network_interfaces/testString/floating_ips/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the AddNetworkInterfaceFloatingIpOptions model
    AddNetworkInterfaceFloatingIpOptions addNetworkInterfaceFloatingIpOptionsModel = new AddNetworkInterfaceFloatingIpOptions.Builder()
      .virtualNetworkInterfaceId("testString")
      .id("testString")
      .build();

    // Invoke addNetworkInterfaceFloatingIp() with a valid options model and verify the result
    Response<FloatingIPReference> response = vpcService.addNetworkInterfaceFloatingIp(addNetworkInterfaceFloatingIpOptionsModel).execute();
    assertNotNull(response);
    FloatingIPReference responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PUT");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, addNetworkInterfaceFloatingIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the addNetworkInterfaceFloatingIp operation with and without retries enabled
  @Test
  public void testAddNetworkInterfaceFloatingIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testAddNetworkInterfaceFloatingIpWOptions();

    vpcService.disableRetries();
    testAddNetworkInterfaceFloatingIpWOptions();
  }

  // Test the addNetworkInterfaceFloatingIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testAddNetworkInterfaceFloatingIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.addNetworkInterfaceFloatingIp(null).execute();
  }

  // Test the listVirtualNetworkInterfaceIps operation with a valid options model parameter
  @Test
  public void testListVirtualNetworkInterfaceIpsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"ips\": [{\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}], \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listVirtualNetworkInterfaceIpsPath = "/virtual_network_interfaces/testString/ips";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListVirtualNetworkInterfaceIpsOptions model
    ListVirtualNetworkInterfaceIpsOptions listVirtualNetworkInterfaceIpsOptionsModel = new ListVirtualNetworkInterfaceIpsOptions.Builder()
      .virtualNetworkInterfaceId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .sort("name")
      .build();

    // Invoke listVirtualNetworkInterfaceIps() with a valid options model and verify the result
    Response<ReservedIPCollectionVirtualNetworkInterfaceContext> response = vpcService.listVirtualNetworkInterfaceIps(listVirtualNetworkInterfaceIpsOptionsModel).execute();
    assertNotNull(response);
    ReservedIPCollectionVirtualNetworkInterfaceContext responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listVirtualNetworkInterfaceIpsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("sort"), "name");
  }

  // Test the listVirtualNetworkInterfaceIps operation with and without retries enabled
  @Test
  public void testListVirtualNetworkInterfaceIpsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListVirtualNetworkInterfaceIpsWOptions();

    vpcService.disableRetries();
    testListVirtualNetworkInterfaceIpsWOptions();
  }

  // Test the listVirtualNetworkInterfaceIps operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListVirtualNetworkInterfaceIpsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listVirtualNetworkInterfaceIps(null).execute();
  }

  // Test the listVirtualNetworkInterfaceIps operation using the VirtualNetworkInterfaceIpsPager.getNext() method
  @Test
  public void testListVirtualNetworkInterfaceIpsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"ips\":[{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"ips\":[{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVirtualNetworkInterfaceIpsOptions listVirtualNetworkInterfaceIpsOptions = new ListVirtualNetworkInterfaceIpsOptions.Builder()
      .virtualNetworkInterfaceId("testString")
      .limit(Long.valueOf("10"))
      .sort("name")
      .build();

    List<ReservedIPReference> allResults = new ArrayList<>();
    VirtualNetworkInterfaceIpsPager pager = new VirtualNetworkInterfaceIpsPager(vpcService, listVirtualNetworkInterfaceIpsOptions);
    while (pager.hasNext()) {
      List<ReservedIPReference> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listVirtualNetworkInterfaceIps operation using the VirtualNetworkInterfaceIpsPager.getAll() method
  @Test
  public void testListVirtualNetworkInterfaceIpsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"ips\":[{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"ips\":[{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVirtualNetworkInterfaceIpsOptions listVirtualNetworkInterfaceIpsOptions = new ListVirtualNetworkInterfaceIpsOptions.Builder()
      .virtualNetworkInterfaceId("testString")
      .limit(Long.valueOf("10"))
      .sort("name")
      .build();

    VirtualNetworkInterfaceIpsPager pager = new VirtualNetworkInterfaceIpsPager(vpcService, listVirtualNetworkInterfaceIpsOptions);
    List<ReservedIPReference> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the removeVirtualNetworkInterfaceIp operation with a valid options model parameter
  @Test
  public void testRemoveVirtualNetworkInterfaceIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String removeVirtualNetworkInterfaceIpPath = "/virtual_network_interfaces/testString/ips/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the RemoveVirtualNetworkInterfaceIpOptions model
    RemoveVirtualNetworkInterfaceIpOptions removeVirtualNetworkInterfaceIpOptionsModel = new RemoveVirtualNetworkInterfaceIpOptions.Builder()
      .virtualNetworkInterfaceId("testString")
      .id("testString")
      .build();

    // Invoke removeVirtualNetworkInterfaceIp() with a valid options model and verify the result
    Response<Void> response = vpcService.removeVirtualNetworkInterfaceIp(removeVirtualNetworkInterfaceIpOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, removeVirtualNetworkInterfaceIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the removeVirtualNetworkInterfaceIp operation with and without retries enabled
  @Test
  public void testRemoveVirtualNetworkInterfaceIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testRemoveVirtualNetworkInterfaceIpWOptions();

    vpcService.disableRetries();
    testRemoveVirtualNetworkInterfaceIpWOptions();
  }

  // Test the removeVirtualNetworkInterfaceIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testRemoveVirtualNetworkInterfaceIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.removeVirtualNetworkInterfaceIp(null).execute();
  }

  // Test the getVirtualNetworkInterfaceIp operation with a valid options model parameter
  @Test
  public void testGetVirtualNetworkInterfaceIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}";
    String getVirtualNetworkInterfaceIpPath = "/virtual_network_interfaces/testString/ips/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVirtualNetworkInterfaceIpOptions model
    GetVirtualNetworkInterfaceIpOptions getVirtualNetworkInterfaceIpOptionsModel = new GetVirtualNetworkInterfaceIpOptions.Builder()
      .virtualNetworkInterfaceId("testString")
      .id("testString")
      .build();

    // Invoke getVirtualNetworkInterfaceIp() with a valid options model and verify the result
    Response<ReservedIPReference> response = vpcService.getVirtualNetworkInterfaceIp(getVirtualNetworkInterfaceIpOptionsModel).execute();
    assertNotNull(response);
    ReservedIPReference responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVirtualNetworkInterfaceIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVirtualNetworkInterfaceIp operation with and without retries enabled
  @Test
  public void testGetVirtualNetworkInterfaceIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVirtualNetworkInterfaceIpWOptions();

    vpcService.disableRetries();
    testGetVirtualNetworkInterfaceIpWOptions();
  }

  // Test the getVirtualNetworkInterfaceIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVirtualNetworkInterfaceIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVirtualNetworkInterfaceIp(null).execute();
  }

  // Test the addVirtualNetworkInterfaceIp operation with a valid options model parameter
  @Test
  public void testAddVirtualNetworkInterfaceIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}";
    String addVirtualNetworkInterfaceIpPath = "/virtual_network_interfaces/testString/ips/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the AddVirtualNetworkInterfaceIpOptions model
    AddVirtualNetworkInterfaceIpOptions addVirtualNetworkInterfaceIpOptionsModel = new AddVirtualNetworkInterfaceIpOptions.Builder()
      .virtualNetworkInterfaceId("testString")
      .id("testString")
      .build();

    // Invoke addVirtualNetworkInterfaceIp() with a valid options model and verify the result
    Response<ReservedIPReference> response = vpcService.addVirtualNetworkInterfaceIp(addVirtualNetworkInterfaceIpOptionsModel).execute();
    assertNotNull(response);
    ReservedIPReference responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PUT");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, addVirtualNetworkInterfaceIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the addVirtualNetworkInterfaceIp operation with and without retries enabled
  @Test
  public void testAddVirtualNetworkInterfaceIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testAddVirtualNetworkInterfaceIpWOptions();

    vpcService.disableRetries();
    testAddVirtualNetworkInterfaceIpWOptions();
  }

  // Test the addVirtualNetworkInterfaceIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testAddVirtualNetworkInterfaceIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.addVirtualNetworkInterfaceIp(null).execute();
  }

  // Test the listClusterNetworkProfiles operation with a valid options model parameter
  @Test
  public void testListClusterNetworkProfilesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"profiles\": [{\"family\": \"vela\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_network/profiles/h100\", \"name\": \"h100\", \"resource_type\": \"cluster_network_profile\", \"supported_instance_profiles\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\", \"resource_type\": \"instance_profile\"}], \"zones\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}]}], \"total_count\": 132}";
    String listClusterNetworkProfilesPath = "/cluster_network/profiles";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListClusterNetworkProfilesOptions model
    ListClusterNetworkProfilesOptions listClusterNetworkProfilesOptionsModel = new ListClusterNetworkProfilesOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listClusterNetworkProfiles() with a valid options model and verify the result
    Response<ClusterNetworkProfileCollection> response = vpcService.listClusterNetworkProfiles(listClusterNetworkProfilesOptionsModel).execute();
    assertNotNull(response);
    ClusterNetworkProfileCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listClusterNetworkProfilesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listClusterNetworkProfiles operation with and without retries enabled
  @Test
  public void testListClusterNetworkProfilesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListClusterNetworkProfilesWOptions();

    vpcService.disableRetries();
    testListClusterNetworkProfilesWOptions();
  }

  // Test the listClusterNetworkProfiles operation using the ClusterNetworkProfilesPager.getNext() method
  @Test
  public void testListClusterNetworkProfilesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"profiles\":[{\"family\":\"vela\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_network/profiles/h100\",\"name\":\"h100\",\"resource_type\":\"cluster_network_profile\",\"supported_instance_profiles\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\",\"resource_type\":\"instance_profile\"}],\"zones\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}]}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"profiles\":[{\"family\":\"vela\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_network/profiles/h100\",\"name\":\"h100\",\"resource_type\":\"cluster_network_profile\",\"supported_instance_profiles\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\",\"resource_type\":\"instance_profile\"}],\"zones\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}]}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListClusterNetworkProfilesOptions listClusterNetworkProfilesOptions = new ListClusterNetworkProfilesOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    List<ClusterNetworkProfile> allResults = new ArrayList<>();
    ClusterNetworkProfilesPager pager = new ClusterNetworkProfilesPager(vpcService, listClusterNetworkProfilesOptions);
    while (pager.hasNext()) {
      List<ClusterNetworkProfile> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listClusterNetworkProfiles operation using the ClusterNetworkProfilesPager.getAll() method
  @Test
  public void testListClusterNetworkProfilesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"profiles\":[{\"family\":\"vela\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_network/profiles/h100\",\"name\":\"h100\",\"resource_type\":\"cluster_network_profile\",\"supported_instance_profiles\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\",\"resource_type\":\"instance_profile\"}],\"zones\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}]}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"profiles\":[{\"family\":\"vela\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_network/profiles/h100\",\"name\":\"h100\",\"resource_type\":\"cluster_network_profile\",\"supported_instance_profiles\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\",\"name\":\"bx2-4x16\",\"resource_type\":\"instance_profile\"}],\"zones\":[{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}]}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListClusterNetworkProfilesOptions listClusterNetworkProfilesOptions = new ListClusterNetworkProfilesOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    ClusterNetworkProfilesPager pager = new ClusterNetworkProfilesPager(vpcService, listClusterNetworkProfilesOptions);
    List<ClusterNetworkProfile> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the getClusterNetworkProfile operation with a valid options model parameter
  @Test
  public void testGetClusterNetworkProfileWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"family\": \"vela\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_network/profiles/h100\", \"name\": \"h100\", \"resource_type\": \"cluster_network_profile\", \"supported_instance_profiles\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bx2-4x16\", \"name\": \"bx2-4x16\", \"resource_type\": \"instance_profile\"}], \"zones\": [{\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}]}";
    String getClusterNetworkProfilePath = "/cluster_network/profiles/h100";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetClusterNetworkProfileOptions model
    GetClusterNetworkProfileOptions getClusterNetworkProfileOptionsModel = new GetClusterNetworkProfileOptions.Builder()
      .name("h100")
      .build();

    // Invoke getClusterNetworkProfile() with a valid options model and verify the result
    Response<ClusterNetworkProfile> response = vpcService.getClusterNetworkProfile(getClusterNetworkProfileOptionsModel).execute();
    assertNotNull(response);
    ClusterNetworkProfile responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getClusterNetworkProfilePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getClusterNetworkProfile operation with and without retries enabled
  @Test
  public void testGetClusterNetworkProfileWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetClusterNetworkProfileWOptions();

    vpcService.disableRetries();
    testGetClusterNetworkProfileWOptions();
  }

  // Test the getClusterNetworkProfile operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetClusterNetworkProfileNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getClusterNetworkProfile(null).execute();
  }

  // Test the listClusterNetworks operation with a valid options model parameter
  @Test
  public void testListClusterNetworksWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"cluster_networks\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::cluster-network:0717-da0df18c-7598-4633-a648-fdaac28a5573\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573\", \"id\": \"0717-da0df18c-7598-4633-a648-fdaac28a5573\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-cluster-network\", \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_network/profiles/h100\", \"name\": \"h100\", \"resource_type\": \"cluster_network_profile\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"cluster_network\", \"subnet_prefixes\": [{\"allocation_policy\": \"auto\", \"cidr\": \"10.0.0.0/24\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listClusterNetworksPath = "/cluster_networks";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListClusterNetworksOptions model
    ListClusterNetworksOptions listClusterNetworksOptionsModel = new ListClusterNetworksOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("my-name")
      .sort("name")
      .vpcId("testString")
      .vpcCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .vpcName("my-vpc")
      .build();

    // Invoke listClusterNetworks() with a valid options model and verify the result
    Response<ClusterNetworkCollection> response = vpcService.listClusterNetworks(listClusterNetworksOptionsModel).execute();
    assertNotNull(response);
    ClusterNetworkCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listClusterNetworksPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
    assertEquals(query.get("name"), "my-name");
    assertEquals(query.get("sort"), "name");
    assertEquals(query.get("vpc.id"), "testString");
    assertEquals(query.get("vpc.crn"), "crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b");
    assertEquals(query.get("vpc.name"), "my-vpc");
  }

  // Test the listClusterNetworks operation with and without retries enabled
  @Test
  public void testListClusterNetworksWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListClusterNetworksWOptions();

    vpcService.disableRetries();
    testListClusterNetworksWOptions();
  }

  // Test the listClusterNetworks operation using the ClusterNetworksPager.getNext() method
  @Test
  public void testListClusterNetworksWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"cluster_networks\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::cluster-network:0717-da0df18c-7598-4633-a648-fdaac28a5573\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573\",\"id\":\"0717-da0df18c-7598-4633-a648-fdaac28a5573\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"name\":\"my-cluster-network\",\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_network/profiles/h100\",\"name\":\"h100\",\"resource_type\":\"cluster_network_profile\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"cluster_network\",\"subnet_prefixes\":[{\"allocation_policy\":\"auto\",\"cidr\":\"10.0.0.0/24\"}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"cluster_networks\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::cluster-network:0717-da0df18c-7598-4633-a648-fdaac28a5573\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573\",\"id\":\"0717-da0df18c-7598-4633-a648-fdaac28a5573\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"name\":\"my-cluster-network\",\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_network/profiles/h100\",\"name\":\"h100\",\"resource_type\":\"cluster_network_profile\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"cluster_network\",\"subnet_prefixes\":[{\"allocation_policy\":\"auto\",\"cidr\":\"10.0.0.0/24\"}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListClusterNetworksOptions listClusterNetworksOptions = new ListClusterNetworksOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("my-name")
      .sort("name")
      .vpcId("testString")
      .vpcCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .vpcName("my-vpc")
      .build();

    List<ClusterNetwork> allResults = new ArrayList<>();
    ClusterNetworksPager pager = new ClusterNetworksPager(vpcService, listClusterNetworksOptions);
    while (pager.hasNext()) {
      List<ClusterNetwork> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listClusterNetworks operation using the ClusterNetworksPager.getAll() method
  @Test
  public void testListClusterNetworksWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"cluster_networks\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::cluster-network:0717-da0df18c-7598-4633-a648-fdaac28a5573\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573\",\"id\":\"0717-da0df18c-7598-4633-a648-fdaac28a5573\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"name\":\"my-cluster-network\",\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_network/profiles/h100\",\"name\":\"h100\",\"resource_type\":\"cluster_network_profile\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"cluster_network\",\"subnet_prefixes\":[{\"allocation_policy\":\"auto\",\"cidr\":\"10.0.0.0/24\"}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"cluster_networks\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::cluster-network:0717-da0df18c-7598-4633-a648-fdaac28a5573\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573\",\"id\":\"0717-da0df18c-7598-4633-a648-fdaac28a5573\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"name\":\"my-cluster-network\",\"profile\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_network/profiles/h100\",\"name\":\"h100\",\"resource_type\":\"cluster_network_profile\"},\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"cluster_network\",\"subnet_prefixes\":[{\"allocation_policy\":\"auto\",\"cidr\":\"10.0.0.0/24\"}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListClusterNetworksOptions listClusterNetworksOptions = new ListClusterNetworksOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("my-name")
      .sort("name")
      .vpcId("testString")
      .vpcCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .vpcName("my-vpc")
      .build();

    ClusterNetworksPager pager = new ClusterNetworksPager(vpcService, listClusterNetworksOptions);
    List<ClusterNetwork> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createClusterNetwork operation with a valid options model parameter
  @Test
  public void testCreateClusterNetworkWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::cluster-network:0717-da0df18c-7598-4633-a648-fdaac28a5573\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573\", \"id\": \"0717-da0df18c-7598-4633-a648-fdaac28a5573\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-cluster-network\", \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_network/profiles/h100\", \"name\": \"h100\", \"resource_type\": \"cluster_network_profile\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"cluster_network\", \"subnet_prefixes\": [{\"allocation_policy\": \"auto\", \"cidr\": \"10.0.0.0/24\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String createClusterNetworkPath = "/cluster_networks";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ClusterNetworkProfileIdentityByName model
    ClusterNetworkProfileIdentityByName clusterNetworkProfileIdentityModel = new ClusterNetworkProfileIdentityByName.Builder()
      .name("h100")
      .build();

    // Construct an instance of the VPCIdentityById model
    VPCIdentityById vpcIdentityModel = new VPCIdentityById.Builder()
      .id("r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .build();

    // Construct an instance of the ZoneIdentityByName model
    ZoneIdentityByName zoneIdentityModel = new ZoneIdentityByName.Builder()
      .name("us-south-1")
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the ClusterNetworkSubnetPrefixPrototype model
    ClusterNetworkSubnetPrefixPrototype clusterNetworkSubnetPrefixPrototypeModel = new ClusterNetworkSubnetPrefixPrototype.Builder()
      .cidr("10.0.0.0/24")
      .build();

    // Construct an instance of the CreateClusterNetworkOptions model
    CreateClusterNetworkOptions createClusterNetworkOptionsModel = new CreateClusterNetworkOptions.Builder()
      .profile(clusterNetworkProfileIdentityModel)
      .vpc(vpcIdentityModel)
      .zone(zoneIdentityModel)
      .name("my-cluster-network")
      .resourceGroup(resourceGroupIdentityModel)
      .subnetPrefixes(java.util.Arrays.asList(clusterNetworkSubnetPrefixPrototypeModel))
      .build();

    // Invoke createClusterNetwork() with a valid options model and verify the result
    Response<ClusterNetwork> response = vpcService.createClusterNetwork(createClusterNetworkOptionsModel).execute();
    assertNotNull(response);
    ClusterNetwork responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createClusterNetworkPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createClusterNetwork operation with and without retries enabled
  @Test
  public void testCreateClusterNetworkWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateClusterNetworkWOptions();

    vpcService.disableRetries();
    testCreateClusterNetworkWOptions();
  }

  // Test the createClusterNetwork operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateClusterNetworkNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createClusterNetwork(null).execute();
  }

  // Test the listClusterNetworkInterfaces operation with a valid options model parameter
  @Test
  public void testListClusterNetworkInterfacesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"interfaces\": [{\"allow_ip_spoofing\": true, \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"enable_infrastructure_nat\": false, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/interfaces/0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\", \"id\": \"0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"mac_address\": \"02:00:4D:45:45:4D\", \"name\": \"my-cluster-network-interface\", \"primary_ip\": {\"address\": \"10.1.0.6\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930/reserved_ips/0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\", \"id\": \"0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\", \"name\": \"my-cluster-network-subnet-reserved-ip\", \"resource_type\": \"cluster_network_subnet_reserved_ip\"}, \"resource_type\": \"cluster_network_interface\", \"subnet\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\", \"id\": \"0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\", \"name\": \"my-cluster-network-subnet\", \"resource_type\": \"cluster_network_subnet\"}, \"target\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\", \"id\": \"0717-fb880975-db45-4459-8548-64e3995ac213\", \"name\": \"my-instance-network-attachment\", \"resource_type\": \"instance_cluster_network_attachment\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listClusterNetworkInterfacesPath = "/cluster_networks/testString/interfaces";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListClusterNetworkInterfacesOptions model
    ListClusterNetworkInterfacesOptions listClusterNetworkInterfacesOptionsModel = new ListClusterNetworkInterfacesOptions.Builder()
      .clusterNetworkId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .name("my-name")
      .sort("name")
      .build();

    // Invoke listClusterNetworkInterfaces() with a valid options model and verify the result
    Response<ClusterNetworkInterfaceCollection> response = vpcService.listClusterNetworkInterfaces(listClusterNetworkInterfacesOptionsModel).execute();
    assertNotNull(response);
    ClusterNetworkInterfaceCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listClusterNetworkInterfacesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("name"), "my-name");
    assertEquals(query.get("sort"), "name");
  }

  // Test the listClusterNetworkInterfaces operation with and without retries enabled
  @Test
  public void testListClusterNetworkInterfacesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListClusterNetworkInterfacesWOptions();

    vpcService.disableRetries();
    testListClusterNetworkInterfacesWOptions();
  }

  // Test the listClusterNetworkInterfaces operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListClusterNetworkInterfacesNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listClusterNetworkInterfaces(null).execute();
  }

  // Test the listClusterNetworkInterfaces operation using the ClusterNetworkInterfacesPager.getNext() method
  @Test
  public void testListClusterNetworkInterfacesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"interfaces\":[{\"allow_ip_spoofing\":true,\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"enable_infrastructure_nat\":false,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/interfaces/0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\",\"id\":\"0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"mac_address\":\"02:00:4D:45:45:4D\",\"name\":\"my-cluster-network-interface\",\"primary_ip\":{\"address\":\"10.1.0.6\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930/reserved_ips/0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\",\"id\":\"0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\",\"name\":\"my-cluster-network-subnet-reserved-ip\",\"resource_type\":\"cluster_network_subnet_reserved_ip\"},\"resource_type\":\"cluster_network_interface\",\"subnet\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\",\"id\":\"0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\",\"name\":\"my-cluster-network-subnet\",\"resource_type\":\"cluster_network_subnet\"},\"target\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\",\"id\":\"0717-fb880975-db45-4459-8548-64e3995ac213\",\"name\":\"my-instance-network-attachment\",\"resource_type\":\"instance_cluster_network_attachment\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"interfaces\":[{\"allow_ip_spoofing\":true,\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"enable_infrastructure_nat\":false,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/interfaces/0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\",\"id\":\"0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"mac_address\":\"02:00:4D:45:45:4D\",\"name\":\"my-cluster-network-interface\",\"primary_ip\":{\"address\":\"10.1.0.6\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930/reserved_ips/0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\",\"id\":\"0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\",\"name\":\"my-cluster-network-subnet-reserved-ip\",\"resource_type\":\"cluster_network_subnet_reserved_ip\"},\"resource_type\":\"cluster_network_interface\",\"subnet\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\",\"id\":\"0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\",\"name\":\"my-cluster-network-subnet\",\"resource_type\":\"cluster_network_subnet\"},\"target\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\",\"id\":\"0717-fb880975-db45-4459-8548-64e3995ac213\",\"name\":\"my-instance-network-attachment\",\"resource_type\":\"instance_cluster_network_attachment\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListClusterNetworkInterfacesOptions listClusterNetworkInterfacesOptions = new ListClusterNetworkInterfacesOptions.Builder()
      .clusterNetworkId("testString")
      .limit(Long.valueOf("10"))
      .name("my-name")
      .sort("name")
      .build();

    List<ClusterNetworkInterface> allResults = new ArrayList<>();
    ClusterNetworkInterfacesPager pager = new ClusterNetworkInterfacesPager(vpcService, listClusterNetworkInterfacesOptions);
    while (pager.hasNext()) {
      List<ClusterNetworkInterface> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listClusterNetworkInterfaces operation using the ClusterNetworkInterfacesPager.getAll() method
  @Test
  public void testListClusterNetworkInterfacesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"interfaces\":[{\"allow_ip_spoofing\":true,\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"enable_infrastructure_nat\":false,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/interfaces/0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\",\"id\":\"0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"mac_address\":\"02:00:4D:45:45:4D\",\"name\":\"my-cluster-network-interface\",\"primary_ip\":{\"address\":\"10.1.0.6\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930/reserved_ips/0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\",\"id\":\"0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\",\"name\":\"my-cluster-network-subnet-reserved-ip\",\"resource_type\":\"cluster_network_subnet_reserved_ip\"},\"resource_type\":\"cluster_network_interface\",\"subnet\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\",\"id\":\"0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\",\"name\":\"my-cluster-network-subnet\",\"resource_type\":\"cluster_network_subnet\"},\"target\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\",\"id\":\"0717-fb880975-db45-4459-8548-64e3995ac213\",\"name\":\"my-instance-network-attachment\",\"resource_type\":\"instance_cluster_network_attachment\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"interfaces\":[{\"allow_ip_spoofing\":true,\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"enable_infrastructure_nat\":false,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/interfaces/0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\",\"id\":\"0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"mac_address\":\"02:00:4D:45:45:4D\",\"name\":\"my-cluster-network-interface\",\"primary_ip\":{\"address\":\"10.1.0.6\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930/reserved_ips/0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\",\"id\":\"0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\",\"name\":\"my-cluster-network-subnet-reserved-ip\",\"resource_type\":\"cluster_network_subnet_reserved_ip\"},\"resource_type\":\"cluster_network_interface\",\"subnet\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\",\"id\":\"0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\",\"name\":\"my-cluster-network-subnet\",\"resource_type\":\"cluster_network_subnet\"},\"target\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\",\"id\":\"0717-fb880975-db45-4459-8548-64e3995ac213\",\"name\":\"my-instance-network-attachment\",\"resource_type\":\"instance_cluster_network_attachment\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListClusterNetworkInterfacesOptions listClusterNetworkInterfacesOptions = new ListClusterNetworkInterfacesOptions.Builder()
      .clusterNetworkId("testString")
      .limit(Long.valueOf("10"))
      .name("my-name")
      .sort("name")
      .build();

    ClusterNetworkInterfacesPager pager = new ClusterNetworkInterfacesPager(vpcService, listClusterNetworkInterfacesOptions);
    List<ClusterNetworkInterface> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createClusterNetworkInterface operation with a valid options model parameter
  @Test
  public void testCreateClusterNetworkInterfaceWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"allow_ip_spoofing\": true, \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"enable_infrastructure_nat\": false, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/interfaces/0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\", \"id\": \"0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"mac_address\": \"02:00:4D:45:45:4D\", \"name\": \"my-cluster-network-interface\", \"primary_ip\": {\"address\": \"10.1.0.6\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930/reserved_ips/0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\", \"id\": \"0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\", \"name\": \"my-cluster-network-subnet-reserved-ip\", \"resource_type\": \"cluster_network_subnet_reserved_ip\"}, \"resource_type\": \"cluster_network_interface\", \"subnet\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\", \"id\": \"0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\", \"name\": \"my-cluster-network-subnet\", \"resource_type\": \"cluster_network_subnet\"}, \"target\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\", \"id\": \"0717-fb880975-db45-4459-8548-64e3995ac213\", \"name\": \"my-instance-network-attachment\", \"resource_type\": \"instance_cluster_network_attachment\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String createClusterNetworkInterfacePath = "/cluster_networks/testString/interfaces";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ClusterNetworkInterfacePrimaryIPPrototypeClusterNetworkSubnetReservedIPPrototypeClusterNetworkInterfacePrimaryIPContext model
    ClusterNetworkInterfacePrimaryIPPrototypeClusterNetworkSubnetReservedIPPrototypeClusterNetworkInterfacePrimaryIPContext clusterNetworkInterfacePrimaryIpPrototypeModel = new ClusterNetworkInterfacePrimaryIPPrototypeClusterNetworkSubnetReservedIPPrototypeClusterNetworkInterfacePrimaryIPContext.Builder()
      .address("10.0.0.5")
      .autoDelete(false)
      .name("my-cluster-network-subnet-reserved-ip")
      .build();

    // Construct an instance of the ClusterNetworkSubnetIdentityById model
    ClusterNetworkSubnetIdentityById clusterNetworkSubnetIdentityModel = new ClusterNetworkSubnetIdentityById.Builder()
      .id("0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930")
      .build();

    // Construct an instance of the CreateClusterNetworkInterfaceOptions model
    CreateClusterNetworkInterfaceOptions createClusterNetworkInterfaceOptionsModel = new CreateClusterNetworkInterfaceOptions.Builder()
      .clusterNetworkId("testString")
      .name("my-cluster-network-interface")
      .primaryIp(clusterNetworkInterfacePrimaryIpPrototypeModel)
      .subnet(clusterNetworkSubnetIdentityModel)
      .build();

    // Invoke createClusterNetworkInterface() with a valid options model and verify the result
    Response<ClusterNetworkInterface> response = vpcService.createClusterNetworkInterface(createClusterNetworkInterfaceOptionsModel).execute();
    assertNotNull(response);
    ClusterNetworkInterface responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createClusterNetworkInterfacePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createClusterNetworkInterface operation with and without retries enabled
  @Test
  public void testCreateClusterNetworkInterfaceWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateClusterNetworkInterfaceWOptions();

    vpcService.disableRetries();
    testCreateClusterNetworkInterfaceWOptions();
  }

  // Test the createClusterNetworkInterface operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateClusterNetworkInterfaceNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createClusterNetworkInterface(null).execute();
  }

  // Test the deleteClusterNetworkInterface operation with a valid options model parameter
  @Test
  public void testDeleteClusterNetworkInterfaceWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"allow_ip_spoofing\": true, \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"enable_infrastructure_nat\": false, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/interfaces/0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\", \"id\": \"0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"mac_address\": \"02:00:4D:45:45:4D\", \"name\": \"my-cluster-network-interface\", \"primary_ip\": {\"address\": \"10.1.0.6\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930/reserved_ips/0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\", \"id\": \"0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\", \"name\": \"my-cluster-network-subnet-reserved-ip\", \"resource_type\": \"cluster_network_subnet_reserved_ip\"}, \"resource_type\": \"cluster_network_interface\", \"subnet\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\", \"id\": \"0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\", \"name\": \"my-cluster-network-subnet\", \"resource_type\": \"cluster_network_subnet\"}, \"target\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\", \"id\": \"0717-fb880975-db45-4459-8548-64e3995ac213\", \"name\": \"my-instance-network-attachment\", \"resource_type\": \"instance_cluster_network_attachment\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String deleteClusterNetworkInterfacePath = "/cluster_networks/testString/interfaces/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteClusterNetworkInterfaceOptions model
    DeleteClusterNetworkInterfaceOptions deleteClusterNetworkInterfaceOptionsModel = new DeleteClusterNetworkInterfaceOptions.Builder()
      .clusterNetworkId("testString")
      .id("testString")
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke deleteClusterNetworkInterface() with a valid options model and verify the result
    Response<ClusterNetworkInterface> response = vpcService.deleteClusterNetworkInterface(deleteClusterNetworkInterfaceOptionsModel).execute();
    assertNotNull(response);
    ClusterNetworkInterface responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteClusterNetworkInterfacePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteClusterNetworkInterface operation with and without retries enabled
  @Test
  public void testDeleteClusterNetworkInterfaceWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteClusterNetworkInterfaceWOptions();

    vpcService.disableRetries();
    testDeleteClusterNetworkInterfaceWOptions();
  }

  // Test the deleteClusterNetworkInterface operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteClusterNetworkInterfaceNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteClusterNetworkInterface(null).execute();
  }

  // Test the getClusterNetworkInterface operation with a valid options model parameter
  @Test
  public void testGetClusterNetworkInterfaceWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"allow_ip_spoofing\": true, \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"enable_infrastructure_nat\": false, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/interfaces/0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\", \"id\": \"0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"mac_address\": \"02:00:4D:45:45:4D\", \"name\": \"my-cluster-network-interface\", \"primary_ip\": {\"address\": \"10.1.0.6\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930/reserved_ips/0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\", \"id\": \"0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\", \"name\": \"my-cluster-network-subnet-reserved-ip\", \"resource_type\": \"cluster_network_subnet_reserved_ip\"}, \"resource_type\": \"cluster_network_interface\", \"subnet\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\", \"id\": \"0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\", \"name\": \"my-cluster-network-subnet\", \"resource_type\": \"cluster_network_subnet\"}, \"target\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\", \"id\": \"0717-fb880975-db45-4459-8548-64e3995ac213\", \"name\": \"my-instance-network-attachment\", \"resource_type\": \"instance_cluster_network_attachment\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getClusterNetworkInterfacePath = "/cluster_networks/testString/interfaces/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetClusterNetworkInterfaceOptions model
    GetClusterNetworkInterfaceOptions getClusterNetworkInterfaceOptionsModel = new GetClusterNetworkInterfaceOptions.Builder()
      .clusterNetworkId("testString")
      .id("testString")
      .build();

    // Invoke getClusterNetworkInterface() with a valid options model and verify the result
    Response<ClusterNetworkInterface> response = vpcService.getClusterNetworkInterface(getClusterNetworkInterfaceOptionsModel).execute();
    assertNotNull(response);
    ClusterNetworkInterface responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getClusterNetworkInterfacePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getClusterNetworkInterface operation with and without retries enabled
  @Test
  public void testGetClusterNetworkInterfaceWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetClusterNetworkInterfaceWOptions();

    vpcService.disableRetries();
    testGetClusterNetworkInterfaceWOptions();
  }

  // Test the getClusterNetworkInterface operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetClusterNetworkInterfaceNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getClusterNetworkInterface(null).execute();
  }

  // Test the updateClusterNetworkInterface operation with a valid options model parameter
  @Test
  public void testUpdateClusterNetworkInterfaceWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"allow_ip_spoofing\": true, \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"enable_infrastructure_nat\": false, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/interfaces/0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\", \"id\": \"0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"mac_address\": \"02:00:4D:45:45:4D\", \"name\": \"my-cluster-network-interface\", \"primary_ip\": {\"address\": \"10.1.0.6\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930/reserved_ips/0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\", \"id\": \"0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\", \"name\": \"my-cluster-network-subnet-reserved-ip\", \"resource_type\": \"cluster_network_subnet_reserved_ip\"}, \"resource_type\": \"cluster_network_interface\", \"subnet\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\", \"id\": \"0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\", \"name\": \"my-cluster-network-subnet\", \"resource_type\": \"cluster_network_subnet\"}, \"target\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/cluster_network_attachments/0717-fb880975-db45-4459-8548-64e3995ac213\", \"id\": \"0717-fb880975-db45-4459-8548-64e3995ac213\", \"name\": \"my-instance-network-attachment\", \"resource_type\": \"instance_cluster_network_attachment\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String updateClusterNetworkInterfacePath = "/cluster_networks/testString/interfaces/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ClusterNetworkInterfacePatch model
    ClusterNetworkInterfacePatch clusterNetworkInterfacePatchModel = new ClusterNetworkInterfacePatch.Builder()
      .autoDelete(false)
      .name("my-cluster-network-interface")
      .build();
    Map<String, Object> clusterNetworkInterfacePatchModelAsPatch = clusterNetworkInterfacePatchModel.asPatch();

    // Construct an instance of the UpdateClusterNetworkInterfaceOptions model
    UpdateClusterNetworkInterfaceOptions updateClusterNetworkInterfaceOptionsModel = new UpdateClusterNetworkInterfaceOptions.Builder()
      .clusterNetworkId("testString")
      .id("testString")
      .clusterNetworkInterfacePatch(clusterNetworkInterfacePatchModelAsPatch)
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke updateClusterNetworkInterface() with a valid options model and verify the result
    Response<ClusterNetworkInterface> response = vpcService.updateClusterNetworkInterface(updateClusterNetworkInterfaceOptionsModel).execute();
    assertNotNull(response);
    ClusterNetworkInterface responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateClusterNetworkInterfacePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateClusterNetworkInterface operation with and without retries enabled
  @Test
  public void testUpdateClusterNetworkInterfaceWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateClusterNetworkInterfaceWOptions();

    vpcService.disableRetries();
    testUpdateClusterNetworkInterfaceWOptions();
  }

  // Test the updateClusterNetworkInterface operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateClusterNetworkInterfaceNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateClusterNetworkInterface(null).execute();
  }

  // Test the listClusterNetworkSubnets operation with a valid options model parameter
  @Test
  public void testListClusterNetworkSubnetsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"subnets\": [{\"available_ipv4_address_count\": 15, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\", \"id\": \"0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\", \"ip_version\": \"ipv4\", \"ipv4_cidr_block\": \"10.0.0.0/24\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-cluster-network-subnet\", \"resource_type\": \"cluster_network_subnet\", \"total_ipv4_address_count\": 256}], \"total_count\": 132}";
    String listClusterNetworkSubnetsPath = "/cluster_networks/testString/subnets";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListClusterNetworkSubnetsOptions model
    ListClusterNetworkSubnetsOptions listClusterNetworkSubnetsOptionsModel = new ListClusterNetworkSubnetsOptions.Builder()
      .clusterNetworkId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .name("my-name")
      .sort("name")
      .build();

    // Invoke listClusterNetworkSubnets() with a valid options model and verify the result
    Response<ClusterNetworkSubnetCollection> response = vpcService.listClusterNetworkSubnets(listClusterNetworkSubnetsOptionsModel).execute();
    assertNotNull(response);
    ClusterNetworkSubnetCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listClusterNetworkSubnetsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("name"), "my-name");
    assertEquals(query.get("sort"), "name");
  }

  // Test the listClusterNetworkSubnets operation with and without retries enabled
  @Test
  public void testListClusterNetworkSubnetsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListClusterNetworkSubnetsWOptions();

    vpcService.disableRetries();
    testListClusterNetworkSubnetsWOptions();
  }

  // Test the listClusterNetworkSubnets operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListClusterNetworkSubnetsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listClusterNetworkSubnets(null).execute();
  }

  // Test the listClusterNetworkSubnets operation using the ClusterNetworkSubnetsPager.getNext() method
  @Test
  public void testListClusterNetworkSubnetsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"subnets\":[{\"available_ipv4_address_count\":15,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\",\"id\":\"0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\",\"ip_version\":\"ipv4\",\"ipv4_cidr_block\":\"10.0.0.0/24\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"name\":\"my-cluster-network-subnet\",\"resource_type\":\"cluster_network_subnet\",\"total_ipv4_address_count\":256}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"subnets\":[{\"available_ipv4_address_count\":15,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\",\"id\":\"0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\",\"ip_version\":\"ipv4\",\"ipv4_cidr_block\":\"10.0.0.0/24\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"name\":\"my-cluster-network-subnet\",\"resource_type\":\"cluster_network_subnet\",\"total_ipv4_address_count\":256}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListClusterNetworkSubnetsOptions listClusterNetworkSubnetsOptions = new ListClusterNetworkSubnetsOptions.Builder()
      .clusterNetworkId("testString")
      .limit(Long.valueOf("10"))
      .name("my-name")
      .sort("name")
      .build();

    List<ClusterNetworkSubnet> allResults = new ArrayList<>();
    ClusterNetworkSubnetsPager pager = new ClusterNetworkSubnetsPager(vpcService, listClusterNetworkSubnetsOptions);
    while (pager.hasNext()) {
      List<ClusterNetworkSubnet> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listClusterNetworkSubnets operation using the ClusterNetworkSubnetsPager.getAll() method
  @Test
  public void testListClusterNetworkSubnetsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"subnets\":[{\"available_ipv4_address_count\":15,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\",\"id\":\"0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\",\"ip_version\":\"ipv4\",\"ipv4_cidr_block\":\"10.0.0.0/24\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"name\":\"my-cluster-network-subnet\",\"resource_type\":\"cluster_network_subnet\",\"total_ipv4_address_count\":256}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"subnets\":[{\"available_ipv4_address_count\":15,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\",\"id\":\"0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\",\"ip_version\":\"ipv4\",\"ipv4_cidr_block\":\"10.0.0.0/24\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"name\":\"my-cluster-network-subnet\",\"resource_type\":\"cluster_network_subnet\",\"total_ipv4_address_count\":256}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListClusterNetworkSubnetsOptions listClusterNetworkSubnetsOptions = new ListClusterNetworkSubnetsOptions.Builder()
      .clusterNetworkId("testString")
      .limit(Long.valueOf("10"))
      .name("my-name")
      .sort("name")
      .build();

    ClusterNetworkSubnetsPager pager = new ClusterNetworkSubnetsPager(vpcService, listClusterNetworkSubnetsOptions);
    List<ClusterNetworkSubnet> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createClusterNetworkSubnet operation with a valid options model parameter
  @Test
  public void testCreateClusterNetworkSubnetWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"available_ipv4_address_count\": 15, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\", \"id\": \"0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\", \"ip_version\": \"ipv4\", \"ipv4_cidr_block\": \"10.0.0.0/24\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-cluster-network-subnet\", \"resource_type\": \"cluster_network_subnet\", \"total_ipv4_address_count\": 256}";
    String createClusterNetworkSubnetPath = "/cluster_networks/testString/subnets";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ClusterNetworkSubnetPrototypeClusterNetworkSubnetByTotalCountPrototype model
    ClusterNetworkSubnetPrototypeClusterNetworkSubnetByTotalCountPrototype clusterNetworkSubnetPrototypeModel = new ClusterNetworkSubnetPrototypeClusterNetworkSubnetByTotalCountPrototype.Builder()
      .ipVersion("ipv4")
      .name("my-cluster-network-subnet")
      .totalIpv4AddressCount(Long.valueOf("256"))
      .build();

    // Construct an instance of the CreateClusterNetworkSubnetOptions model
    CreateClusterNetworkSubnetOptions createClusterNetworkSubnetOptionsModel = new CreateClusterNetworkSubnetOptions.Builder()
      .clusterNetworkId("testString")
      .clusterNetworkSubnetPrototype(clusterNetworkSubnetPrototypeModel)
      .build();

    // Invoke createClusterNetworkSubnet() with a valid options model and verify the result
    Response<ClusterNetworkSubnet> response = vpcService.createClusterNetworkSubnet(createClusterNetworkSubnetOptionsModel).execute();
    assertNotNull(response);
    ClusterNetworkSubnet responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createClusterNetworkSubnetPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createClusterNetworkSubnet operation with and without retries enabled
  @Test
  public void testCreateClusterNetworkSubnetWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateClusterNetworkSubnetWOptions();

    vpcService.disableRetries();
    testCreateClusterNetworkSubnetWOptions();
  }

  // Test the createClusterNetworkSubnet operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateClusterNetworkSubnetNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createClusterNetworkSubnet(null).execute();
  }

  // Test the listClusterNetworkSubnetReservedIps operation with a valid options model parameter
  @Test
  public void testListClusterNetworkSubnetReservedIpsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"reserved_ips\": [{\"address\": \"10.1.0.6\", \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930/reserved_ips/0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\", \"id\": \"0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-cluster-network-subnet-reserved-ip\", \"owner\": \"user\", \"resource_type\": \"cluster_network_subnet_reserved_ip\", \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/interfaces/0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\", \"id\": \"0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\", \"name\": \"my-cluster-network-interface\", \"resource_type\": \"cluster_network_interface\"}}], \"total_count\": 132}";
    String listClusterNetworkSubnetReservedIpsPath = "/cluster_networks/testString/subnets/testString/reserved_ips";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListClusterNetworkSubnetReservedIpsOptions model
    ListClusterNetworkSubnetReservedIpsOptions listClusterNetworkSubnetReservedIpsOptionsModel = new ListClusterNetworkSubnetReservedIpsOptions.Builder()
      .clusterNetworkId("testString")
      .clusterNetworkSubnetId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .name("my-name")
      .sort("name")
      .build();

    // Invoke listClusterNetworkSubnetReservedIps() with a valid options model and verify the result
    Response<ClusterNetworkSubnetReservedIPCollection> response = vpcService.listClusterNetworkSubnetReservedIps(listClusterNetworkSubnetReservedIpsOptionsModel).execute();
    assertNotNull(response);
    ClusterNetworkSubnetReservedIPCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listClusterNetworkSubnetReservedIpsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("name"), "my-name");
    assertEquals(query.get("sort"), "name");
  }

  // Test the listClusterNetworkSubnetReservedIps operation with and without retries enabled
  @Test
  public void testListClusterNetworkSubnetReservedIpsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListClusterNetworkSubnetReservedIpsWOptions();

    vpcService.disableRetries();
    testListClusterNetworkSubnetReservedIpsWOptions();
  }

  // Test the listClusterNetworkSubnetReservedIps operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListClusterNetworkSubnetReservedIpsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listClusterNetworkSubnetReservedIps(null).execute();
  }

  // Test the listClusterNetworkSubnetReservedIps operation using the ClusterNetworkSubnetReservedIpsPager.getNext() method
  @Test
  public void testListClusterNetworkSubnetReservedIpsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"reserved_ips\":[{\"address\":\"10.1.0.6\",\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930/reserved_ips/0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\",\"id\":\"0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"name\":\"my-cluster-network-subnet-reserved-ip\",\"owner\":\"user\",\"resource_type\":\"cluster_network_subnet_reserved_ip\",\"target\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/interfaces/0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\",\"id\":\"0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\",\"name\":\"my-cluster-network-interface\",\"resource_type\":\"cluster_network_interface\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"reserved_ips\":[{\"address\":\"10.1.0.6\",\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930/reserved_ips/0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\",\"id\":\"0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"name\":\"my-cluster-network-subnet-reserved-ip\",\"owner\":\"user\",\"resource_type\":\"cluster_network_subnet_reserved_ip\",\"target\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/interfaces/0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\",\"id\":\"0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\",\"name\":\"my-cluster-network-interface\",\"resource_type\":\"cluster_network_interface\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListClusterNetworkSubnetReservedIpsOptions listClusterNetworkSubnetReservedIpsOptions = new ListClusterNetworkSubnetReservedIpsOptions.Builder()
      .clusterNetworkId("testString")
      .clusterNetworkSubnetId("testString")
      .limit(Long.valueOf("10"))
      .name("my-name")
      .sort("name")
      .build();

    List<ClusterNetworkSubnetReservedIP> allResults = new ArrayList<>();
    ClusterNetworkSubnetReservedIpsPager pager = new ClusterNetworkSubnetReservedIpsPager(vpcService, listClusterNetworkSubnetReservedIpsOptions);
    while (pager.hasNext()) {
      List<ClusterNetworkSubnetReservedIP> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listClusterNetworkSubnetReservedIps operation using the ClusterNetworkSubnetReservedIpsPager.getAll() method
  @Test
  public void testListClusterNetworkSubnetReservedIpsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"reserved_ips\":[{\"address\":\"10.1.0.6\",\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930/reserved_ips/0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\",\"id\":\"0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"name\":\"my-cluster-network-subnet-reserved-ip\",\"owner\":\"user\",\"resource_type\":\"cluster_network_subnet_reserved_ip\",\"target\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/interfaces/0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\",\"id\":\"0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\",\"name\":\"my-cluster-network-interface\",\"resource_type\":\"cluster_network_interface\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"reserved_ips\":[{\"address\":\"10.1.0.6\",\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930/reserved_ips/0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\",\"id\":\"0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"name\":\"my-cluster-network-subnet-reserved-ip\",\"owner\":\"user\",\"resource_type\":\"cluster_network_subnet_reserved_ip\",\"target\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/interfaces/0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\",\"id\":\"0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\",\"name\":\"my-cluster-network-interface\",\"resource_type\":\"cluster_network_interface\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListClusterNetworkSubnetReservedIpsOptions listClusterNetworkSubnetReservedIpsOptions = new ListClusterNetworkSubnetReservedIpsOptions.Builder()
      .clusterNetworkId("testString")
      .clusterNetworkSubnetId("testString")
      .limit(Long.valueOf("10"))
      .name("my-name")
      .sort("name")
      .build();

    ClusterNetworkSubnetReservedIpsPager pager = new ClusterNetworkSubnetReservedIpsPager(vpcService, listClusterNetworkSubnetReservedIpsOptions);
    List<ClusterNetworkSubnetReservedIP> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createClusterNetworkSubnetReservedIp operation with a valid options model parameter
  @Test
  public void testCreateClusterNetworkSubnetReservedIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"10.1.0.6\", \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930/reserved_ips/0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\", \"id\": \"0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-cluster-network-subnet-reserved-ip\", \"owner\": \"user\", \"resource_type\": \"cluster_network_subnet_reserved_ip\", \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/interfaces/0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\", \"id\": \"0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\", \"name\": \"my-cluster-network-interface\", \"resource_type\": \"cluster_network_interface\"}}";
    String createClusterNetworkSubnetReservedIpPath = "/cluster_networks/testString/subnets/testString/reserved_ips";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the CreateClusterNetworkSubnetReservedIpOptions model
    CreateClusterNetworkSubnetReservedIpOptions createClusterNetworkSubnetReservedIpOptionsModel = new CreateClusterNetworkSubnetReservedIpOptions.Builder()
      .clusterNetworkId("testString")
      .clusterNetworkSubnetId("testString")
      .address("192.168.3.4")
      .name("my-cluster-network-subnet-reserved-ip")
      .build();

    // Invoke createClusterNetworkSubnetReservedIp() with a valid options model and verify the result
    Response<ClusterNetworkSubnetReservedIP> response = vpcService.createClusterNetworkSubnetReservedIp(createClusterNetworkSubnetReservedIpOptionsModel).execute();
    assertNotNull(response);
    ClusterNetworkSubnetReservedIP responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createClusterNetworkSubnetReservedIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createClusterNetworkSubnetReservedIp operation with and without retries enabled
  @Test
  public void testCreateClusterNetworkSubnetReservedIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateClusterNetworkSubnetReservedIpWOptions();

    vpcService.disableRetries();
    testCreateClusterNetworkSubnetReservedIpWOptions();
  }

  // Test the createClusterNetworkSubnetReservedIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateClusterNetworkSubnetReservedIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createClusterNetworkSubnetReservedIp(null).execute();
  }

  // Test the deleteClusterNetworkSubnetReservedIp operation with a valid options model parameter
  @Test
  public void testDeleteClusterNetworkSubnetReservedIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"10.1.0.6\", \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930/reserved_ips/0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\", \"id\": \"0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-cluster-network-subnet-reserved-ip\", \"owner\": \"user\", \"resource_type\": \"cluster_network_subnet_reserved_ip\", \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/interfaces/0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\", \"id\": \"0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\", \"name\": \"my-cluster-network-interface\", \"resource_type\": \"cluster_network_interface\"}}";
    String deleteClusterNetworkSubnetReservedIpPath = "/cluster_networks/testString/subnets/testString/reserved_ips/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteClusterNetworkSubnetReservedIpOptions model
    DeleteClusterNetworkSubnetReservedIpOptions deleteClusterNetworkSubnetReservedIpOptionsModel = new DeleteClusterNetworkSubnetReservedIpOptions.Builder()
      .clusterNetworkId("testString")
      .clusterNetworkSubnetId("testString")
      .id("testString")
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke deleteClusterNetworkSubnetReservedIp() with a valid options model and verify the result
    Response<ClusterNetworkSubnetReservedIP> response = vpcService.deleteClusterNetworkSubnetReservedIp(deleteClusterNetworkSubnetReservedIpOptionsModel).execute();
    assertNotNull(response);
    ClusterNetworkSubnetReservedIP responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteClusterNetworkSubnetReservedIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteClusterNetworkSubnetReservedIp operation with and without retries enabled
  @Test
  public void testDeleteClusterNetworkSubnetReservedIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteClusterNetworkSubnetReservedIpWOptions();

    vpcService.disableRetries();
    testDeleteClusterNetworkSubnetReservedIpWOptions();
  }

  // Test the deleteClusterNetworkSubnetReservedIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteClusterNetworkSubnetReservedIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteClusterNetworkSubnetReservedIp(null).execute();
  }

  // Test the getClusterNetworkSubnetReservedIp operation with a valid options model parameter
  @Test
  public void testGetClusterNetworkSubnetReservedIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"10.1.0.6\", \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930/reserved_ips/0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\", \"id\": \"0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-cluster-network-subnet-reserved-ip\", \"owner\": \"user\", \"resource_type\": \"cluster_network_subnet_reserved_ip\", \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/interfaces/0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\", \"id\": \"0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\", \"name\": \"my-cluster-network-interface\", \"resource_type\": \"cluster_network_interface\"}}";
    String getClusterNetworkSubnetReservedIpPath = "/cluster_networks/testString/subnets/testString/reserved_ips/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetClusterNetworkSubnetReservedIpOptions model
    GetClusterNetworkSubnetReservedIpOptions getClusterNetworkSubnetReservedIpOptionsModel = new GetClusterNetworkSubnetReservedIpOptions.Builder()
      .clusterNetworkId("testString")
      .clusterNetworkSubnetId("testString")
      .id("testString")
      .build();

    // Invoke getClusterNetworkSubnetReservedIp() with a valid options model and verify the result
    Response<ClusterNetworkSubnetReservedIP> response = vpcService.getClusterNetworkSubnetReservedIp(getClusterNetworkSubnetReservedIpOptionsModel).execute();
    assertNotNull(response);
    ClusterNetworkSubnetReservedIP responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getClusterNetworkSubnetReservedIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getClusterNetworkSubnetReservedIp operation with and without retries enabled
  @Test
  public void testGetClusterNetworkSubnetReservedIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetClusterNetworkSubnetReservedIpWOptions();

    vpcService.disableRetries();
    testGetClusterNetworkSubnetReservedIpWOptions();
  }

  // Test the getClusterNetworkSubnetReservedIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetClusterNetworkSubnetReservedIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getClusterNetworkSubnetReservedIp(null).execute();
  }

  // Test the updateClusterNetworkSubnetReservedIp operation with a valid options model parameter
  @Test
  public void testUpdateClusterNetworkSubnetReservedIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"10.1.0.6\", \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930/reserved_ips/0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\", \"id\": \"0717-d4d6489a-3bf5-4104-a33a-3572faf2d117\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-cluster-network-subnet-reserved-ip\", \"owner\": \"user\", \"resource_type\": \"cluster_network_subnet_reserved_ip\", \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/interfaces/0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\", \"id\": \"0717-ffc092f7-5d02-4b93-ab69-26860529b9fb\", \"name\": \"my-cluster-network-interface\", \"resource_type\": \"cluster_network_interface\"}}";
    String updateClusterNetworkSubnetReservedIpPath = "/cluster_networks/testString/subnets/testString/reserved_ips/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ClusterNetworkSubnetReservedIPPatch model
    ClusterNetworkSubnetReservedIPPatch clusterNetworkSubnetReservedIpPatchModel = new ClusterNetworkSubnetReservedIPPatch.Builder()
      .autoDelete(false)
      .name("my-cluster-network-subnet-reserved-ip")
      .build();
    Map<String, Object> clusterNetworkSubnetReservedIpPatchModelAsPatch = clusterNetworkSubnetReservedIpPatchModel.asPatch();

    // Construct an instance of the UpdateClusterNetworkSubnetReservedIpOptions model
    UpdateClusterNetworkSubnetReservedIpOptions updateClusterNetworkSubnetReservedIpOptionsModel = new UpdateClusterNetworkSubnetReservedIpOptions.Builder()
      .clusterNetworkId("testString")
      .clusterNetworkSubnetId("testString")
      .id("testString")
      .clusterNetworkSubnetReservedIpPatch(clusterNetworkSubnetReservedIpPatchModelAsPatch)
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke updateClusterNetworkSubnetReservedIp() with a valid options model and verify the result
    Response<ClusterNetworkSubnetReservedIP> response = vpcService.updateClusterNetworkSubnetReservedIp(updateClusterNetworkSubnetReservedIpOptionsModel).execute();
    assertNotNull(response);
    ClusterNetworkSubnetReservedIP responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateClusterNetworkSubnetReservedIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateClusterNetworkSubnetReservedIp operation with and without retries enabled
  @Test
  public void testUpdateClusterNetworkSubnetReservedIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateClusterNetworkSubnetReservedIpWOptions();

    vpcService.disableRetries();
    testUpdateClusterNetworkSubnetReservedIpWOptions();
  }

  // Test the updateClusterNetworkSubnetReservedIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateClusterNetworkSubnetReservedIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateClusterNetworkSubnetReservedIp(null).execute();
  }

  // Test the deleteClusterNetworkSubnet operation with a valid options model parameter
  @Test
  public void testDeleteClusterNetworkSubnetWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"available_ipv4_address_count\": 15, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\", \"id\": \"0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\", \"ip_version\": \"ipv4\", \"ipv4_cidr_block\": \"10.0.0.0/24\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-cluster-network-subnet\", \"resource_type\": \"cluster_network_subnet\", \"total_ipv4_address_count\": 256}";
    String deleteClusterNetworkSubnetPath = "/cluster_networks/testString/subnets/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteClusterNetworkSubnetOptions model
    DeleteClusterNetworkSubnetOptions deleteClusterNetworkSubnetOptionsModel = new DeleteClusterNetworkSubnetOptions.Builder()
      .clusterNetworkId("testString")
      .id("testString")
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke deleteClusterNetworkSubnet() with a valid options model and verify the result
    Response<ClusterNetworkSubnet> response = vpcService.deleteClusterNetworkSubnet(deleteClusterNetworkSubnetOptionsModel).execute();
    assertNotNull(response);
    ClusterNetworkSubnet responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteClusterNetworkSubnetPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteClusterNetworkSubnet operation with and without retries enabled
  @Test
  public void testDeleteClusterNetworkSubnetWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteClusterNetworkSubnetWOptions();

    vpcService.disableRetries();
    testDeleteClusterNetworkSubnetWOptions();
  }

  // Test the deleteClusterNetworkSubnet operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteClusterNetworkSubnetNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteClusterNetworkSubnet(null).execute();
  }

  // Test the getClusterNetworkSubnet operation with a valid options model parameter
  @Test
  public void testGetClusterNetworkSubnetWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"available_ipv4_address_count\": 15, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\", \"id\": \"0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\", \"ip_version\": \"ipv4\", \"ipv4_cidr_block\": \"10.0.0.0/24\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-cluster-network-subnet\", \"resource_type\": \"cluster_network_subnet\", \"total_ipv4_address_count\": 256}";
    String getClusterNetworkSubnetPath = "/cluster_networks/testString/subnets/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetClusterNetworkSubnetOptions model
    GetClusterNetworkSubnetOptions getClusterNetworkSubnetOptionsModel = new GetClusterNetworkSubnetOptions.Builder()
      .clusterNetworkId("testString")
      .id("testString")
      .build();

    // Invoke getClusterNetworkSubnet() with a valid options model and verify the result
    Response<ClusterNetworkSubnet> response = vpcService.getClusterNetworkSubnet(getClusterNetworkSubnetOptionsModel).execute();
    assertNotNull(response);
    ClusterNetworkSubnet responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getClusterNetworkSubnetPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getClusterNetworkSubnet operation with and without retries enabled
  @Test
  public void testGetClusterNetworkSubnetWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetClusterNetworkSubnetWOptions();

    vpcService.disableRetries();
    testGetClusterNetworkSubnetWOptions();
  }

  // Test the getClusterNetworkSubnet operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetClusterNetworkSubnetNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getClusterNetworkSubnet(null).execute();
  }

  // Test the updateClusterNetworkSubnet operation with a valid options model parameter
  @Test
  public void testUpdateClusterNetworkSubnetWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"available_ipv4_address_count\": 15, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573/subnets/0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\", \"id\": \"0717-7931845c-65c4-4b0a-80cd-7d9c1a6d7930\", \"ip_version\": \"ipv4\", \"ipv4_cidr_block\": \"10.0.0.0/24\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-cluster-network-subnet\", \"resource_type\": \"cluster_network_subnet\", \"total_ipv4_address_count\": 256}";
    String updateClusterNetworkSubnetPath = "/cluster_networks/testString/subnets/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ClusterNetworkSubnetPatch model
    ClusterNetworkSubnetPatch clusterNetworkSubnetPatchModel = new ClusterNetworkSubnetPatch.Builder()
      .name("my-cluster-network-subnet")
      .build();
    Map<String, Object> clusterNetworkSubnetPatchModelAsPatch = clusterNetworkSubnetPatchModel.asPatch();

    // Construct an instance of the UpdateClusterNetworkSubnetOptions model
    UpdateClusterNetworkSubnetOptions updateClusterNetworkSubnetOptionsModel = new UpdateClusterNetworkSubnetOptions.Builder()
      .clusterNetworkId("testString")
      .id("testString")
      .clusterNetworkSubnetPatch(clusterNetworkSubnetPatchModelAsPatch)
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke updateClusterNetworkSubnet() with a valid options model and verify the result
    Response<ClusterNetworkSubnet> response = vpcService.updateClusterNetworkSubnet(updateClusterNetworkSubnetOptionsModel).execute();
    assertNotNull(response);
    ClusterNetworkSubnet responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateClusterNetworkSubnetPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateClusterNetworkSubnet operation with and without retries enabled
  @Test
  public void testUpdateClusterNetworkSubnetWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateClusterNetworkSubnetWOptions();

    vpcService.disableRetries();
    testUpdateClusterNetworkSubnetWOptions();
  }

  // Test the updateClusterNetworkSubnet operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateClusterNetworkSubnetNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateClusterNetworkSubnet(null).execute();
  }

  // Test the deleteClusterNetwork operation with a valid options model parameter
  @Test
  public void testDeleteClusterNetworkWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::cluster-network:0717-da0df18c-7598-4633-a648-fdaac28a5573\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573\", \"id\": \"0717-da0df18c-7598-4633-a648-fdaac28a5573\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-cluster-network\", \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_network/profiles/h100\", \"name\": \"h100\", \"resource_type\": \"cluster_network_profile\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"cluster_network\", \"subnet_prefixes\": [{\"allocation_policy\": \"auto\", \"cidr\": \"10.0.0.0/24\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String deleteClusterNetworkPath = "/cluster_networks/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteClusterNetworkOptions model
    DeleteClusterNetworkOptions deleteClusterNetworkOptionsModel = new DeleteClusterNetworkOptions.Builder()
      .id("testString")
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke deleteClusterNetwork() with a valid options model and verify the result
    Response<ClusterNetwork> response = vpcService.deleteClusterNetwork(deleteClusterNetworkOptionsModel).execute();
    assertNotNull(response);
    ClusterNetwork responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteClusterNetworkPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteClusterNetwork operation with and without retries enabled
  @Test
  public void testDeleteClusterNetworkWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteClusterNetworkWOptions();

    vpcService.disableRetries();
    testDeleteClusterNetworkWOptions();
  }

  // Test the deleteClusterNetwork operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteClusterNetworkNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteClusterNetwork(null).execute();
  }

  // Test the getClusterNetwork operation with a valid options model parameter
  @Test
  public void testGetClusterNetworkWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::cluster-network:0717-da0df18c-7598-4633-a648-fdaac28a5573\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573\", \"id\": \"0717-da0df18c-7598-4633-a648-fdaac28a5573\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-cluster-network\", \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_network/profiles/h100\", \"name\": \"h100\", \"resource_type\": \"cluster_network_profile\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"cluster_network\", \"subnet_prefixes\": [{\"allocation_policy\": \"auto\", \"cidr\": \"10.0.0.0/24\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getClusterNetworkPath = "/cluster_networks/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetClusterNetworkOptions model
    GetClusterNetworkOptions getClusterNetworkOptionsModel = new GetClusterNetworkOptions.Builder()
      .id("testString")
      .build();

    // Invoke getClusterNetwork() with a valid options model and verify the result
    Response<ClusterNetwork> response = vpcService.getClusterNetwork(getClusterNetworkOptionsModel).execute();
    assertNotNull(response);
    ClusterNetwork responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getClusterNetworkPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getClusterNetwork operation with and without retries enabled
  @Test
  public void testGetClusterNetworkWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetClusterNetworkWOptions();

    vpcService.disableRetries();
    testGetClusterNetworkWOptions();
  }

  // Test the getClusterNetwork operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetClusterNetworkNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getClusterNetwork(null).execute();
  }

  // Test the updateClusterNetwork operation with a valid options model parameter
  @Test
  public void testUpdateClusterNetworkWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::cluster-network:0717-da0df18c-7598-4633-a648-fdaac28a5573\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_networks/0717-da0df18c-7598-4633-a648-fdaac28a5573\", \"id\": \"0717-da0df18c-7598-4633-a648-fdaac28a5573\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-cluster-network\", \"profile\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/cluster_network/profiles/h100\", \"name\": \"h100\", \"resource_type\": \"cluster_network_profile\"}, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"cluster_network\", \"subnet_prefixes\": [{\"allocation_policy\": \"auto\", \"cidr\": \"10.0.0.0/24\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String updateClusterNetworkPath = "/cluster_networks/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ClusterNetworkPatch model
    ClusterNetworkPatch clusterNetworkPatchModel = new ClusterNetworkPatch.Builder()
      .name("my-cluster-network")
      .build();
    Map<String, Object> clusterNetworkPatchModelAsPatch = clusterNetworkPatchModel.asPatch();

    // Construct an instance of the UpdateClusterNetworkOptions model
    UpdateClusterNetworkOptions updateClusterNetworkOptionsModel = new UpdateClusterNetworkOptions.Builder()
      .id("testString")
      .clusterNetworkPatch(clusterNetworkPatchModelAsPatch)
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke updateClusterNetwork() with a valid options model and verify the result
    Response<ClusterNetwork> response = vpcService.updateClusterNetwork(updateClusterNetworkOptionsModel).execute();
    assertNotNull(response);
    ClusterNetwork responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateClusterNetworkPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateClusterNetwork operation with and without retries enabled
  @Test
  public void testUpdateClusterNetworkWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateClusterNetworkWOptions();

    vpcService.disableRetries();
    testUpdateClusterNetworkWOptions();
  }

  // Test the updateClusterNetwork operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateClusterNetworkNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateClusterNetwork(null).execute();
  }

  // Test the listPublicGateways operation with a valid options model parameter
  @Test
  public void testListPublicGatewaysWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"public_gateways\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::public-gateway:r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"floating_ip\": {\"address\": \"203.0.113.1\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"id\": \"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"name\": \"my-floating-ip\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"id\": \"r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"name\": \"my-public-gateway\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"public_gateway\", \"status\": \"available\", \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"total_count\": 132}";
    String listPublicGatewaysPath = "/public_gateways";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListPublicGatewaysOptions model
    ListPublicGatewaysOptions listPublicGatewaysOptionsModel = new ListPublicGatewaysOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .build();

    // Invoke listPublicGateways() with a valid options model and verify the result
    Response<PublicGatewayCollection> response = vpcService.listPublicGateways(listPublicGatewaysOptionsModel).execute();
    assertNotNull(response);
    PublicGatewayCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listPublicGatewaysPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
  }

  // Test the listPublicGateways operation with and without retries enabled
  @Test
  public void testListPublicGatewaysWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListPublicGatewaysWOptions();

    vpcService.disableRetries();
    testListPublicGatewaysWOptions();
  }

  // Test the listPublicGateways operation using the PublicGatewaysPager.getNext() method
  @Test
  public void testListPublicGatewaysWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"public_gateways\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::public-gateway:r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"floating_ip\":{\"address\":\"203.0.113.1\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"id\":\"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"name\":\"my-floating-ip\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"id\":\"r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"name\":\"my-public-gateway\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"public_gateway\",\"status\":\"available\",\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"public_gateways\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::public-gateway:r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"floating_ip\":{\"address\":\"203.0.113.1\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"id\":\"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"name\":\"my-floating-ip\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"id\":\"r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"name\":\"my-public-gateway\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"public_gateway\",\"status\":\"available\",\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListPublicGatewaysOptions listPublicGatewaysOptions = new ListPublicGatewaysOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .build();

    List<PublicGateway> allResults = new ArrayList<>();
    PublicGatewaysPager pager = new PublicGatewaysPager(vpcService, listPublicGatewaysOptions);
    while (pager.hasNext()) {
      List<PublicGateway> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listPublicGateways operation using the PublicGatewaysPager.getAll() method
  @Test
  public void testListPublicGatewaysWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"public_gateways\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::public-gateway:r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"floating_ip\":{\"address\":\"203.0.113.1\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"id\":\"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"name\":\"my-floating-ip\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"id\":\"r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"name\":\"my-public-gateway\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"public_gateway\",\"status\":\"available\",\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"public_gateways\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::public-gateway:r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"floating_ip\":{\"address\":\"203.0.113.1\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"id\":\"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"name\":\"my-floating-ip\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"id\":\"r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\",\"name\":\"my-public-gateway\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"public_gateway\",\"status\":\"available\",\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListPublicGatewaysOptions listPublicGatewaysOptions = new ListPublicGatewaysOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .build();

    PublicGatewaysPager pager = new PublicGatewaysPager(vpcService, listPublicGatewaysOptions);
    List<PublicGateway> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createPublicGateway operation with a valid options model parameter
  @Test
  public void testCreatePublicGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::public-gateway:r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"floating_ip\": {\"address\": \"203.0.113.1\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"id\": \"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"name\": \"my-floating-ip\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"id\": \"r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"name\": \"my-public-gateway\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"public_gateway\", \"status\": \"available\", \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String createPublicGatewayPath = "/public_gateways";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the VPCIdentityById model
    VPCIdentityById vpcIdentityModel = new VPCIdentityById.Builder()
      .id("r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .build();

    // Construct an instance of the ZoneIdentityByName model
    ZoneIdentityByName zoneIdentityModel = new ZoneIdentityByName.Builder()
      .name("us-south-1")
      .build();

    // Construct an instance of the PublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityById model
    PublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityById publicGatewayFloatingIpPrototypeModel = new PublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityById.Builder()
      .id("r006-f45e0d90-12a8-4460-8210-290ff2ab75cd")
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the CreatePublicGatewayOptions model
    CreatePublicGatewayOptions createPublicGatewayOptionsModel = new CreatePublicGatewayOptions.Builder()
      .vpc(vpcIdentityModel)
      .zone(zoneIdentityModel)
      .floatingIp(publicGatewayFloatingIpPrototypeModel)
      .name("my-public-gateway")
      .resourceGroup(resourceGroupIdentityModel)
      .build();

    // Invoke createPublicGateway() with a valid options model and verify the result
    Response<PublicGateway> response = vpcService.createPublicGateway(createPublicGatewayOptionsModel).execute();
    assertNotNull(response);
    PublicGateway responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createPublicGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createPublicGateway operation with and without retries enabled
  @Test
  public void testCreatePublicGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreatePublicGatewayWOptions();

    vpcService.disableRetries();
    testCreatePublicGatewayWOptions();
  }

  // Test the createPublicGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreatePublicGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createPublicGateway(null).execute();
  }

  // Test the deletePublicGateway operation with a valid options model parameter
  @Test
  public void testDeletePublicGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deletePublicGatewayPath = "/public_gateways/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeletePublicGatewayOptions model
    DeletePublicGatewayOptions deletePublicGatewayOptionsModel = new DeletePublicGatewayOptions.Builder()
      .id("testString")
      .build();

    // Invoke deletePublicGateway() with a valid options model and verify the result
    Response<Void> response = vpcService.deletePublicGateway(deletePublicGatewayOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deletePublicGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deletePublicGateway operation with and without retries enabled
  @Test
  public void testDeletePublicGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeletePublicGatewayWOptions();

    vpcService.disableRetries();
    testDeletePublicGatewayWOptions();
  }

  // Test the deletePublicGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeletePublicGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deletePublicGateway(null).execute();
  }

  // Test the getPublicGateway operation with a valid options model parameter
  @Test
  public void testGetPublicGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::public-gateway:r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"floating_ip\": {\"address\": \"203.0.113.1\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"id\": \"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"name\": \"my-floating-ip\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"id\": \"r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"name\": \"my-public-gateway\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"public_gateway\", \"status\": \"available\", \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getPublicGatewayPath = "/public_gateways/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetPublicGatewayOptions model
    GetPublicGatewayOptions getPublicGatewayOptionsModel = new GetPublicGatewayOptions.Builder()
      .id("testString")
      .build();

    // Invoke getPublicGateway() with a valid options model and verify the result
    Response<PublicGateway> response = vpcService.getPublicGateway(getPublicGatewayOptionsModel).execute();
    assertNotNull(response);
    PublicGateway responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getPublicGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getPublicGateway operation with and without retries enabled
  @Test
  public void testGetPublicGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetPublicGatewayWOptions();

    vpcService.disableRetries();
    testGetPublicGatewayWOptions();
  }

  // Test the getPublicGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetPublicGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getPublicGateway(null).execute();
  }

  // Test the updatePublicGateway operation with a valid options model parameter
  @Test
  public void testUpdatePublicGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::public-gateway:r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"floating_ip\": {\"address\": \"203.0.113.1\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"id\": \"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"name\": \"my-floating-ip\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/public_gateways/r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"id\": \"r006-dc5431ef-1fc6-4861-adc9-a59d077d1241\", \"name\": \"my-public-gateway\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"public_gateway\", \"status\": \"available\", \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String updatePublicGatewayPath = "/public_gateways/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the PublicGatewayPatch model
    PublicGatewayPatch publicGatewayPatchModel = new PublicGatewayPatch.Builder()
      .name("my-public-gateway-updated")
      .build();
    Map<String, Object> publicGatewayPatchModelAsPatch = publicGatewayPatchModel.asPatch();

    // Construct an instance of the UpdatePublicGatewayOptions model
    UpdatePublicGatewayOptions updatePublicGatewayOptionsModel = new UpdatePublicGatewayOptions.Builder()
      .id("testString")
      .publicGatewayPatch(publicGatewayPatchModelAsPatch)
      .build();

    // Invoke updatePublicGateway() with a valid options model and verify the result
    Response<PublicGateway> response = vpcService.updatePublicGateway(updatePublicGatewayOptionsModel).execute();
    assertNotNull(response);
    PublicGateway responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updatePublicGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updatePublicGateway operation with and without retries enabled
  @Test
  public void testUpdatePublicGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdatePublicGatewayWOptions();

    vpcService.disableRetries();
    testUpdatePublicGatewayWOptions();
  }

  // Test the updatePublicGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdatePublicGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updatePublicGateway(null).execute();
  }

  // Test the listFloatingIps operation with a valid options model parameter
  @Test
  public void testListFloatingIpsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"floating_ips\": [{\"address\": \"203.0.113.1\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"id\": \"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"name\": \"my-floating-ip\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"status\": \"available\", \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}], \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listFloatingIpsPath = "/floating_ips";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListFloatingIpsOptions model
    ListFloatingIpsOptions listFloatingIpsOptionsModel = new ListFloatingIpsOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .sort("name")
      .targetId("testString")
      .targetCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::load-balancer:r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727")
      .targetName("my-resource")
      .targetResourceType("testString")
      .build();

    // Invoke listFloatingIps() with a valid options model and verify the result
    Response<FloatingIPCollection> response = vpcService.listFloatingIps(listFloatingIpsOptionsModel).execute();
    assertNotNull(response);
    FloatingIPCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listFloatingIpsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
    assertEquals(query.get("sort"), "name");
    assertEquals(query.get("target.id"), "testString");
    assertEquals(query.get("target.crn"), "crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::load-balancer:r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727");
    assertEquals(query.get("target.name"), "my-resource");
    assertEquals(query.get("target.resource_type"), "testString");
  }

  // Test the listFloatingIps operation with and without retries enabled
  @Test
  public void testListFloatingIpsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListFloatingIpsWOptions();

    vpcService.disableRetries();
    testListFloatingIpsWOptions();
  }

  // Test the listFloatingIps operation using the FloatingIpsPager.getNext() method
  @Test
  public void testListFloatingIpsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"floating_ips\":[{\"address\":\"203.0.113.1\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"id\":\"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"name\":\"my-floating-ip\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"status\":\"available\",\"target\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"id\":\"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"name\":\"my-instance-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"floating_ips\":[{\"address\":\"203.0.113.1\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"id\":\"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"name\":\"my-floating-ip\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"status\":\"available\",\"target\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"id\":\"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"name\":\"my-instance-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListFloatingIpsOptions listFloatingIpsOptions = new ListFloatingIpsOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .sort("name")
      .targetId("testString")
      .targetCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::load-balancer:r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727")
      .targetName("my-resource")
      .targetResourceType("testString")
      .build();

    List<FloatingIP> allResults = new ArrayList<>();
    FloatingIpsPager pager = new FloatingIpsPager(vpcService, listFloatingIpsOptions);
    while (pager.hasNext()) {
      List<FloatingIP> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listFloatingIps operation using the FloatingIpsPager.getAll() method
  @Test
  public void testListFloatingIpsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"floating_ips\":[{\"address\":\"203.0.113.1\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"id\":\"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"name\":\"my-floating-ip\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"status\":\"available\",\"target\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"id\":\"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"name\":\"my-instance-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"floating_ips\":[{\"address\":\"203.0.113.1\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"id\":\"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\",\"name\":\"my-floating-ip\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"status\":\"available\",\"target\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"id\":\"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"name\":\"my-instance-network-interface\",\"primary_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"resource_type\":\"network_interface\"},\"zone\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\",\"name\":\"us-south-1\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListFloatingIpsOptions listFloatingIpsOptions = new ListFloatingIpsOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .sort("name")
      .targetId("testString")
      .targetCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::load-balancer:r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727")
      .targetName("my-resource")
      .targetResourceType("testString")
      .build();

    FloatingIpsPager pager = new FloatingIpsPager(vpcService, listFloatingIpsOptions);
    List<FloatingIP> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createFloatingIp operation with a valid options model parameter
  @Test
  public void testCreateFloatingIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"203.0.113.1\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"id\": \"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"name\": \"my-floating-ip\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"status\": \"available\", \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String createFloatingIpPath = "/floating_ips";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the FloatingIPTargetPrototypeBareMetalServerNetworkInterfaceIdentityBareMetalServerNetworkInterfaceIdentityById model
    FloatingIPTargetPrototypeBareMetalServerNetworkInterfaceIdentityBareMetalServerNetworkInterfaceIdentityById floatingIpTargetPrototypeModel = new FloatingIPTargetPrototypeBareMetalServerNetworkInterfaceIdentityBareMetalServerNetworkInterfaceIdentityById.Builder()
      .id("0717-54eb57ee-86f2-4796-90bb-d7874e0831ef")
      .build();

    // Construct an instance of the FloatingIPPrototypeFloatingIPByTarget model
    FloatingIPPrototypeFloatingIPByTarget floatingIpPrototypeModel = new FloatingIPPrototypeFloatingIPByTarget.Builder()
      .name("my-floating-ip")
      .resourceGroup(resourceGroupIdentityModel)
      .target(floatingIpTargetPrototypeModel)
      .build();

    // Construct an instance of the CreateFloatingIpOptions model
    CreateFloatingIpOptions createFloatingIpOptionsModel = new CreateFloatingIpOptions.Builder()
      .floatingIpPrototype(floatingIpPrototypeModel)
      .build();

    // Invoke createFloatingIp() with a valid options model and verify the result
    Response<FloatingIP> response = vpcService.createFloatingIp(createFloatingIpOptionsModel).execute();
    assertNotNull(response);
    FloatingIP responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createFloatingIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createFloatingIp operation with and without retries enabled
  @Test
  public void testCreateFloatingIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateFloatingIpWOptions();

    vpcService.disableRetries();
    testCreateFloatingIpWOptions();
  }

  // Test the createFloatingIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateFloatingIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createFloatingIp(null).execute();
  }

  // Test the deleteFloatingIp operation with a valid options model parameter
  @Test
  public void testDeleteFloatingIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteFloatingIpPath = "/floating_ips/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteFloatingIpOptions model
    DeleteFloatingIpOptions deleteFloatingIpOptionsModel = new DeleteFloatingIpOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteFloatingIp() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteFloatingIp(deleteFloatingIpOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteFloatingIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteFloatingIp operation with and without retries enabled
  @Test
  public void testDeleteFloatingIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteFloatingIpWOptions();

    vpcService.disableRetries();
    testDeleteFloatingIpWOptions();
  }

  // Test the deleteFloatingIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteFloatingIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteFloatingIp(null).execute();
  }

  // Test the getFloatingIp operation with a valid options model parameter
  @Test
  public void testGetFloatingIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"203.0.113.1\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"id\": \"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"name\": \"my-floating-ip\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"status\": \"available\", \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String getFloatingIpPath = "/floating_ips/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetFloatingIpOptions model
    GetFloatingIpOptions getFloatingIpOptionsModel = new GetFloatingIpOptions.Builder()
      .id("testString")
      .build();

    // Invoke getFloatingIp() with a valid options model and verify the result
    Response<FloatingIP> response = vpcService.getFloatingIp(getFloatingIpOptionsModel).execute();
    assertNotNull(response);
    FloatingIP responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getFloatingIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getFloatingIp operation with and without retries enabled
  @Test
  public void testGetFloatingIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetFloatingIpWOptions();

    vpcService.disableRetries();
    testGetFloatingIpWOptions();
  }

  // Test the getFloatingIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetFloatingIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getFloatingIp(null).execute();
  }

  // Test the updateFloatingIp operation with a valid options model parameter
  @Test
  public void testUpdateFloatingIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"203.0.113.1\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::floating-ip:r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/floating_ips/r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"id\": \"r006-f45e0d90-12a8-4460-8210-290ff2ab75cd\", \"name\": \"my-floating-ip\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"status\": \"available\", \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-interface\", \"primary_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"resource_type\": \"network_interface\"}, \"zone\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1\", \"name\": \"us-south-1\"}}";
    String updateFloatingIpPath = "/floating_ips/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the FloatingIPTargetPatchBareMetalServerNetworkInterfaceIdentityBareMetalServerNetworkInterfaceIdentityById model
    FloatingIPTargetPatchBareMetalServerNetworkInterfaceIdentityBareMetalServerNetworkInterfaceIdentityById floatingIpTargetPatchModel = new FloatingIPTargetPatchBareMetalServerNetworkInterfaceIdentityBareMetalServerNetworkInterfaceIdentityById.Builder()
      .id("0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6")
      .build();

    // Construct an instance of the FloatingIPPatch model
    FloatingIPPatch floatingIpPatchModel = new FloatingIPPatch.Builder()
      .name("my-floating-ip")
      .target(floatingIpTargetPatchModel)
      .build();
    Map<String, Object> floatingIpPatchModelAsPatch = floatingIpPatchModel.asPatch();

    // Construct an instance of the UpdateFloatingIpOptions model
    UpdateFloatingIpOptions updateFloatingIpOptionsModel = new UpdateFloatingIpOptions.Builder()
      .id("testString")
      .floatingIpPatch(floatingIpPatchModelAsPatch)
      .build();

    // Invoke updateFloatingIp() with a valid options model and verify the result
    Response<FloatingIP> response = vpcService.updateFloatingIp(updateFloatingIpOptionsModel).execute();
    assertNotNull(response);
    FloatingIP responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateFloatingIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateFloatingIp operation with and without retries enabled
  @Test
  public void testUpdateFloatingIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateFloatingIpWOptions();

    vpcService.disableRetries();
    testUpdateFloatingIpWOptions();
  }

  // Test the updateFloatingIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateFloatingIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateFloatingIp(null).execute();
  }

  // Test the listNetworkAcls operation with a valid options model parameter
  @Test
  public void testListNetworkAclsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"network_acls\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::network-acl:r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"id\": \"r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"name\": \"my-network-acl\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"rules\": [{\"action\": \"allow\", \"before\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"name\": \"my-network-acl-rule\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"destination\": \"192.168.3.0/24\", \"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"ip_version\": \"ipv4\", \"name\": \"my-network-acl-rule\", \"source\": \"192.168.3.0/24\", \"protocol\": \"all\"}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}], \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listNetworkAclsPath = "/network_acls";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListNetworkAclsOptions model
    ListNetworkAclsOptions listNetworkAclsOptionsModel = new ListNetworkAclsOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .build();

    // Invoke listNetworkAcls() with a valid options model and verify the result
    Response<NetworkACLCollection> response = vpcService.listNetworkAcls(listNetworkAclsOptionsModel).execute();
    assertNotNull(response);
    NetworkACLCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listNetworkAclsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
  }

  // Test the listNetworkAcls operation with and without retries enabled
  @Test
  public void testListNetworkAclsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListNetworkAclsWOptions();

    vpcService.disableRetries();
    testListNetworkAclsWOptions();
  }

  // Test the listNetworkAcls operation using the NetworkAclsPager.getNext() method
  @Test
  public void testListNetworkAclsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"network_acls\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::network-acl:r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"id\":\"r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"name\":\"my-network-acl\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"rules\":[{\"action\":\"allow\",\"before\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\",\"id\":\"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\",\"name\":\"my-network-acl-rule\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"destination\":\"192.168.3.0/24\",\"direction\":\"inbound\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\",\"id\":\"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\",\"ip_version\":\"ipv4\",\"name\":\"my-network-acl-rule\",\"source\":\"192.168.3.0/24\",\"protocol\":\"all\"}],\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"network_acls\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::network-acl:r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"id\":\"r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"name\":\"my-network-acl\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"rules\":[{\"action\":\"allow\",\"before\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\",\"id\":\"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\",\"name\":\"my-network-acl-rule\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"destination\":\"192.168.3.0/24\",\"direction\":\"inbound\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\",\"id\":\"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\",\"ip_version\":\"ipv4\",\"name\":\"my-network-acl-rule\",\"source\":\"192.168.3.0/24\",\"protocol\":\"all\"}],\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListNetworkAclsOptions listNetworkAclsOptions = new ListNetworkAclsOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .build();

    List<NetworkACL> allResults = new ArrayList<>();
    NetworkAclsPager pager = new NetworkAclsPager(vpcService, listNetworkAclsOptions);
    while (pager.hasNext()) {
      List<NetworkACL> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listNetworkAcls operation using the NetworkAclsPager.getAll() method
  @Test
  public void testListNetworkAclsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"network_acls\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::network-acl:r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"id\":\"r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"name\":\"my-network-acl\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"rules\":[{\"action\":\"allow\",\"before\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\",\"id\":\"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\",\"name\":\"my-network-acl-rule\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"destination\":\"192.168.3.0/24\",\"direction\":\"inbound\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\",\"id\":\"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\",\"ip_version\":\"ipv4\",\"name\":\"my-network-acl-rule\",\"source\":\"192.168.3.0/24\",\"protocol\":\"all\"}],\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"network_acls\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::network-acl:r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"id\":\"r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\",\"name\":\"my-network-acl\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"rules\":[{\"action\":\"allow\",\"before\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\",\"id\":\"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\",\"name\":\"my-network-acl-rule\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"destination\":\"192.168.3.0/24\",\"direction\":\"inbound\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\",\"id\":\"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\",\"ip_version\":\"ipv4\",\"name\":\"my-network-acl-rule\",\"source\":\"192.168.3.0/24\",\"protocol\":\"all\"}],\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListNetworkAclsOptions listNetworkAclsOptions = new ListNetworkAclsOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .build();

    NetworkAclsPager pager = new NetworkAclsPager(vpcService, listNetworkAclsOptions);
    List<NetworkACL> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createNetworkAcl operation with a valid options model parameter
  @Test
  public void testCreateNetworkAclWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::network-acl:r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"id\": \"r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"name\": \"my-network-acl\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"rules\": [{\"action\": \"allow\", \"before\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"name\": \"my-network-acl-rule\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"destination\": \"192.168.3.0/24\", \"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"ip_version\": \"ipv4\", \"name\": \"my-network-acl-rule\", \"source\": \"192.168.3.0/24\", \"protocol\": \"all\"}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String createNetworkAclPath = "/network_acls";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the VPCIdentityById model
    VPCIdentityById vpcIdentityModel = new VPCIdentityById.Builder()
      .id("r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .build();

    // Construct an instance of the NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAllPrototype model
    NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAllPrototype networkAclRulePrototypeNetworkAclContextModel = new NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAllPrototype.Builder()
      .action("allow")
      .destination("192.168.3.2/32")
      .direction("inbound")
      .ipVersion("ipv4")
      .name("my-network-acl-rule")
      .source("192.168.3.2/32")
      .protocol("all")
      .build();

    // Construct an instance of the NetworkACLPrototypeNetworkACLByRules model
    NetworkACLPrototypeNetworkACLByRules networkAclPrototypeModel = new NetworkACLPrototypeNetworkACLByRules.Builder()
      .name("my-network-acl")
      .resourceGroup(resourceGroupIdentityModel)
      .vpc(vpcIdentityModel)
      .rules(java.util.Arrays.asList(networkAclRulePrototypeNetworkAclContextModel))
      .build();

    // Construct an instance of the CreateNetworkAclOptions model
    CreateNetworkAclOptions createNetworkAclOptionsModel = new CreateNetworkAclOptions.Builder()
      .networkAclPrototype(networkAclPrototypeModel)
      .build();

    // Invoke createNetworkAcl() with a valid options model and verify the result
    Response<NetworkACL> response = vpcService.createNetworkAcl(createNetworkAclOptionsModel).execute();
    assertNotNull(response);
    NetworkACL responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createNetworkAclPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createNetworkAcl operation with and without retries enabled
  @Test
  public void testCreateNetworkAclWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateNetworkAclWOptions();

    vpcService.disableRetries();
    testCreateNetworkAclWOptions();
  }

  // Test the createNetworkAcl operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateNetworkAclNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createNetworkAcl(null).execute();
  }

  // Test the deleteNetworkAcl operation with a valid options model parameter
  @Test
  public void testDeleteNetworkAclWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteNetworkAclPath = "/network_acls/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteNetworkAclOptions model
    DeleteNetworkAclOptions deleteNetworkAclOptionsModel = new DeleteNetworkAclOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteNetworkAcl() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteNetworkAcl(deleteNetworkAclOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteNetworkAclPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteNetworkAcl operation with and without retries enabled
  @Test
  public void testDeleteNetworkAclWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteNetworkAclWOptions();

    vpcService.disableRetries();
    testDeleteNetworkAclWOptions();
  }

  // Test the deleteNetworkAcl operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteNetworkAclNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteNetworkAcl(null).execute();
  }

  // Test the getNetworkAcl operation with a valid options model parameter
  @Test
  public void testGetNetworkAclWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::network-acl:r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"id\": \"r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"name\": \"my-network-acl\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"rules\": [{\"action\": \"allow\", \"before\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"name\": \"my-network-acl-rule\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"destination\": \"192.168.3.0/24\", \"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"ip_version\": \"ipv4\", \"name\": \"my-network-acl-rule\", \"source\": \"192.168.3.0/24\", \"protocol\": \"all\"}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String getNetworkAclPath = "/network_acls/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetNetworkAclOptions model
    GetNetworkAclOptions getNetworkAclOptionsModel = new GetNetworkAclOptions.Builder()
      .id("testString")
      .build();

    // Invoke getNetworkAcl() with a valid options model and verify the result
    Response<NetworkACL> response = vpcService.getNetworkAcl(getNetworkAclOptionsModel).execute();
    assertNotNull(response);
    NetworkACL responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getNetworkAclPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getNetworkAcl operation with and without retries enabled
  @Test
  public void testGetNetworkAclWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetNetworkAclWOptions();

    vpcService.disableRetries();
    testGetNetworkAclWOptions();
  }

  // Test the getNetworkAcl operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetNetworkAclNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getNetworkAcl(null).execute();
  }

  // Test the updateNetworkAcl operation with a valid options model parameter
  @Test
  public void testUpdateNetworkAclWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::network-acl:r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"id\": \"r006-a4e28308-8ee7-46ab-8108-9f881f22bdbf\", \"name\": \"my-network-acl\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"rules\": [{\"action\": \"allow\", \"before\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"name\": \"my-network-acl-rule\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"destination\": \"192.168.3.0/24\", \"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"ip_version\": \"ipv4\", \"name\": \"my-network-acl-rule\", \"source\": \"192.168.3.0/24\", \"protocol\": \"all\"}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String updateNetworkAclPath = "/network_acls/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the NetworkACLPatch model
    NetworkACLPatch networkAclPatchModel = new NetworkACLPatch.Builder()
      .name("my-network-acl-updated")
      .build();
    Map<String, Object> networkAclPatchModelAsPatch = networkAclPatchModel.asPatch();

    // Construct an instance of the UpdateNetworkAclOptions model
    UpdateNetworkAclOptions updateNetworkAclOptionsModel = new UpdateNetworkAclOptions.Builder()
      .id("testString")
      .networkAclPatch(networkAclPatchModelAsPatch)
      .build();

    // Invoke updateNetworkAcl() with a valid options model and verify the result
    Response<NetworkACL> response = vpcService.updateNetworkAcl(updateNetworkAclOptionsModel).execute();
    assertNotNull(response);
    NetworkACL responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateNetworkAclPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateNetworkAcl operation with and without retries enabled
  @Test
  public void testUpdateNetworkAclWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateNetworkAclWOptions();

    vpcService.disableRetries();
    testUpdateNetworkAclWOptions();
  }

  // Test the updateNetworkAcl operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateNetworkAclNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateNetworkAcl(null).execute();
  }

  // Test the listNetworkAclRules operation with a valid options model parameter
  @Test
  public void testListNetworkAclRulesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"rules\": [{\"action\": \"allow\", \"before\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"name\": \"my-network-acl-rule\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"destination\": \"192.168.3.0/24\", \"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"ip_version\": \"ipv4\", \"name\": \"my-network-acl-rule\", \"source\": \"192.168.3.0/24\", \"protocol\": \"all\"}], \"total_count\": 132}";
    String listNetworkAclRulesPath = "/network_acls/testString/rules";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListNetworkAclRulesOptions model
    ListNetworkAclRulesOptions listNetworkAclRulesOptionsModel = new ListNetworkAclRulesOptions.Builder()
      .networkAclId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .direction("inbound")
      .build();

    // Invoke listNetworkAclRules() with a valid options model and verify the result
    Response<NetworkACLRuleCollection> response = vpcService.listNetworkAclRules(listNetworkAclRulesOptionsModel).execute();
    assertNotNull(response);
    NetworkACLRuleCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listNetworkAclRulesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("direction"), "inbound");
  }

  // Test the listNetworkAclRules operation with and without retries enabled
  @Test
  public void testListNetworkAclRulesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListNetworkAclRulesWOptions();

    vpcService.disableRetries();
    testListNetworkAclRulesWOptions();
  }

  // Test the listNetworkAclRules operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListNetworkAclRulesNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listNetworkAclRules(null).execute();
  }

  // Test the listNetworkAclRules operation using the NetworkAclRulesPager.getNext() method
  @Test
  public void testListNetworkAclRulesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"rules\":[{\"action\":\"allow\",\"before\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\",\"id\":\"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\",\"name\":\"my-network-acl-rule\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"destination\":\"192.168.3.0/24\",\"direction\":\"inbound\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\",\"id\":\"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\",\"ip_version\":\"ipv4\",\"name\":\"my-network-acl-rule\",\"source\":\"192.168.3.0/24\",\"protocol\":\"all\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"rules\":[{\"action\":\"allow\",\"before\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\",\"id\":\"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\",\"name\":\"my-network-acl-rule\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"destination\":\"192.168.3.0/24\",\"direction\":\"inbound\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\",\"id\":\"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\",\"ip_version\":\"ipv4\",\"name\":\"my-network-acl-rule\",\"source\":\"192.168.3.0/24\",\"protocol\":\"all\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListNetworkAclRulesOptions listNetworkAclRulesOptions = new ListNetworkAclRulesOptions.Builder()
      .networkAclId("testString")
      .limit(Long.valueOf("10"))
      .direction("inbound")
      .build();

    List<NetworkACLRuleItem> allResults = new ArrayList<>();
    NetworkAclRulesPager pager = new NetworkAclRulesPager(vpcService, listNetworkAclRulesOptions);
    while (pager.hasNext()) {
      List<NetworkACLRuleItem> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listNetworkAclRules operation using the NetworkAclRulesPager.getAll() method
  @Test
  public void testListNetworkAclRulesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"rules\":[{\"action\":\"allow\",\"before\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\",\"id\":\"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\",\"name\":\"my-network-acl-rule\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"destination\":\"192.168.3.0/24\",\"direction\":\"inbound\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\",\"id\":\"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\",\"ip_version\":\"ipv4\",\"name\":\"my-network-acl-rule\",\"source\":\"192.168.3.0/24\",\"protocol\":\"all\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"rules\":[{\"action\":\"allow\",\"before\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\",\"id\":\"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\",\"name\":\"my-network-acl-rule\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"destination\":\"192.168.3.0/24\",\"direction\":\"inbound\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\",\"id\":\"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\",\"ip_version\":\"ipv4\",\"name\":\"my-network-acl-rule\",\"source\":\"192.168.3.0/24\",\"protocol\":\"all\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListNetworkAclRulesOptions listNetworkAclRulesOptions = new ListNetworkAclRulesOptions.Builder()
      .networkAclId("testString")
      .limit(Long.valueOf("10"))
      .direction("inbound")
      .build();

    NetworkAclRulesPager pager = new NetworkAclRulesPager(vpcService, listNetworkAclRulesOptions);
    List<NetworkACLRuleItem> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createNetworkAclRule operation with a valid options model parameter
  @Test
  public void testCreateNetworkAclRuleWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"action\": \"allow\", \"before\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"name\": \"my-network-acl-rule\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"destination\": \"192.168.3.0/24\", \"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"ip_version\": \"ipv4\", \"name\": \"my-network-acl-rule\", \"source\": \"192.168.3.0/24\", \"protocol\": \"all\"}";
    String createNetworkAclRulePath = "/network_acls/testString/rules";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the NetworkACLRuleBeforePrototypeNetworkACLRuleIdentityById model
    NetworkACLRuleBeforePrototypeNetworkACLRuleIdentityById networkAclRuleBeforePrototypeModel = new NetworkACLRuleBeforePrototypeNetworkACLRuleIdentityById.Builder()
      .id("r006-8daca77a-4980-4d33-8f3e-7038797be8f9")
      .build();

    // Construct an instance of the NetworkACLRulePrototypeNetworkACLRuleProtocolAllPrototype model
    NetworkACLRulePrototypeNetworkACLRuleProtocolAllPrototype networkAclRulePrototypeModel = new NetworkACLRulePrototypeNetworkACLRuleProtocolAllPrototype.Builder()
      .action("allow")
      .before(networkAclRuleBeforePrototypeModel)
      .destination("192.168.3.2/32")
      .direction("inbound")
      .ipVersion("ipv4")
      .name("my-network-acl-rule")
      .source("192.168.3.2/32")
      .protocol("all")
      .build();

    // Construct an instance of the CreateNetworkAclRuleOptions model
    CreateNetworkAclRuleOptions createNetworkAclRuleOptionsModel = new CreateNetworkAclRuleOptions.Builder()
      .networkAclId("testString")
      .networkAclRulePrototype(networkAclRulePrototypeModel)
      .build();

    // Invoke createNetworkAclRule() with a valid options model and verify the result
    Response<NetworkACLRule> response = vpcService.createNetworkAclRule(createNetworkAclRuleOptionsModel).execute();
    assertNotNull(response);
    NetworkACLRule responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createNetworkAclRulePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createNetworkAclRule operation with and without retries enabled
  @Test
  public void testCreateNetworkAclRuleWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateNetworkAclRuleWOptions();

    vpcService.disableRetries();
    testCreateNetworkAclRuleWOptions();
  }

  // Test the createNetworkAclRule operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateNetworkAclRuleNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createNetworkAclRule(null).execute();
  }

  // Test the deleteNetworkAclRule operation with a valid options model parameter
  @Test
  public void testDeleteNetworkAclRuleWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteNetworkAclRulePath = "/network_acls/testString/rules/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteNetworkAclRuleOptions model
    DeleteNetworkAclRuleOptions deleteNetworkAclRuleOptionsModel = new DeleteNetworkAclRuleOptions.Builder()
      .networkAclId("testString")
      .id("testString")
      .build();

    // Invoke deleteNetworkAclRule() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteNetworkAclRule(deleteNetworkAclRuleOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteNetworkAclRulePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteNetworkAclRule operation with and without retries enabled
  @Test
  public void testDeleteNetworkAclRuleWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteNetworkAclRuleWOptions();

    vpcService.disableRetries();
    testDeleteNetworkAclRuleWOptions();
  }

  // Test the deleteNetworkAclRule operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteNetworkAclRuleNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteNetworkAclRule(null).execute();
  }

  // Test the getNetworkAclRule operation with a valid options model parameter
  @Test
  public void testGetNetworkAclRuleWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"action\": \"allow\", \"before\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"name\": \"my-network-acl-rule\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"destination\": \"192.168.3.0/24\", \"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"ip_version\": \"ipv4\", \"name\": \"my-network-acl-rule\", \"source\": \"192.168.3.0/24\", \"protocol\": \"all\"}";
    String getNetworkAclRulePath = "/network_acls/testString/rules/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetNetworkAclRuleOptions model
    GetNetworkAclRuleOptions getNetworkAclRuleOptionsModel = new GetNetworkAclRuleOptions.Builder()
      .networkAclId("testString")
      .id("testString")
      .build();

    // Invoke getNetworkAclRule() with a valid options model and verify the result
    Response<NetworkACLRule> response = vpcService.getNetworkAclRule(getNetworkAclRuleOptionsModel).execute();
    assertNotNull(response);
    NetworkACLRule responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getNetworkAclRulePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getNetworkAclRule operation with and without retries enabled
  @Test
  public void testGetNetworkAclRuleWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetNetworkAclRuleWOptions();

    vpcService.disableRetries();
    testGetNetworkAclRuleWOptions();
  }

  // Test the getNetworkAclRule operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetNetworkAclRuleNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getNetworkAclRule(null).execute();
  }

  // Test the updateNetworkAclRule operation with a valid options model parameter
  @Test
  public void testUpdateNetworkAclRuleWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"action\": \"allow\", \"before\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"name\": \"my-network-acl-rule\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"destination\": \"192.168.3.0/24\", \"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/network_acls/r006-3217cb8b-5368-452a-9399-a84f14fb539d/rules/r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"id\": \"r006-8daca77a-4980-4d33-8f3e-7038797be8f9\", \"ip_version\": \"ipv4\", \"name\": \"my-network-acl-rule\", \"source\": \"192.168.3.0/24\", \"protocol\": \"all\"}";
    String updateNetworkAclRulePath = "/network_acls/testString/rules/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the NetworkACLRuleBeforePatchNetworkACLRuleIdentityById model
    NetworkACLRuleBeforePatchNetworkACLRuleIdentityById networkAclRuleBeforePatchModel = new NetworkACLRuleBeforePatchNetworkACLRuleIdentityById.Builder()
      .id("r006-8daca77a-4980-4d33-8f3e-7038797be8f9")
      .build();

    // Construct an instance of the NetworkACLRulePatch model
    NetworkACLRulePatch networkAclRulePatchModel = new NetworkACLRulePatch.Builder()
      .action("allow")
      .before(networkAclRuleBeforePatchModel)
      .code(Long.valueOf("0"))
      .destination("192.168.3.2/32")
      .destinationPortMax(Long.valueOf("22"))
      .destinationPortMin(Long.valueOf("22"))
      .direction("inbound")
      .name("my-network-acl-rule")
      .source("10.0.0.0/0")
      .sourcePortMax(Long.valueOf("65535"))
      .sourcePortMin(Long.valueOf("49152"))
      .type(Long.valueOf("8"))
      .build();
    Map<String, Object> networkAclRulePatchModelAsPatch = networkAclRulePatchModel.asPatch();

    // Construct an instance of the UpdateNetworkAclRuleOptions model
    UpdateNetworkAclRuleOptions updateNetworkAclRuleOptionsModel = new UpdateNetworkAclRuleOptions.Builder()
      .networkAclId("testString")
      .id("testString")
      .networkAclRulePatch(networkAclRulePatchModelAsPatch)
      .build();

    // Invoke updateNetworkAclRule() with a valid options model and verify the result
    Response<NetworkACLRule> response = vpcService.updateNetworkAclRule(updateNetworkAclRuleOptionsModel).execute();
    assertNotNull(response);
    NetworkACLRule responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateNetworkAclRulePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateNetworkAclRule operation with and without retries enabled
  @Test
  public void testUpdateNetworkAclRuleWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateNetworkAclRuleWOptions();

    vpcService.disableRetries();
    testUpdateNetworkAclRuleWOptions();
  }

  // Test the updateNetworkAclRule operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateNetworkAclRuleNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateNetworkAclRule(null).execute();
  }

  // Test the listSecurityGroups operation with a valid options model parameter
  @Test
  public void testListSecurityGroupsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"security_groups\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"rules\": [{\"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/r006-6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"id\": \"r006-6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"ip_version\": \"ipv4\", \"local\": {\"address\": \"192.168.3.4\"}, \"remote\": {\"address\": \"192.168.3.4\"}, \"protocol\": \"all\"}], \"targets\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"id\": \"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"name\": \"my-bare-metal-server-network-interface\", \"resource_type\": \"network_interface\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}], \"total_count\": 132}";
    String listSecurityGroupsPath = "/security_groups";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListSecurityGroupsOptions model
    ListSecurityGroupsOptions listSecurityGroupsOptionsModel = new ListSecurityGroupsOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .vpcId("testString")
      .vpcCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .vpcName("my-vpc")
      .build();

    // Invoke listSecurityGroups() with a valid options model and verify the result
    Response<SecurityGroupCollection> response = vpcService.listSecurityGroups(listSecurityGroupsOptionsModel).execute();
    assertNotNull(response);
    SecurityGroupCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listSecurityGroupsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
    assertEquals(query.get("vpc.id"), "testString");
    assertEquals(query.get("vpc.crn"), "crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b");
    assertEquals(query.get("vpc.name"), "my-vpc");
  }

  // Test the listSecurityGroups operation with and without retries enabled
  @Test
  public void testListSecurityGroupsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListSecurityGroupsWOptions();

    vpcService.disableRetries();
    testListSecurityGroupsWOptions();
  }

  // Test the listSecurityGroups operation using the SecurityGroupsPager.getNext() method
  @Test
  public void testListSecurityGroupsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"security_groups\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"rules\":[{\"direction\":\"inbound\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/r006-6f2a6efe-21e2-401c-b237-620aa26ba16a\",\"id\":\"r006-6f2a6efe-21e2-401c-b237-620aa26ba16a\",\"ip_version\":\"ipv4\",\"local\":{\"address\":\"192.168.3.4\"},\"remote\":{\"address\":\"192.168.3.4\"},\"protocol\":\"all\"}],\"targets\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"id\":\"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"name\":\"my-bare-metal-server-network-interface\",\"resource_type\":\"network_interface\"}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"security_groups\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"rules\":[{\"direction\":\"inbound\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/r006-6f2a6efe-21e2-401c-b237-620aa26ba16a\",\"id\":\"r006-6f2a6efe-21e2-401c-b237-620aa26ba16a\",\"ip_version\":\"ipv4\",\"local\":{\"address\":\"192.168.3.4\"},\"remote\":{\"address\":\"192.168.3.4\"},\"protocol\":\"all\"}],\"targets\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"id\":\"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"name\":\"my-bare-metal-server-network-interface\",\"resource_type\":\"network_interface\"}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListSecurityGroupsOptions listSecurityGroupsOptions = new ListSecurityGroupsOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .vpcId("testString")
      .vpcCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .vpcName("my-vpc")
      .build();

    List<SecurityGroup> allResults = new ArrayList<>();
    SecurityGroupsPager pager = new SecurityGroupsPager(vpcService, listSecurityGroupsOptions);
    while (pager.hasNext()) {
      List<SecurityGroup> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listSecurityGroups operation using the SecurityGroupsPager.getAll() method
  @Test
  public void testListSecurityGroupsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"security_groups\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"rules\":[{\"direction\":\"inbound\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/r006-6f2a6efe-21e2-401c-b237-620aa26ba16a\",\"id\":\"r006-6f2a6efe-21e2-401c-b237-620aa26ba16a\",\"ip_version\":\"ipv4\",\"local\":{\"address\":\"192.168.3.4\"},\"remote\":{\"address\":\"192.168.3.4\"},\"protocol\":\"all\"}],\"targets\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"id\":\"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"name\":\"my-bare-metal-server-network-interface\",\"resource_type\":\"network_interface\"}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"security_groups\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"rules\":[{\"direction\":\"inbound\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/r006-6f2a6efe-21e2-401c-b237-620aa26ba16a\",\"id\":\"r006-6f2a6efe-21e2-401c-b237-620aa26ba16a\",\"ip_version\":\"ipv4\",\"local\":{\"address\":\"192.168.3.4\"},\"remote\":{\"address\":\"192.168.3.4\"},\"protocol\":\"all\"}],\"targets\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"id\":\"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"name\":\"my-bare-metal-server-network-interface\",\"resource_type\":\"network_interface\"}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListSecurityGroupsOptions listSecurityGroupsOptions = new ListSecurityGroupsOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .vpcId("testString")
      .vpcCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .vpcName("my-vpc")
      .build();

    SecurityGroupsPager pager = new SecurityGroupsPager(vpcService, listSecurityGroupsOptions);
    List<SecurityGroup> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createSecurityGroup operation with a valid options model parameter
  @Test
  public void testCreateSecurityGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"rules\": [{\"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/r006-6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"id\": \"r006-6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"ip_version\": \"ipv4\", \"local\": {\"address\": \"192.168.3.4\"}, \"remote\": {\"address\": \"192.168.3.4\"}, \"protocol\": \"all\"}], \"targets\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"id\": \"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"name\": \"my-bare-metal-server-network-interface\", \"resource_type\": \"network_interface\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String createSecurityGroupPath = "/security_groups";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the VPCIdentityById model
    VPCIdentityById vpcIdentityModel = new VPCIdentityById.Builder()
      .id("r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the SecurityGroupRuleLocalPrototypeIP model
    SecurityGroupRuleLocalPrototypeIP securityGroupRuleLocalPrototypeModel = new SecurityGroupRuleLocalPrototypeIP.Builder()
      .address("192.168.3.4")
      .build();

    // Construct an instance of the SecurityGroupRuleRemotePrototypeIP model
    SecurityGroupRuleRemotePrototypeIP securityGroupRuleRemotePrototypeModel = new SecurityGroupRuleRemotePrototypeIP.Builder()
      .address("192.168.3.4")
      .build();

    // Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolAll model
    SecurityGroupRulePrototypeSecurityGroupRuleProtocolAll securityGroupRulePrototypeModel = new SecurityGroupRulePrototypeSecurityGroupRuleProtocolAll.Builder()
      .direction("inbound")
      .ipVersion("ipv4")
      .local(securityGroupRuleLocalPrototypeModel)
      .remote(securityGroupRuleRemotePrototypeModel)
      .protocol("all")
      .build();

    // Construct an instance of the CreateSecurityGroupOptions model
    CreateSecurityGroupOptions createSecurityGroupOptionsModel = new CreateSecurityGroupOptions.Builder()
      .vpc(vpcIdentityModel)
      .name("my-security-group")
      .resourceGroup(resourceGroupIdentityModel)
      .rules(java.util.Arrays.asList(securityGroupRulePrototypeModel))
      .build();

    // Invoke createSecurityGroup() with a valid options model and verify the result
    Response<SecurityGroup> response = vpcService.createSecurityGroup(createSecurityGroupOptionsModel).execute();
    assertNotNull(response);
    SecurityGroup responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createSecurityGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createSecurityGroup operation with and without retries enabled
  @Test
  public void testCreateSecurityGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateSecurityGroupWOptions();

    vpcService.disableRetries();
    testCreateSecurityGroupWOptions();
  }

  // Test the createSecurityGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateSecurityGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createSecurityGroup(null).execute();
  }

  // Test the deleteSecurityGroup operation with a valid options model parameter
  @Test
  public void testDeleteSecurityGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteSecurityGroupPath = "/security_groups/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteSecurityGroupOptions model
    DeleteSecurityGroupOptions deleteSecurityGroupOptionsModel = new DeleteSecurityGroupOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteSecurityGroup() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteSecurityGroup(deleteSecurityGroupOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteSecurityGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteSecurityGroup operation with and without retries enabled
  @Test
  public void testDeleteSecurityGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteSecurityGroupWOptions();

    vpcService.disableRetries();
    testDeleteSecurityGroupWOptions();
  }

  // Test the deleteSecurityGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteSecurityGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteSecurityGroup(null).execute();
  }

  // Test the getSecurityGroup operation with a valid options model parameter
  @Test
  public void testGetSecurityGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"rules\": [{\"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/r006-6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"id\": \"r006-6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"ip_version\": \"ipv4\", \"local\": {\"address\": \"192.168.3.4\"}, \"remote\": {\"address\": \"192.168.3.4\"}, \"protocol\": \"all\"}], \"targets\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"id\": \"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"name\": \"my-bare-metal-server-network-interface\", \"resource_type\": \"network_interface\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String getSecurityGroupPath = "/security_groups/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetSecurityGroupOptions model
    GetSecurityGroupOptions getSecurityGroupOptionsModel = new GetSecurityGroupOptions.Builder()
      .id("testString")
      .build();

    // Invoke getSecurityGroup() with a valid options model and verify the result
    Response<SecurityGroup> response = vpcService.getSecurityGroup(getSecurityGroupOptionsModel).execute();
    assertNotNull(response);
    SecurityGroup responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getSecurityGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getSecurityGroup operation with and without retries enabled
  @Test
  public void testGetSecurityGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetSecurityGroupWOptions();

    vpcService.disableRetries();
    testGetSecurityGroupWOptions();
  }

  // Test the getSecurityGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetSecurityGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getSecurityGroup(null).execute();
  }

  // Test the updateSecurityGroup operation with a valid options model parameter
  @Test
  public void testUpdateSecurityGroupWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"rules\": [{\"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/r006-6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"id\": \"r006-6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"ip_version\": \"ipv4\", \"local\": {\"address\": \"192.168.3.4\"}, \"remote\": {\"address\": \"192.168.3.4\"}, \"protocol\": \"all\"}], \"targets\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"id\": \"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"name\": \"my-bare-metal-server-network-interface\", \"resource_type\": \"network_interface\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String updateSecurityGroupPath = "/security_groups/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the SecurityGroupPatch model
    SecurityGroupPatch securityGroupPatchModel = new SecurityGroupPatch.Builder()
      .name("my-security-group")
      .build();
    Map<String, Object> securityGroupPatchModelAsPatch = securityGroupPatchModel.asPatch();

    // Construct an instance of the UpdateSecurityGroupOptions model
    UpdateSecurityGroupOptions updateSecurityGroupOptionsModel = new UpdateSecurityGroupOptions.Builder()
      .id("testString")
      .securityGroupPatch(securityGroupPatchModelAsPatch)
      .build();

    // Invoke updateSecurityGroup() with a valid options model and verify the result
    Response<SecurityGroup> response = vpcService.updateSecurityGroup(updateSecurityGroupOptionsModel).execute();
    assertNotNull(response);
    SecurityGroup responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateSecurityGroupPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateSecurityGroup operation with and without retries enabled
  @Test
  public void testUpdateSecurityGroupWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateSecurityGroupWOptions();

    vpcService.disableRetries();
    testUpdateSecurityGroupWOptions();
  }

  // Test the updateSecurityGroup operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateSecurityGroupNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateSecurityGroup(null).execute();
  }

  // Test the listSecurityGroupRules operation with a valid options model parameter
  @Test
  public void testListSecurityGroupRulesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"rules\": [{\"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/r006-6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"id\": \"r006-6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"ip_version\": \"ipv4\", \"local\": {\"address\": \"192.168.3.4\"}, \"remote\": {\"address\": \"192.168.3.4\"}, \"protocol\": \"all\"}]}";
    String listSecurityGroupRulesPath = "/security_groups/testString/rules";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListSecurityGroupRulesOptions model
    ListSecurityGroupRulesOptions listSecurityGroupRulesOptionsModel = new ListSecurityGroupRulesOptions.Builder()
      .securityGroupId("testString")
      .build();

    // Invoke listSecurityGroupRules() with a valid options model and verify the result
    Response<SecurityGroupRuleCollection> response = vpcService.listSecurityGroupRules(listSecurityGroupRulesOptionsModel).execute();
    assertNotNull(response);
    SecurityGroupRuleCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listSecurityGroupRulesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listSecurityGroupRules operation with and without retries enabled
  @Test
  public void testListSecurityGroupRulesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListSecurityGroupRulesWOptions();

    vpcService.disableRetries();
    testListSecurityGroupRulesWOptions();
  }

  // Test the listSecurityGroupRules operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListSecurityGroupRulesNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listSecurityGroupRules(null).execute();
  }

  // Test the createSecurityGroupRule operation with a valid options model parameter
  @Test
  public void testCreateSecurityGroupRuleWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/r006-6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"id\": \"r006-6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"ip_version\": \"ipv4\", \"local\": {\"address\": \"192.168.3.4\"}, \"remote\": {\"address\": \"192.168.3.4\"}, \"protocol\": \"all\"}";
    String createSecurityGroupRulePath = "/security_groups/testString/rules";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the SecurityGroupRuleLocalPrototypeIP model
    SecurityGroupRuleLocalPrototypeIP securityGroupRuleLocalPrototypeModel = new SecurityGroupRuleLocalPrototypeIP.Builder()
      .address("192.168.3.4")
      .build();

    // Construct an instance of the SecurityGroupRuleRemotePrototypeIP model
    SecurityGroupRuleRemotePrototypeIP securityGroupRuleRemotePrototypeModel = new SecurityGroupRuleRemotePrototypeIP.Builder()
      .address("192.168.3.4")
      .build();

    // Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolAll model
    SecurityGroupRulePrototypeSecurityGroupRuleProtocolAll securityGroupRulePrototypeModel = new SecurityGroupRulePrototypeSecurityGroupRuleProtocolAll.Builder()
      .direction("inbound")
      .ipVersion("ipv4")
      .local(securityGroupRuleLocalPrototypeModel)
      .remote(securityGroupRuleRemotePrototypeModel)
      .protocol("all")
      .build();

    // Construct an instance of the CreateSecurityGroupRuleOptions model
    CreateSecurityGroupRuleOptions createSecurityGroupRuleOptionsModel = new CreateSecurityGroupRuleOptions.Builder()
      .securityGroupId("testString")
      .securityGroupRulePrototype(securityGroupRulePrototypeModel)
      .build();

    // Invoke createSecurityGroupRule() with a valid options model and verify the result
    Response<SecurityGroupRule> response = vpcService.createSecurityGroupRule(createSecurityGroupRuleOptionsModel).execute();
    assertNotNull(response);
    SecurityGroupRule responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createSecurityGroupRulePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createSecurityGroupRule operation with and without retries enabled
  @Test
  public void testCreateSecurityGroupRuleWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateSecurityGroupRuleWOptions();

    vpcService.disableRetries();
    testCreateSecurityGroupRuleWOptions();
  }

  // Test the createSecurityGroupRule operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateSecurityGroupRuleNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createSecurityGroupRule(null).execute();
  }

  // Test the deleteSecurityGroupRule operation with a valid options model parameter
  @Test
  public void testDeleteSecurityGroupRuleWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteSecurityGroupRulePath = "/security_groups/testString/rules/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteSecurityGroupRuleOptions model
    DeleteSecurityGroupRuleOptions deleteSecurityGroupRuleOptionsModel = new DeleteSecurityGroupRuleOptions.Builder()
      .securityGroupId("testString")
      .id("testString")
      .build();

    // Invoke deleteSecurityGroupRule() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteSecurityGroupRule(deleteSecurityGroupRuleOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteSecurityGroupRulePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteSecurityGroupRule operation with and without retries enabled
  @Test
  public void testDeleteSecurityGroupRuleWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteSecurityGroupRuleWOptions();

    vpcService.disableRetries();
    testDeleteSecurityGroupRuleWOptions();
  }

  // Test the deleteSecurityGroupRule operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteSecurityGroupRuleNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteSecurityGroupRule(null).execute();
  }

  // Test the getSecurityGroupRule operation with a valid options model parameter
  @Test
  public void testGetSecurityGroupRuleWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/r006-6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"id\": \"r006-6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"ip_version\": \"ipv4\", \"local\": {\"address\": \"192.168.3.4\"}, \"remote\": {\"address\": \"192.168.3.4\"}, \"protocol\": \"all\"}";
    String getSecurityGroupRulePath = "/security_groups/testString/rules/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetSecurityGroupRuleOptions model
    GetSecurityGroupRuleOptions getSecurityGroupRuleOptionsModel = new GetSecurityGroupRuleOptions.Builder()
      .securityGroupId("testString")
      .id("testString")
      .build();

    // Invoke getSecurityGroupRule() with a valid options model and verify the result
    Response<SecurityGroupRule> response = vpcService.getSecurityGroupRule(getSecurityGroupRuleOptionsModel).execute();
    assertNotNull(response);
    SecurityGroupRule responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getSecurityGroupRulePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getSecurityGroupRule operation with and without retries enabled
  @Test
  public void testGetSecurityGroupRuleWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetSecurityGroupRuleWOptions();

    vpcService.disableRetries();
    testGetSecurityGroupRuleWOptions();
  }

  // Test the getSecurityGroupRule operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetSecurityGroupRuleNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getSecurityGroupRule(null).execute();
  }

  // Test the updateSecurityGroupRule operation with a valid options model parameter
  @Test
  public void testUpdateSecurityGroupRuleWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"direction\": \"inbound\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/r006-6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"id\": \"r006-6f2a6efe-21e2-401c-b237-620aa26ba16a\", \"ip_version\": \"ipv4\", \"local\": {\"address\": \"192.168.3.4\"}, \"remote\": {\"address\": \"192.168.3.4\"}, \"protocol\": \"all\"}";
    String updateSecurityGroupRulePath = "/security_groups/testString/rules/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the SecurityGroupRuleLocalPatchIP model
    SecurityGroupRuleLocalPatchIP securityGroupRuleLocalPatchModel = new SecurityGroupRuleLocalPatchIP.Builder()
      .address("192.168.3.4")
      .build();

    // Construct an instance of the SecurityGroupRuleRemotePatchCIDR model
    SecurityGroupRuleRemotePatchCIDR securityGroupRuleRemotePatchModel = new SecurityGroupRuleRemotePatchCIDR.Builder()
      .cidrBlock("10.0.0.0/8")
      .build();

    // Construct an instance of the SecurityGroupRulePatch model
    SecurityGroupRulePatch securityGroupRulePatchModel = new SecurityGroupRulePatch.Builder()
      .code(Long.valueOf("0"))
      .direction("inbound")
      .ipVersion("ipv4")
      .local(securityGroupRuleLocalPatchModel)
      .portMax(Long.valueOf("22"))
      .portMin(Long.valueOf("22"))
      .remote(securityGroupRuleRemotePatchModel)
      .type(Long.valueOf("8"))
      .build();
    Map<String, Object> securityGroupRulePatchModelAsPatch = securityGroupRulePatchModel.asPatch();

    // Construct an instance of the UpdateSecurityGroupRuleOptions model
    UpdateSecurityGroupRuleOptions updateSecurityGroupRuleOptionsModel = new UpdateSecurityGroupRuleOptions.Builder()
      .securityGroupId("testString")
      .id("testString")
      .securityGroupRulePatch(securityGroupRulePatchModelAsPatch)
      .build();

    // Invoke updateSecurityGroupRule() with a valid options model and verify the result
    Response<SecurityGroupRule> response = vpcService.updateSecurityGroupRule(updateSecurityGroupRuleOptionsModel).execute();
    assertNotNull(response);
    SecurityGroupRule responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateSecurityGroupRulePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateSecurityGroupRule operation with and without retries enabled
  @Test
  public void testUpdateSecurityGroupRuleWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateSecurityGroupRuleWOptions();

    vpcService.disableRetries();
    testUpdateSecurityGroupRuleWOptions();
  }

  // Test the updateSecurityGroupRule operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateSecurityGroupRuleNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateSecurityGroupRule(null).execute();
  }

  // Test the listSecurityGroupTargets operation with a valid options model parameter
  @Test
  public void testListSecurityGroupTargetsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"targets\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"id\": \"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"name\": \"my-bare-metal-server-network-interface\", \"resource_type\": \"network_interface\"}], \"total_count\": 132}";
    String listSecurityGroupTargetsPath = "/security_groups/testString/targets";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListSecurityGroupTargetsOptions model
    ListSecurityGroupTargetsOptions listSecurityGroupTargetsOptionsModel = new ListSecurityGroupTargetsOptions.Builder()
      .securityGroupId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listSecurityGroupTargets() with a valid options model and verify the result
    Response<SecurityGroupTargetCollection> response = vpcService.listSecurityGroupTargets(listSecurityGroupTargetsOptionsModel).execute();
    assertNotNull(response);
    SecurityGroupTargetCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listSecurityGroupTargetsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listSecurityGroupTargets operation with and without retries enabled
  @Test
  public void testListSecurityGroupTargetsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListSecurityGroupTargetsWOptions();

    vpcService.disableRetries();
    testListSecurityGroupTargetsWOptions();
  }

  // Test the listSecurityGroupTargets operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListSecurityGroupTargetsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listSecurityGroupTargets(null).execute();
  }

  // Test the listSecurityGroupTargets operation using the SecurityGroupTargetsPager.getNext() method
  @Test
  public void testListSecurityGroupTargetsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"targets\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"id\":\"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"name\":\"my-bare-metal-server-network-interface\",\"resource_type\":\"network_interface\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"targets\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"id\":\"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"name\":\"my-bare-metal-server-network-interface\",\"resource_type\":\"network_interface\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListSecurityGroupTargetsOptions listSecurityGroupTargetsOptions = new ListSecurityGroupTargetsOptions.Builder()
      .securityGroupId("testString")
      .limit(Long.valueOf("10"))
      .build();

    List<SecurityGroupTargetReference> allResults = new ArrayList<>();
    SecurityGroupTargetsPager pager = new SecurityGroupTargetsPager(vpcService, listSecurityGroupTargetsOptions);
    while (pager.hasNext()) {
      List<SecurityGroupTargetReference> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listSecurityGroupTargets operation using the SecurityGroupTargetsPager.getAll() method
  @Test
  public void testListSecurityGroupTargetsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"targets\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"id\":\"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"name\":\"my-bare-metal-server-network-interface\",\"resource_type\":\"network_interface\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"targets\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"id\":\"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\",\"name\":\"my-bare-metal-server-network-interface\",\"resource_type\":\"network_interface\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListSecurityGroupTargetsOptions listSecurityGroupTargetsOptions = new ListSecurityGroupTargetsOptions.Builder()
      .securityGroupId("testString")
      .limit(Long.valueOf("10"))
      .build();

    SecurityGroupTargetsPager pager = new SecurityGroupTargetsPager(vpcService, listSecurityGroupTargetsOptions);
    List<SecurityGroupTargetReference> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the deleteSecurityGroupTargetBinding operation with a valid options model parameter
  @Test
  public void testDeleteSecurityGroupTargetBindingWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteSecurityGroupTargetBindingPath = "/security_groups/testString/targets/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteSecurityGroupTargetBindingOptions model
    DeleteSecurityGroupTargetBindingOptions deleteSecurityGroupTargetBindingOptionsModel = new DeleteSecurityGroupTargetBindingOptions.Builder()
      .securityGroupId("testString")
      .id("testString")
      .build();

    // Invoke deleteSecurityGroupTargetBinding() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteSecurityGroupTargetBinding(deleteSecurityGroupTargetBindingOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteSecurityGroupTargetBindingPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteSecurityGroupTargetBinding operation with and without retries enabled
  @Test
  public void testDeleteSecurityGroupTargetBindingWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteSecurityGroupTargetBindingWOptions();

    vpcService.disableRetries();
    testDeleteSecurityGroupTargetBindingWOptions();
  }

  // Test the deleteSecurityGroupTargetBinding operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteSecurityGroupTargetBindingNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteSecurityGroupTargetBinding(null).execute();
  }

  // Test the getSecurityGroupTarget operation with a valid options model parameter
  @Test
  public void testGetSecurityGroupTargetWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"id\": \"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"name\": \"my-bare-metal-server-network-interface\", \"resource_type\": \"network_interface\"}";
    String getSecurityGroupTargetPath = "/security_groups/testString/targets/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetSecurityGroupTargetOptions model
    GetSecurityGroupTargetOptions getSecurityGroupTargetOptionsModel = new GetSecurityGroupTargetOptions.Builder()
      .securityGroupId("testString")
      .id("testString")
      .build();

    // Invoke getSecurityGroupTarget() with a valid options model and verify the result
    Response<SecurityGroupTargetReference> response = vpcService.getSecurityGroupTarget(getSecurityGroupTargetOptionsModel).execute();
    assertNotNull(response);
    SecurityGroupTargetReference responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getSecurityGroupTargetPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getSecurityGroupTarget operation with and without retries enabled
  @Test
  public void testGetSecurityGroupTargetWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetSecurityGroupTargetWOptions();

    vpcService.disableRetries();
    testGetSecurityGroupTargetWOptions();
  }

  // Test the getSecurityGroupTarget operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetSecurityGroupTargetNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getSecurityGroupTarget(null).execute();
  }

  // Test the createSecurityGroupTargetBinding operation with a valid options model parameter
  @Test
  public void testCreateSecurityGroupTargetBindingWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/bare_metal_servers/0717-aad10fd7-8a02-4f3e-97f3-b18bd82cf304/network_interfaces/0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"id\": \"0717-da8c43ec-b6ca-4bd2-871e-72e288c66ee6\", \"name\": \"my-bare-metal-server-network-interface\", \"resource_type\": \"network_interface\"}";
    String createSecurityGroupTargetBindingPath = "/security_groups/testString/targets/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the CreateSecurityGroupTargetBindingOptions model
    CreateSecurityGroupTargetBindingOptions createSecurityGroupTargetBindingOptionsModel = new CreateSecurityGroupTargetBindingOptions.Builder()
      .securityGroupId("testString")
      .id("testString")
      .build();

    // Invoke createSecurityGroupTargetBinding() with a valid options model and verify the result
    Response<SecurityGroupTargetReference> response = vpcService.createSecurityGroupTargetBinding(createSecurityGroupTargetBindingOptionsModel).execute();
    assertNotNull(response);
    SecurityGroupTargetReference responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PUT");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createSecurityGroupTargetBindingPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createSecurityGroupTargetBinding operation with and without retries enabled
  @Test
  public void testCreateSecurityGroupTargetBindingWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateSecurityGroupTargetBindingWOptions();

    vpcService.disableRetries();
    testCreateSecurityGroupTargetBindingWOptions();
  }

  // Test the createSecurityGroupTargetBinding operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateSecurityGroupTargetBindingNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createSecurityGroupTargetBinding(null).execute();
  }

  // Test the listIkePolicies operation with a valid options model parameter
  @Test
  public void testListIkePoliciesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"ike_policies\": [{\"authentication_algorithm\": \"md5\", \"connections\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"id\": \"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"name\": \"my-vpn-gateway-connection\", \"resource_type\": \"vpn_gateway_connection\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"dh_group\": 14, \"encryption_algorithm\": \"aes128\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\", \"id\": \"r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\", \"ike_version\": 1, \"key_lifetime\": 28800, \"name\": \"my-ike-policy\", \"negotiation_mode\": \"main\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"ike_policy\"}], \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listIkePoliciesPath = "/ike_policies";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListIkePoliciesOptions model
    ListIkePoliciesOptions listIkePoliciesOptionsModel = new ListIkePoliciesOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listIkePolicies() with a valid options model and verify the result
    Response<IKEPolicyCollection> response = vpcService.listIkePolicies(listIkePoliciesOptionsModel).execute();
    assertNotNull(response);
    IKEPolicyCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listIkePoliciesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listIkePolicies operation with and without retries enabled
  @Test
  public void testListIkePoliciesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListIkePoliciesWOptions();

    vpcService.disableRetries();
    testListIkePoliciesWOptions();
  }

  // Test the listIkePolicies operation using the IkePoliciesPager.getNext() method
  @Test
  public void testListIkePoliciesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"ike_policies\":[{\"authentication_algorithm\":\"md5\",\"connections\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"id\":\"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"name\":\"my-vpn-gateway-connection\",\"resource_type\":\"vpn_gateway_connection\"}],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"dh_group\":14,\"encryption_algorithm\":\"aes128\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\",\"id\":\"r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\",\"ike_version\":1,\"key_lifetime\":28800,\"name\":\"my-ike-policy\",\"negotiation_mode\":\"main\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"ike_policy\"}],\"limit\":1}";
    String mockResponsePage2 = "{\"total_count\":2,\"ike_policies\":[{\"authentication_algorithm\":\"md5\",\"connections\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"id\":\"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"name\":\"my-vpn-gateway-connection\",\"resource_type\":\"vpn_gateway_connection\"}],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"dh_group\":14,\"encryption_algorithm\":\"aes128\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\",\"id\":\"r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\",\"ike_version\":1,\"key_lifetime\":28800,\"name\":\"my-ike-policy\",\"negotiation_mode\":\"main\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"ike_policy\"}],\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListIkePoliciesOptions listIkePoliciesOptions = new ListIkePoliciesOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    List<IKEPolicy> allResults = new ArrayList<>();
    IkePoliciesPager pager = new IkePoliciesPager(vpcService, listIkePoliciesOptions);
    while (pager.hasNext()) {
      List<IKEPolicy> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listIkePolicies operation using the IkePoliciesPager.getAll() method
  @Test
  public void testListIkePoliciesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"ike_policies\":[{\"authentication_algorithm\":\"md5\",\"connections\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"id\":\"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"name\":\"my-vpn-gateway-connection\",\"resource_type\":\"vpn_gateway_connection\"}],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"dh_group\":14,\"encryption_algorithm\":\"aes128\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\",\"id\":\"r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\",\"ike_version\":1,\"key_lifetime\":28800,\"name\":\"my-ike-policy\",\"negotiation_mode\":\"main\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"ike_policy\"}],\"limit\":1}";
    String mockResponsePage2 = "{\"total_count\":2,\"ike_policies\":[{\"authentication_algorithm\":\"md5\",\"connections\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"id\":\"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"name\":\"my-vpn-gateway-connection\",\"resource_type\":\"vpn_gateway_connection\"}],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"dh_group\":14,\"encryption_algorithm\":\"aes128\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\",\"id\":\"r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\",\"ike_version\":1,\"key_lifetime\":28800,\"name\":\"my-ike-policy\",\"negotiation_mode\":\"main\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"ike_policy\"}],\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListIkePoliciesOptions listIkePoliciesOptions = new ListIkePoliciesOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    IkePoliciesPager pager = new IkePoliciesPager(vpcService, listIkePoliciesOptions);
    List<IKEPolicy> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createIkePolicy operation with a valid options model parameter
  @Test
  public void testCreateIkePolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"authentication_algorithm\": \"md5\", \"connections\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"id\": \"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"name\": \"my-vpn-gateway-connection\", \"resource_type\": \"vpn_gateway_connection\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"dh_group\": 14, \"encryption_algorithm\": \"aes128\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\", \"id\": \"r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\", \"ike_version\": 1, \"key_lifetime\": 28800, \"name\": \"my-ike-policy\", \"negotiation_mode\": \"main\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"ike_policy\"}";
    String createIkePolicyPath = "/ike_policies";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the CreateIkePolicyOptions model
    CreateIkePolicyOptions createIkePolicyOptionsModel = new CreateIkePolicyOptions.Builder()
      .authenticationAlgorithm("sha256")
      .dhGroup(Long.valueOf("14"))
      .encryptionAlgorithm("aes128")
      .ikeVersion(Long.valueOf("1"))
      .keyLifetime(Long.valueOf("28800"))
      .name("my-ike-policy")
      .resourceGroup(resourceGroupIdentityModel)
      .build();

    // Invoke createIkePolicy() with a valid options model and verify the result
    Response<IKEPolicy> response = vpcService.createIkePolicy(createIkePolicyOptionsModel).execute();
    assertNotNull(response);
    IKEPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createIkePolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createIkePolicy operation with and without retries enabled
  @Test
  public void testCreateIkePolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateIkePolicyWOptions();

    vpcService.disableRetries();
    testCreateIkePolicyWOptions();
  }

  // Test the createIkePolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateIkePolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createIkePolicy(null).execute();
  }

  // Test the deleteIkePolicy operation with a valid options model parameter
  @Test
  public void testDeleteIkePolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteIkePolicyPath = "/ike_policies/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteIkePolicyOptions model
    DeleteIkePolicyOptions deleteIkePolicyOptionsModel = new DeleteIkePolicyOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteIkePolicy() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteIkePolicy(deleteIkePolicyOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteIkePolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteIkePolicy operation with and without retries enabled
  @Test
  public void testDeleteIkePolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteIkePolicyWOptions();

    vpcService.disableRetries();
    testDeleteIkePolicyWOptions();
  }

  // Test the deleteIkePolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteIkePolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteIkePolicy(null).execute();
  }

  // Test the getIkePolicy operation with a valid options model parameter
  @Test
  public void testGetIkePolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"authentication_algorithm\": \"md5\", \"connections\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"id\": \"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"name\": \"my-vpn-gateway-connection\", \"resource_type\": \"vpn_gateway_connection\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"dh_group\": 14, \"encryption_algorithm\": \"aes128\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\", \"id\": \"r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\", \"ike_version\": 1, \"key_lifetime\": 28800, \"name\": \"my-ike-policy\", \"negotiation_mode\": \"main\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"ike_policy\"}";
    String getIkePolicyPath = "/ike_policies/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetIkePolicyOptions model
    GetIkePolicyOptions getIkePolicyOptionsModel = new GetIkePolicyOptions.Builder()
      .id("testString")
      .build();

    // Invoke getIkePolicy() with a valid options model and verify the result
    Response<IKEPolicy> response = vpcService.getIkePolicy(getIkePolicyOptionsModel).execute();
    assertNotNull(response);
    IKEPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getIkePolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getIkePolicy operation with and without retries enabled
  @Test
  public void testGetIkePolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetIkePolicyWOptions();

    vpcService.disableRetries();
    testGetIkePolicyWOptions();
  }

  // Test the getIkePolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetIkePolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getIkePolicy(null).execute();
  }

  // Test the updateIkePolicy operation with a valid options model parameter
  @Test
  public void testUpdateIkePolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"authentication_algorithm\": \"md5\", \"connections\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"id\": \"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"name\": \"my-vpn-gateway-connection\", \"resource_type\": \"vpn_gateway_connection\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"dh_group\": 14, \"encryption_algorithm\": \"aes128\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\", \"id\": \"r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\", \"ike_version\": 1, \"key_lifetime\": 28800, \"name\": \"my-ike-policy\", \"negotiation_mode\": \"main\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"ike_policy\"}";
    String updateIkePolicyPath = "/ike_policies/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the IKEPolicyPatch model
    IKEPolicyPatch ikePolicyPatchModel = new IKEPolicyPatch.Builder()
      .authenticationAlgorithm("sha256")
      .dhGroup(Long.valueOf("14"))
      .encryptionAlgorithm("aes128")
      .ikeVersion(Long.valueOf("1"))
      .keyLifetime(Long.valueOf("86400"))
      .name("my-ike-policy")
      .build();
    Map<String, Object> ikePolicyPatchModelAsPatch = ikePolicyPatchModel.asPatch();

    // Construct an instance of the UpdateIkePolicyOptions model
    UpdateIkePolicyOptions updateIkePolicyOptionsModel = new UpdateIkePolicyOptions.Builder()
      .id("testString")
      .ikePolicyPatch(ikePolicyPatchModelAsPatch)
      .build();

    // Invoke updateIkePolicy() with a valid options model and verify the result
    Response<IKEPolicy> response = vpcService.updateIkePolicy(updateIkePolicyOptionsModel).execute();
    assertNotNull(response);
    IKEPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateIkePolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateIkePolicy operation with and without retries enabled
  @Test
  public void testUpdateIkePolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateIkePolicyWOptions();

    vpcService.disableRetries();
    testUpdateIkePolicyWOptions();
  }

  // Test the updateIkePolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateIkePolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateIkePolicy(null).execute();
  }

  // Test the listIkePolicyConnections operation with a valid options model parameter
  @Test
  public void testListIkePolicyConnectionsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"connections\": [{\"admin_state_up\": true, \"authentication_mode\": \"psk\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"dead_peer_detection\": {\"action\": \"restart\", \"interval\": 30, \"timeout\": 120}, \"establish_mode\": \"bidirectional\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"id\": \"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"ike_policy\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\", \"id\": \"r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\", \"name\": \"my-ike-policy\", \"resource_type\": \"ike_policy\"}, \"ipsec_policy\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/r006-51eae621-dbbc-4c47-b623-b57a43c19876\", \"id\": \"r006-51eae621-dbbc-4c47-b623-b57a43c19876\", \"name\": \"my-ipsec-policy\", \"resource_type\": \"ipsec_policy\"}, \"mode\": \"policy\", \"name\": \"my-vpn-gateway-connection\", \"psk\": \"lkj14b1oi0alcniejkso\", \"resource_type\": \"vpn_gateway_connection\", \"status\": \"down\", \"status_reasons\": [{\"code\": \"cannot_authenticate_connection\", \"message\": \"Failed to authenticate a connection because of mismatched IKE ID and PSK.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}], \"distribute_traffic\": false, \"local\": {\"ike_identities\": [{\"type\": \"fqdn\", \"value\": \"my-service.example.com\"}]}, \"peer\": {\"ike_identity\": {\"type\": \"fqdn\", \"value\": \"my-service.example.com\"}, \"type\": \"address\", \"address\": \"192.0.2.5\"}, \"routing_protocol\": \"none\", \"tunnels\": [{\"public_ip\": {\"address\": \"192.168.3.4\"}, \"status\": \"down\", \"status_reasons\": [{\"code\": \"cannot_authenticate_connection\", \"message\": \"Failed to authenticate a connection because of mismatched IKE ID and PSK.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}]}]}], \"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listIkePolicyConnectionsPath = "/ike_policies/testString/connections";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListIkePolicyConnectionsOptions model
    ListIkePolicyConnectionsOptions listIkePolicyConnectionsOptionsModel = new ListIkePolicyConnectionsOptions.Builder()
      .id("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listIkePolicyConnections() with a valid options model and verify the result
    Response<IKEPolicyConnectionCollection> response = vpcService.listIkePolicyConnections(listIkePolicyConnectionsOptionsModel).execute();
    assertNotNull(response);
    IKEPolicyConnectionCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listIkePolicyConnectionsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listIkePolicyConnections operation with and without retries enabled
  @Test
  public void testListIkePolicyConnectionsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListIkePolicyConnectionsWOptions();

    vpcService.disableRetries();
    testListIkePolicyConnectionsWOptions();
  }

  // Test the listIkePolicyConnections operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListIkePolicyConnectionsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listIkePolicyConnections(null).execute();
  }

  // Test the listIkePolicyConnections operation using the IkePolicyConnectionsPager.getNext() method
  @Test
  public void testListIkePolicyConnectionsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"connections\":[{\"admin_state_up\":true,\"authentication_mode\":\"psk\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"dead_peer_detection\":{\"action\":\"restart\",\"interval\":30,\"timeout\":120},\"establish_mode\":\"bidirectional\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"id\":\"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"ike_policy\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\",\"id\":\"r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\",\"name\":\"my-ike-policy\",\"resource_type\":\"ike_policy\"},\"ipsec_policy\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/r006-51eae621-dbbc-4c47-b623-b57a43c19876\",\"id\":\"r006-51eae621-dbbc-4c47-b623-b57a43c19876\",\"name\":\"my-ipsec-policy\",\"resource_type\":\"ipsec_policy\"},\"mode\":\"policy\",\"name\":\"my-vpn-gateway-connection\",\"psk\":\"lkj14b1oi0alcniejkso\",\"resource_type\":\"vpn_gateway_connection\",\"status\":\"down\",\"status_reasons\":[{\"code\":\"cannot_authenticate_connection\",\"message\":\"Failed to authenticate a connection because of mismatched IKE ID and PSK.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}],\"distribute_traffic\":false,\"local\":{\"ike_identities\":[{\"type\":\"fqdn\",\"value\":\"my-service.example.com\"}]},\"peer\":{\"ike_identity\":{\"type\":\"fqdn\",\"value\":\"my-service.example.com\"},\"type\":\"address\",\"address\":\"192.0.2.5\"},\"routing_protocol\":\"none\",\"tunnels\":[{\"public_ip\":{\"address\":\"192.168.3.4\"},\"status\":\"down\",\"status_reasons\":[{\"code\":\"cannot_authenticate_connection\",\"message\":\"Failed to authenticate a connection because of mismatched IKE ID and PSK.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}]}]}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"connections\":[{\"admin_state_up\":true,\"authentication_mode\":\"psk\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"dead_peer_detection\":{\"action\":\"restart\",\"interval\":30,\"timeout\":120},\"establish_mode\":\"bidirectional\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"id\":\"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"ike_policy\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\",\"id\":\"r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\",\"name\":\"my-ike-policy\",\"resource_type\":\"ike_policy\"},\"ipsec_policy\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/r006-51eae621-dbbc-4c47-b623-b57a43c19876\",\"id\":\"r006-51eae621-dbbc-4c47-b623-b57a43c19876\",\"name\":\"my-ipsec-policy\",\"resource_type\":\"ipsec_policy\"},\"mode\":\"policy\",\"name\":\"my-vpn-gateway-connection\",\"psk\":\"lkj14b1oi0alcniejkso\",\"resource_type\":\"vpn_gateway_connection\",\"status\":\"down\",\"status_reasons\":[{\"code\":\"cannot_authenticate_connection\",\"message\":\"Failed to authenticate a connection because of mismatched IKE ID and PSK.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}],\"distribute_traffic\":false,\"local\":{\"ike_identities\":[{\"type\":\"fqdn\",\"value\":\"my-service.example.com\"}]},\"peer\":{\"ike_identity\":{\"type\":\"fqdn\",\"value\":\"my-service.example.com\"},\"type\":\"address\",\"address\":\"192.0.2.5\"},\"routing_protocol\":\"none\",\"tunnels\":[{\"public_ip\":{\"address\":\"192.168.3.4\"},\"status\":\"down\",\"status_reasons\":[{\"code\":\"cannot_authenticate_connection\",\"message\":\"Failed to authenticate a connection because of mismatched IKE ID and PSK.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}]}]}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListIkePolicyConnectionsOptions listIkePolicyConnectionsOptions = new ListIkePolicyConnectionsOptions.Builder()
      .id("testString")
      .limit(Long.valueOf("10"))
      .build();

    List<VPNGatewayConnection> allResults = new ArrayList<>();
    IkePolicyConnectionsPager pager = new IkePolicyConnectionsPager(vpcService, listIkePolicyConnectionsOptions);
    while (pager.hasNext()) {
      List<VPNGatewayConnection> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listIkePolicyConnections operation using the IkePolicyConnectionsPager.getAll() method
  @Test
  public void testListIkePolicyConnectionsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"connections\":[{\"admin_state_up\":true,\"authentication_mode\":\"psk\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"dead_peer_detection\":{\"action\":\"restart\",\"interval\":30,\"timeout\":120},\"establish_mode\":\"bidirectional\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"id\":\"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"ike_policy\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\",\"id\":\"r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\",\"name\":\"my-ike-policy\",\"resource_type\":\"ike_policy\"},\"ipsec_policy\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/r006-51eae621-dbbc-4c47-b623-b57a43c19876\",\"id\":\"r006-51eae621-dbbc-4c47-b623-b57a43c19876\",\"name\":\"my-ipsec-policy\",\"resource_type\":\"ipsec_policy\"},\"mode\":\"policy\",\"name\":\"my-vpn-gateway-connection\",\"psk\":\"lkj14b1oi0alcniejkso\",\"resource_type\":\"vpn_gateway_connection\",\"status\":\"down\",\"status_reasons\":[{\"code\":\"cannot_authenticate_connection\",\"message\":\"Failed to authenticate a connection because of mismatched IKE ID and PSK.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}],\"distribute_traffic\":false,\"local\":{\"ike_identities\":[{\"type\":\"fqdn\",\"value\":\"my-service.example.com\"}]},\"peer\":{\"ike_identity\":{\"type\":\"fqdn\",\"value\":\"my-service.example.com\"},\"type\":\"address\",\"address\":\"192.0.2.5\"},\"routing_protocol\":\"none\",\"tunnels\":[{\"public_ip\":{\"address\":\"192.168.3.4\"},\"status\":\"down\",\"status_reasons\":[{\"code\":\"cannot_authenticate_connection\",\"message\":\"Failed to authenticate a connection because of mismatched IKE ID and PSK.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}]}]}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"connections\":[{\"admin_state_up\":true,\"authentication_mode\":\"psk\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"dead_peer_detection\":{\"action\":\"restart\",\"interval\":30,\"timeout\":120},\"establish_mode\":\"bidirectional\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"id\":\"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"ike_policy\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\",\"id\":\"r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\",\"name\":\"my-ike-policy\",\"resource_type\":\"ike_policy\"},\"ipsec_policy\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/r006-51eae621-dbbc-4c47-b623-b57a43c19876\",\"id\":\"r006-51eae621-dbbc-4c47-b623-b57a43c19876\",\"name\":\"my-ipsec-policy\",\"resource_type\":\"ipsec_policy\"},\"mode\":\"policy\",\"name\":\"my-vpn-gateway-connection\",\"psk\":\"lkj14b1oi0alcniejkso\",\"resource_type\":\"vpn_gateway_connection\",\"status\":\"down\",\"status_reasons\":[{\"code\":\"cannot_authenticate_connection\",\"message\":\"Failed to authenticate a connection because of mismatched IKE ID and PSK.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}],\"distribute_traffic\":false,\"local\":{\"ike_identities\":[{\"type\":\"fqdn\",\"value\":\"my-service.example.com\"}]},\"peer\":{\"ike_identity\":{\"type\":\"fqdn\",\"value\":\"my-service.example.com\"},\"type\":\"address\",\"address\":\"192.0.2.5\"},\"routing_protocol\":\"none\",\"tunnels\":[{\"public_ip\":{\"address\":\"192.168.3.4\"},\"status\":\"down\",\"status_reasons\":[{\"code\":\"cannot_authenticate_connection\",\"message\":\"Failed to authenticate a connection because of mismatched IKE ID and PSK.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}]}]}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListIkePolicyConnectionsOptions listIkePolicyConnectionsOptions = new ListIkePolicyConnectionsOptions.Builder()
      .id("testString")
      .limit(Long.valueOf("10"))
      .build();

    IkePolicyConnectionsPager pager = new IkePolicyConnectionsPager(vpcService, listIkePolicyConnectionsOptions);
    List<VPNGatewayConnection> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listIpsecPolicies operation with a valid options model parameter
  @Test
  public void testListIpsecPoliciesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"ipsec_policies\": [{\"authentication_algorithm\": \"disabled\", \"connections\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"id\": \"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"name\": \"my-vpn-gateway-connection\", \"resource_type\": \"vpn_gateway_connection\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"encapsulation_mode\": \"tunnel\", \"encryption_algorithm\": \"aes128\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/r006-51eae621-dbbc-4c47-b623-b57a43c19876\", \"id\": \"r006-51eae621-dbbc-4c47-b623-b57a43c19876\", \"key_lifetime\": 3600, \"name\": \"my-ipsec-policy\", \"pfs\": \"disabled\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"ipsec_policy\", \"transform_protocol\": \"esp\"}], \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listIpsecPoliciesPath = "/ipsec_policies";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListIpsecPoliciesOptions model
    ListIpsecPoliciesOptions listIpsecPoliciesOptionsModel = new ListIpsecPoliciesOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listIpsecPolicies() with a valid options model and verify the result
    Response<IPsecPolicyCollection> response = vpcService.listIpsecPolicies(listIpsecPoliciesOptionsModel).execute();
    assertNotNull(response);
    IPsecPolicyCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listIpsecPoliciesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listIpsecPolicies operation with and without retries enabled
  @Test
  public void testListIpsecPoliciesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListIpsecPoliciesWOptions();

    vpcService.disableRetries();
    testListIpsecPoliciesWOptions();
  }

  // Test the listIpsecPolicies operation using the IpsecPoliciesPager.getNext() method
  @Test
  public void testListIpsecPoliciesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"ipsec_policies\":[{\"authentication_algorithm\":\"disabled\",\"connections\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"id\":\"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"name\":\"my-vpn-gateway-connection\",\"resource_type\":\"vpn_gateway_connection\"}],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"encapsulation_mode\":\"tunnel\",\"encryption_algorithm\":\"aes128\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/r006-51eae621-dbbc-4c47-b623-b57a43c19876\",\"id\":\"r006-51eae621-dbbc-4c47-b623-b57a43c19876\",\"key_lifetime\":3600,\"name\":\"my-ipsec-policy\",\"pfs\":\"disabled\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"ipsec_policy\",\"transform_protocol\":\"esp\"}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"ipsec_policies\":[{\"authentication_algorithm\":\"disabled\",\"connections\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"id\":\"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"name\":\"my-vpn-gateway-connection\",\"resource_type\":\"vpn_gateway_connection\"}],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"encapsulation_mode\":\"tunnel\",\"encryption_algorithm\":\"aes128\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/r006-51eae621-dbbc-4c47-b623-b57a43c19876\",\"id\":\"r006-51eae621-dbbc-4c47-b623-b57a43c19876\",\"key_lifetime\":3600,\"name\":\"my-ipsec-policy\",\"pfs\":\"disabled\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"ipsec_policy\",\"transform_protocol\":\"esp\"}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListIpsecPoliciesOptions listIpsecPoliciesOptions = new ListIpsecPoliciesOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    List<IPsecPolicy> allResults = new ArrayList<>();
    IpsecPoliciesPager pager = new IpsecPoliciesPager(vpcService, listIpsecPoliciesOptions);
    while (pager.hasNext()) {
      List<IPsecPolicy> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listIpsecPolicies operation using the IpsecPoliciesPager.getAll() method
  @Test
  public void testListIpsecPoliciesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"ipsec_policies\":[{\"authentication_algorithm\":\"disabled\",\"connections\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"id\":\"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"name\":\"my-vpn-gateway-connection\",\"resource_type\":\"vpn_gateway_connection\"}],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"encapsulation_mode\":\"tunnel\",\"encryption_algorithm\":\"aes128\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/r006-51eae621-dbbc-4c47-b623-b57a43c19876\",\"id\":\"r006-51eae621-dbbc-4c47-b623-b57a43c19876\",\"key_lifetime\":3600,\"name\":\"my-ipsec-policy\",\"pfs\":\"disabled\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"ipsec_policy\",\"transform_protocol\":\"esp\"}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"ipsec_policies\":[{\"authentication_algorithm\":\"disabled\",\"connections\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"id\":\"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"name\":\"my-vpn-gateway-connection\",\"resource_type\":\"vpn_gateway_connection\"}],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"encapsulation_mode\":\"tunnel\",\"encryption_algorithm\":\"aes128\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/r006-51eae621-dbbc-4c47-b623-b57a43c19876\",\"id\":\"r006-51eae621-dbbc-4c47-b623-b57a43c19876\",\"key_lifetime\":3600,\"name\":\"my-ipsec-policy\",\"pfs\":\"disabled\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"ipsec_policy\",\"transform_protocol\":\"esp\"}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListIpsecPoliciesOptions listIpsecPoliciesOptions = new ListIpsecPoliciesOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    IpsecPoliciesPager pager = new IpsecPoliciesPager(vpcService, listIpsecPoliciesOptions);
    List<IPsecPolicy> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createIpsecPolicy operation with a valid options model parameter
  @Test
  public void testCreateIpsecPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"authentication_algorithm\": \"disabled\", \"connections\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"id\": \"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"name\": \"my-vpn-gateway-connection\", \"resource_type\": \"vpn_gateway_connection\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"encapsulation_mode\": \"tunnel\", \"encryption_algorithm\": \"aes128\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/r006-51eae621-dbbc-4c47-b623-b57a43c19876\", \"id\": \"r006-51eae621-dbbc-4c47-b623-b57a43c19876\", \"key_lifetime\": 3600, \"name\": \"my-ipsec-policy\", \"pfs\": \"disabled\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"ipsec_policy\", \"transform_protocol\": \"esp\"}";
    String createIpsecPolicyPath = "/ipsec_policies";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the CreateIpsecPolicyOptions model
    CreateIpsecPolicyOptions createIpsecPolicyOptionsModel = new CreateIpsecPolicyOptions.Builder()
      .authenticationAlgorithm("disabled")
      .encryptionAlgorithm("aes128")
      .pfs("disabled")
      .keyLifetime(Long.valueOf("3600"))
      .name("my-ipsec-policy")
      .resourceGroup(resourceGroupIdentityModel)
      .build();

    // Invoke createIpsecPolicy() with a valid options model and verify the result
    Response<IPsecPolicy> response = vpcService.createIpsecPolicy(createIpsecPolicyOptionsModel).execute();
    assertNotNull(response);
    IPsecPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createIpsecPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createIpsecPolicy operation with and without retries enabled
  @Test
  public void testCreateIpsecPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateIpsecPolicyWOptions();

    vpcService.disableRetries();
    testCreateIpsecPolicyWOptions();
  }

  // Test the createIpsecPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateIpsecPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createIpsecPolicy(null).execute();
  }

  // Test the deleteIpsecPolicy operation with a valid options model parameter
  @Test
  public void testDeleteIpsecPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteIpsecPolicyPath = "/ipsec_policies/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteIpsecPolicyOptions model
    DeleteIpsecPolicyOptions deleteIpsecPolicyOptionsModel = new DeleteIpsecPolicyOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteIpsecPolicy() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteIpsecPolicy(deleteIpsecPolicyOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteIpsecPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteIpsecPolicy operation with and without retries enabled
  @Test
  public void testDeleteIpsecPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteIpsecPolicyWOptions();

    vpcService.disableRetries();
    testDeleteIpsecPolicyWOptions();
  }

  // Test the deleteIpsecPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteIpsecPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteIpsecPolicy(null).execute();
  }

  // Test the getIpsecPolicy operation with a valid options model parameter
  @Test
  public void testGetIpsecPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"authentication_algorithm\": \"disabled\", \"connections\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"id\": \"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"name\": \"my-vpn-gateway-connection\", \"resource_type\": \"vpn_gateway_connection\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"encapsulation_mode\": \"tunnel\", \"encryption_algorithm\": \"aes128\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/r006-51eae621-dbbc-4c47-b623-b57a43c19876\", \"id\": \"r006-51eae621-dbbc-4c47-b623-b57a43c19876\", \"key_lifetime\": 3600, \"name\": \"my-ipsec-policy\", \"pfs\": \"disabled\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"ipsec_policy\", \"transform_protocol\": \"esp\"}";
    String getIpsecPolicyPath = "/ipsec_policies/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetIpsecPolicyOptions model
    GetIpsecPolicyOptions getIpsecPolicyOptionsModel = new GetIpsecPolicyOptions.Builder()
      .id("testString")
      .build();

    // Invoke getIpsecPolicy() with a valid options model and verify the result
    Response<IPsecPolicy> response = vpcService.getIpsecPolicy(getIpsecPolicyOptionsModel).execute();
    assertNotNull(response);
    IPsecPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getIpsecPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getIpsecPolicy operation with and without retries enabled
  @Test
  public void testGetIpsecPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetIpsecPolicyWOptions();

    vpcService.disableRetries();
    testGetIpsecPolicyWOptions();
  }

  // Test the getIpsecPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetIpsecPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getIpsecPolicy(null).execute();
  }

  // Test the updateIpsecPolicy operation with a valid options model parameter
  @Test
  public void testUpdateIpsecPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"authentication_algorithm\": \"disabled\", \"connections\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"id\": \"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"name\": \"my-vpn-gateway-connection\", \"resource_type\": \"vpn_gateway_connection\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"encapsulation_mode\": \"tunnel\", \"encryption_algorithm\": \"aes128\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/r006-51eae621-dbbc-4c47-b623-b57a43c19876\", \"id\": \"r006-51eae621-dbbc-4c47-b623-b57a43c19876\", \"key_lifetime\": 3600, \"name\": \"my-ipsec-policy\", \"pfs\": \"disabled\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"ipsec_policy\", \"transform_protocol\": \"esp\"}";
    String updateIpsecPolicyPath = "/ipsec_policies/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the IPsecPolicyPatch model
    IPsecPolicyPatch iPsecPolicyPatchModel = new IPsecPolicyPatch.Builder()
      .authenticationAlgorithm("disabled")
      .encryptionAlgorithm("aes128")
      .keyLifetime(Long.valueOf("3600"))
      .name("my-ipsec-policy")
      .pfs("disabled")
      .build();
    Map<String, Object> iPsecPolicyPatchModelAsPatch = iPsecPolicyPatchModel.asPatch();

    // Construct an instance of the UpdateIpsecPolicyOptions model
    UpdateIpsecPolicyOptions updateIpsecPolicyOptionsModel = new UpdateIpsecPolicyOptions.Builder()
      .id("testString")
      .iPsecPolicyPatch(iPsecPolicyPatchModelAsPatch)
      .build();

    // Invoke updateIpsecPolicy() with a valid options model and verify the result
    Response<IPsecPolicy> response = vpcService.updateIpsecPolicy(updateIpsecPolicyOptionsModel).execute();
    assertNotNull(response);
    IPsecPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateIpsecPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateIpsecPolicy operation with and without retries enabled
  @Test
  public void testUpdateIpsecPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateIpsecPolicyWOptions();

    vpcService.disableRetries();
    testUpdateIpsecPolicyWOptions();
  }

  // Test the updateIpsecPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateIpsecPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateIpsecPolicy(null).execute();
  }

  // Test the listIpsecPolicyConnections operation with a valid options model parameter
  @Test
  public void testListIpsecPolicyConnectionsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"connections\": [{\"admin_state_up\": true, \"authentication_mode\": \"psk\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"dead_peer_detection\": {\"action\": \"restart\", \"interval\": 30, \"timeout\": 120}, \"establish_mode\": \"bidirectional\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"id\": \"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"ike_policy\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\", \"id\": \"r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\", \"name\": \"my-ike-policy\", \"resource_type\": \"ike_policy\"}, \"ipsec_policy\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/r006-51eae621-dbbc-4c47-b623-b57a43c19876\", \"id\": \"r006-51eae621-dbbc-4c47-b623-b57a43c19876\", \"name\": \"my-ipsec-policy\", \"resource_type\": \"ipsec_policy\"}, \"mode\": \"policy\", \"name\": \"my-vpn-gateway-connection\", \"psk\": \"lkj14b1oi0alcniejkso\", \"resource_type\": \"vpn_gateway_connection\", \"status\": \"down\", \"status_reasons\": [{\"code\": \"cannot_authenticate_connection\", \"message\": \"Failed to authenticate a connection because of mismatched IKE ID and PSK.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}], \"distribute_traffic\": false, \"local\": {\"ike_identities\": [{\"type\": \"fqdn\", \"value\": \"my-service.example.com\"}]}, \"peer\": {\"ike_identity\": {\"type\": \"fqdn\", \"value\": \"my-service.example.com\"}, \"type\": \"address\", \"address\": \"192.0.2.5\"}, \"routing_protocol\": \"none\", \"tunnels\": [{\"public_ip\": {\"address\": \"192.168.3.4\"}, \"status\": \"down\", \"status_reasons\": [{\"code\": \"cannot_authenticate_connection\", \"message\": \"Failed to authenticate a connection because of mismatched IKE ID and PSK.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}]}]}], \"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listIpsecPolicyConnectionsPath = "/ipsec_policies/testString/connections";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListIpsecPolicyConnectionsOptions model
    ListIpsecPolicyConnectionsOptions listIpsecPolicyConnectionsOptionsModel = new ListIpsecPolicyConnectionsOptions.Builder()
      .id("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listIpsecPolicyConnections() with a valid options model and verify the result
    Response<IPsecPolicyConnectionCollection> response = vpcService.listIpsecPolicyConnections(listIpsecPolicyConnectionsOptionsModel).execute();
    assertNotNull(response);
    IPsecPolicyConnectionCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listIpsecPolicyConnectionsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listIpsecPolicyConnections operation with and without retries enabled
  @Test
  public void testListIpsecPolicyConnectionsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListIpsecPolicyConnectionsWOptions();

    vpcService.disableRetries();
    testListIpsecPolicyConnectionsWOptions();
  }

  // Test the listIpsecPolicyConnections operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListIpsecPolicyConnectionsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listIpsecPolicyConnections(null).execute();
  }

  // Test the listIpsecPolicyConnections operation using the IpsecPolicyConnectionsPager.getNext() method
  @Test
  public void testListIpsecPolicyConnectionsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"connections\":[{\"admin_state_up\":true,\"authentication_mode\":\"psk\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"dead_peer_detection\":{\"action\":\"restart\",\"interval\":30,\"timeout\":120},\"establish_mode\":\"bidirectional\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"id\":\"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"ike_policy\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\",\"id\":\"r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\",\"name\":\"my-ike-policy\",\"resource_type\":\"ike_policy\"},\"ipsec_policy\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/r006-51eae621-dbbc-4c47-b623-b57a43c19876\",\"id\":\"r006-51eae621-dbbc-4c47-b623-b57a43c19876\",\"name\":\"my-ipsec-policy\",\"resource_type\":\"ipsec_policy\"},\"mode\":\"policy\",\"name\":\"my-vpn-gateway-connection\",\"psk\":\"lkj14b1oi0alcniejkso\",\"resource_type\":\"vpn_gateway_connection\",\"status\":\"down\",\"status_reasons\":[{\"code\":\"cannot_authenticate_connection\",\"message\":\"Failed to authenticate a connection because of mismatched IKE ID and PSK.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}],\"distribute_traffic\":false,\"local\":{\"ike_identities\":[{\"type\":\"fqdn\",\"value\":\"my-service.example.com\"}]},\"peer\":{\"ike_identity\":{\"type\":\"fqdn\",\"value\":\"my-service.example.com\"},\"type\":\"address\",\"address\":\"192.0.2.5\"},\"routing_protocol\":\"none\",\"tunnels\":[{\"public_ip\":{\"address\":\"192.168.3.4\"},\"status\":\"down\",\"status_reasons\":[{\"code\":\"cannot_authenticate_connection\",\"message\":\"Failed to authenticate a connection because of mismatched IKE ID and PSK.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}]}]}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"connections\":[{\"admin_state_up\":true,\"authentication_mode\":\"psk\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"dead_peer_detection\":{\"action\":\"restart\",\"interval\":30,\"timeout\":120},\"establish_mode\":\"bidirectional\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"id\":\"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"ike_policy\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\",\"id\":\"r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\",\"name\":\"my-ike-policy\",\"resource_type\":\"ike_policy\"},\"ipsec_policy\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/r006-51eae621-dbbc-4c47-b623-b57a43c19876\",\"id\":\"r006-51eae621-dbbc-4c47-b623-b57a43c19876\",\"name\":\"my-ipsec-policy\",\"resource_type\":\"ipsec_policy\"},\"mode\":\"policy\",\"name\":\"my-vpn-gateway-connection\",\"psk\":\"lkj14b1oi0alcniejkso\",\"resource_type\":\"vpn_gateway_connection\",\"status\":\"down\",\"status_reasons\":[{\"code\":\"cannot_authenticate_connection\",\"message\":\"Failed to authenticate a connection because of mismatched IKE ID and PSK.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}],\"distribute_traffic\":false,\"local\":{\"ike_identities\":[{\"type\":\"fqdn\",\"value\":\"my-service.example.com\"}]},\"peer\":{\"ike_identity\":{\"type\":\"fqdn\",\"value\":\"my-service.example.com\"},\"type\":\"address\",\"address\":\"192.0.2.5\"},\"routing_protocol\":\"none\",\"tunnels\":[{\"public_ip\":{\"address\":\"192.168.3.4\"},\"status\":\"down\",\"status_reasons\":[{\"code\":\"cannot_authenticate_connection\",\"message\":\"Failed to authenticate a connection because of mismatched IKE ID and PSK.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}]}]}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListIpsecPolicyConnectionsOptions listIpsecPolicyConnectionsOptions = new ListIpsecPolicyConnectionsOptions.Builder()
      .id("testString")
      .limit(Long.valueOf("10"))
      .build();

    List<VPNGatewayConnection> allResults = new ArrayList<>();
    IpsecPolicyConnectionsPager pager = new IpsecPolicyConnectionsPager(vpcService, listIpsecPolicyConnectionsOptions);
    while (pager.hasNext()) {
      List<VPNGatewayConnection> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listIpsecPolicyConnections operation using the IpsecPolicyConnectionsPager.getAll() method
  @Test
  public void testListIpsecPolicyConnectionsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"connections\":[{\"admin_state_up\":true,\"authentication_mode\":\"psk\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"dead_peer_detection\":{\"action\":\"restart\",\"interval\":30,\"timeout\":120},\"establish_mode\":\"bidirectional\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"id\":\"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"ike_policy\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\",\"id\":\"r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\",\"name\":\"my-ike-policy\",\"resource_type\":\"ike_policy\"},\"ipsec_policy\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/r006-51eae621-dbbc-4c47-b623-b57a43c19876\",\"id\":\"r006-51eae621-dbbc-4c47-b623-b57a43c19876\",\"name\":\"my-ipsec-policy\",\"resource_type\":\"ipsec_policy\"},\"mode\":\"policy\",\"name\":\"my-vpn-gateway-connection\",\"psk\":\"lkj14b1oi0alcniejkso\",\"resource_type\":\"vpn_gateway_connection\",\"status\":\"down\",\"status_reasons\":[{\"code\":\"cannot_authenticate_connection\",\"message\":\"Failed to authenticate a connection because of mismatched IKE ID and PSK.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}],\"distribute_traffic\":false,\"local\":{\"ike_identities\":[{\"type\":\"fqdn\",\"value\":\"my-service.example.com\"}]},\"peer\":{\"ike_identity\":{\"type\":\"fqdn\",\"value\":\"my-service.example.com\"},\"type\":\"address\",\"address\":\"192.0.2.5\"},\"routing_protocol\":\"none\",\"tunnels\":[{\"public_ip\":{\"address\":\"192.168.3.4\"},\"status\":\"down\",\"status_reasons\":[{\"code\":\"cannot_authenticate_connection\",\"message\":\"Failed to authenticate a connection because of mismatched IKE ID and PSK.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}]}]}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"connections\":[{\"admin_state_up\":true,\"authentication_mode\":\"psk\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"dead_peer_detection\":{\"action\":\"restart\",\"interval\":30,\"timeout\":120},\"establish_mode\":\"bidirectional\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"id\":\"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"ike_policy\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\",\"id\":\"r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\",\"name\":\"my-ike-policy\",\"resource_type\":\"ike_policy\"},\"ipsec_policy\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/r006-51eae621-dbbc-4c47-b623-b57a43c19876\",\"id\":\"r006-51eae621-dbbc-4c47-b623-b57a43c19876\",\"name\":\"my-ipsec-policy\",\"resource_type\":\"ipsec_policy\"},\"mode\":\"policy\",\"name\":\"my-vpn-gateway-connection\",\"psk\":\"lkj14b1oi0alcniejkso\",\"resource_type\":\"vpn_gateway_connection\",\"status\":\"down\",\"status_reasons\":[{\"code\":\"cannot_authenticate_connection\",\"message\":\"Failed to authenticate a connection because of mismatched IKE ID and PSK.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}],\"distribute_traffic\":false,\"local\":{\"ike_identities\":[{\"type\":\"fqdn\",\"value\":\"my-service.example.com\"}]},\"peer\":{\"ike_identity\":{\"type\":\"fqdn\",\"value\":\"my-service.example.com\"},\"type\":\"address\",\"address\":\"192.0.2.5\"},\"routing_protocol\":\"none\",\"tunnels\":[{\"public_ip\":{\"address\":\"192.168.3.4\"},\"status\":\"down\",\"status_reasons\":[{\"code\":\"cannot_authenticate_connection\",\"message\":\"Failed to authenticate a connection because of mismatched IKE ID and PSK.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}]}]}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListIpsecPolicyConnectionsOptions listIpsecPolicyConnectionsOptions = new ListIpsecPolicyConnectionsOptions.Builder()
      .id("testString")
      .limit(Long.valueOf("10"))
      .build();

    IpsecPolicyConnectionsPager pager = new IpsecPolicyConnectionsPager(vpcService, listIpsecPolicyConnectionsOptions);
    List<VPNGatewayConnection> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listVpnGateways operation with a valid options model parameter
  @Test
  public void testListVpnGatewaysWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132, \"vpn_gateways\": [{\"connections\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"id\": \"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"name\": \"my-vpn-gateway-connection\", \"resource_type\": \"vpn_gateway_connection\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpn:0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"health_reasons\": [{\"code\": \"cannot_reserve_ip_address\", \"message\": \"IP address exhaustion (release addresses on the VPN's subnet).\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"members\": [{\"health_reasons\": [{\"code\": \"cannot_reserve_ip_address\", \"message\": \"IP address exhaustion (release addresses on the VPN's subnet).\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health\"}], \"health_state\": \"ok\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"private_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"public_ip\": {\"address\": \"192.168.3.4\"}, \"role\": \"active\"}], \"name\": \"my-vpn-gateway\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"vpn_gateway\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"mode\": \"policy\"}]}";
    String listVpnGatewaysPath = "/vpn_gateways";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListVpnGatewaysOptions model
    ListVpnGatewaysOptions listVpnGatewaysOptionsModel = new ListVpnGatewaysOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .sort("name")
      .mode("policy")
      .build();

    // Invoke listVpnGateways() with a valid options model and verify the result
    Response<VPNGatewayCollection> response = vpcService.listVpnGateways(listVpnGatewaysOptionsModel).execute();
    assertNotNull(response);
    VPNGatewayCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listVpnGatewaysPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
    assertEquals(query.get("sort"), "name");
    assertEquals(query.get("mode"), "policy");
  }

  // Test the listVpnGateways operation with and without retries enabled
  @Test
  public void testListVpnGatewaysWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListVpnGatewaysWOptions();

    vpcService.disableRetries();
    testListVpnGatewaysWOptions();
  }

  // Test the listVpnGateways operation using the VpnGatewaysPager.getNext() method
  @Test
  public void testListVpnGatewaysWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"vpn_gateways\":[{\"connections\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"id\":\"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"name\":\"my-vpn-gateway-connection\",\"resource_type\":\"vpn_gateway_connection\"}],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpn:0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"health_reasons\":[{\"code\":\"cannot_reserve_ip_address\",\"message\":\"IP address exhaustion (release addresses on the VPN's subnet).\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"id\":\"0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"members\":[{\"health_reasons\":[{\"code\":\"cannot_reserve_ip_address\",\"message\":\"IP address exhaustion (release addresses on the VPN's subnet).\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health\"}],\"health_state\":\"ok\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"private_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"public_ip\":{\"address\":\"192.168.3.4\"},\"role\":\"active\"}],\"name\":\"my-vpn-gateway\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"vpn_gateway\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"mode\":\"policy\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"vpn_gateways\":[{\"connections\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"id\":\"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"name\":\"my-vpn-gateway-connection\",\"resource_type\":\"vpn_gateway_connection\"}],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpn:0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"health_reasons\":[{\"code\":\"cannot_reserve_ip_address\",\"message\":\"IP address exhaustion (release addresses on the VPN's subnet).\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"id\":\"0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"members\":[{\"health_reasons\":[{\"code\":\"cannot_reserve_ip_address\",\"message\":\"IP address exhaustion (release addresses on the VPN's subnet).\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health\"}],\"health_state\":\"ok\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"private_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"public_ip\":{\"address\":\"192.168.3.4\"},\"role\":\"active\"}],\"name\":\"my-vpn-gateway\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"vpn_gateway\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"mode\":\"policy\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpnGatewaysOptions listVpnGatewaysOptions = new ListVpnGatewaysOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .sort("name")
      .mode("policy")
      .build();

    List<VPNGateway> allResults = new ArrayList<>();
    VpnGatewaysPager pager = new VpnGatewaysPager(vpcService, listVpnGatewaysOptions);
    while (pager.hasNext()) {
      List<VPNGateway> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listVpnGateways operation using the VpnGatewaysPager.getAll() method
  @Test
  public void testListVpnGatewaysWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"vpn_gateways\":[{\"connections\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"id\":\"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"name\":\"my-vpn-gateway-connection\",\"resource_type\":\"vpn_gateway_connection\"}],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpn:0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"health_reasons\":[{\"code\":\"cannot_reserve_ip_address\",\"message\":\"IP address exhaustion (release addresses on the VPN's subnet).\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"id\":\"0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"members\":[{\"health_reasons\":[{\"code\":\"cannot_reserve_ip_address\",\"message\":\"IP address exhaustion (release addresses on the VPN's subnet).\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health\"}],\"health_state\":\"ok\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"private_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"public_ip\":{\"address\":\"192.168.3.4\"},\"role\":\"active\"}],\"name\":\"my-vpn-gateway\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"vpn_gateway\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"mode\":\"policy\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"vpn_gateways\":[{\"connections\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"id\":\"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"name\":\"my-vpn-gateway-connection\",\"resource_type\":\"vpn_gateway_connection\"}],\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpn:0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"health_reasons\":[{\"code\":\"cannot_reserve_ip_address\",\"message\":\"IP address exhaustion (release addresses on the VPN's subnet).\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"id\":\"0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"members\":[{\"health_reasons\":[{\"code\":\"cannot_reserve_ip_address\",\"message\":\"IP address exhaustion (release addresses on the VPN's subnet).\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health\"}],\"health_state\":\"ok\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"private_ip\":{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"},\"public_ip\":{\"address\":\"192.168.3.4\"},\"role\":\"active\"}],\"name\":\"my-vpn-gateway\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"vpn_gateway\",\"subnet\":{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"mode\":\"policy\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpnGatewaysOptions listVpnGatewaysOptions = new ListVpnGatewaysOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .sort("name")
      .mode("policy")
      .build();

    VpnGatewaysPager pager = new VpnGatewaysPager(vpcService, listVpnGatewaysOptions);
    List<VPNGateway> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createVpnGateway operation with a valid options model parameter
  @Test
  public void testCreateVpnGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"connections\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"id\": \"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"name\": \"my-vpn-gateway-connection\", \"resource_type\": \"vpn_gateway_connection\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpn:0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"health_reasons\": [{\"code\": \"cannot_reserve_ip_address\", \"message\": \"IP address exhaustion (release addresses on the VPN's subnet).\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"members\": [{\"health_reasons\": [{\"code\": \"cannot_reserve_ip_address\", \"message\": \"IP address exhaustion (release addresses on the VPN's subnet).\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health\"}], \"health_state\": \"ok\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"private_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"public_ip\": {\"address\": \"192.168.3.4\"}, \"role\": \"active\"}], \"name\": \"my-vpn-gateway\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"vpn_gateway\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"mode\": \"policy\"}";
    String createVpnGatewayPath = "/vpn_gateways";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the SubnetIdentityById model
    SubnetIdentityById subnetIdentityModel = new SubnetIdentityById.Builder()
      .id("0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
      .build();

    // Construct an instance of the VPNGatewayPrototypeVPNGatewayRouteModePrototype model
    VPNGatewayPrototypeVPNGatewayRouteModePrototype vpnGatewayPrototypeModel = new VPNGatewayPrototypeVPNGatewayRouteModePrototype.Builder()
      .name("my-vpn-gateway")
      .resourceGroup(resourceGroupIdentityModel)
      .subnet(subnetIdentityModel)
      .mode("route")
      .build();

    // Construct an instance of the CreateVpnGatewayOptions model
    CreateVpnGatewayOptions createVpnGatewayOptionsModel = new CreateVpnGatewayOptions.Builder()
      .vpnGatewayPrototype(vpnGatewayPrototypeModel)
      .build();

    // Invoke createVpnGateway() with a valid options model and verify the result
    Response<VPNGateway> response = vpcService.createVpnGateway(createVpnGatewayOptionsModel).execute();
    assertNotNull(response);
    VPNGateway responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createVpnGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createVpnGateway operation with and without retries enabled
  @Test
  public void testCreateVpnGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateVpnGatewayWOptions();

    vpcService.disableRetries();
    testCreateVpnGatewayWOptions();
  }

  // Test the createVpnGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateVpnGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createVpnGateway(null).execute();
  }

  // Test the deleteVpnGateway operation with a valid options model parameter
  @Test
  public void testDeleteVpnGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteVpnGatewayPath = "/vpn_gateways/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteVpnGatewayOptions model
    DeleteVpnGatewayOptions deleteVpnGatewayOptionsModel = new DeleteVpnGatewayOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteVpnGateway() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteVpnGateway(deleteVpnGatewayOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteVpnGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteVpnGateway operation with and without retries enabled
  @Test
  public void testDeleteVpnGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteVpnGatewayWOptions();

    vpcService.disableRetries();
    testDeleteVpnGatewayWOptions();
  }

  // Test the deleteVpnGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteVpnGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteVpnGateway(null).execute();
  }

  // Test the getVpnGateway operation with a valid options model parameter
  @Test
  public void testGetVpnGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"connections\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"id\": \"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"name\": \"my-vpn-gateway-connection\", \"resource_type\": \"vpn_gateway_connection\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpn:0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"health_reasons\": [{\"code\": \"cannot_reserve_ip_address\", \"message\": \"IP address exhaustion (release addresses on the VPN's subnet).\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"members\": [{\"health_reasons\": [{\"code\": \"cannot_reserve_ip_address\", \"message\": \"IP address exhaustion (release addresses on the VPN's subnet).\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health\"}], \"health_state\": \"ok\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"private_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"public_ip\": {\"address\": \"192.168.3.4\"}, \"role\": \"active\"}], \"name\": \"my-vpn-gateway\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"vpn_gateway\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"mode\": \"policy\"}";
    String getVpnGatewayPath = "/vpn_gateways/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVpnGatewayOptions model
    GetVpnGatewayOptions getVpnGatewayOptionsModel = new GetVpnGatewayOptions.Builder()
      .id("testString")
      .build();

    // Invoke getVpnGateway() with a valid options model and verify the result
    Response<VPNGateway> response = vpcService.getVpnGateway(getVpnGatewayOptionsModel).execute();
    assertNotNull(response);
    VPNGateway responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVpnGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVpnGateway operation with and without retries enabled
  @Test
  public void testGetVpnGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVpnGatewayWOptions();

    vpcService.disableRetries();
    testGetVpnGatewayWOptions();
  }

  // Test the getVpnGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVpnGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVpnGateway(null).execute();
  }

  // Test the updateVpnGateway operation with a valid options model parameter
  @Test
  public void testUpdateVpnGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"connections\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"id\": \"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"name\": \"my-vpn-gateway-connection\", \"resource_type\": \"vpn_gateway_connection\"}], \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpn:0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"health_reasons\": [{\"code\": \"cannot_reserve_ip_address\", \"message\": \"IP address exhaustion (release addresses on the VPN's subnet).\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"id\": \"0717-ddf51bec-3424-11e8-b467-0ed5f89f718b\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"members\": [{\"health_reasons\": [{\"code\": \"cannot_reserve_ip_address\", \"message\": \"IP address exhaustion (release addresses on the VPN's subnet).\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health\"}], \"health_state\": \"ok\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"private_ip\": {\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}, \"public_ip\": {\"address\": \"192.168.3.4\"}, \"role\": \"active\"}], \"name\": \"my-vpn-gateway\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"vpn_gateway\", \"subnet\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"mode\": \"policy\"}";
    String updateVpnGatewayPath = "/vpn_gateways/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the VPNGatewayPatch model
    VPNGatewayPatch vpnGatewayPatchModel = new VPNGatewayPatch.Builder()
      .name("my-vpn-gateway-updated")
      .build();
    Map<String, Object> vpnGatewayPatchModelAsPatch = vpnGatewayPatchModel.asPatch();

    // Construct an instance of the UpdateVpnGatewayOptions model
    UpdateVpnGatewayOptions updateVpnGatewayOptionsModel = new UpdateVpnGatewayOptions.Builder()
      .id("testString")
      .vpnGatewayPatch(vpnGatewayPatchModelAsPatch)
      .build();

    // Invoke updateVpnGateway() with a valid options model and verify the result
    Response<VPNGateway> response = vpcService.updateVpnGateway(updateVpnGatewayOptionsModel).execute();
    assertNotNull(response);
    VPNGateway responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateVpnGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateVpnGateway operation with and without retries enabled
  @Test
  public void testUpdateVpnGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateVpnGatewayWOptions();

    vpcService.disableRetries();
    testUpdateVpnGatewayWOptions();
  }

  // Test the updateVpnGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateVpnGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateVpnGateway(null).execute();
  }

  // Test the listVpnGatewayConnections operation with a valid options model parameter
  @Test
  public void testListVpnGatewayConnectionsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"connections\": [{\"admin_state_up\": true, \"authentication_mode\": \"psk\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"dead_peer_detection\": {\"action\": \"restart\", \"interval\": 30, \"timeout\": 120}, \"establish_mode\": \"bidirectional\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"id\": \"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"ike_policy\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\", \"id\": \"r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\", \"name\": \"my-ike-policy\", \"resource_type\": \"ike_policy\"}, \"ipsec_policy\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/r006-51eae621-dbbc-4c47-b623-b57a43c19876\", \"id\": \"r006-51eae621-dbbc-4c47-b623-b57a43c19876\", \"name\": \"my-ipsec-policy\", \"resource_type\": \"ipsec_policy\"}, \"mode\": \"policy\", \"name\": \"my-vpn-gateway-connection\", \"psk\": \"lkj14b1oi0alcniejkso\", \"resource_type\": \"vpn_gateway_connection\", \"status\": \"down\", \"status_reasons\": [{\"code\": \"cannot_authenticate_connection\", \"message\": \"Failed to authenticate a connection because of mismatched IKE ID and PSK.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}], \"distribute_traffic\": false, \"local\": {\"ike_identities\": [{\"type\": \"fqdn\", \"value\": \"my-service.example.com\"}]}, \"peer\": {\"ike_identity\": {\"type\": \"fqdn\", \"value\": \"my-service.example.com\"}, \"type\": \"address\", \"address\": \"192.0.2.5\"}, \"routing_protocol\": \"none\", \"tunnels\": [{\"public_ip\": {\"address\": \"192.168.3.4\"}, \"status\": \"down\", \"status_reasons\": [{\"code\": \"cannot_authenticate_connection\", \"message\": \"Failed to authenticate a connection because of mismatched IKE ID and PSK.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}]}]}], \"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listVpnGatewayConnectionsPath = "/vpn_gateways/testString/connections";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListVpnGatewayConnectionsOptions model
    ListVpnGatewayConnectionsOptions listVpnGatewayConnectionsOptionsModel = new ListVpnGatewayConnectionsOptions.Builder()
      .vpnGatewayId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .status("down")
      .build();

    // Invoke listVpnGatewayConnections() with a valid options model and verify the result
    Response<VPNGatewayConnectionCollection> response = vpcService.listVpnGatewayConnections(listVpnGatewayConnectionsOptionsModel).execute();
    assertNotNull(response);
    VPNGatewayConnectionCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listVpnGatewayConnectionsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("status"), "down");
  }

  // Test the listVpnGatewayConnections operation with and without retries enabled
  @Test
  public void testListVpnGatewayConnectionsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListVpnGatewayConnectionsWOptions();

    vpcService.disableRetries();
    testListVpnGatewayConnectionsWOptions();
  }

  // Test the listVpnGatewayConnections operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListVpnGatewayConnectionsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listVpnGatewayConnections(null).execute();
  }

  // Test the listVpnGatewayConnections operation using the VpnGatewayConnectionsPager.getNext() method
  @Test
  public void testListVpnGatewayConnectionsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"connections\":[{\"admin_state_up\":true,\"authentication_mode\":\"psk\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"dead_peer_detection\":{\"action\":\"restart\",\"interval\":30,\"timeout\":120},\"establish_mode\":\"bidirectional\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"id\":\"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"ike_policy\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\",\"id\":\"r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\",\"name\":\"my-ike-policy\",\"resource_type\":\"ike_policy\"},\"ipsec_policy\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/r006-51eae621-dbbc-4c47-b623-b57a43c19876\",\"id\":\"r006-51eae621-dbbc-4c47-b623-b57a43c19876\",\"name\":\"my-ipsec-policy\",\"resource_type\":\"ipsec_policy\"},\"mode\":\"policy\",\"name\":\"my-vpn-gateway-connection\",\"psk\":\"lkj14b1oi0alcniejkso\",\"resource_type\":\"vpn_gateway_connection\",\"status\":\"down\",\"status_reasons\":[{\"code\":\"cannot_authenticate_connection\",\"message\":\"Failed to authenticate a connection because of mismatched IKE ID and PSK.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}],\"distribute_traffic\":false,\"local\":{\"ike_identities\":[{\"type\":\"fqdn\",\"value\":\"my-service.example.com\"}]},\"peer\":{\"ike_identity\":{\"type\":\"fqdn\",\"value\":\"my-service.example.com\"},\"type\":\"address\",\"address\":\"192.0.2.5\"},\"routing_protocol\":\"none\",\"tunnels\":[{\"public_ip\":{\"address\":\"192.168.3.4\"},\"status\":\"down\",\"status_reasons\":[{\"code\":\"cannot_authenticate_connection\",\"message\":\"Failed to authenticate a connection because of mismatched IKE ID and PSK.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}]}]}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"connections\":[{\"admin_state_up\":true,\"authentication_mode\":\"psk\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"dead_peer_detection\":{\"action\":\"restart\",\"interval\":30,\"timeout\":120},\"establish_mode\":\"bidirectional\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"id\":\"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"ike_policy\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\",\"id\":\"r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\",\"name\":\"my-ike-policy\",\"resource_type\":\"ike_policy\"},\"ipsec_policy\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/r006-51eae621-dbbc-4c47-b623-b57a43c19876\",\"id\":\"r006-51eae621-dbbc-4c47-b623-b57a43c19876\",\"name\":\"my-ipsec-policy\",\"resource_type\":\"ipsec_policy\"},\"mode\":\"policy\",\"name\":\"my-vpn-gateway-connection\",\"psk\":\"lkj14b1oi0alcniejkso\",\"resource_type\":\"vpn_gateway_connection\",\"status\":\"down\",\"status_reasons\":[{\"code\":\"cannot_authenticate_connection\",\"message\":\"Failed to authenticate a connection because of mismatched IKE ID and PSK.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}],\"distribute_traffic\":false,\"local\":{\"ike_identities\":[{\"type\":\"fqdn\",\"value\":\"my-service.example.com\"}]},\"peer\":{\"ike_identity\":{\"type\":\"fqdn\",\"value\":\"my-service.example.com\"},\"type\":\"address\",\"address\":\"192.0.2.5\"},\"routing_protocol\":\"none\",\"tunnels\":[{\"public_ip\":{\"address\":\"192.168.3.4\"},\"status\":\"down\",\"status_reasons\":[{\"code\":\"cannot_authenticate_connection\",\"message\":\"Failed to authenticate a connection because of mismatched IKE ID and PSK.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}]}]}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpnGatewayConnectionsOptions listVpnGatewayConnectionsOptions = new ListVpnGatewayConnectionsOptions.Builder()
      .vpnGatewayId("testString")
      .limit(Long.valueOf("10"))
      .status("down")
      .build();

    List<VPNGatewayConnection> allResults = new ArrayList<>();
    VpnGatewayConnectionsPager pager = new VpnGatewayConnectionsPager(vpcService, listVpnGatewayConnectionsOptions);
    while (pager.hasNext()) {
      List<VPNGatewayConnection> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listVpnGatewayConnections operation using the VpnGatewayConnectionsPager.getAll() method
  @Test
  public void testListVpnGatewayConnectionsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"connections\":[{\"admin_state_up\":true,\"authentication_mode\":\"psk\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"dead_peer_detection\":{\"action\":\"restart\",\"interval\":30,\"timeout\":120},\"establish_mode\":\"bidirectional\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"id\":\"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"ike_policy\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\",\"id\":\"r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\",\"name\":\"my-ike-policy\",\"resource_type\":\"ike_policy\"},\"ipsec_policy\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/r006-51eae621-dbbc-4c47-b623-b57a43c19876\",\"id\":\"r006-51eae621-dbbc-4c47-b623-b57a43c19876\",\"name\":\"my-ipsec-policy\",\"resource_type\":\"ipsec_policy\"},\"mode\":\"policy\",\"name\":\"my-vpn-gateway-connection\",\"psk\":\"lkj14b1oi0alcniejkso\",\"resource_type\":\"vpn_gateway_connection\",\"status\":\"down\",\"status_reasons\":[{\"code\":\"cannot_authenticate_connection\",\"message\":\"Failed to authenticate a connection because of mismatched IKE ID and PSK.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}],\"distribute_traffic\":false,\"local\":{\"ike_identities\":[{\"type\":\"fqdn\",\"value\":\"my-service.example.com\"}]},\"peer\":{\"ike_identity\":{\"type\":\"fqdn\",\"value\":\"my-service.example.com\"},\"type\":\"address\",\"address\":\"192.0.2.5\"},\"routing_protocol\":\"none\",\"tunnels\":[{\"public_ip\":{\"address\":\"192.168.3.4\"},\"status\":\"down\",\"status_reasons\":[{\"code\":\"cannot_authenticate_connection\",\"message\":\"Failed to authenticate a connection because of mismatched IKE ID and PSK.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}]}]}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"connections\":[{\"admin_state_up\":true,\"authentication_mode\":\"psk\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"dead_peer_detection\":{\"action\":\"restart\",\"interval\":30,\"timeout\":120},\"establish_mode\":\"bidirectional\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"id\":\"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\",\"ike_policy\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\",\"id\":\"r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\",\"name\":\"my-ike-policy\",\"resource_type\":\"ike_policy\"},\"ipsec_policy\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/r006-51eae621-dbbc-4c47-b623-b57a43c19876\",\"id\":\"r006-51eae621-dbbc-4c47-b623-b57a43c19876\",\"name\":\"my-ipsec-policy\",\"resource_type\":\"ipsec_policy\"},\"mode\":\"policy\",\"name\":\"my-vpn-gateway-connection\",\"psk\":\"lkj14b1oi0alcniejkso\",\"resource_type\":\"vpn_gateway_connection\",\"status\":\"down\",\"status_reasons\":[{\"code\":\"cannot_authenticate_connection\",\"message\":\"Failed to authenticate a connection because of mismatched IKE ID and PSK.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}],\"distribute_traffic\":false,\"local\":{\"ike_identities\":[{\"type\":\"fqdn\",\"value\":\"my-service.example.com\"}]},\"peer\":{\"ike_identity\":{\"type\":\"fqdn\",\"value\":\"my-service.example.com\"},\"type\":\"address\",\"address\":\"192.0.2.5\"},\"routing_protocol\":\"none\",\"tunnels\":[{\"public_ip\":{\"address\":\"192.168.3.4\"},\"status\":\"down\",\"status_reasons\":[{\"code\":\"cannot_authenticate_connection\",\"message\":\"Failed to authenticate a connection because of mismatched IKE ID and PSK.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}]}]}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpnGatewayConnectionsOptions listVpnGatewayConnectionsOptions = new ListVpnGatewayConnectionsOptions.Builder()
      .vpnGatewayId("testString")
      .limit(Long.valueOf("10"))
      .status("down")
      .build();

    VpnGatewayConnectionsPager pager = new VpnGatewayConnectionsPager(vpcService, listVpnGatewayConnectionsOptions);
    List<VPNGatewayConnection> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createVpnGatewayConnection operation with a valid options model parameter
  @Test
  public void testCreateVpnGatewayConnectionWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"admin_state_up\": true, \"authentication_mode\": \"psk\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"dead_peer_detection\": {\"action\": \"restart\", \"interval\": 30, \"timeout\": 120}, \"establish_mode\": \"bidirectional\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"id\": \"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"ike_policy\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\", \"id\": \"r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\", \"name\": \"my-ike-policy\", \"resource_type\": \"ike_policy\"}, \"ipsec_policy\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/r006-51eae621-dbbc-4c47-b623-b57a43c19876\", \"id\": \"r006-51eae621-dbbc-4c47-b623-b57a43c19876\", \"name\": \"my-ipsec-policy\", \"resource_type\": \"ipsec_policy\"}, \"mode\": \"policy\", \"name\": \"my-vpn-gateway-connection\", \"psk\": \"lkj14b1oi0alcniejkso\", \"resource_type\": \"vpn_gateway_connection\", \"status\": \"down\", \"status_reasons\": [{\"code\": \"cannot_authenticate_connection\", \"message\": \"Failed to authenticate a connection because of mismatched IKE ID and PSK.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}], \"distribute_traffic\": false, \"local\": {\"ike_identities\": [{\"type\": \"fqdn\", \"value\": \"my-service.example.com\"}]}, \"peer\": {\"ike_identity\": {\"type\": \"fqdn\", \"value\": \"my-service.example.com\"}, \"type\": \"address\", \"address\": \"192.0.2.5\"}, \"routing_protocol\": \"none\", \"tunnels\": [{\"public_ip\": {\"address\": \"192.168.3.4\"}, \"status\": \"down\", \"status_reasons\": [{\"code\": \"cannot_authenticate_connection\", \"message\": \"Failed to authenticate a connection because of mismatched IKE ID and PSK.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}]}]}";
    String createVpnGatewayConnectionPath = "/vpn_gateways/testString/connections";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the VPNGatewayConnectionDPDPrototype model
    VPNGatewayConnectionDPDPrototype vpnGatewayConnectionDpdPrototypeModel = new VPNGatewayConnectionDPDPrototype.Builder()
      .action("restart")
      .interval(Long.valueOf("30"))
      .timeout(Long.valueOf("120"))
      .build();

    // Construct an instance of the VPNGatewayConnectionIKEPolicyPrototypeIKEPolicyIdentityById model
    VPNGatewayConnectionIKEPolicyPrototypeIKEPolicyIdentityById vpnGatewayConnectionIkePolicyPrototypeModel = new VPNGatewayConnectionIKEPolicyPrototypeIKEPolicyIdentityById.Builder()
      .id("r006-e98f46a3-1e4e-4195-b4e5-b8155192689d")
      .build();

    // Construct an instance of the VPNGatewayConnectionIPsecPolicyPrototypeIPsecPolicyIdentityById model
    VPNGatewayConnectionIPsecPolicyPrototypeIPsecPolicyIdentityById vpnGatewayConnectionIPsecPolicyPrototypeModel = new VPNGatewayConnectionIPsecPolicyPrototypeIPsecPolicyIdentityById.Builder()
      .id("r006-51eae621-dbbc-4c47-b623-b57a43c19876")
      .build();

    // Construct an instance of the VPNGatewayConnectionIKEIdentityPrototypeVPNGatewayConnectionIKEIdentityFQDN model
    VPNGatewayConnectionIKEIdentityPrototypeVPNGatewayConnectionIKEIdentityFQDN vpnGatewayConnectionIkeIdentityPrototypeModel = new VPNGatewayConnectionIKEIdentityPrototypeVPNGatewayConnectionIKEIdentityFQDN.Builder()
      .type("fqdn")
      .value("my-service.example.com")
      .build();

    // Construct an instance of the VPNGatewayConnectionStaticRouteModeLocalPrototype model
    VPNGatewayConnectionStaticRouteModeLocalPrototype vpnGatewayConnectionStaticRouteModeLocalPrototypeModel = new VPNGatewayConnectionStaticRouteModeLocalPrototype.Builder()
      .ikeIdentities(java.util.Arrays.asList(vpnGatewayConnectionIkeIdentityPrototypeModel))
      .build();

    // Construct an instance of the VPNGatewayConnectionStaticRouteModePeerPrototypeVPNGatewayConnectionPeerByAddress model
    VPNGatewayConnectionStaticRouteModePeerPrototypeVPNGatewayConnectionPeerByAddress vpnGatewayConnectionStaticRouteModePeerPrototypeModel = new VPNGatewayConnectionStaticRouteModePeerPrototypeVPNGatewayConnectionPeerByAddress.Builder()
      .ikeIdentity(vpnGatewayConnectionIkeIdentityPrototypeModel)
      .address("192.0.2.5")
      .build();

    // Construct an instance of the VPNGatewayConnectionPrototypeVPNGatewayConnectionStaticRouteModePrototype model
    VPNGatewayConnectionPrototypeVPNGatewayConnectionStaticRouteModePrototype vpnGatewayConnectionPrototypeModel = new VPNGatewayConnectionPrototypeVPNGatewayConnectionStaticRouteModePrototype.Builder()
      .adminStateUp(true)
      .deadPeerDetection(vpnGatewayConnectionDpdPrototypeModel)
      .establishMode("bidirectional")
      .ikePolicy(vpnGatewayConnectionIkePolicyPrototypeModel)
      .ipsecPolicy(vpnGatewayConnectionIPsecPolicyPrototypeModel)
      .name("my-vpn-gateway-connection")
      .psk("lkj14b1oi0alcniejkso")
      .distributeTraffic(false)
      .local(vpnGatewayConnectionStaticRouteModeLocalPrototypeModel)
      .peer(vpnGatewayConnectionStaticRouteModePeerPrototypeModel)
      .routingProtocol("none")
      .build();

    // Construct an instance of the CreateVpnGatewayConnectionOptions model
    CreateVpnGatewayConnectionOptions createVpnGatewayConnectionOptionsModel = new CreateVpnGatewayConnectionOptions.Builder()
      .vpnGatewayId("testString")
      .vpnGatewayConnectionPrototype(vpnGatewayConnectionPrototypeModel)
      .build();

    // Invoke createVpnGatewayConnection() with a valid options model and verify the result
    Response<VPNGatewayConnection> response = vpcService.createVpnGatewayConnection(createVpnGatewayConnectionOptionsModel).execute();
    assertNotNull(response);
    VPNGatewayConnection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createVpnGatewayConnectionPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createVpnGatewayConnection operation with and without retries enabled
  @Test
  public void testCreateVpnGatewayConnectionWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateVpnGatewayConnectionWOptions();

    vpcService.disableRetries();
    testCreateVpnGatewayConnectionWOptions();
  }

  // Test the createVpnGatewayConnection operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateVpnGatewayConnectionNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createVpnGatewayConnection(null).execute();
  }

  // Test the deleteVpnGatewayConnection operation with a valid options model parameter
  @Test
  public void testDeleteVpnGatewayConnectionWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteVpnGatewayConnectionPath = "/vpn_gateways/testString/connections/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteVpnGatewayConnectionOptions model
    DeleteVpnGatewayConnectionOptions deleteVpnGatewayConnectionOptionsModel = new DeleteVpnGatewayConnectionOptions.Builder()
      .vpnGatewayId("testString")
      .id("testString")
      .build();

    // Invoke deleteVpnGatewayConnection() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteVpnGatewayConnection(deleteVpnGatewayConnectionOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteVpnGatewayConnectionPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteVpnGatewayConnection operation with and without retries enabled
  @Test
  public void testDeleteVpnGatewayConnectionWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteVpnGatewayConnectionWOptions();

    vpcService.disableRetries();
    testDeleteVpnGatewayConnectionWOptions();
  }

  // Test the deleteVpnGatewayConnection operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteVpnGatewayConnectionNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteVpnGatewayConnection(null).execute();
  }

  // Test the getVpnGatewayConnection operation with a valid options model parameter
  @Test
  public void testGetVpnGatewayConnectionWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"admin_state_up\": true, \"authentication_mode\": \"psk\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"dead_peer_detection\": {\"action\": \"restart\", \"interval\": 30, \"timeout\": 120}, \"establish_mode\": \"bidirectional\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"id\": \"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"ike_policy\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\", \"id\": \"r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\", \"name\": \"my-ike-policy\", \"resource_type\": \"ike_policy\"}, \"ipsec_policy\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/r006-51eae621-dbbc-4c47-b623-b57a43c19876\", \"id\": \"r006-51eae621-dbbc-4c47-b623-b57a43c19876\", \"name\": \"my-ipsec-policy\", \"resource_type\": \"ipsec_policy\"}, \"mode\": \"policy\", \"name\": \"my-vpn-gateway-connection\", \"psk\": \"lkj14b1oi0alcniejkso\", \"resource_type\": \"vpn_gateway_connection\", \"status\": \"down\", \"status_reasons\": [{\"code\": \"cannot_authenticate_connection\", \"message\": \"Failed to authenticate a connection because of mismatched IKE ID and PSK.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}], \"distribute_traffic\": false, \"local\": {\"ike_identities\": [{\"type\": \"fqdn\", \"value\": \"my-service.example.com\"}]}, \"peer\": {\"ike_identity\": {\"type\": \"fqdn\", \"value\": \"my-service.example.com\"}, \"type\": \"address\", \"address\": \"192.0.2.5\"}, \"routing_protocol\": \"none\", \"tunnels\": [{\"public_ip\": {\"address\": \"192.168.3.4\"}, \"status\": \"down\", \"status_reasons\": [{\"code\": \"cannot_authenticate_connection\", \"message\": \"Failed to authenticate a connection because of mismatched IKE ID and PSK.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}]}]}";
    String getVpnGatewayConnectionPath = "/vpn_gateways/testString/connections/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVpnGatewayConnectionOptions model
    GetVpnGatewayConnectionOptions getVpnGatewayConnectionOptionsModel = new GetVpnGatewayConnectionOptions.Builder()
      .vpnGatewayId("testString")
      .id("testString")
      .build();

    // Invoke getVpnGatewayConnection() with a valid options model and verify the result
    Response<VPNGatewayConnection> response = vpcService.getVpnGatewayConnection(getVpnGatewayConnectionOptionsModel).execute();
    assertNotNull(response);
    VPNGatewayConnection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVpnGatewayConnectionPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVpnGatewayConnection operation with and without retries enabled
  @Test
  public void testGetVpnGatewayConnectionWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVpnGatewayConnectionWOptions();

    vpcService.disableRetries();
    testGetVpnGatewayConnectionWOptions();
  }

  // Test the getVpnGatewayConnection operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVpnGatewayConnectionNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVpnGatewayConnection(null).execute();
  }

  // Test the updateVpnGatewayConnection operation with a valid options model parameter
  @Test
  public void testUpdateVpnGatewayConnectionWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"admin_state_up\": true, \"authentication_mode\": \"psk\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"dead_peer_detection\": {\"action\": \"restart\", \"interval\": 30, \"timeout\": 120}, \"establish_mode\": \"bidirectional\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/0717-ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"id\": \"0717-52f69dc3-6a5c-4bcf-b264-e7fae279b15c\", \"ike_policy\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ike_policies/r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\", \"id\": \"r006-e98f46a3-1e4e-4195-b4e5-b8155192689d\", \"name\": \"my-ike-policy\", \"resource_type\": \"ike_policy\"}, \"ipsec_policy\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/r006-51eae621-dbbc-4c47-b623-b57a43c19876\", \"id\": \"r006-51eae621-dbbc-4c47-b623-b57a43c19876\", \"name\": \"my-ipsec-policy\", \"resource_type\": \"ipsec_policy\"}, \"mode\": \"policy\", \"name\": \"my-vpn-gateway-connection\", \"psk\": \"lkj14b1oi0alcniejkso\", \"resource_type\": \"vpn_gateway_connection\", \"status\": \"down\", \"status_reasons\": [{\"code\": \"cannot_authenticate_connection\", \"message\": \"Failed to authenticate a connection because of mismatched IKE ID and PSK.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}], \"distribute_traffic\": false, \"local\": {\"ike_identities\": [{\"type\": \"fqdn\", \"value\": \"my-service.example.com\"}]}, \"peer\": {\"ike_identity\": {\"type\": \"fqdn\", \"value\": \"my-service.example.com\"}, \"type\": \"address\", \"address\": \"192.0.2.5\"}, \"routing_protocol\": \"none\", \"tunnels\": [{\"public_ip\": {\"address\": \"192.168.3.4\"}, \"status\": \"down\", \"status_reasons\": [{\"code\": \"cannot_authenticate_connection\", \"message\": \"Failed to authenticate a connection because of mismatched IKE ID and PSK.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-health#vpn-connection-health\"}]}]}";
    String updateVpnGatewayConnectionPath = "/vpn_gateways/testString/connections/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the VPNGatewayConnectionDPDPatch model
    VPNGatewayConnectionDPDPatch vpnGatewayConnectionDpdPatchModel = new VPNGatewayConnectionDPDPatch.Builder()
      .action("restart")
      .interval(Long.valueOf("30"))
      .timeout(Long.valueOf("120"))
      .build();

    // Construct an instance of the VPNGatewayConnectionIKEPolicyPatchIKEPolicyIdentityById model
    VPNGatewayConnectionIKEPolicyPatchIKEPolicyIdentityById vpnGatewayConnectionIkePolicyPatchModel = new VPNGatewayConnectionIKEPolicyPatchIKEPolicyIdentityById.Builder()
      .id("r006-e98f46a3-1e4e-4195-b4e5-b8155192689d")
      .build();

    // Construct an instance of the VPNGatewayConnectionIPsecPolicyPatchIPsecPolicyIdentityById model
    VPNGatewayConnectionIPsecPolicyPatchIPsecPolicyIdentityById vpnGatewayConnectionIPsecPolicyPatchModel = new VPNGatewayConnectionIPsecPolicyPatchIPsecPolicyIdentityById.Builder()
      .id("r006-51eae621-dbbc-4c47-b623-b57a43c19876")
      .build();

    // Construct an instance of the VPNGatewayConnectionPeerPatchVPNGatewayConnectionPolicyModePeerPatchVPNGatewayConnectionPolicyModePeerPatchVPNGatewayConnectionPeerAddressPatch model
    VPNGatewayConnectionPeerPatchVPNGatewayConnectionPolicyModePeerPatchVPNGatewayConnectionPolicyModePeerPatchVPNGatewayConnectionPeerAddressPatch vpnGatewayConnectionPeerPatchModel = new VPNGatewayConnectionPeerPatchVPNGatewayConnectionPolicyModePeerPatchVPNGatewayConnectionPolicyModePeerPatchVPNGatewayConnectionPeerAddressPatch.Builder()
      .address("192.0.2.5")
      .build();

    // Construct an instance of the VPNGatewayConnectionPatch model
    VPNGatewayConnectionPatch vpnGatewayConnectionPatchModel = new VPNGatewayConnectionPatch.Builder()
      .adminStateUp(true)
      .deadPeerDetection(vpnGatewayConnectionDpdPatchModel)
      .distributeTraffic(true)
      .establishMode("bidirectional")
      .ikePolicy(vpnGatewayConnectionIkePolicyPatchModel)
      .ipsecPolicy(vpnGatewayConnectionIPsecPolicyPatchModel)
      .name("my-vpn-gateway-connection")
      .peer(vpnGatewayConnectionPeerPatchModel)
      .psk("lkj14b1oi0alcniejkso")
      .build();
    Map<String, Object> vpnGatewayConnectionPatchModelAsPatch = vpnGatewayConnectionPatchModel.asPatch();

    // Construct an instance of the UpdateVpnGatewayConnectionOptions model
    UpdateVpnGatewayConnectionOptions updateVpnGatewayConnectionOptionsModel = new UpdateVpnGatewayConnectionOptions.Builder()
      .vpnGatewayId("testString")
      .id("testString")
      .vpnGatewayConnectionPatch(vpnGatewayConnectionPatchModelAsPatch)
      .build();

    // Invoke updateVpnGatewayConnection() with a valid options model and verify the result
    Response<VPNGatewayConnection> response = vpcService.updateVpnGatewayConnection(updateVpnGatewayConnectionOptionsModel).execute();
    assertNotNull(response);
    VPNGatewayConnection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateVpnGatewayConnectionPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateVpnGatewayConnection operation with and without retries enabled
  @Test
  public void testUpdateVpnGatewayConnectionWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateVpnGatewayConnectionWOptions();

    vpcService.disableRetries();
    testUpdateVpnGatewayConnectionWOptions();
  }

  // Test the updateVpnGatewayConnection operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateVpnGatewayConnectionNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateVpnGatewayConnection(null).execute();
  }

  // Test the listVpnGatewayConnectionsLocalCidrs operation with a valid options model parameter
  @Test
  public void testListVpnGatewayConnectionsLocalCidrsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"cidrs\": [\"192.0.2.0/24\"]}";
    String listVpnGatewayConnectionsLocalCidrsPath = "/vpn_gateways/testString/connections/testString/local/cidrs";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListVpnGatewayConnectionsLocalCidrsOptions model
    ListVpnGatewayConnectionsLocalCidrsOptions listVpnGatewayConnectionsLocalCidrsOptionsModel = new ListVpnGatewayConnectionsLocalCidrsOptions.Builder()
      .vpnGatewayId("testString")
      .id("testString")
      .build();

    // Invoke listVpnGatewayConnectionsLocalCidrs() with a valid options model and verify the result
    Response<VPNGatewayConnectionCIDRs> response = vpcService.listVpnGatewayConnectionsLocalCidrs(listVpnGatewayConnectionsLocalCidrsOptionsModel).execute();
    assertNotNull(response);
    VPNGatewayConnectionCIDRs responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listVpnGatewayConnectionsLocalCidrsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listVpnGatewayConnectionsLocalCidrs operation with and without retries enabled
  @Test
  public void testListVpnGatewayConnectionsLocalCidrsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListVpnGatewayConnectionsLocalCidrsWOptions();

    vpcService.disableRetries();
    testListVpnGatewayConnectionsLocalCidrsWOptions();
  }

  // Test the listVpnGatewayConnectionsLocalCidrs operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListVpnGatewayConnectionsLocalCidrsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listVpnGatewayConnectionsLocalCidrs(null).execute();
  }

  // Test the removeVpnGatewayConnectionsLocalCidr operation with a valid options model parameter
  @Test
  public void testRemoveVpnGatewayConnectionsLocalCidrWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String removeVpnGatewayConnectionsLocalCidrPath = "/vpn_gateways/testString/connections/testString/local/cidrs/192.168.1.0%2F24";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the RemoveVpnGatewayConnectionsLocalCidrOptions model
    RemoveVpnGatewayConnectionsLocalCidrOptions removeVpnGatewayConnectionsLocalCidrOptionsModel = new RemoveVpnGatewayConnectionsLocalCidrOptions.Builder()
      .vpnGatewayId("testString")
      .id("testString")
      .cidr("192.168.1.0/24")
      .build();

    // Invoke removeVpnGatewayConnectionsLocalCidr() with a valid options model and verify the result
    Response<Void> response = vpcService.removeVpnGatewayConnectionsLocalCidr(removeVpnGatewayConnectionsLocalCidrOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, removeVpnGatewayConnectionsLocalCidrPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the removeVpnGatewayConnectionsLocalCidr operation with and without retries enabled
  @Test
  public void testRemoveVpnGatewayConnectionsLocalCidrWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testRemoveVpnGatewayConnectionsLocalCidrWOptions();

    vpcService.disableRetries();
    testRemoveVpnGatewayConnectionsLocalCidrWOptions();
  }

  // Test the removeVpnGatewayConnectionsLocalCidr operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testRemoveVpnGatewayConnectionsLocalCidrNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.removeVpnGatewayConnectionsLocalCidr(null).execute();
  }

  // Test the checkVpnGatewayConnectionsLocalCidr operation with a valid options model parameter
  @Test
  public void testCheckVpnGatewayConnectionsLocalCidrWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String checkVpnGatewayConnectionsLocalCidrPath = "/vpn_gateways/testString/connections/testString/local/cidrs/192.168.1.0%2F24";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the CheckVpnGatewayConnectionsLocalCidrOptions model
    CheckVpnGatewayConnectionsLocalCidrOptions checkVpnGatewayConnectionsLocalCidrOptionsModel = new CheckVpnGatewayConnectionsLocalCidrOptions.Builder()
      .vpnGatewayId("testString")
      .id("testString")
      .cidr("192.168.1.0/24")
      .build();

    // Invoke checkVpnGatewayConnectionsLocalCidr() with a valid options model and verify the result
    Response<Void> response = vpcService.checkVpnGatewayConnectionsLocalCidr(checkVpnGatewayConnectionsLocalCidrOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, checkVpnGatewayConnectionsLocalCidrPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the checkVpnGatewayConnectionsLocalCidr operation with and without retries enabled
  @Test
  public void testCheckVpnGatewayConnectionsLocalCidrWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCheckVpnGatewayConnectionsLocalCidrWOptions();

    vpcService.disableRetries();
    testCheckVpnGatewayConnectionsLocalCidrWOptions();
  }

  // Test the checkVpnGatewayConnectionsLocalCidr operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCheckVpnGatewayConnectionsLocalCidrNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.checkVpnGatewayConnectionsLocalCidr(null).execute();
  }

  // Test the addVpnGatewayConnectionsLocalCidr operation with a valid options model parameter
  @Test
  public void testAddVpnGatewayConnectionsLocalCidrWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String addVpnGatewayConnectionsLocalCidrPath = "/vpn_gateways/testString/connections/testString/local/cidrs/192.168.1.0%2F24";
    server.enqueue(new MockResponse()
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the AddVpnGatewayConnectionsLocalCidrOptions model
    AddVpnGatewayConnectionsLocalCidrOptions addVpnGatewayConnectionsLocalCidrOptionsModel = new AddVpnGatewayConnectionsLocalCidrOptions.Builder()
      .vpnGatewayId("testString")
      .id("testString")
      .cidr("192.168.1.0/24")
      .build();

    // Invoke addVpnGatewayConnectionsLocalCidr() with a valid options model and verify the result
    Response<Void> response = vpcService.addVpnGatewayConnectionsLocalCidr(addVpnGatewayConnectionsLocalCidrOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PUT");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, addVpnGatewayConnectionsLocalCidrPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the addVpnGatewayConnectionsLocalCidr operation with and without retries enabled
  @Test
  public void testAddVpnGatewayConnectionsLocalCidrWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testAddVpnGatewayConnectionsLocalCidrWOptions();

    vpcService.disableRetries();
    testAddVpnGatewayConnectionsLocalCidrWOptions();
  }

  // Test the addVpnGatewayConnectionsLocalCidr operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testAddVpnGatewayConnectionsLocalCidrNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.addVpnGatewayConnectionsLocalCidr(null).execute();
  }

  // Test the listVpnGatewayConnectionsPeerCidrs operation with a valid options model parameter
  @Test
  public void testListVpnGatewayConnectionsPeerCidrsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"cidrs\": [\"192.0.2.0/24\"]}";
    String listVpnGatewayConnectionsPeerCidrsPath = "/vpn_gateways/testString/connections/testString/peer/cidrs";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListVpnGatewayConnectionsPeerCidrsOptions model
    ListVpnGatewayConnectionsPeerCidrsOptions listVpnGatewayConnectionsPeerCidrsOptionsModel = new ListVpnGatewayConnectionsPeerCidrsOptions.Builder()
      .vpnGatewayId("testString")
      .id("testString")
      .build();

    // Invoke listVpnGatewayConnectionsPeerCidrs() with a valid options model and verify the result
    Response<VPNGatewayConnectionCIDRs> response = vpcService.listVpnGatewayConnectionsPeerCidrs(listVpnGatewayConnectionsPeerCidrsOptionsModel).execute();
    assertNotNull(response);
    VPNGatewayConnectionCIDRs responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listVpnGatewayConnectionsPeerCidrsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listVpnGatewayConnectionsPeerCidrs operation with and without retries enabled
  @Test
  public void testListVpnGatewayConnectionsPeerCidrsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListVpnGatewayConnectionsPeerCidrsWOptions();

    vpcService.disableRetries();
    testListVpnGatewayConnectionsPeerCidrsWOptions();
  }

  // Test the listVpnGatewayConnectionsPeerCidrs operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListVpnGatewayConnectionsPeerCidrsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listVpnGatewayConnectionsPeerCidrs(null).execute();
  }

  // Test the removeVpnGatewayConnectionsPeerCidr operation with a valid options model parameter
  @Test
  public void testRemoveVpnGatewayConnectionsPeerCidrWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String removeVpnGatewayConnectionsPeerCidrPath = "/vpn_gateways/testString/connections/testString/peer/cidrs/192.168.1.0%2F24";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the RemoveVpnGatewayConnectionsPeerCidrOptions model
    RemoveVpnGatewayConnectionsPeerCidrOptions removeVpnGatewayConnectionsPeerCidrOptionsModel = new RemoveVpnGatewayConnectionsPeerCidrOptions.Builder()
      .vpnGatewayId("testString")
      .id("testString")
      .cidr("192.168.1.0/24")
      .build();

    // Invoke removeVpnGatewayConnectionsPeerCidr() with a valid options model and verify the result
    Response<Void> response = vpcService.removeVpnGatewayConnectionsPeerCidr(removeVpnGatewayConnectionsPeerCidrOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, removeVpnGatewayConnectionsPeerCidrPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the removeVpnGatewayConnectionsPeerCidr operation with and without retries enabled
  @Test
  public void testRemoveVpnGatewayConnectionsPeerCidrWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testRemoveVpnGatewayConnectionsPeerCidrWOptions();

    vpcService.disableRetries();
    testRemoveVpnGatewayConnectionsPeerCidrWOptions();
  }

  // Test the removeVpnGatewayConnectionsPeerCidr operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testRemoveVpnGatewayConnectionsPeerCidrNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.removeVpnGatewayConnectionsPeerCidr(null).execute();
  }

  // Test the checkVpnGatewayConnectionsPeerCidr operation with a valid options model parameter
  @Test
  public void testCheckVpnGatewayConnectionsPeerCidrWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String checkVpnGatewayConnectionsPeerCidrPath = "/vpn_gateways/testString/connections/testString/peer/cidrs/192.168.1.0%2F24";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the CheckVpnGatewayConnectionsPeerCidrOptions model
    CheckVpnGatewayConnectionsPeerCidrOptions checkVpnGatewayConnectionsPeerCidrOptionsModel = new CheckVpnGatewayConnectionsPeerCidrOptions.Builder()
      .vpnGatewayId("testString")
      .id("testString")
      .cidr("192.168.1.0/24")
      .build();

    // Invoke checkVpnGatewayConnectionsPeerCidr() with a valid options model and verify the result
    Response<Void> response = vpcService.checkVpnGatewayConnectionsPeerCidr(checkVpnGatewayConnectionsPeerCidrOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, checkVpnGatewayConnectionsPeerCidrPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the checkVpnGatewayConnectionsPeerCidr operation with and without retries enabled
  @Test
  public void testCheckVpnGatewayConnectionsPeerCidrWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCheckVpnGatewayConnectionsPeerCidrWOptions();

    vpcService.disableRetries();
    testCheckVpnGatewayConnectionsPeerCidrWOptions();
  }

  // Test the checkVpnGatewayConnectionsPeerCidr operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCheckVpnGatewayConnectionsPeerCidrNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.checkVpnGatewayConnectionsPeerCidr(null).execute();
  }

  // Test the addVpnGatewayConnectionsPeerCidr operation with a valid options model parameter
  @Test
  public void testAddVpnGatewayConnectionsPeerCidrWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String addVpnGatewayConnectionsPeerCidrPath = "/vpn_gateways/testString/connections/testString/peer/cidrs/192.168.1.0%2F24";
    server.enqueue(new MockResponse()
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the AddVpnGatewayConnectionsPeerCidrOptions model
    AddVpnGatewayConnectionsPeerCidrOptions addVpnGatewayConnectionsPeerCidrOptionsModel = new AddVpnGatewayConnectionsPeerCidrOptions.Builder()
      .vpnGatewayId("testString")
      .id("testString")
      .cidr("192.168.1.0/24")
      .build();

    // Invoke addVpnGatewayConnectionsPeerCidr() with a valid options model and verify the result
    Response<Void> response = vpcService.addVpnGatewayConnectionsPeerCidr(addVpnGatewayConnectionsPeerCidrOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PUT");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, addVpnGatewayConnectionsPeerCidrPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the addVpnGatewayConnectionsPeerCidr operation with and without retries enabled
  @Test
  public void testAddVpnGatewayConnectionsPeerCidrWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testAddVpnGatewayConnectionsPeerCidrWOptions();

    vpcService.disableRetries();
    testAddVpnGatewayConnectionsPeerCidrWOptions();
  }

  // Test the addVpnGatewayConnectionsPeerCidr operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testAddVpnGatewayConnectionsPeerCidrNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.addVpnGatewayConnectionsPeerCidr(null).execute();
  }

  // Test the listVpnServers operation with a valid options model parameter
  @Test
  public void testListVpnServersWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132, \"vpn_servers\": [{\"certificate\": {\"crn\": \"crn:v1:bluemix:public:secrets-manager:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5\"}, \"client_authentication\": [{\"method\": \"certificate\", \"identity_provider\": {\"provider_type\": \"iam\"}}], \"client_auto_delete\": true, \"client_auto_delete_timeout\": 1, \"client_dns_server_ips\": [{\"address\": \"192.168.3.4\"}], \"client_idle_timeout\": 600, \"client_ip_pool\": \"172.16.0.0/16\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpn-server:r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f\", \"enable_split_tunneling\": true, \"health_reasons\": [{\"code\": \"cannot_access_server_certificate\", \"message\": \"Failed to get VPN server's server certificate from Secrets Manager.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-server-health\"}], \"health_state\": \"ok\", \"hostname\": \"a8506291.us-south.vpn-server.appdomain.cloud\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f\", \"id\": \"r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-vpn-server\", \"port\": 443, \"private_ips\": [{\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}], \"protocol\": \"tcp\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"vpn_server\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}]}";
    String listVpnServersPath = "/vpn_servers";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListVpnServersOptions model
    ListVpnServersOptions listVpnServersOptionsModel = new ListVpnServersOptions.Builder()
      .name("my-name")
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .sort("name")
      .build();

    // Invoke listVpnServers() with a valid options model and verify the result
    Response<VPNServerCollection> response = vpcService.listVpnServers(listVpnServersOptionsModel).execute();
    assertNotNull(response);
    VPNServerCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listVpnServersPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("name"), "my-name");
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
    assertEquals(query.get("sort"), "name");
  }

  // Test the listVpnServers operation with and without retries enabled
  @Test
  public void testListVpnServersWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListVpnServersWOptions();

    vpcService.disableRetries();
    testListVpnServersWOptions();
  }

  // Test the listVpnServers operation using the VpnServersPager.getNext() method
  @Test
  public void testListVpnServersWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"vpn_servers\":[{\"certificate\":{\"crn\":\"crn:v1:bluemix:public:secrets-manager:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5\"},\"client_authentication\":[{\"method\":\"certificate\",\"identity_provider\":{\"provider_type\":\"iam\"}}],\"client_auto_delete\":true,\"client_auto_delete_timeout\":1,\"client_dns_server_ips\":[{\"address\":\"192.168.3.4\"}],\"client_idle_timeout\":600,\"client_ip_pool\":\"172.16.0.0/16\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpn-server:r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f\",\"enable_split_tunneling\":true,\"health_reasons\":[{\"code\":\"cannot_access_server_certificate\",\"message\":\"Failed to get VPN server's server certificate from Secrets Manager.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-server-health\"}],\"health_state\":\"ok\",\"hostname\":\"a8506291.us-south.vpn-server.appdomain.cloud\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f\",\"id\":\"r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"name\":\"my-vpn-server\",\"port\":443,\"private_ips\":[{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"}],\"protocol\":\"tcp\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"vpn_server\",\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"vpn_servers\":[{\"certificate\":{\"crn\":\"crn:v1:bluemix:public:secrets-manager:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5\"},\"client_authentication\":[{\"method\":\"certificate\",\"identity_provider\":{\"provider_type\":\"iam\"}}],\"client_auto_delete\":true,\"client_auto_delete_timeout\":1,\"client_dns_server_ips\":[{\"address\":\"192.168.3.4\"}],\"client_idle_timeout\":600,\"client_ip_pool\":\"172.16.0.0/16\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpn-server:r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f\",\"enable_split_tunneling\":true,\"health_reasons\":[{\"code\":\"cannot_access_server_certificate\",\"message\":\"Failed to get VPN server's server certificate from Secrets Manager.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-server-health\"}],\"health_state\":\"ok\",\"hostname\":\"a8506291.us-south.vpn-server.appdomain.cloud\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f\",\"id\":\"r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"name\":\"my-vpn-server\",\"port\":443,\"private_ips\":[{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"}],\"protocol\":\"tcp\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"vpn_server\",\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpnServersOptions listVpnServersOptions = new ListVpnServersOptions.Builder()
      .name("my-name")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .sort("name")
      .build();

    List<VPNServer> allResults = new ArrayList<>();
    VpnServersPager pager = new VpnServersPager(vpcService, listVpnServersOptions);
    while (pager.hasNext()) {
      List<VPNServer> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listVpnServers operation using the VpnServersPager.getAll() method
  @Test
  public void testListVpnServersWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"vpn_servers\":[{\"certificate\":{\"crn\":\"crn:v1:bluemix:public:secrets-manager:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5\"},\"client_authentication\":[{\"method\":\"certificate\",\"identity_provider\":{\"provider_type\":\"iam\"}}],\"client_auto_delete\":true,\"client_auto_delete_timeout\":1,\"client_dns_server_ips\":[{\"address\":\"192.168.3.4\"}],\"client_idle_timeout\":600,\"client_ip_pool\":\"172.16.0.0/16\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpn-server:r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f\",\"enable_split_tunneling\":true,\"health_reasons\":[{\"code\":\"cannot_access_server_certificate\",\"message\":\"Failed to get VPN server's server certificate from Secrets Manager.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-server-health\"}],\"health_state\":\"ok\",\"hostname\":\"a8506291.us-south.vpn-server.appdomain.cloud\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f\",\"id\":\"r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"name\":\"my-vpn-server\",\"port\":443,\"private_ips\":[{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"}],\"protocol\":\"tcp\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"vpn_server\",\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"vpn_servers\":[{\"certificate\":{\"crn\":\"crn:v1:bluemix:public:secrets-manager:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5\"},\"client_authentication\":[{\"method\":\"certificate\",\"identity_provider\":{\"provider_type\":\"iam\"}}],\"client_auto_delete\":true,\"client_auto_delete_timeout\":1,\"client_dns_server_ips\":[{\"address\":\"192.168.3.4\"}],\"client_idle_timeout\":600,\"client_ip_pool\":\"172.16.0.0/16\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpn-server:r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f\",\"enable_split_tunneling\":true,\"health_reasons\":[{\"code\":\"cannot_access_server_certificate\",\"message\":\"Failed to get VPN server's server certificate from Secrets Manager.\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-server-health\"}],\"health_state\":\"ok\",\"hostname\":\"a8506291.us-south.vpn-server.appdomain.cloud\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f\",\"id\":\"r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"name\":\"my-vpn-server\",\"port\":443,\"private_ips\":[{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"}],\"protocol\":\"tcp\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"vpn_server\",\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpnServersOptions listVpnServersOptions = new ListVpnServersOptions.Builder()
      .name("my-name")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .sort("name")
      .build();

    VpnServersPager pager = new VpnServersPager(vpcService, listVpnServersOptions);
    List<VPNServer> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createVpnServer operation with a valid options model parameter
  @Test
  public void testCreateVpnServerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"certificate\": {\"crn\": \"crn:v1:bluemix:public:secrets-manager:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5\"}, \"client_authentication\": [{\"method\": \"certificate\", \"identity_provider\": {\"provider_type\": \"iam\"}}], \"client_auto_delete\": true, \"client_auto_delete_timeout\": 1, \"client_dns_server_ips\": [{\"address\": \"192.168.3.4\"}], \"client_idle_timeout\": 600, \"client_ip_pool\": \"172.16.0.0/16\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpn-server:r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f\", \"enable_split_tunneling\": true, \"health_reasons\": [{\"code\": \"cannot_access_server_certificate\", \"message\": \"Failed to get VPN server's server certificate from Secrets Manager.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-server-health\"}], \"health_state\": \"ok\", \"hostname\": \"a8506291.us-south.vpn-server.appdomain.cloud\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f\", \"id\": \"r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-vpn-server\", \"port\": 443, \"private_ips\": [{\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}], \"protocol\": \"tcp\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"vpn_server\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String createVpnServerPath = "/vpn_servers";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the CertificateInstanceIdentityByCRN model
    CertificateInstanceIdentityByCRN certificateInstanceIdentityModel = new CertificateInstanceIdentityByCRN.Builder()
      .crn("crn:v1:bluemix:public:secrets-manager:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5")
      .build();

    // Construct an instance of the VPNServerAuthenticationByUsernameIdProviderByIAM model
    VPNServerAuthenticationByUsernameIdProviderByIAM vpnServerAuthenticationByUsernameIdProviderModel = new VPNServerAuthenticationByUsernameIdProviderByIAM.Builder()
      .providerType("iam")
      .build();

    // Construct an instance of the VPNServerAuthenticationPrototypeVPNServerAuthenticationByUsernamePrototype model
    VPNServerAuthenticationPrototypeVPNServerAuthenticationByUsernamePrototype vpnServerAuthenticationPrototypeModel = new VPNServerAuthenticationPrototypeVPNServerAuthenticationByUsernamePrototype.Builder()
      .method("username")
      .identityProvider(vpnServerAuthenticationByUsernameIdProviderModel)
      .build();

    // Construct an instance of the SubnetIdentityById model
    SubnetIdentityById subnetIdentityModel = new SubnetIdentityById.Builder()
      .id("0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
      .build();

    // Construct an instance of the IP model
    IP ipModel = new IP.Builder()
      .address("192.168.3.4")
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the SecurityGroupIdentityById model
    SecurityGroupIdentityById securityGroupIdentityModel = new SecurityGroupIdentityById.Builder()
      .id("r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271")
      .build();

    // Construct an instance of the CreateVpnServerOptions model
    CreateVpnServerOptions createVpnServerOptionsModel = new CreateVpnServerOptions.Builder()
      .certificate(certificateInstanceIdentityModel)
      .clientAuthentication(java.util.Arrays.asList(vpnServerAuthenticationPrototypeModel))
      .clientIpPool("172.16.0.0/16")
      .subnets(java.util.Arrays.asList(subnetIdentityModel))
      .clientDnsServerIps(java.util.Arrays.asList(ipModel))
      .clientIdleTimeout(Long.valueOf("600"))
      .enableSplitTunneling(false)
      .name("my-vpn-server")
      .port(Long.valueOf("443"))
      .protocol("udp")
      .resourceGroup(resourceGroupIdentityModel)
      .securityGroups(java.util.Arrays.asList(securityGroupIdentityModel))
      .build();

    // Invoke createVpnServer() with a valid options model and verify the result
    Response<VPNServer> response = vpcService.createVpnServer(createVpnServerOptionsModel).execute();
    assertNotNull(response);
    VPNServer responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createVpnServerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createVpnServer operation with and without retries enabled
  @Test
  public void testCreateVpnServerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateVpnServerWOptions();

    vpcService.disableRetries();
    testCreateVpnServerWOptions();
  }

  // Test the createVpnServer operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateVpnServerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createVpnServer(null).execute();
  }

  // Test the deleteVpnServer operation with a valid options model parameter
  @Test
  public void testDeleteVpnServerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteVpnServerPath = "/vpn_servers/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteVpnServerOptions model
    DeleteVpnServerOptions deleteVpnServerOptionsModel = new DeleteVpnServerOptions.Builder()
      .id("testString")
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke deleteVpnServer() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteVpnServer(deleteVpnServerOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteVpnServerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteVpnServer operation with and without retries enabled
  @Test
  public void testDeleteVpnServerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteVpnServerWOptions();

    vpcService.disableRetries();
    testDeleteVpnServerWOptions();
  }

  // Test the deleteVpnServer operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteVpnServerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteVpnServer(null).execute();
  }

  // Test the getVpnServer operation with a valid options model parameter
  @Test
  public void testGetVpnServerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"certificate\": {\"crn\": \"crn:v1:bluemix:public:secrets-manager:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5\"}, \"client_authentication\": [{\"method\": \"certificate\", \"identity_provider\": {\"provider_type\": \"iam\"}}], \"client_auto_delete\": true, \"client_auto_delete_timeout\": 1, \"client_dns_server_ips\": [{\"address\": \"192.168.3.4\"}], \"client_idle_timeout\": 600, \"client_ip_pool\": \"172.16.0.0/16\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpn-server:r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f\", \"enable_split_tunneling\": true, \"health_reasons\": [{\"code\": \"cannot_access_server_certificate\", \"message\": \"Failed to get VPN server's server certificate from Secrets Manager.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-server-health\"}], \"health_state\": \"ok\", \"hostname\": \"a8506291.us-south.vpn-server.appdomain.cloud\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f\", \"id\": \"r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-vpn-server\", \"port\": 443, \"private_ips\": [{\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}], \"protocol\": \"tcp\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"vpn_server\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String getVpnServerPath = "/vpn_servers/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVpnServerOptions model
    GetVpnServerOptions getVpnServerOptionsModel = new GetVpnServerOptions.Builder()
      .id("testString")
      .build();

    // Invoke getVpnServer() with a valid options model and verify the result
    Response<VPNServer> response = vpcService.getVpnServer(getVpnServerOptionsModel).execute();
    assertNotNull(response);
    VPNServer responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVpnServerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVpnServer operation with and without retries enabled
  @Test
  public void testGetVpnServerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVpnServerWOptions();

    vpcService.disableRetries();
    testGetVpnServerWOptions();
  }

  // Test the getVpnServer operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVpnServerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVpnServer(null).execute();
  }

  // Test the updateVpnServer operation with a valid options model parameter
  @Test
  public void testUpdateVpnServerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"certificate\": {\"crn\": \"crn:v1:bluemix:public:secrets-manager:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5\"}, \"client_authentication\": [{\"method\": \"certificate\", \"identity_provider\": {\"provider_type\": \"iam\"}}], \"client_auto_delete\": true, \"client_auto_delete_timeout\": 1, \"client_dns_server_ips\": [{\"address\": \"192.168.3.4\"}], \"client_idle_timeout\": 600, \"client_ip_pool\": \"172.16.0.0/16\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpn-server:r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f\", \"enable_split_tunneling\": true, \"health_reasons\": [{\"code\": \"cannot_access_server_certificate\", \"message\": \"Failed to get VPN server's server certificate from Secrets Manager.\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-server-health\"}], \"health_state\": \"ok\", \"hostname\": \"a8506291.us-south.vpn-server.appdomain.cloud\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f\", \"id\": \"r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-vpn-server\", \"port\": 443, \"private_ips\": [{\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}], \"protocol\": \"tcp\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"vpn_server\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String updateVpnServerPath = "/vpn_servers/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the CertificateInstanceIdentityByCRN model
    CertificateInstanceIdentityByCRN certificateInstanceIdentityModel = new CertificateInstanceIdentityByCRN.Builder()
      .crn("crn:v1:bluemix:public:secrets-manager:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5")
      .build();

    // Construct an instance of the VPNServerAuthenticationByUsernameIdProviderByIAM model
    VPNServerAuthenticationByUsernameIdProviderByIAM vpnServerAuthenticationByUsernameIdProviderModel = new VPNServerAuthenticationByUsernameIdProviderByIAM.Builder()
      .providerType("iam")
      .build();

    // Construct an instance of the VPNServerAuthenticationPrototypeVPNServerAuthenticationByUsernamePrototype model
    VPNServerAuthenticationPrototypeVPNServerAuthenticationByUsernamePrototype vpnServerAuthenticationPrototypeModel = new VPNServerAuthenticationPrototypeVPNServerAuthenticationByUsernamePrototype.Builder()
      .method("username")
      .identityProvider(vpnServerAuthenticationByUsernameIdProviderModel)
      .build();

    // Construct an instance of the IP model
    IP ipModel = new IP.Builder()
      .address("192.168.3.4")
      .build();

    // Construct an instance of the SubnetIdentityById model
    SubnetIdentityById subnetIdentityModel = new SubnetIdentityById.Builder()
      .id("0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
      .build();

    // Construct an instance of the VPNServerPatch model
    VPNServerPatch vpnServerPatchModel = new VPNServerPatch.Builder()
      .certificate(certificateInstanceIdentityModel)
      .clientAuthentication(java.util.Arrays.asList(vpnServerAuthenticationPrototypeModel))
      .clientDnsServerIps(java.util.Arrays.asList(ipModel))
      .clientIdleTimeout(Long.valueOf("600"))
      .clientIpPool("172.16.0.0/16")
      .enableSplitTunneling(true)
      .name("my-vpn-server-updated")
      .port(Long.valueOf("443"))
      .protocol("tcp")
      .subnets(java.util.Arrays.asList(subnetIdentityModel))
      .build();
    Map<String, Object> vpnServerPatchModelAsPatch = vpnServerPatchModel.asPatch();

    // Construct an instance of the UpdateVpnServerOptions model
    UpdateVpnServerOptions updateVpnServerOptionsModel = new UpdateVpnServerOptions.Builder()
      .id("testString")
      .vpnServerPatch(vpnServerPatchModelAsPatch)
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke updateVpnServer() with a valid options model and verify the result
    Response<VPNServer> response = vpcService.updateVpnServer(updateVpnServerOptionsModel).execute();
    assertNotNull(response);
    VPNServer responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateVpnServerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateVpnServer operation with and without retries enabled
  @Test
  public void testUpdateVpnServerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateVpnServerWOptions();

    vpcService.disableRetries();
    testUpdateVpnServerWOptions();
  }

  // Test the updateVpnServer operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateVpnServerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateVpnServer(null).execute();
  }

  // Test the getVpnServerClientConfiguration operation with a valid options model parameter
  @Test
  public void testGetVpnServerClientConfigurationWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "\"client\nproto udp\nremote a8506291.us-south.vpn-server.appdomain.cloud\nport 443\n\ndev tun\nnobind\n<ca>\n-----BEGIN CERTIFICATE-----\nxxxxxx\n-----END CERTIFICATE-----\n</ca>\"";
    String getVpnServerClientConfigurationPath = "/vpn_servers/testString/client_configuration";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "text/plain")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVpnServerClientConfigurationOptions model
    GetVpnServerClientConfigurationOptions getVpnServerClientConfigurationOptionsModel = new GetVpnServerClientConfigurationOptions.Builder()
      .id("testString")
      .build();

    // Invoke getVpnServerClientConfiguration() with a valid options model and verify the result
    Response<String> response = vpcService.getVpnServerClientConfiguration(getVpnServerClientConfigurationOptionsModel).execute();
    assertNotNull(response);
    String responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVpnServerClientConfigurationPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVpnServerClientConfiguration operation with and without retries enabled
  @Test
  public void testGetVpnServerClientConfigurationWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVpnServerClientConfigurationWOptions();

    vpcService.disableRetries();
    testGetVpnServerClientConfigurationWOptions();
  }

  // Test the getVpnServerClientConfiguration operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVpnServerClientConfigurationNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVpnServerClientConfiguration(null).execute();
  }

  // Test the listVpnServerClients operation with a valid options model parameter
  @Test
  public void testListVpnServerClientsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"clients\": [{\"client_ip\": {\"address\": \"192.168.3.4\"}, \"common_name\": \"commonName\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"disconnected_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f/clients/r006-b37832e2-7abe-4b20-a292-c70b007569c6\", \"id\": \"r006-b37832e2-7abe-4b20-a292-c70b007569c6\", \"remote_ip\": {\"address\": \"192.168.3.4\"}, \"remote_port\": 22, \"resource_type\": \"vpn_server_client\", \"status\": \"connected\", \"username\": \"username\"}], \"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listVpnServerClientsPath = "/vpn_servers/testString/clients";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListVpnServerClientsOptions model
    ListVpnServerClientsOptions listVpnServerClientsOptionsModel = new ListVpnServerClientsOptions.Builder()
      .vpnServerId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .sort("created_at")
      .build();

    // Invoke listVpnServerClients() with a valid options model and verify the result
    Response<VPNServerClientCollection> response = vpcService.listVpnServerClients(listVpnServerClientsOptionsModel).execute();
    assertNotNull(response);
    VPNServerClientCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listVpnServerClientsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("sort"), "created_at");
  }

  // Test the listVpnServerClients operation with and without retries enabled
  @Test
  public void testListVpnServerClientsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListVpnServerClientsWOptions();

    vpcService.disableRetries();
    testListVpnServerClientsWOptions();
  }

  // Test the listVpnServerClients operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListVpnServerClientsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listVpnServerClients(null).execute();
  }

  // Test the listVpnServerClients operation using the VpnServerClientsPager.getNext() method
  @Test
  public void testListVpnServerClientsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"clients\":[{\"client_ip\":{\"address\":\"192.168.3.4\"},\"common_name\":\"commonName\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"disconnected_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f/clients/r006-b37832e2-7abe-4b20-a292-c70b007569c6\",\"id\":\"r006-b37832e2-7abe-4b20-a292-c70b007569c6\",\"remote_ip\":{\"address\":\"192.168.3.4\"},\"remote_port\":22,\"resource_type\":\"vpn_server_client\",\"status\":\"connected\",\"username\":\"username\"}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"clients\":[{\"client_ip\":{\"address\":\"192.168.3.4\"},\"common_name\":\"commonName\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"disconnected_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f/clients/r006-b37832e2-7abe-4b20-a292-c70b007569c6\",\"id\":\"r006-b37832e2-7abe-4b20-a292-c70b007569c6\",\"remote_ip\":{\"address\":\"192.168.3.4\"},\"remote_port\":22,\"resource_type\":\"vpn_server_client\",\"status\":\"connected\",\"username\":\"username\"}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpnServerClientsOptions listVpnServerClientsOptions = new ListVpnServerClientsOptions.Builder()
      .vpnServerId("testString")
      .limit(Long.valueOf("10"))
      .sort("created_at")
      .build();

    List<VPNServerClient> allResults = new ArrayList<>();
    VpnServerClientsPager pager = new VpnServerClientsPager(vpcService, listVpnServerClientsOptions);
    while (pager.hasNext()) {
      List<VPNServerClient> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listVpnServerClients operation using the VpnServerClientsPager.getAll() method
  @Test
  public void testListVpnServerClientsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"clients\":[{\"client_ip\":{\"address\":\"192.168.3.4\"},\"common_name\":\"commonName\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"disconnected_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f/clients/r006-b37832e2-7abe-4b20-a292-c70b007569c6\",\"id\":\"r006-b37832e2-7abe-4b20-a292-c70b007569c6\",\"remote_ip\":{\"address\":\"192.168.3.4\"},\"remote_port\":22,\"resource_type\":\"vpn_server_client\",\"status\":\"connected\",\"username\":\"username\"}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"clients\":[{\"client_ip\":{\"address\":\"192.168.3.4\"},\"common_name\":\"commonName\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"disconnected_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f/clients/r006-b37832e2-7abe-4b20-a292-c70b007569c6\",\"id\":\"r006-b37832e2-7abe-4b20-a292-c70b007569c6\",\"remote_ip\":{\"address\":\"192.168.3.4\"},\"remote_port\":22,\"resource_type\":\"vpn_server_client\",\"status\":\"connected\",\"username\":\"username\"}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpnServerClientsOptions listVpnServerClientsOptions = new ListVpnServerClientsOptions.Builder()
      .vpnServerId("testString")
      .limit(Long.valueOf("10"))
      .sort("created_at")
      .build();

    VpnServerClientsPager pager = new VpnServerClientsPager(vpcService, listVpnServerClientsOptions);
    List<VPNServerClient> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the deleteVpnServerClient operation with a valid options model parameter
  @Test
  public void testDeleteVpnServerClientWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteVpnServerClientPath = "/vpn_servers/testString/clients/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteVpnServerClientOptions model
    DeleteVpnServerClientOptions deleteVpnServerClientOptionsModel = new DeleteVpnServerClientOptions.Builder()
      .vpnServerId("testString")
      .id("testString")
      .build();

    // Invoke deleteVpnServerClient() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteVpnServerClient(deleteVpnServerClientOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteVpnServerClientPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteVpnServerClient operation with and without retries enabled
  @Test
  public void testDeleteVpnServerClientWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteVpnServerClientWOptions();

    vpcService.disableRetries();
    testDeleteVpnServerClientWOptions();
  }

  // Test the deleteVpnServerClient operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteVpnServerClientNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteVpnServerClient(null).execute();
  }

  // Test the getVpnServerClient operation with a valid options model parameter
  @Test
  public void testGetVpnServerClientWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"client_ip\": {\"address\": \"192.168.3.4\"}, \"common_name\": \"commonName\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"disconnected_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f/clients/r006-b37832e2-7abe-4b20-a292-c70b007569c6\", \"id\": \"r006-b37832e2-7abe-4b20-a292-c70b007569c6\", \"remote_ip\": {\"address\": \"192.168.3.4\"}, \"remote_port\": 22, \"resource_type\": \"vpn_server_client\", \"status\": \"connected\", \"username\": \"username\"}";
    String getVpnServerClientPath = "/vpn_servers/testString/clients/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVpnServerClientOptions model
    GetVpnServerClientOptions getVpnServerClientOptionsModel = new GetVpnServerClientOptions.Builder()
      .vpnServerId("testString")
      .id("testString")
      .build();

    // Invoke getVpnServerClient() with a valid options model and verify the result
    Response<VPNServerClient> response = vpcService.getVpnServerClient(getVpnServerClientOptionsModel).execute();
    assertNotNull(response);
    VPNServerClient responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVpnServerClientPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVpnServerClient operation with and without retries enabled
  @Test
  public void testGetVpnServerClientWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVpnServerClientWOptions();

    vpcService.disableRetries();
    testGetVpnServerClientWOptions();
  }

  // Test the getVpnServerClient operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVpnServerClientNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVpnServerClient(null).execute();
  }

  // Test the disconnectVpnClient operation with a valid options model parameter
  @Test
  public void testDisconnectVpnClientWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String disconnectVpnClientPath = "/vpn_servers/testString/clients/testString/disconnect";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DisconnectVpnClientOptions model
    DisconnectVpnClientOptions disconnectVpnClientOptionsModel = new DisconnectVpnClientOptions.Builder()
      .vpnServerId("testString")
      .id("testString")
      .build();

    // Invoke disconnectVpnClient() with a valid options model and verify the result
    Response<Void> response = vpcService.disconnectVpnClient(disconnectVpnClientOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, disconnectVpnClientPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the disconnectVpnClient operation with and without retries enabled
  @Test
  public void testDisconnectVpnClientWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDisconnectVpnClientWOptions();

    vpcService.disableRetries();
    testDisconnectVpnClientWOptions();
  }

  // Test the disconnectVpnClient operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDisconnectVpnClientNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.disconnectVpnClient(null).execute();
  }

  // Test the listVpnServerRoutes operation with a valid options model parameter
  @Test
  public void testListVpnServerRoutesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"routes\": [{\"action\": \"deliver\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"destination\": \"192.168.3.0/24\", \"health_reasons\": [{\"code\": \"internal_error\", \"message\": \"Internal error (contact IBM support).\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-server-route-health\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f/routes/r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"id\": \"r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-vpn-route-1\", \"resource_type\": \"vpn_server_route\"}], \"total_count\": 132}";
    String listVpnServerRoutesPath = "/vpn_servers/testString/routes";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListVpnServerRoutesOptions model
    ListVpnServerRoutesOptions listVpnServerRoutesOptionsModel = new ListVpnServerRoutesOptions.Builder()
      .vpnServerId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .sort("name")
      .build();

    // Invoke listVpnServerRoutes() with a valid options model and verify the result
    Response<VPNServerRouteCollection> response = vpcService.listVpnServerRoutes(listVpnServerRoutesOptionsModel).execute();
    assertNotNull(response);
    VPNServerRouteCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listVpnServerRoutesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("sort"), "name");
  }

  // Test the listVpnServerRoutes operation with and without retries enabled
  @Test
  public void testListVpnServerRoutesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListVpnServerRoutesWOptions();

    vpcService.disableRetries();
    testListVpnServerRoutesWOptions();
  }

  // Test the listVpnServerRoutes operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListVpnServerRoutesNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listVpnServerRoutes(null).execute();
  }

  // Test the listVpnServerRoutes operation using the VpnServerRoutesPager.getNext() method
  @Test
  public void testListVpnServerRoutesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"routes\":[{\"action\":\"deliver\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"destination\":\"192.168.3.0/24\",\"health_reasons\":[{\"code\":\"internal_error\",\"message\":\"Internal error (contact IBM support).\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-server-route-health\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f/routes/r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"id\":\"r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"name\":\"my-vpn-route-1\",\"resource_type\":\"vpn_server_route\"}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"routes\":[{\"action\":\"deliver\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"destination\":\"192.168.3.0/24\",\"health_reasons\":[{\"code\":\"internal_error\",\"message\":\"Internal error (contact IBM support).\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-server-route-health\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f/routes/r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"id\":\"r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"name\":\"my-vpn-route-1\",\"resource_type\":\"vpn_server_route\"}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpnServerRoutesOptions listVpnServerRoutesOptions = new ListVpnServerRoutesOptions.Builder()
      .vpnServerId("testString")
      .limit(Long.valueOf("10"))
      .sort("name")
      .build();

    List<VPNServerRoute> allResults = new ArrayList<>();
    VpnServerRoutesPager pager = new VpnServerRoutesPager(vpcService, listVpnServerRoutesOptions);
    while (pager.hasNext()) {
      List<VPNServerRoute> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listVpnServerRoutes operation using the VpnServerRoutesPager.getAll() method
  @Test
  public void testListVpnServerRoutesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"routes\":[{\"action\":\"deliver\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"destination\":\"192.168.3.0/24\",\"health_reasons\":[{\"code\":\"internal_error\",\"message\":\"Internal error (contact IBM support).\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-server-route-health\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f/routes/r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"id\":\"r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"name\":\"my-vpn-route-1\",\"resource_type\":\"vpn_server_route\"}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"routes\":[{\"action\":\"deliver\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"destination\":\"192.168.3.0/24\",\"health_reasons\":[{\"code\":\"internal_error\",\"message\":\"Internal error (contact IBM support).\",\"more_info\":\"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-server-route-health\"}],\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f/routes/r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"id\":\"r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\",\"lifecycle_reasons\":[{\"code\":\"resource_suspended_by_provider\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"name\":\"my-vpn-route-1\",\"resource_type\":\"vpn_server_route\"}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListVpnServerRoutesOptions listVpnServerRoutesOptions = new ListVpnServerRoutesOptions.Builder()
      .vpnServerId("testString")
      .limit(Long.valueOf("10"))
      .sort("name")
      .build();

    VpnServerRoutesPager pager = new VpnServerRoutesPager(vpcService, listVpnServerRoutesOptions);
    List<VPNServerRoute> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createVpnServerRoute operation with a valid options model parameter
  @Test
  public void testCreateVpnServerRouteWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"action\": \"deliver\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"destination\": \"192.168.3.0/24\", \"health_reasons\": [{\"code\": \"internal_error\", \"message\": \"Internal error (contact IBM support).\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-server-route-health\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f/routes/r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"id\": \"r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-vpn-route-1\", \"resource_type\": \"vpn_server_route\"}";
    String createVpnServerRoutePath = "/vpn_servers/testString/routes";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the CreateVpnServerRouteOptions model
    CreateVpnServerRouteOptions createVpnServerRouteOptionsModel = new CreateVpnServerRouteOptions.Builder()
      .vpnServerId("testString")
      .destination("172.16.0.0/16")
      .action("deliver")
      .name("my-vpn-route-2")
      .build();

    // Invoke createVpnServerRoute() with a valid options model and verify the result
    Response<VPNServerRoute> response = vpcService.createVpnServerRoute(createVpnServerRouteOptionsModel).execute();
    assertNotNull(response);
    VPNServerRoute responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createVpnServerRoutePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createVpnServerRoute operation with and without retries enabled
  @Test
  public void testCreateVpnServerRouteWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateVpnServerRouteWOptions();

    vpcService.disableRetries();
    testCreateVpnServerRouteWOptions();
  }

  // Test the createVpnServerRoute operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateVpnServerRouteNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createVpnServerRoute(null).execute();
  }

  // Test the deleteVpnServerRoute operation with a valid options model parameter
  @Test
  public void testDeleteVpnServerRouteWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteVpnServerRoutePath = "/vpn_servers/testString/routes/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteVpnServerRouteOptions model
    DeleteVpnServerRouteOptions deleteVpnServerRouteOptionsModel = new DeleteVpnServerRouteOptions.Builder()
      .vpnServerId("testString")
      .id("testString")
      .build();

    // Invoke deleteVpnServerRoute() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteVpnServerRoute(deleteVpnServerRouteOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteVpnServerRoutePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteVpnServerRoute operation with and without retries enabled
  @Test
  public void testDeleteVpnServerRouteWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteVpnServerRouteWOptions();

    vpcService.disableRetries();
    testDeleteVpnServerRouteWOptions();
  }

  // Test the deleteVpnServerRoute operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteVpnServerRouteNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteVpnServerRoute(null).execute();
  }

  // Test the getVpnServerRoute operation with a valid options model parameter
  @Test
  public void testGetVpnServerRouteWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"action\": \"deliver\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"destination\": \"192.168.3.0/24\", \"health_reasons\": [{\"code\": \"internal_error\", \"message\": \"Internal error (contact IBM support).\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-server-route-health\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f/routes/r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"id\": \"r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-vpn-route-1\", \"resource_type\": \"vpn_server_route\"}";
    String getVpnServerRoutePath = "/vpn_servers/testString/routes/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetVpnServerRouteOptions model
    GetVpnServerRouteOptions getVpnServerRouteOptionsModel = new GetVpnServerRouteOptions.Builder()
      .vpnServerId("testString")
      .id("testString")
      .build();

    // Invoke getVpnServerRoute() with a valid options model and verify the result
    Response<VPNServerRoute> response = vpcService.getVpnServerRoute(getVpnServerRouteOptionsModel).execute();
    assertNotNull(response);
    VPNServerRoute responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getVpnServerRoutePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getVpnServerRoute operation with and without retries enabled
  @Test
  public void testGetVpnServerRouteWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetVpnServerRouteWOptions();

    vpcService.disableRetries();
    testGetVpnServerRouteWOptions();
  }

  // Test the getVpnServerRoute operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetVpnServerRouteNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getVpnServerRoute(null).execute();
  }

  // Test the updateVpnServerRoute operation with a valid options model parameter
  @Test
  public void testUpdateVpnServerRouteWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"action\": \"deliver\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"destination\": \"192.168.3.0/24\", \"health_reasons\": [{\"code\": \"internal_error\", \"message\": \"Internal error (contact IBM support).\", \"more_info\": \"https://cloud.ibm.com/docs/vpc?topic=vpc-vpn-server-route-health\"}], \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpn_servers/r006-4ec65fe4-e68f-44ff-bc94-c9caf6123b5f/routes/r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"id\": \"r006-1a15dca5-7e33-45e1-b7c5-bc690e569531\", \"lifecycle_reasons\": [{\"code\": \"resource_suspended_by_provider\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-vpn-route-1\", \"resource_type\": \"vpn_server_route\"}";
    String updateVpnServerRoutePath = "/vpn_servers/testString/routes/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the VPNServerRoutePatch model
    VPNServerRoutePatch vpnServerRoutePatchModel = new VPNServerRoutePatch.Builder()
      .name("my-vpn-server-route-updated")
      .build();
    Map<String, Object> vpnServerRoutePatchModelAsPatch = vpnServerRoutePatchModel.asPatch();

    // Construct an instance of the UpdateVpnServerRouteOptions model
    UpdateVpnServerRouteOptions updateVpnServerRouteOptionsModel = new UpdateVpnServerRouteOptions.Builder()
      .vpnServerId("testString")
      .id("testString")
      .vpnServerRoutePatch(vpnServerRoutePatchModelAsPatch)
      .build();

    // Invoke updateVpnServerRoute() with a valid options model and verify the result
    Response<VPNServerRoute> response = vpcService.updateVpnServerRoute(updateVpnServerRouteOptionsModel).execute();
    assertNotNull(response);
    VPNServerRoute responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateVpnServerRoutePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateVpnServerRoute operation with and without retries enabled
  @Test
  public void testUpdateVpnServerRouteWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateVpnServerRouteWOptions();

    vpcService.disableRetries();
    testUpdateVpnServerRouteWOptions();
  }

  // Test the updateVpnServerRoute operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateVpnServerRouteNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateVpnServerRoute(null).execute();
  }

  // Test the listLoadBalancerProfiles operation with a valid options model parameter
  @Test
  public void testListLoadBalancerProfilesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"profiles\": [{\"access_modes\": {\"type\": \"enum\", \"values\": [\"private\"]}, \"availability\": {\"type\": \"fixed\", \"value\": \"region\"}, \"failsafe_policy_actions\": {\"default\": \"fail\", \"type\": \"enum\", \"values\": [\"forward\"]}, \"family\": \"application\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\", \"instance_groups_supported\": {\"type\": \"fixed\", \"value\": true}, \"logging_supported\": {\"type\": \"fixed\", \"value\": [\"datapath\"]}, \"name\": \"network-fixed\", \"route_mode_supported\": {\"type\": \"fixed\", \"value\": true}, \"security_groups_supported\": {\"type\": \"fixed\", \"value\": true}, \"source_ip_session_persistence_supported\": {\"type\": \"fixed\", \"value\": true}, \"targetable_load_balancer_profiles\": [{\"family\": \"application\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\", \"name\": \"network-fixed\"}], \"udp_supported\": {\"type\": \"fixed\", \"value\": true}}], \"total_count\": 132}";
    String listLoadBalancerProfilesPath = "/load_balancer/profiles";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListLoadBalancerProfilesOptions model
    ListLoadBalancerProfilesOptions listLoadBalancerProfilesOptionsModel = new ListLoadBalancerProfilesOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listLoadBalancerProfiles() with a valid options model and verify the result
    Response<LoadBalancerProfileCollection> response = vpcService.listLoadBalancerProfiles(listLoadBalancerProfilesOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerProfileCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listLoadBalancerProfilesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listLoadBalancerProfiles operation with and without retries enabled
  @Test
  public void testListLoadBalancerProfilesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListLoadBalancerProfilesWOptions();

    vpcService.disableRetries();
    testListLoadBalancerProfilesWOptions();
  }

  // Test the listLoadBalancerProfiles operation using the LoadBalancerProfilesPager.getNext() method
  @Test
  public void testListLoadBalancerProfilesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"profiles\":[{\"access_modes\":{\"type\":\"enum\",\"values\":[\"private\"]},\"availability\":{\"type\":\"fixed\",\"value\":\"region\"},\"failsafe_policy_actions\":{\"default\":\"fail\",\"type\":\"enum\",\"values\":[\"forward\"]},\"family\":\"application\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\",\"instance_groups_supported\":{\"type\":\"fixed\",\"value\":true},\"logging_supported\":{\"type\":\"fixed\",\"value\":[\"datapath\"]},\"name\":\"network-fixed\",\"route_mode_supported\":{\"type\":\"fixed\",\"value\":true},\"security_groups_supported\":{\"type\":\"fixed\",\"value\":true},\"source_ip_session_persistence_supported\":{\"type\":\"fixed\",\"value\":true},\"targetable_load_balancer_profiles\":[{\"family\":\"application\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\",\"name\":\"network-fixed\"}],\"udp_supported\":{\"type\":\"fixed\",\"value\":true}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"profiles\":[{\"access_modes\":{\"type\":\"enum\",\"values\":[\"private\"]},\"availability\":{\"type\":\"fixed\",\"value\":\"region\"},\"failsafe_policy_actions\":{\"default\":\"fail\",\"type\":\"enum\",\"values\":[\"forward\"]},\"family\":\"application\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\",\"instance_groups_supported\":{\"type\":\"fixed\",\"value\":true},\"logging_supported\":{\"type\":\"fixed\",\"value\":[\"datapath\"]},\"name\":\"network-fixed\",\"route_mode_supported\":{\"type\":\"fixed\",\"value\":true},\"security_groups_supported\":{\"type\":\"fixed\",\"value\":true},\"source_ip_session_persistence_supported\":{\"type\":\"fixed\",\"value\":true},\"targetable_load_balancer_profiles\":[{\"family\":\"application\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\",\"name\":\"network-fixed\"}],\"udp_supported\":{\"type\":\"fixed\",\"value\":true}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListLoadBalancerProfilesOptions listLoadBalancerProfilesOptions = new ListLoadBalancerProfilesOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    List<LoadBalancerProfile> allResults = new ArrayList<>();
    LoadBalancerProfilesPager pager = new LoadBalancerProfilesPager(vpcService, listLoadBalancerProfilesOptions);
    while (pager.hasNext()) {
      List<LoadBalancerProfile> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listLoadBalancerProfiles operation using the LoadBalancerProfilesPager.getAll() method
  @Test
  public void testListLoadBalancerProfilesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"profiles\":[{\"access_modes\":{\"type\":\"enum\",\"values\":[\"private\"]},\"availability\":{\"type\":\"fixed\",\"value\":\"region\"},\"failsafe_policy_actions\":{\"default\":\"fail\",\"type\":\"enum\",\"values\":[\"forward\"]},\"family\":\"application\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\",\"instance_groups_supported\":{\"type\":\"fixed\",\"value\":true},\"logging_supported\":{\"type\":\"fixed\",\"value\":[\"datapath\"]},\"name\":\"network-fixed\",\"route_mode_supported\":{\"type\":\"fixed\",\"value\":true},\"security_groups_supported\":{\"type\":\"fixed\",\"value\":true},\"source_ip_session_persistence_supported\":{\"type\":\"fixed\",\"value\":true},\"targetable_load_balancer_profiles\":[{\"family\":\"application\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\",\"name\":\"network-fixed\"}],\"udp_supported\":{\"type\":\"fixed\",\"value\":true}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"profiles\":[{\"access_modes\":{\"type\":\"enum\",\"values\":[\"private\"]},\"availability\":{\"type\":\"fixed\",\"value\":\"region\"},\"failsafe_policy_actions\":{\"default\":\"fail\",\"type\":\"enum\",\"values\":[\"forward\"]},\"family\":\"application\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\",\"instance_groups_supported\":{\"type\":\"fixed\",\"value\":true},\"logging_supported\":{\"type\":\"fixed\",\"value\":[\"datapath\"]},\"name\":\"network-fixed\",\"route_mode_supported\":{\"type\":\"fixed\",\"value\":true},\"security_groups_supported\":{\"type\":\"fixed\",\"value\":true},\"source_ip_session_persistence_supported\":{\"type\":\"fixed\",\"value\":true},\"targetable_load_balancer_profiles\":[{\"family\":\"application\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\",\"name\":\"network-fixed\"}],\"udp_supported\":{\"type\":\"fixed\",\"value\":true}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListLoadBalancerProfilesOptions listLoadBalancerProfilesOptions = new ListLoadBalancerProfilesOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    LoadBalancerProfilesPager pager = new LoadBalancerProfilesPager(vpcService, listLoadBalancerProfilesOptions);
    List<LoadBalancerProfile> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the getLoadBalancerProfile operation with a valid options model parameter
  @Test
  public void testGetLoadBalancerProfileWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"access_modes\": {\"type\": \"enum\", \"values\": [\"private\"]}, \"availability\": {\"type\": \"fixed\", \"value\": \"region\"}, \"failsafe_policy_actions\": {\"default\": \"fail\", \"type\": \"enum\", \"values\": [\"forward\"]}, \"family\": \"application\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\", \"instance_groups_supported\": {\"type\": \"fixed\", \"value\": true}, \"logging_supported\": {\"type\": \"fixed\", \"value\": [\"datapath\"]}, \"name\": \"network-fixed\", \"route_mode_supported\": {\"type\": \"fixed\", \"value\": true}, \"security_groups_supported\": {\"type\": \"fixed\", \"value\": true}, \"source_ip_session_persistence_supported\": {\"type\": \"fixed\", \"value\": true}, \"targetable_load_balancer_profiles\": [{\"family\": \"application\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\", \"name\": \"network-fixed\"}], \"udp_supported\": {\"type\": \"fixed\", \"value\": true}}";
    String getLoadBalancerProfilePath = "/load_balancer/profiles/network-fixed";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetLoadBalancerProfileOptions model
    GetLoadBalancerProfileOptions getLoadBalancerProfileOptionsModel = new GetLoadBalancerProfileOptions.Builder()
      .name("network-fixed")
      .build();

    // Invoke getLoadBalancerProfile() with a valid options model and verify the result
    Response<LoadBalancerProfile> response = vpcService.getLoadBalancerProfile(getLoadBalancerProfileOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerProfile responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getLoadBalancerProfilePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getLoadBalancerProfile operation with and without retries enabled
  @Test
  public void testGetLoadBalancerProfileWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetLoadBalancerProfileWOptions();

    vpcService.disableRetries();
    testGetLoadBalancerProfileWOptions();
  }

  // Test the getLoadBalancerProfile operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetLoadBalancerProfileNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getLoadBalancerProfile(null).execute();
  }

  // Test the listLoadBalancers operation with a valid options model parameter
  @Test
  public void testListLoadBalancersWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"load_balancers\": [{\"access_mode\": \"private\", \"attached_load_balancer_pool_members\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004/members/r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\", \"id\": \"r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\"}], \"availability\": \"region\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::load-balancer:r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"dns\": {\"instance\": {\"crn\": \"crn:v1:bluemix:public:dns-svcs:global:a/bb1b52262f7441a586f49068482f1e60:f761b566-030a-4696-8649-cc9d09889e88::\"}, \"zone\": {\"id\": \"d66662cc-aa23-4fe1-9987-858487a61f45\"}}, \"failsafe_policy_actions\": [\"forward\"], \"hostname\": \"6b88d615-us-south.lb.appdomain.cloud\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"id\": \"r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"instance_groups_supported\": true, \"is_private_path\": true, \"is_public\": true, \"listeners\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091\", \"id\": \"r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091\"}], \"logging\": {\"datapath\": {\"active\": true}}, \"name\": \"my-load-balancer\", \"operating_status\": \"offline\", \"pools\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}], \"private_ips\": [{\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}], \"profile\": {\"family\": \"application\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\", \"name\": \"network-fixed\"}, \"provisioning_status\": \"active\", \"public_ips\": [{\"address\": \"192.168.3.4\"}], \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"load_balancer\", \"route_mode\": true, \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"security_groups_supported\": false, \"source_ip_session_persistence_supported\": true, \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"udp_supported\": true}], \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listLoadBalancersPath = "/load_balancers";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListLoadBalancersOptions model
    ListLoadBalancersOptions listLoadBalancersOptionsModel = new ListLoadBalancersOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .build();

    // Invoke listLoadBalancers() with a valid options model and verify the result
    Response<LoadBalancerCollection> response = vpcService.listLoadBalancers(listLoadBalancersOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listLoadBalancersPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
  }

  // Test the listLoadBalancers operation with and without retries enabled
  @Test
  public void testListLoadBalancersWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListLoadBalancersWOptions();

    vpcService.disableRetries();
    testListLoadBalancersWOptions();
  }

  // Test the listLoadBalancers operation using the LoadBalancersPager.getNext() method
  @Test
  public void testListLoadBalancersWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"load_balancers\":[{\"access_mode\":\"private\",\"attached_load_balancer_pool_members\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004/members/r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\",\"id\":\"r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\"}],\"availability\":\"region\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::load-balancer:r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"dns\":{\"instance\":{\"crn\":\"crn:v1:bluemix:public:dns-svcs:global:a/bb1b52262f7441a586f49068482f1e60:f761b566-030a-4696-8649-cc9d09889e88::\"},\"zone\":{\"id\":\"d66662cc-aa23-4fe1-9987-858487a61f45\"}},\"failsafe_policy_actions\":[\"forward\"],\"hostname\":\"6b88d615-us-south.lb.appdomain.cloud\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"id\":\"r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"instance_groups_supported\":true,\"is_private_path\":true,\"is_public\":true,\"listeners\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091\",\"id\":\"r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091\"}],\"logging\":{\"datapath\":{\"active\":true}},\"name\":\"my-load-balancer\",\"operating_status\":\"offline\",\"pools\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004\",\"id\":\"r006-70294e14-4e61-11e8-bcf4-0242ac110004\",\"name\":\"my-load-balancer-pool\"}],\"private_ips\":[{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"}],\"profile\":{\"family\":\"application\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\",\"name\":\"network-fixed\"},\"provisioning_status\":\"active\",\"public_ips\":[{\"address\":\"192.168.3.4\"}],\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"load_balancer\",\"route_mode\":true,\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"security_groups_supported\":false,\"source_ip_session_persistence_supported\":true,\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}],\"udp_supported\":true}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"load_balancers\":[{\"access_mode\":\"private\",\"attached_load_balancer_pool_members\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004/members/r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\",\"id\":\"r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\"}],\"availability\":\"region\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::load-balancer:r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"dns\":{\"instance\":{\"crn\":\"crn:v1:bluemix:public:dns-svcs:global:a/bb1b52262f7441a586f49068482f1e60:f761b566-030a-4696-8649-cc9d09889e88::\"},\"zone\":{\"id\":\"d66662cc-aa23-4fe1-9987-858487a61f45\"}},\"failsafe_policy_actions\":[\"forward\"],\"hostname\":\"6b88d615-us-south.lb.appdomain.cloud\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"id\":\"r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"instance_groups_supported\":true,\"is_private_path\":true,\"is_public\":true,\"listeners\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091\",\"id\":\"r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091\"}],\"logging\":{\"datapath\":{\"active\":true}},\"name\":\"my-load-balancer\",\"operating_status\":\"offline\",\"pools\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004\",\"id\":\"r006-70294e14-4e61-11e8-bcf4-0242ac110004\",\"name\":\"my-load-balancer-pool\"}],\"private_ips\":[{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"}],\"profile\":{\"family\":\"application\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\",\"name\":\"network-fixed\"},\"provisioning_status\":\"active\",\"public_ips\":[{\"address\":\"192.168.3.4\"}],\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"load_balancer\",\"route_mode\":true,\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"security_groups_supported\":false,\"source_ip_session_persistence_supported\":true,\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}],\"udp_supported\":true}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListLoadBalancersOptions listLoadBalancersOptions = new ListLoadBalancersOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    List<LoadBalancer> allResults = new ArrayList<>();
    LoadBalancersPager pager = new LoadBalancersPager(vpcService, listLoadBalancersOptions);
    while (pager.hasNext()) {
      List<LoadBalancer> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listLoadBalancers operation using the LoadBalancersPager.getAll() method
  @Test
  public void testListLoadBalancersWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"load_balancers\":[{\"access_mode\":\"private\",\"attached_load_balancer_pool_members\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004/members/r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\",\"id\":\"r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\"}],\"availability\":\"region\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::load-balancer:r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"dns\":{\"instance\":{\"crn\":\"crn:v1:bluemix:public:dns-svcs:global:a/bb1b52262f7441a586f49068482f1e60:f761b566-030a-4696-8649-cc9d09889e88::\"},\"zone\":{\"id\":\"d66662cc-aa23-4fe1-9987-858487a61f45\"}},\"failsafe_policy_actions\":[\"forward\"],\"hostname\":\"6b88d615-us-south.lb.appdomain.cloud\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"id\":\"r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"instance_groups_supported\":true,\"is_private_path\":true,\"is_public\":true,\"listeners\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091\",\"id\":\"r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091\"}],\"logging\":{\"datapath\":{\"active\":true}},\"name\":\"my-load-balancer\",\"operating_status\":\"offline\",\"pools\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004\",\"id\":\"r006-70294e14-4e61-11e8-bcf4-0242ac110004\",\"name\":\"my-load-balancer-pool\"}],\"private_ips\":[{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"}],\"profile\":{\"family\":\"application\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\",\"name\":\"network-fixed\"},\"provisioning_status\":\"active\",\"public_ips\":[{\"address\":\"192.168.3.4\"}],\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"load_balancer\",\"route_mode\":true,\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"security_groups_supported\":false,\"source_ip_session_persistence_supported\":true,\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}],\"udp_supported\":true}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"load_balancers\":[{\"access_mode\":\"private\",\"attached_load_balancer_pool_members\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004/members/r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\",\"id\":\"r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\"}],\"availability\":\"region\",\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::load-balancer:r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"dns\":{\"instance\":{\"crn\":\"crn:v1:bluemix:public:dns-svcs:global:a/bb1b52262f7441a586f49068482f1e60:f761b566-030a-4696-8649-cc9d09889e88::\"},\"zone\":{\"id\":\"d66662cc-aa23-4fe1-9987-858487a61f45\"}},\"failsafe_policy_actions\":[\"forward\"],\"hostname\":\"6b88d615-us-south.lb.appdomain.cloud\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"id\":\"r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"instance_groups_supported\":true,\"is_private_path\":true,\"is_public\":true,\"listeners\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091\",\"id\":\"r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091\"}],\"logging\":{\"datapath\":{\"active\":true}},\"name\":\"my-load-balancer\",\"operating_status\":\"offline\",\"pools\":[{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004\",\"id\":\"r006-70294e14-4e61-11e8-bcf4-0242ac110004\",\"name\":\"my-load-balancer-pool\"}],\"private_ips\":[{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"}],\"profile\":{\"family\":\"application\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\",\"name\":\"network-fixed\"},\"provisioning_status\":\"active\",\"public_ips\":[{\"address\":\"192.168.3.4\"}],\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"load_balancer\",\"route_mode\":true,\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"security_groups_supported\":false,\"source_ip_session_persistence_supported\":true,\"subnets\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"id\":\"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\",\"name\":\"my-subnet\",\"resource_type\":\"subnet\"}],\"udp_supported\":true}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListLoadBalancersOptions listLoadBalancersOptions = new ListLoadBalancersOptions.Builder()
      .limit(Long.valueOf("10"))
      .build();

    LoadBalancersPager pager = new LoadBalancersPager(vpcService, listLoadBalancersOptions);
    List<LoadBalancer> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createLoadBalancer operation with a valid options model parameter
  @Test
  public void testCreateLoadBalancerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"access_mode\": \"private\", \"attached_load_balancer_pool_members\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004/members/r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\", \"id\": \"r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\"}], \"availability\": \"region\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::load-balancer:r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"dns\": {\"instance\": {\"crn\": \"crn:v1:bluemix:public:dns-svcs:global:a/bb1b52262f7441a586f49068482f1e60:f761b566-030a-4696-8649-cc9d09889e88::\"}, \"zone\": {\"id\": \"d66662cc-aa23-4fe1-9987-858487a61f45\"}}, \"failsafe_policy_actions\": [\"forward\"], \"hostname\": \"6b88d615-us-south.lb.appdomain.cloud\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"id\": \"r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"instance_groups_supported\": true, \"is_private_path\": true, \"is_public\": true, \"listeners\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091\", \"id\": \"r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091\"}], \"logging\": {\"datapath\": {\"active\": true}}, \"name\": \"my-load-balancer\", \"operating_status\": \"offline\", \"pools\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}], \"private_ips\": [{\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}], \"profile\": {\"family\": \"application\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\", \"name\": \"network-fixed\"}, \"provisioning_status\": \"active\", \"public_ips\": [{\"address\": \"192.168.3.4\"}], \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"load_balancer\", \"route_mode\": true, \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"security_groups_supported\": false, \"source_ip_session_persistence_supported\": true, \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"udp_supported\": true}";
    String createLoadBalancerPath = "/load_balancers";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the SubnetIdentityById model
    SubnetIdentityById subnetIdentityModel = new SubnetIdentityById.Builder()
      .id("0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
      .build();

    // Construct an instance of the DNSInstanceIdentityByCRN model
    DNSInstanceIdentityByCRN dnsInstanceIdentityModel = new DNSInstanceIdentityByCRN.Builder()
      .crn("crn:v1:bluemix:public:dns-svcs:global:a/bb1b52262f7441a586f49068482f1e60:f761b566-030a-4696-8649-cc9d09889e88::")
      .build();

    // Construct an instance of the DNSZoneIdentityById model
    DNSZoneIdentityById dnsZoneIdentityModel = new DNSZoneIdentityById.Builder()
      .id("d66662cc-aa23-4fe1-9987-858487a61f45")
      .build();

    // Construct an instance of the LoadBalancerDNSPrototype model
    LoadBalancerDNSPrototype loadBalancerDnsPrototypeModel = new LoadBalancerDNSPrototype.Builder()
      .instance(dnsInstanceIdentityModel)
      .zone(dnsZoneIdentityModel)
      .build();

    // Construct an instance of the CertificateInstanceIdentityByCRN model
    CertificateInstanceIdentityByCRN certificateInstanceIdentityModel = new CertificateInstanceIdentityByCRN.Builder()
      .crn("crn:v1:bluemix:public:secrets-manager:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5")
      .build();

    // Construct an instance of the LoadBalancerPoolIdentityByName model
    LoadBalancerPoolIdentityByName loadBalancerPoolIdentityByNameModel = new LoadBalancerPoolIdentityByName.Builder()
      .name("my-load-balancer-pool")
      .build();

    // Construct an instance of the LoadBalancerListenerIdentityById model
    LoadBalancerListenerIdentityById loadBalancerListenerIdentityModel = new LoadBalancerListenerIdentityById.Builder()
      .id("r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091")
      .build();

    // Construct an instance of the LoadBalancerListenerHTTPSRedirectPrototype model
    LoadBalancerListenerHTTPSRedirectPrototype loadBalancerListenerHttpsRedirectPrototypeModel = new LoadBalancerListenerHTTPSRedirectPrototype.Builder()
      .httpStatusCode(Long.valueOf("301"))
      .listener(loadBalancerListenerIdentityModel)
      .uri("/example?doc=get")
      .build();

    // Construct an instance of the LoadBalancerListenerPrototypeLoadBalancerContext model
    LoadBalancerListenerPrototypeLoadBalancerContext loadBalancerListenerPrototypeLoadBalancerContextModel = new LoadBalancerListenerPrototypeLoadBalancerContext.Builder()
      .acceptProxyProtocol(true)
      .certificateInstance(certificateInstanceIdentityModel)
      .connectionLimit(Long.valueOf("2000"))
      .defaultPool(loadBalancerPoolIdentityByNameModel)
      .httpsRedirect(loadBalancerListenerHttpsRedirectPrototypeModel)
      .idleConnectionTimeout(Long.valueOf("100"))
      .port(Long.valueOf("443"))
      .portMax(Long.valueOf("499"))
      .portMin(Long.valueOf("443"))
      .protocol("http")
      .build();

    // Construct an instance of the LoadBalancerLoggingDatapathPrototype model
    LoadBalancerLoggingDatapathPrototype loadBalancerLoggingDatapathPrototypeModel = new LoadBalancerLoggingDatapathPrototype.Builder()
      .active(true)
      .build();

    // Construct an instance of the LoadBalancerLoggingPrototype model
    LoadBalancerLoggingPrototype loadBalancerLoggingPrototypeModel = new LoadBalancerLoggingPrototype.Builder()
      .datapath(loadBalancerLoggingDatapathPrototypeModel)
      .build();

    // Construct an instance of the LoadBalancerPoolHealthMonitorPrototypeLoadBalancerPoolHealthMonitorTypeTCPPrototype model
    LoadBalancerPoolHealthMonitorPrototypeLoadBalancerPoolHealthMonitorTypeTCPPrototype loadBalancerPoolHealthMonitorPrototypeModel = new LoadBalancerPoolHealthMonitorPrototypeLoadBalancerPoolHealthMonitorTypeTCPPrototype.Builder()
      .delay(Long.valueOf("5"))
      .maxRetries(Long.valueOf("2"))
      .port(Long.valueOf("22"))
      .timeout(Long.valueOf("2"))
      .type("tcp")
      .build();

    // Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById model
    LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById loadBalancerPoolMemberTargetPrototypeModel = new LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById.Builder()
      .id("0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0")
      .build();

    // Construct an instance of the LoadBalancerPoolMemberPrototype model
    LoadBalancerPoolMemberPrototype loadBalancerPoolMemberPrototypeModel = new LoadBalancerPoolMemberPrototype.Builder()
      .port(Long.valueOf("80"))
      .target(loadBalancerPoolMemberTargetPrototypeModel)
      .weight(Long.valueOf("50"))
      .build();

    // Construct an instance of the LoadBalancerPoolSessionPersistencePrototype model
    LoadBalancerPoolSessionPersistencePrototype loadBalancerPoolSessionPersistencePrototypeModel = new LoadBalancerPoolSessionPersistencePrototype.Builder()
      .cookieName("my-cookie-name")
      .type("app_cookie")
      .build();

    // Construct an instance of the LoadBalancerPoolPrototypeLoadBalancerContext model
    LoadBalancerPoolPrototypeLoadBalancerContext loadBalancerPoolPrototypeLoadBalancerContextModel = new LoadBalancerPoolPrototypeLoadBalancerContext.Builder()
      .algorithm("least_connections")
      .healthMonitor(loadBalancerPoolHealthMonitorPrototypeModel)
      .members(java.util.Arrays.asList(loadBalancerPoolMemberPrototypeModel))
      .name("my-load-balancer-pool")
      .protocol("http")
      .proxyProtocol("disabled")
      .sessionPersistence(loadBalancerPoolSessionPersistencePrototypeModel)
      .build();

    // Construct an instance of the LoadBalancerProfileIdentityByName model
    LoadBalancerProfileIdentityByName loadBalancerProfileIdentityModel = new LoadBalancerProfileIdentityByName.Builder()
      .name("network-fixed")
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the SecurityGroupIdentityById model
    SecurityGroupIdentityById securityGroupIdentityModel = new SecurityGroupIdentityById.Builder()
      .id("r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271")
      .build();

    // Construct an instance of the CreateLoadBalancerOptions model
    CreateLoadBalancerOptions createLoadBalancerOptionsModel = new CreateLoadBalancerOptions.Builder()
      .isPublic(true)
      .subnets(java.util.Arrays.asList(subnetIdentityModel))
      .dns(loadBalancerDnsPrototypeModel)
      .isPrivatePath(true)
      .listeners(java.util.Arrays.asList(loadBalancerListenerPrototypeLoadBalancerContextModel))
      .logging(loadBalancerLoggingPrototypeModel)
      .name("my-load-balancer")
      .pools(java.util.Arrays.asList(loadBalancerPoolPrototypeLoadBalancerContextModel))
      .profile(loadBalancerProfileIdentityModel)
      .resourceGroup(resourceGroupIdentityModel)
      .routeMode(true)
      .securityGroups(java.util.Arrays.asList(securityGroupIdentityModel))
      .build();

    // Invoke createLoadBalancer() with a valid options model and verify the result
    Response<LoadBalancer> response = vpcService.createLoadBalancer(createLoadBalancerOptionsModel).execute();
    assertNotNull(response);
    LoadBalancer responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createLoadBalancerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createLoadBalancer operation with and without retries enabled
  @Test
  public void testCreateLoadBalancerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateLoadBalancerWOptions();

    vpcService.disableRetries();
    testCreateLoadBalancerWOptions();
  }

  // Test the createLoadBalancer operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateLoadBalancerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createLoadBalancer(null).execute();
  }

  // Test the deleteLoadBalancer operation with a valid options model parameter
  @Test
  public void testDeleteLoadBalancerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteLoadBalancerPath = "/load_balancers/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteLoadBalancerOptions model
    DeleteLoadBalancerOptions deleteLoadBalancerOptionsModel = new DeleteLoadBalancerOptions.Builder()
      .id("testString")
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke deleteLoadBalancer() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteLoadBalancer(deleteLoadBalancerOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteLoadBalancerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteLoadBalancer operation with and without retries enabled
  @Test
  public void testDeleteLoadBalancerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteLoadBalancerWOptions();

    vpcService.disableRetries();
    testDeleteLoadBalancerWOptions();
  }

  // Test the deleteLoadBalancer operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteLoadBalancerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteLoadBalancer(null).execute();
  }

  // Test the getLoadBalancer operation with a valid options model parameter
  @Test
  public void testGetLoadBalancerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"access_mode\": \"private\", \"attached_load_balancer_pool_members\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004/members/r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\", \"id\": \"r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\"}], \"availability\": \"region\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::load-balancer:r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"dns\": {\"instance\": {\"crn\": \"crn:v1:bluemix:public:dns-svcs:global:a/bb1b52262f7441a586f49068482f1e60:f761b566-030a-4696-8649-cc9d09889e88::\"}, \"zone\": {\"id\": \"d66662cc-aa23-4fe1-9987-858487a61f45\"}}, \"failsafe_policy_actions\": [\"forward\"], \"hostname\": \"6b88d615-us-south.lb.appdomain.cloud\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"id\": \"r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"instance_groups_supported\": true, \"is_private_path\": true, \"is_public\": true, \"listeners\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091\", \"id\": \"r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091\"}], \"logging\": {\"datapath\": {\"active\": true}}, \"name\": \"my-load-balancer\", \"operating_status\": \"offline\", \"pools\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}], \"private_ips\": [{\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}], \"profile\": {\"family\": \"application\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\", \"name\": \"network-fixed\"}, \"provisioning_status\": \"active\", \"public_ips\": [{\"address\": \"192.168.3.4\"}], \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"load_balancer\", \"route_mode\": true, \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"security_groups_supported\": false, \"source_ip_session_persistence_supported\": true, \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"udp_supported\": true}";
    String getLoadBalancerPath = "/load_balancers/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetLoadBalancerOptions model
    GetLoadBalancerOptions getLoadBalancerOptionsModel = new GetLoadBalancerOptions.Builder()
      .id("testString")
      .build();

    // Invoke getLoadBalancer() with a valid options model and verify the result
    Response<LoadBalancer> response = vpcService.getLoadBalancer(getLoadBalancerOptionsModel).execute();
    assertNotNull(response);
    LoadBalancer responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getLoadBalancerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getLoadBalancer operation with and without retries enabled
  @Test
  public void testGetLoadBalancerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetLoadBalancerWOptions();

    vpcService.disableRetries();
    testGetLoadBalancerWOptions();
  }

  // Test the getLoadBalancer operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetLoadBalancerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getLoadBalancer(null).execute();
  }

  // Test the updateLoadBalancer operation with a valid options model parameter
  @Test
  public void testUpdateLoadBalancerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"access_mode\": \"private\", \"attached_load_balancer_pool_members\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004/members/r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\", \"id\": \"r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\"}], \"availability\": \"region\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::load-balancer:r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"dns\": {\"instance\": {\"crn\": \"crn:v1:bluemix:public:dns-svcs:global:a/bb1b52262f7441a586f49068482f1e60:f761b566-030a-4696-8649-cc9d09889e88::\"}, \"zone\": {\"id\": \"d66662cc-aa23-4fe1-9987-858487a61f45\"}}, \"failsafe_policy_actions\": [\"forward\"], \"hostname\": \"6b88d615-us-south.lb.appdomain.cloud\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"id\": \"r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"instance_groups_supported\": true, \"is_private_path\": true, \"is_public\": true, \"listeners\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091\", \"id\": \"r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091\"}], \"logging\": {\"datapath\": {\"active\": true}}, \"name\": \"my-load-balancer\", \"operating_status\": \"offline\", \"pools\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}], \"private_ips\": [{\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}], \"profile\": {\"family\": \"application\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed\", \"name\": \"network-fixed\"}, \"provisioning_status\": \"active\", \"public_ips\": [{\"address\": \"192.168.3.4\"}], \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"load_balancer\", \"route_mode\": true, \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"security_groups_supported\": false, \"source_ip_session_persistence_supported\": true, \"subnets\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::subnet:0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"id\": \"0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e\", \"name\": \"my-subnet\", \"resource_type\": \"subnet\"}], \"udp_supported\": true}";
    String updateLoadBalancerPath = "/load_balancers/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the DNSInstanceIdentityByCRN model
    DNSInstanceIdentityByCRN dnsInstanceIdentityModel = new DNSInstanceIdentityByCRN.Builder()
      .crn("crn:v1:bluemix:public:dns-svcs:global:a/bb1b52262f7441a586f49068482f1e60:f761b566-030a-4696-8649-cc9d09889e88::")
      .build();

    // Construct an instance of the DNSZoneIdentityById model
    DNSZoneIdentityById dnsZoneIdentityModel = new DNSZoneIdentityById.Builder()
      .id("d66662cc-aa23-4fe1-9987-858487a61f45")
      .build();

    // Construct an instance of the LoadBalancerDNSPatch model
    LoadBalancerDNSPatch loadBalancerDnsPatchModel = new LoadBalancerDNSPatch.Builder()
      .instance(dnsInstanceIdentityModel)
      .zone(dnsZoneIdentityModel)
      .build();

    // Construct an instance of the LoadBalancerLoggingDatapathPatch model
    LoadBalancerLoggingDatapathPatch loadBalancerLoggingDatapathPatchModel = new LoadBalancerLoggingDatapathPatch.Builder()
      .active(true)
      .build();

    // Construct an instance of the LoadBalancerLoggingPatch model
    LoadBalancerLoggingPatch loadBalancerLoggingPatchModel = new LoadBalancerLoggingPatch.Builder()
      .datapath(loadBalancerLoggingDatapathPatchModel)
      .build();

    // Construct an instance of the SubnetIdentityById model
    SubnetIdentityById subnetIdentityModel = new SubnetIdentityById.Builder()
      .id("0717-7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
      .build();

    // Construct an instance of the LoadBalancerPatch model
    LoadBalancerPatch loadBalancerPatchModel = new LoadBalancerPatch.Builder()
      .dns(loadBalancerDnsPatchModel)
      .logging(loadBalancerLoggingPatchModel)
      .name("my-load-balancer")
      .subnets(java.util.Arrays.asList(subnetIdentityModel))
      .build();
    Map<String, Object> loadBalancerPatchModelAsPatch = loadBalancerPatchModel.asPatch();

    // Construct an instance of the UpdateLoadBalancerOptions model
    UpdateLoadBalancerOptions updateLoadBalancerOptionsModel = new UpdateLoadBalancerOptions.Builder()
      .id("testString")
      .loadBalancerPatch(loadBalancerPatchModelAsPatch)
      .ifMatch("W/\"96d225c4-56bd-43d9-98fc-d7148e5c5028\"")
      .build();

    // Invoke updateLoadBalancer() with a valid options model and verify the result
    Response<LoadBalancer> response = vpcService.updateLoadBalancer(updateLoadBalancerOptionsModel).execute();
    assertNotNull(response);
    LoadBalancer responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateLoadBalancerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateLoadBalancer operation with and without retries enabled
  @Test
  public void testUpdateLoadBalancerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateLoadBalancerWOptions();

    vpcService.disableRetries();
    testUpdateLoadBalancerWOptions();
  }

  // Test the updateLoadBalancer operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateLoadBalancerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateLoadBalancer(null).execute();
  }

  // Test the getLoadBalancerStatistics operation with a valid options model parameter
  @Test
  public void testGetLoadBalancerStatisticsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"active_connections\": 797, \"connection_rate\": 91.121, \"data_processed_this_month\": 10093173145, \"throughput\": 167.278}";
    String getLoadBalancerStatisticsPath = "/load_balancers/testString/statistics";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetLoadBalancerStatisticsOptions model
    GetLoadBalancerStatisticsOptions getLoadBalancerStatisticsOptionsModel = new GetLoadBalancerStatisticsOptions.Builder()
      .id("testString")
      .build();

    // Invoke getLoadBalancerStatistics() with a valid options model and verify the result
    Response<LoadBalancerStatistics> response = vpcService.getLoadBalancerStatistics(getLoadBalancerStatisticsOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerStatistics responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getLoadBalancerStatisticsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getLoadBalancerStatistics operation with and without retries enabled
  @Test
  public void testGetLoadBalancerStatisticsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetLoadBalancerStatisticsWOptions();

    vpcService.disableRetries();
    testGetLoadBalancerStatisticsWOptions();
  }

  // Test the getLoadBalancerStatistics operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetLoadBalancerStatisticsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getLoadBalancerStatistics(null).execute();
  }

  // Test the listLoadBalancerListeners operation with a valid options model parameter
  @Test
  public void testListLoadBalancerListenersWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"listeners\": [{\"accept_proxy_protocol\": true, \"certificate_instance\": {\"crn\": \"crn:v1:bluemix:public:secrets-manager:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5\"}, \"connection_limit\": 2000, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"default_pool\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091\", \"https_redirect\": {\"http_status_code\": 301, \"listener\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091\", \"id\": \"r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091\"}, \"uri\": \"/example?doc=get\"}, \"id\": \"r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091\", \"idle_connection_timeout\": 100, \"policies\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091/policies/r006-0b00a37f-a3d7-43ca-8187-f1e88d659245\", \"id\": \"r006-0b00a37f-a3d7-43ca-8187-f1e88d659245\", \"name\": \"my-load-balancer-listener-policy\"}], \"port\": 443, \"port_max\": 499, \"port_min\": 443, \"protocol\": \"http\", \"provisioning_status\": \"active\"}]}";
    String listLoadBalancerListenersPath = "/load_balancers/testString/listeners";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListLoadBalancerListenersOptions model
    ListLoadBalancerListenersOptions listLoadBalancerListenersOptionsModel = new ListLoadBalancerListenersOptions.Builder()
      .loadBalancerId("testString")
      .build();

    // Invoke listLoadBalancerListeners() with a valid options model and verify the result
    Response<LoadBalancerListenerCollection> response = vpcService.listLoadBalancerListeners(listLoadBalancerListenersOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerListenerCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listLoadBalancerListenersPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listLoadBalancerListeners operation with and without retries enabled
  @Test
  public void testListLoadBalancerListenersWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListLoadBalancerListenersWOptions();

    vpcService.disableRetries();
    testListLoadBalancerListenersWOptions();
  }

  // Test the listLoadBalancerListeners operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListLoadBalancerListenersNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listLoadBalancerListeners(null).execute();
  }

  // Test the createLoadBalancerListener operation with a valid options model parameter
  @Test
  public void testCreateLoadBalancerListenerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"accept_proxy_protocol\": true, \"certificate_instance\": {\"crn\": \"crn:v1:bluemix:public:secrets-manager:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5\"}, \"connection_limit\": 2000, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"default_pool\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091\", \"https_redirect\": {\"http_status_code\": 301, \"listener\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091\", \"id\": \"r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091\"}, \"uri\": \"/example?doc=get\"}, \"id\": \"r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091\", \"idle_connection_timeout\": 100, \"policies\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091/policies/r006-0b00a37f-a3d7-43ca-8187-f1e88d659245\", \"id\": \"r006-0b00a37f-a3d7-43ca-8187-f1e88d659245\", \"name\": \"my-load-balancer-listener-policy\"}], \"port\": 443, \"port_max\": 499, \"port_min\": 443, \"protocol\": \"http\", \"provisioning_status\": \"active\"}";
    String createLoadBalancerListenerPath = "/load_balancers/testString/listeners";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the CertificateInstanceIdentityByCRN model
    CertificateInstanceIdentityByCRN certificateInstanceIdentityModel = new CertificateInstanceIdentityByCRN.Builder()
      .crn("crn:v1:bluemix:public:secrets-manager:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5")
      .build();

    // Construct an instance of the LoadBalancerPoolIdentityLoadBalancerPoolIdentityById model
    LoadBalancerPoolIdentityLoadBalancerPoolIdentityById loadBalancerPoolIdentityModel = new LoadBalancerPoolIdentityLoadBalancerPoolIdentityById.Builder()
      .id("r006-70294e14-4e61-11e8-bcf4-0242ac110004")
      .build();

    // Construct an instance of the LoadBalancerListenerIdentityById model
    LoadBalancerListenerIdentityById loadBalancerListenerIdentityModel = new LoadBalancerListenerIdentityById.Builder()
      .id("r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091")
      .build();

    // Construct an instance of the LoadBalancerListenerHTTPSRedirectPrototype model
    LoadBalancerListenerHTTPSRedirectPrototype loadBalancerListenerHttpsRedirectPrototypeModel = new LoadBalancerListenerHTTPSRedirectPrototype.Builder()
      .httpStatusCode(Long.valueOf("301"))
      .listener(loadBalancerListenerIdentityModel)
      .uri("/example?doc=get")
      .build();

    // Construct an instance of the LoadBalancerListenerPolicyRulePrototype model
    LoadBalancerListenerPolicyRulePrototype loadBalancerListenerPolicyRulePrototypeModel = new LoadBalancerListenerPolicyRulePrototype.Builder()
      .condition("contains")
      .field("MY-APP-HEADER")
      .type("body")
      .value("testString")
      .build();

    // Construct an instance of the LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityLoadBalancerPoolIdentityById model
    LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityLoadBalancerPoolIdentityById loadBalancerListenerPolicyTargetPrototypeModel = new LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityLoadBalancerPoolIdentityById.Builder()
      .id("r006-70294e14-4e61-11e8-bcf4-0242ac110004")
      .build();

    // Construct an instance of the LoadBalancerListenerPolicyPrototype model
    LoadBalancerListenerPolicyPrototype loadBalancerListenerPolicyPrototypeModel = new LoadBalancerListenerPolicyPrototype.Builder()
      .action("forward_to_listener")
      .name("my-load-balancer-listener-policy")
      .priority(Long.valueOf("5"))
      .rules(java.util.Arrays.asList(loadBalancerListenerPolicyRulePrototypeModel))
      .target(loadBalancerListenerPolicyTargetPrototypeModel)
      .build();

    // Construct an instance of the CreateLoadBalancerListenerOptions model
    CreateLoadBalancerListenerOptions createLoadBalancerListenerOptionsModel = new CreateLoadBalancerListenerOptions.Builder()
      .loadBalancerId("testString")
      .protocol("http")
      .acceptProxyProtocol(true)
      .certificateInstance(certificateInstanceIdentityModel)
      .connectionLimit(Long.valueOf("2000"))
      .defaultPool(loadBalancerPoolIdentityModel)
      .httpsRedirect(loadBalancerListenerHttpsRedirectPrototypeModel)
      .idleConnectionTimeout(Long.valueOf("100"))
      .policies(java.util.Arrays.asList(loadBalancerListenerPolicyPrototypeModel))
      .port(Long.valueOf("443"))
      .portMax(Long.valueOf("499"))
      .portMin(Long.valueOf("443"))
      .build();

    // Invoke createLoadBalancerListener() with a valid options model and verify the result
    Response<LoadBalancerListener> response = vpcService.createLoadBalancerListener(createLoadBalancerListenerOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerListener responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createLoadBalancerListenerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createLoadBalancerListener operation with and without retries enabled
  @Test
  public void testCreateLoadBalancerListenerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateLoadBalancerListenerWOptions();

    vpcService.disableRetries();
    testCreateLoadBalancerListenerWOptions();
  }

  // Test the createLoadBalancerListener operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateLoadBalancerListenerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createLoadBalancerListener(null).execute();
  }

  // Test the deleteLoadBalancerListener operation with a valid options model parameter
  @Test
  public void testDeleteLoadBalancerListenerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteLoadBalancerListenerPath = "/load_balancers/testString/listeners/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteLoadBalancerListenerOptions model
    DeleteLoadBalancerListenerOptions deleteLoadBalancerListenerOptionsModel = new DeleteLoadBalancerListenerOptions.Builder()
      .loadBalancerId("testString")
      .id("testString")
      .build();

    // Invoke deleteLoadBalancerListener() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteLoadBalancerListener(deleteLoadBalancerListenerOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteLoadBalancerListenerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteLoadBalancerListener operation with and without retries enabled
  @Test
  public void testDeleteLoadBalancerListenerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteLoadBalancerListenerWOptions();

    vpcService.disableRetries();
    testDeleteLoadBalancerListenerWOptions();
  }

  // Test the deleteLoadBalancerListener operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteLoadBalancerListenerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteLoadBalancerListener(null).execute();
  }

  // Test the getLoadBalancerListener operation with a valid options model parameter
  @Test
  public void testGetLoadBalancerListenerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"accept_proxy_protocol\": true, \"certificate_instance\": {\"crn\": \"crn:v1:bluemix:public:secrets-manager:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5\"}, \"connection_limit\": 2000, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"default_pool\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091\", \"https_redirect\": {\"http_status_code\": 301, \"listener\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091\", \"id\": \"r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091\"}, \"uri\": \"/example?doc=get\"}, \"id\": \"r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091\", \"idle_connection_timeout\": 100, \"policies\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091/policies/r006-0b00a37f-a3d7-43ca-8187-f1e88d659245\", \"id\": \"r006-0b00a37f-a3d7-43ca-8187-f1e88d659245\", \"name\": \"my-load-balancer-listener-policy\"}], \"port\": 443, \"port_max\": 499, \"port_min\": 443, \"protocol\": \"http\", \"provisioning_status\": \"active\"}";
    String getLoadBalancerListenerPath = "/load_balancers/testString/listeners/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetLoadBalancerListenerOptions model
    GetLoadBalancerListenerOptions getLoadBalancerListenerOptionsModel = new GetLoadBalancerListenerOptions.Builder()
      .loadBalancerId("testString")
      .id("testString")
      .build();

    // Invoke getLoadBalancerListener() with a valid options model and verify the result
    Response<LoadBalancerListener> response = vpcService.getLoadBalancerListener(getLoadBalancerListenerOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerListener responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getLoadBalancerListenerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getLoadBalancerListener operation with and without retries enabled
  @Test
  public void testGetLoadBalancerListenerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetLoadBalancerListenerWOptions();

    vpcService.disableRetries();
    testGetLoadBalancerListenerWOptions();
  }

  // Test the getLoadBalancerListener operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetLoadBalancerListenerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getLoadBalancerListener(null).execute();
  }

  // Test the updateLoadBalancerListener operation with a valid options model parameter
  @Test
  public void testUpdateLoadBalancerListenerWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"accept_proxy_protocol\": true, \"certificate_instance\": {\"crn\": \"crn:v1:bluemix:public:secrets-manager:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5\"}, \"connection_limit\": 2000, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"default_pool\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091\", \"https_redirect\": {\"http_status_code\": 301, \"listener\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091\", \"id\": \"r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091\"}, \"uri\": \"/example?doc=get\"}, \"id\": \"r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091\", \"idle_connection_timeout\": 100, \"policies\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091/policies/r006-0b00a37f-a3d7-43ca-8187-f1e88d659245\", \"id\": \"r006-0b00a37f-a3d7-43ca-8187-f1e88d659245\", \"name\": \"my-load-balancer-listener-policy\"}], \"port\": 443, \"port_max\": 499, \"port_min\": 443, \"protocol\": \"http\", \"provisioning_status\": \"active\"}";
    String updateLoadBalancerListenerPath = "/load_balancers/testString/listeners/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the CertificateInstanceIdentityByCRN model
    CertificateInstanceIdentityByCRN certificateInstanceIdentityModel = new CertificateInstanceIdentityByCRN.Builder()
      .crn("crn:v1:bluemix:public:secrets-manager:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34:36fa422d-080d-4d83-8d2d-86851b4001df:secret:2e786aab-42fa-63ed-14f8-d66d552f4dd5")
      .build();

    // Construct an instance of the LoadBalancerListenerDefaultPoolPatchLoadBalancerPoolIdentityById model
    LoadBalancerListenerDefaultPoolPatchLoadBalancerPoolIdentityById loadBalancerListenerDefaultPoolPatchModel = new LoadBalancerListenerDefaultPoolPatchLoadBalancerPoolIdentityById.Builder()
      .id("r006-70294e14-4e61-11e8-bcf4-0242ac110004")
      .build();

    // Construct an instance of the LoadBalancerListenerIdentityById model
    LoadBalancerListenerIdentityById loadBalancerListenerIdentityModel = new LoadBalancerListenerIdentityById.Builder()
      .id("r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091")
      .build();

    // Construct an instance of the LoadBalancerListenerHTTPSRedirectPatch model
    LoadBalancerListenerHTTPSRedirectPatch loadBalancerListenerHttpsRedirectPatchModel = new LoadBalancerListenerHTTPSRedirectPatch.Builder()
      .httpStatusCode(Long.valueOf("301"))
      .listener(loadBalancerListenerIdentityModel)
      .uri("/example?doc=get")
      .build();

    // Construct an instance of the LoadBalancerListenerPatch model
    LoadBalancerListenerPatch loadBalancerListenerPatchModel = new LoadBalancerListenerPatch.Builder()
      .acceptProxyProtocol(true)
      .certificateInstance(certificateInstanceIdentityModel)
      .connectionLimit(Long.valueOf("2000"))
      .defaultPool(loadBalancerListenerDefaultPoolPatchModel)
      .httpsRedirect(loadBalancerListenerHttpsRedirectPatchModel)
      .idleConnectionTimeout(Long.valueOf("100"))
      .port(Long.valueOf("443"))
      .portMax(Long.valueOf("499"))
      .portMin(Long.valueOf("443"))
      .protocol("http")
      .build();
    Map<String, Object> loadBalancerListenerPatchModelAsPatch = loadBalancerListenerPatchModel.asPatch();

    // Construct an instance of the UpdateLoadBalancerListenerOptions model
    UpdateLoadBalancerListenerOptions updateLoadBalancerListenerOptionsModel = new UpdateLoadBalancerListenerOptions.Builder()
      .loadBalancerId("testString")
      .id("testString")
      .loadBalancerListenerPatch(loadBalancerListenerPatchModelAsPatch)
      .build();

    // Invoke updateLoadBalancerListener() with a valid options model and verify the result
    Response<LoadBalancerListener> response = vpcService.updateLoadBalancerListener(updateLoadBalancerListenerOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerListener responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateLoadBalancerListenerPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateLoadBalancerListener operation with and without retries enabled
  @Test
  public void testUpdateLoadBalancerListenerWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateLoadBalancerListenerWOptions();

    vpcService.disableRetries();
    testUpdateLoadBalancerListenerWOptions();
  }

  // Test the updateLoadBalancerListener operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateLoadBalancerListenerNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateLoadBalancerListener(null).execute();
  }

  // Test the listLoadBalancerListenerPolicies operation with a valid options model parameter
  @Test
  public void testListLoadBalancerListenerPoliciesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"policies\": [{\"action\": \"forward_to_listener\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091/policies/r006-0b00a37f-a3d7-43ca-8187-f1e88d659245\", \"id\": \"r006-0b00a37f-a3d7-43ca-8187-f1e88d659245\", \"name\": \"my-load-balancer-listener-policy\", \"priority\": 5, \"provisioning_status\": \"active\", \"rules\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091/policies/r006-0b00a37f-a3d7-43ca-8187-f1e88d659245/rules/r006-d2da2832-9751-4e29-ad1d-4b19c1c83c7b\", \"id\": \"r006-d2da2832-9751-4e29-ad1d-4b19c1c83c7b\"}], \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}}]}";
    String listLoadBalancerListenerPoliciesPath = "/load_balancers/testString/listeners/testString/policies";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListLoadBalancerListenerPoliciesOptions model
    ListLoadBalancerListenerPoliciesOptions listLoadBalancerListenerPoliciesOptionsModel = new ListLoadBalancerListenerPoliciesOptions.Builder()
      .loadBalancerId("testString")
      .listenerId("testString")
      .build();

    // Invoke listLoadBalancerListenerPolicies() with a valid options model and verify the result
    Response<LoadBalancerListenerPolicyCollection> response = vpcService.listLoadBalancerListenerPolicies(listLoadBalancerListenerPoliciesOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerListenerPolicyCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listLoadBalancerListenerPoliciesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listLoadBalancerListenerPolicies operation with and without retries enabled
  @Test
  public void testListLoadBalancerListenerPoliciesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListLoadBalancerListenerPoliciesWOptions();

    vpcService.disableRetries();
    testListLoadBalancerListenerPoliciesWOptions();
  }

  // Test the listLoadBalancerListenerPolicies operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListLoadBalancerListenerPoliciesNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listLoadBalancerListenerPolicies(null).execute();
  }

  // Test the createLoadBalancerListenerPolicy operation with a valid options model parameter
  @Test
  public void testCreateLoadBalancerListenerPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"action\": \"forward_to_listener\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091/policies/r006-0b00a37f-a3d7-43ca-8187-f1e88d659245\", \"id\": \"r006-0b00a37f-a3d7-43ca-8187-f1e88d659245\", \"name\": \"my-load-balancer-listener-policy\", \"priority\": 5, \"provisioning_status\": \"active\", \"rules\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091/policies/r006-0b00a37f-a3d7-43ca-8187-f1e88d659245/rules/r006-d2da2832-9751-4e29-ad1d-4b19c1c83c7b\", \"id\": \"r006-d2da2832-9751-4e29-ad1d-4b19c1c83c7b\"}], \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}}";
    String createLoadBalancerListenerPolicyPath = "/load_balancers/testString/listeners/testString/policies";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the LoadBalancerListenerPolicyRulePrototype model
    LoadBalancerListenerPolicyRulePrototype loadBalancerListenerPolicyRulePrototypeModel = new LoadBalancerListenerPolicyRulePrototype.Builder()
      .condition("contains")
      .field("MY-APP-HEADER")
      .type("body")
      .value("testString")
      .build();

    // Construct an instance of the LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityLoadBalancerPoolIdentityById model
    LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityLoadBalancerPoolIdentityById loadBalancerListenerPolicyTargetPrototypeModel = new LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityLoadBalancerPoolIdentityById.Builder()
      .id("r006-70294e14-4e61-11e8-bcf4-0242ac110004")
      .build();

    // Construct an instance of the CreateLoadBalancerListenerPolicyOptions model
    CreateLoadBalancerListenerPolicyOptions createLoadBalancerListenerPolicyOptionsModel = new CreateLoadBalancerListenerPolicyOptions.Builder()
      .loadBalancerId("testString")
      .listenerId("testString")
      .action("forward_to_listener")
      .priority(Long.valueOf("5"))
      .name("my-load-balancer-listener-policy")
      .rules(java.util.Arrays.asList(loadBalancerListenerPolicyRulePrototypeModel))
      .target(loadBalancerListenerPolicyTargetPrototypeModel)
      .build();

    // Invoke createLoadBalancerListenerPolicy() with a valid options model and verify the result
    Response<LoadBalancerListenerPolicy> response = vpcService.createLoadBalancerListenerPolicy(createLoadBalancerListenerPolicyOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerListenerPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createLoadBalancerListenerPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createLoadBalancerListenerPolicy operation with and without retries enabled
  @Test
  public void testCreateLoadBalancerListenerPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateLoadBalancerListenerPolicyWOptions();

    vpcService.disableRetries();
    testCreateLoadBalancerListenerPolicyWOptions();
  }

  // Test the createLoadBalancerListenerPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateLoadBalancerListenerPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createLoadBalancerListenerPolicy(null).execute();
  }

  // Test the deleteLoadBalancerListenerPolicy operation with a valid options model parameter
  @Test
  public void testDeleteLoadBalancerListenerPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteLoadBalancerListenerPolicyPath = "/load_balancers/testString/listeners/testString/policies/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteLoadBalancerListenerPolicyOptions model
    DeleteLoadBalancerListenerPolicyOptions deleteLoadBalancerListenerPolicyOptionsModel = new DeleteLoadBalancerListenerPolicyOptions.Builder()
      .loadBalancerId("testString")
      .listenerId("testString")
      .id("testString")
      .build();

    // Invoke deleteLoadBalancerListenerPolicy() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteLoadBalancerListenerPolicy(deleteLoadBalancerListenerPolicyOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteLoadBalancerListenerPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteLoadBalancerListenerPolicy operation with and without retries enabled
  @Test
  public void testDeleteLoadBalancerListenerPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteLoadBalancerListenerPolicyWOptions();

    vpcService.disableRetries();
    testDeleteLoadBalancerListenerPolicyWOptions();
  }

  // Test the deleteLoadBalancerListenerPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteLoadBalancerListenerPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteLoadBalancerListenerPolicy(null).execute();
  }

  // Test the getLoadBalancerListenerPolicy operation with a valid options model parameter
  @Test
  public void testGetLoadBalancerListenerPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"action\": \"forward_to_listener\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091/policies/r006-0b00a37f-a3d7-43ca-8187-f1e88d659245\", \"id\": \"r006-0b00a37f-a3d7-43ca-8187-f1e88d659245\", \"name\": \"my-load-balancer-listener-policy\", \"priority\": 5, \"provisioning_status\": \"active\", \"rules\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091/policies/r006-0b00a37f-a3d7-43ca-8187-f1e88d659245/rules/r006-d2da2832-9751-4e29-ad1d-4b19c1c83c7b\", \"id\": \"r006-d2da2832-9751-4e29-ad1d-4b19c1c83c7b\"}], \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}}";
    String getLoadBalancerListenerPolicyPath = "/load_balancers/testString/listeners/testString/policies/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetLoadBalancerListenerPolicyOptions model
    GetLoadBalancerListenerPolicyOptions getLoadBalancerListenerPolicyOptionsModel = new GetLoadBalancerListenerPolicyOptions.Builder()
      .loadBalancerId("testString")
      .listenerId("testString")
      .id("testString")
      .build();

    // Invoke getLoadBalancerListenerPolicy() with a valid options model and verify the result
    Response<LoadBalancerListenerPolicy> response = vpcService.getLoadBalancerListenerPolicy(getLoadBalancerListenerPolicyOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerListenerPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getLoadBalancerListenerPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getLoadBalancerListenerPolicy operation with and without retries enabled
  @Test
  public void testGetLoadBalancerListenerPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetLoadBalancerListenerPolicyWOptions();

    vpcService.disableRetries();
    testGetLoadBalancerListenerPolicyWOptions();
  }

  // Test the getLoadBalancerListenerPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetLoadBalancerListenerPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getLoadBalancerListenerPolicy(null).execute();
  }

  // Test the updateLoadBalancerListenerPolicy operation with a valid options model parameter
  @Test
  public void testUpdateLoadBalancerListenerPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"action\": \"forward_to_listener\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091/policies/r006-0b00a37f-a3d7-43ca-8187-f1e88d659245\", \"id\": \"r006-0b00a37f-a3d7-43ca-8187-f1e88d659245\", \"name\": \"my-load-balancer-listener-policy\", \"priority\": 5, \"provisioning_status\": \"active\", \"rules\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091/policies/r006-0b00a37f-a3d7-43ca-8187-f1e88d659245/rules/r006-d2da2832-9751-4e29-ad1d-4b19c1c83c7b\", \"id\": \"r006-d2da2832-9751-4e29-ad1d-4b19c1c83c7b\"}], \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}}";
    String updateLoadBalancerListenerPolicyPath = "/load_balancers/testString/listeners/testString/policies/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the LoadBalancerListenerPolicyTargetPatchLoadBalancerPoolIdentityLoadBalancerPoolIdentityLoadBalancerPoolIdentityById model
    LoadBalancerListenerPolicyTargetPatchLoadBalancerPoolIdentityLoadBalancerPoolIdentityLoadBalancerPoolIdentityById loadBalancerListenerPolicyTargetPatchModel = new LoadBalancerListenerPolicyTargetPatchLoadBalancerPoolIdentityLoadBalancerPoolIdentityLoadBalancerPoolIdentityById.Builder()
      .id("r006-70294e14-4e61-11e8-bcf4-0242ac110004")
      .build();

    // Construct an instance of the LoadBalancerListenerPolicyPatch model
    LoadBalancerListenerPolicyPatch loadBalancerListenerPolicyPatchModel = new LoadBalancerListenerPolicyPatch.Builder()
      .name("my-load-balancer-listener-policy-updated")
      .priority(Long.valueOf("5"))
      .target(loadBalancerListenerPolicyTargetPatchModel)
      .build();
    Map<String, Object> loadBalancerListenerPolicyPatchModelAsPatch = loadBalancerListenerPolicyPatchModel.asPatch();

    // Construct an instance of the UpdateLoadBalancerListenerPolicyOptions model
    UpdateLoadBalancerListenerPolicyOptions updateLoadBalancerListenerPolicyOptionsModel = new UpdateLoadBalancerListenerPolicyOptions.Builder()
      .loadBalancerId("testString")
      .listenerId("testString")
      .id("testString")
      .loadBalancerListenerPolicyPatch(loadBalancerListenerPolicyPatchModelAsPatch)
      .build();

    // Invoke updateLoadBalancerListenerPolicy() with a valid options model and verify the result
    Response<LoadBalancerListenerPolicy> response = vpcService.updateLoadBalancerListenerPolicy(updateLoadBalancerListenerPolicyOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerListenerPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateLoadBalancerListenerPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateLoadBalancerListenerPolicy operation with and without retries enabled
  @Test
  public void testUpdateLoadBalancerListenerPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateLoadBalancerListenerPolicyWOptions();

    vpcService.disableRetries();
    testUpdateLoadBalancerListenerPolicyWOptions();
  }

  // Test the updateLoadBalancerListenerPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateLoadBalancerListenerPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateLoadBalancerListenerPolicy(null).execute();
  }

  // Test the listLoadBalancerListenerPolicyRules operation with a valid options model parameter
  @Test
  public void testListLoadBalancerListenerPolicyRulesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"rules\": [{\"condition\": \"contains\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"field\": \"MY-APP-HEADER\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091/policies/r006-0b00a37f-a3d7-43ca-8187-f1e88d659245/rules/r006-d2da2832-9751-4e29-ad1d-4b19c1c83c7b\", \"id\": \"r006-d2da2832-9751-4e29-ad1d-4b19c1c83c7b\", \"provisioning_status\": \"active\", \"type\": \"body\", \"value\": \"value\"}]}";
    String listLoadBalancerListenerPolicyRulesPath = "/load_balancers/testString/listeners/testString/policies/testString/rules";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListLoadBalancerListenerPolicyRulesOptions model
    ListLoadBalancerListenerPolicyRulesOptions listLoadBalancerListenerPolicyRulesOptionsModel = new ListLoadBalancerListenerPolicyRulesOptions.Builder()
      .loadBalancerId("testString")
      .listenerId("testString")
      .policyId("testString")
      .build();

    // Invoke listLoadBalancerListenerPolicyRules() with a valid options model and verify the result
    Response<LoadBalancerListenerPolicyRuleCollection> response = vpcService.listLoadBalancerListenerPolicyRules(listLoadBalancerListenerPolicyRulesOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerListenerPolicyRuleCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listLoadBalancerListenerPolicyRulesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listLoadBalancerListenerPolicyRules operation with and without retries enabled
  @Test
  public void testListLoadBalancerListenerPolicyRulesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListLoadBalancerListenerPolicyRulesWOptions();

    vpcService.disableRetries();
    testListLoadBalancerListenerPolicyRulesWOptions();
  }

  // Test the listLoadBalancerListenerPolicyRules operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListLoadBalancerListenerPolicyRulesNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listLoadBalancerListenerPolicyRules(null).execute();
  }

  // Test the createLoadBalancerListenerPolicyRule operation with a valid options model parameter
  @Test
  public void testCreateLoadBalancerListenerPolicyRuleWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"condition\": \"contains\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"field\": \"MY-APP-HEADER\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091/policies/r006-0b00a37f-a3d7-43ca-8187-f1e88d659245/rules/r006-d2da2832-9751-4e29-ad1d-4b19c1c83c7b\", \"id\": \"r006-d2da2832-9751-4e29-ad1d-4b19c1c83c7b\", \"provisioning_status\": \"active\", \"type\": \"body\", \"value\": \"value\"}";
    String createLoadBalancerListenerPolicyRulePath = "/load_balancers/testString/listeners/testString/policies/testString/rules";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the CreateLoadBalancerListenerPolicyRuleOptions model
    CreateLoadBalancerListenerPolicyRuleOptions createLoadBalancerListenerPolicyRuleOptionsModel = new CreateLoadBalancerListenerPolicyRuleOptions.Builder()
      .loadBalancerId("testString")
      .listenerId("testString")
      .policyId("testString")
      .condition("contains")
      .type("body")
      .value("testString")
      .field("MY-APP-HEADER")
      .build();

    // Invoke createLoadBalancerListenerPolicyRule() with a valid options model and verify the result
    Response<LoadBalancerListenerPolicyRule> response = vpcService.createLoadBalancerListenerPolicyRule(createLoadBalancerListenerPolicyRuleOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerListenerPolicyRule responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createLoadBalancerListenerPolicyRulePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createLoadBalancerListenerPolicyRule operation with and without retries enabled
  @Test
  public void testCreateLoadBalancerListenerPolicyRuleWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateLoadBalancerListenerPolicyRuleWOptions();

    vpcService.disableRetries();
    testCreateLoadBalancerListenerPolicyRuleWOptions();
  }

  // Test the createLoadBalancerListenerPolicyRule operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateLoadBalancerListenerPolicyRuleNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createLoadBalancerListenerPolicyRule(null).execute();
  }

  // Test the deleteLoadBalancerListenerPolicyRule operation with a valid options model parameter
  @Test
  public void testDeleteLoadBalancerListenerPolicyRuleWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteLoadBalancerListenerPolicyRulePath = "/load_balancers/testString/listeners/testString/policies/testString/rules/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteLoadBalancerListenerPolicyRuleOptions model
    DeleteLoadBalancerListenerPolicyRuleOptions deleteLoadBalancerListenerPolicyRuleOptionsModel = new DeleteLoadBalancerListenerPolicyRuleOptions.Builder()
      .loadBalancerId("testString")
      .listenerId("testString")
      .policyId("testString")
      .id("testString")
      .build();

    // Invoke deleteLoadBalancerListenerPolicyRule() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteLoadBalancerListenerPolicyRule(deleteLoadBalancerListenerPolicyRuleOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteLoadBalancerListenerPolicyRulePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteLoadBalancerListenerPolicyRule operation with and without retries enabled
  @Test
  public void testDeleteLoadBalancerListenerPolicyRuleWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteLoadBalancerListenerPolicyRuleWOptions();

    vpcService.disableRetries();
    testDeleteLoadBalancerListenerPolicyRuleWOptions();
  }

  // Test the deleteLoadBalancerListenerPolicyRule operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteLoadBalancerListenerPolicyRuleNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteLoadBalancerListenerPolicyRule(null).execute();
  }

  // Test the getLoadBalancerListenerPolicyRule operation with a valid options model parameter
  @Test
  public void testGetLoadBalancerListenerPolicyRuleWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"condition\": \"contains\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"field\": \"MY-APP-HEADER\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091/policies/r006-0b00a37f-a3d7-43ca-8187-f1e88d659245/rules/r006-d2da2832-9751-4e29-ad1d-4b19c1c83c7b\", \"id\": \"r006-d2da2832-9751-4e29-ad1d-4b19c1c83c7b\", \"provisioning_status\": \"active\", \"type\": \"body\", \"value\": \"value\"}";
    String getLoadBalancerListenerPolicyRulePath = "/load_balancers/testString/listeners/testString/policies/testString/rules/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetLoadBalancerListenerPolicyRuleOptions model
    GetLoadBalancerListenerPolicyRuleOptions getLoadBalancerListenerPolicyRuleOptionsModel = new GetLoadBalancerListenerPolicyRuleOptions.Builder()
      .loadBalancerId("testString")
      .listenerId("testString")
      .policyId("testString")
      .id("testString")
      .build();

    // Invoke getLoadBalancerListenerPolicyRule() with a valid options model and verify the result
    Response<LoadBalancerListenerPolicyRule> response = vpcService.getLoadBalancerListenerPolicyRule(getLoadBalancerListenerPolicyRuleOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerListenerPolicyRule responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getLoadBalancerListenerPolicyRulePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getLoadBalancerListenerPolicyRule operation with and without retries enabled
  @Test
  public void testGetLoadBalancerListenerPolicyRuleWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetLoadBalancerListenerPolicyRuleWOptions();

    vpcService.disableRetries();
    testGetLoadBalancerListenerPolicyRuleWOptions();
  }

  // Test the getLoadBalancerListenerPolicyRule operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetLoadBalancerListenerPolicyRuleNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getLoadBalancerListenerPolicyRule(null).execute();
  }

  // Test the updateLoadBalancerListenerPolicyRule operation with a valid options model parameter
  @Test
  public void testUpdateLoadBalancerListenerPolicyRuleWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"condition\": \"contains\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"field\": \"MY-APP-HEADER\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/r006-97c05c26-4748-4db8-ac3f-d8a9c79a7091/policies/r006-0b00a37f-a3d7-43ca-8187-f1e88d659245/rules/r006-d2da2832-9751-4e29-ad1d-4b19c1c83c7b\", \"id\": \"r006-d2da2832-9751-4e29-ad1d-4b19c1c83c7b\", \"provisioning_status\": \"active\", \"type\": \"body\", \"value\": \"value\"}";
    String updateLoadBalancerListenerPolicyRulePath = "/load_balancers/testString/listeners/testString/policies/testString/rules/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the LoadBalancerListenerPolicyRulePatch model
    LoadBalancerListenerPolicyRulePatch loadBalancerListenerPolicyRulePatchModel = new LoadBalancerListenerPolicyRulePatch.Builder()
      .condition("contains")
      .field("MY-APP-HEADER")
      .type("body")
      .value("my-example-hostname-updated")
      .build();
    Map<String, Object> loadBalancerListenerPolicyRulePatchModelAsPatch = loadBalancerListenerPolicyRulePatchModel.asPatch();

    // Construct an instance of the UpdateLoadBalancerListenerPolicyRuleOptions model
    UpdateLoadBalancerListenerPolicyRuleOptions updateLoadBalancerListenerPolicyRuleOptionsModel = new UpdateLoadBalancerListenerPolicyRuleOptions.Builder()
      .loadBalancerId("testString")
      .listenerId("testString")
      .policyId("testString")
      .id("testString")
      .loadBalancerListenerPolicyRulePatch(loadBalancerListenerPolicyRulePatchModelAsPatch)
      .build();

    // Invoke updateLoadBalancerListenerPolicyRule() with a valid options model and verify the result
    Response<LoadBalancerListenerPolicyRule> response = vpcService.updateLoadBalancerListenerPolicyRule(updateLoadBalancerListenerPolicyRuleOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerListenerPolicyRule responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateLoadBalancerListenerPolicyRulePath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateLoadBalancerListenerPolicyRule operation with and without retries enabled
  @Test
  public void testUpdateLoadBalancerListenerPolicyRuleWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateLoadBalancerListenerPolicyRuleWOptions();

    vpcService.disableRetries();
    testUpdateLoadBalancerListenerPolicyRuleWOptions();
  }

  // Test the updateLoadBalancerListenerPolicyRule operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateLoadBalancerListenerPolicyRuleNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateLoadBalancerListenerPolicyRule(null).execute();
  }

  // Test the listLoadBalancerPools operation with a valid options model parameter
  @Test
  public void testListLoadBalancerPoolsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"pools\": [{\"algorithm\": \"least_connections\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"failsafe_policy\": {\"action\": \"forward\", \"healthy_member_threshold_count\": 0, \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}}, \"health_monitor\": {\"delay\": 5, \"max_retries\": 2, \"port\": 22, \"timeout\": 2, \"type\": \"tcp\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"instance_group\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::instance-group:r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\", \"id\": \"r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\", \"name\": \"my-instance-group\"}, \"members\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004/members/r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\", \"id\": \"r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\"}], \"name\": \"my-load-balancer-pool\", \"protocol\": \"http\", \"provisioning_status\": \"active\", \"proxy_protocol\": \"disabled\", \"session_persistence\": {\"cookie_name\": \"my-cookie-name\", \"type\": \"app_cookie\"}}]}";
    String listLoadBalancerPoolsPath = "/load_balancers/testString/pools";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListLoadBalancerPoolsOptions model
    ListLoadBalancerPoolsOptions listLoadBalancerPoolsOptionsModel = new ListLoadBalancerPoolsOptions.Builder()
      .loadBalancerId("testString")
      .build();

    // Invoke listLoadBalancerPools() with a valid options model and verify the result
    Response<LoadBalancerPoolCollection> response = vpcService.listLoadBalancerPools(listLoadBalancerPoolsOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerPoolCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listLoadBalancerPoolsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listLoadBalancerPools operation with and without retries enabled
  @Test
  public void testListLoadBalancerPoolsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListLoadBalancerPoolsWOptions();

    vpcService.disableRetries();
    testListLoadBalancerPoolsWOptions();
  }

  // Test the listLoadBalancerPools operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListLoadBalancerPoolsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listLoadBalancerPools(null).execute();
  }

  // Test the createLoadBalancerPool operation with a valid options model parameter
  @Test
  public void testCreateLoadBalancerPoolWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"algorithm\": \"least_connections\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"failsafe_policy\": {\"action\": \"forward\", \"healthy_member_threshold_count\": 0, \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}}, \"health_monitor\": {\"delay\": 5, \"max_retries\": 2, \"port\": 22, \"timeout\": 2, \"type\": \"tcp\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"instance_group\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::instance-group:r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\", \"id\": \"r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\", \"name\": \"my-instance-group\"}, \"members\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004/members/r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\", \"id\": \"r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\"}], \"name\": \"my-load-balancer-pool\", \"protocol\": \"http\", \"provisioning_status\": \"active\", \"proxy_protocol\": \"disabled\", \"session_persistence\": {\"cookie_name\": \"my-cookie-name\", \"type\": \"app_cookie\"}}";
    String createLoadBalancerPoolPath = "/load_balancers/testString/pools";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the LoadBalancerPoolHealthMonitorPrototypeLoadBalancerPoolHealthMonitorTypeTCPPrototype model
    LoadBalancerPoolHealthMonitorPrototypeLoadBalancerPoolHealthMonitorTypeTCPPrototype loadBalancerPoolHealthMonitorPrototypeModel = new LoadBalancerPoolHealthMonitorPrototypeLoadBalancerPoolHealthMonitorTypeTCPPrototype.Builder()
      .delay(Long.valueOf("5"))
      .maxRetries(Long.valueOf("2"))
      .port(Long.valueOf("22"))
      .timeout(Long.valueOf("2"))
      .type("tcp")
      .build();

    // Construct an instance of the LoadBalancerPoolIdentityLoadBalancerPoolIdentityById model
    LoadBalancerPoolIdentityLoadBalancerPoolIdentityById loadBalancerPoolIdentityModel = new LoadBalancerPoolIdentityLoadBalancerPoolIdentityById.Builder()
      .id("r006-70294e14-4e61-11e8-bcf4-0242ac110004")
      .build();

    // Construct an instance of the LoadBalancerPoolFailsafePolicyPrototype model
    LoadBalancerPoolFailsafePolicyPrototype loadBalancerPoolFailsafePolicyPrototypeModel = new LoadBalancerPoolFailsafePolicyPrototype.Builder()
      .action("forward")
      .target(loadBalancerPoolIdentityModel)
      .build();

    // Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById model
    LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById loadBalancerPoolMemberTargetPrototypeModel = new LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById.Builder()
      .id("0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0")
      .build();

    // Construct an instance of the LoadBalancerPoolMemberPrototype model
    LoadBalancerPoolMemberPrototype loadBalancerPoolMemberPrototypeModel = new LoadBalancerPoolMemberPrototype.Builder()
      .port(Long.valueOf("80"))
      .target(loadBalancerPoolMemberTargetPrototypeModel)
      .weight(Long.valueOf("50"))
      .build();

    // Construct an instance of the LoadBalancerPoolSessionPersistencePrototype model
    LoadBalancerPoolSessionPersistencePrototype loadBalancerPoolSessionPersistencePrototypeModel = new LoadBalancerPoolSessionPersistencePrototype.Builder()
      .cookieName("my-cookie-name")
      .type("app_cookie")
      .build();

    // Construct an instance of the CreateLoadBalancerPoolOptions model
    CreateLoadBalancerPoolOptions createLoadBalancerPoolOptionsModel = new CreateLoadBalancerPoolOptions.Builder()
      .loadBalancerId("testString")
      .algorithm("least_connections")
      .healthMonitor(loadBalancerPoolHealthMonitorPrototypeModel)
      .protocol("http")
      .failsafePolicy(loadBalancerPoolFailsafePolicyPrototypeModel)
      .members(java.util.Arrays.asList(loadBalancerPoolMemberPrototypeModel))
      .name("my-load-balancer-pool")
      .proxyProtocol("disabled")
      .sessionPersistence(loadBalancerPoolSessionPersistencePrototypeModel)
      .build();

    // Invoke createLoadBalancerPool() with a valid options model and verify the result
    Response<LoadBalancerPool> response = vpcService.createLoadBalancerPool(createLoadBalancerPoolOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerPool responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createLoadBalancerPoolPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createLoadBalancerPool operation with and without retries enabled
  @Test
  public void testCreateLoadBalancerPoolWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateLoadBalancerPoolWOptions();

    vpcService.disableRetries();
    testCreateLoadBalancerPoolWOptions();
  }

  // Test the createLoadBalancerPool operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateLoadBalancerPoolNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createLoadBalancerPool(null).execute();
  }

  // Test the deleteLoadBalancerPool operation with a valid options model parameter
  @Test
  public void testDeleteLoadBalancerPoolWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteLoadBalancerPoolPath = "/load_balancers/testString/pools/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteLoadBalancerPoolOptions model
    DeleteLoadBalancerPoolOptions deleteLoadBalancerPoolOptionsModel = new DeleteLoadBalancerPoolOptions.Builder()
      .loadBalancerId("testString")
      .id("testString")
      .build();

    // Invoke deleteLoadBalancerPool() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteLoadBalancerPool(deleteLoadBalancerPoolOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteLoadBalancerPoolPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteLoadBalancerPool operation with and without retries enabled
  @Test
  public void testDeleteLoadBalancerPoolWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteLoadBalancerPoolWOptions();

    vpcService.disableRetries();
    testDeleteLoadBalancerPoolWOptions();
  }

  // Test the deleteLoadBalancerPool operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteLoadBalancerPoolNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteLoadBalancerPool(null).execute();
  }

  // Test the getLoadBalancerPool operation with a valid options model parameter
  @Test
  public void testGetLoadBalancerPoolWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"algorithm\": \"least_connections\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"failsafe_policy\": {\"action\": \"forward\", \"healthy_member_threshold_count\": 0, \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}}, \"health_monitor\": {\"delay\": 5, \"max_retries\": 2, \"port\": 22, \"timeout\": 2, \"type\": \"tcp\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"instance_group\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::instance-group:r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\", \"id\": \"r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\", \"name\": \"my-instance-group\"}, \"members\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004/members/r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\", \"id\": \"r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\"}], \"name\": \"my-load-balancer-pool\", \"protocol\": \"http\", \"provisioning_status\": \"active\", \"proxy_protocol\": \"disabled\", \"session_persistence\": {\"cookie_name\": \"my-cookie-name\", \"type\": \"app_cookie\"}}";
    String getLoadBalancerPoolPath = "/load_balancers/testString/pools/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetLoadBalancerPoolOptions model
    GetLoadBalancerPoolOptions getLoadBalancerPoolOptionsModel = new GetLoadBalancerPoolOptions.Builder()
      .loadBalancerId("testString")
      .id("testString")
      .build();

    // Invoke getLoadBalancerPool() with a valid options model and verify the result
    Response<LoadBalancerPool> response = vpcService.getLoadBalancerPool(getLoadBalancerPoolOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerPool responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getLoadBalancerPoolPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getLoadBalancerPool operation with and without retries enabled
  @Test
  public void testGetLoadBalancerPoolWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetLoadBalancerPoolWOptions();

    vpcService.disableRetries();
    testGetLoadBalancerPoolWOptions();
  }

  // Test the getLoadBalancerPool operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetLoadBalancerPoolNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getLoadBalancerPool(null).execute();
  }

  // Test the updateLoadBalancerPool operation with a valid options model parameter
  @Test
  public void testUpdateLoadBalancerPoolWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"algorithm\": \"least_connections\", \"created_at\": \"2019-01-01T12:00:00.000Z\", \"failsafe_policy\": {\"action\": \"forward\", \"healthy_member_threshold_count\": 0, \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"name\": \"my-load-balancer-pool\"}}, \"health_monitor\": {\"delay\": 5, \"max_retries\": 2, \"port\": 22, \"timeout\": 2, \"type\": \"tcp\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"id\": \"r006-70294e14-4e61-11e8-bcf4-0242ac110004\", \"instance_group\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::instance-group:r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instance_groups/r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\", \"id\": \"r006-7b3ac170-01f3-43d6-87ec-f0ed11ed3f60\", \"name\": \"my-instance-group\"}, \"members\": [{\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004/members/r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\", \"id\": \"r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\"}], \"name\": \"my-load-balancer-pool\", \"protocol\": \"http\", \"provisioning_status\": \"active\", \"proxy_protocol\": \"disabled\", \"session_persistence\": {\"cookie_name\": \"my-cookie-name\", \"type\": \"app_cookie\"}}";
    String updateLoadBalancerPoolPath = "/load_balancers/testString/pools/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the LoadBalancerPoolFailsafePolicyTargetPatchLoadBalancerPoolIdentityById model
    LoadBalancerPoolFailsafePolicyTargetPatchLoadBalancerPoolIdentityById loadBalancerPoolFailsafePolicyTargetPatchModel = new LoadBalancerPoolFailsafePolicyTargetPatchLoadBalancerPoolIdentityById.Builder()
      .id("r006-70294e14-4e61-11e8-bcf4-0242ac110004")
      .build();

    // Construct an instance of the LoadBalancerPoolFailsafePolicyPatch model
    LoadBalancerPoolFailsafePolicyPatch loadBalancerPoolFailsafePolicyPatchModel = new LoadBalancerPoolFailsafePolicyPatch.Builder()
      .action("forward")
      .target(loadBalancerPoolFailsafePolicyTargetPatchModel)
      .build();

    // Construct an instance of the LoadBalancerPoolHealthMonitorPatch model
    LoadBalancerPoolHealthMonitorPatch loadBalancerPoolHealthMonitorPatchModel = new LoadBalancerPoolHealthMonitorPatch.Builder()
      .delay(Long.valueOf("5"))
      .maxRetries(Long.valueOf("2"))
      .port(Long.valueOf("22"))
      .timeout(Long.valueOf("2"))
      .type("http")
      .urlPath("/")
      .build();

    // Construct an instance of the LoadBalancerPoolSessionPersistencePatch model
    LoadBalancerPoolSessionPersistencePatch loadBalancerPoolSessionPersistencePatchModel = new LoadBalancerPoolSessionPersistencePatch.Builder()
      .cookieName("my-cookie-name")
      .type("app_cookie")
      .build();

    // Construct an instance of the LoadBalancerPoolPatch model
    LoadBalancerPoolPatch loadBalancerPoolPatchModel = new LoadBalancerPoolPatch.Builder()
      .algorithm("weighted_round_robin")
      .failsafePolicy(loadBalancerPoolFailsafePolicyPatchModel)
      .healthMonitor(loadBalancerPoolHealthMonitorPatchModel)
      .name("my-load-balancer-pool")
      .protocol("http")
      .proxyProtocol("disabled")
      .sessionPersistence(loadBalancerPoolSessionPersistencePatchModel)
      .build();
    Map<String, Object> loadBalancerPoolPatchModelAsPatch = loadBalancerPoolPatchModel.asPatch();

    // Construct an instance of the UpdateLoadBalancerPoolOptions model
    UpdateLoadBalancerPoolOptions updateLoadBalancerPoolOptionsModel = new UpdateLoadBalancerPoolOptions.Builder()
      .loadBalancerId("testString")
      .id("testString")
      .loadBalancerPoolPatch(loadBalancerPoolPatchModelAsPatch)
      .build();

    // Invoke updateLoadBalancerPool() with a valid options model and verify the result
    Response<LoadBalancerPool> response = vpcService.updateLoadBalancerPool(updateLoadBalancerPoolOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerPool responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateLoadBalancerPoolPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateLoadBalancerPool operation with and without retries enabled
  @Test
  public void testUpdateLoadBalancerPoolWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateLoadBalancerPoolWOptions();

    vpcService.disableRetries();
    testUpdateLoadBalancerPoolWOptions();
  }

  // Test the updateLoadBalancerPool operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateLoadBalancerPoolNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateLoadBalancerPool(null).execute();
  }

  // Test the listLoadBalancerPoolMembers operation with a valid options model parameter
  @Test
  public void testListLoadBalancerPoolMembersWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"members\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"health\": \"faulted\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004/members/r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\", \"id\": \"r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\", \"port\": 80, \"provisioning_status\": \"active\", \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"id\": \"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"name\": \"my-instance\"}, \"weight\": 50}]}";
    String listLoadBalancerPoolMembersPath = "/load_balancers/testString/pools/testString/members";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListLoadBalancerPoolMembersOptions model
    ListLoadBalancerPoolMembersOptions listLoadBalancerPoolMembersOptionsModel = new ListLoadBalancerPoolMembersOptions.Builder()
      .loadBalancerId("testString")
      .poolId("testString")
      .build();

    // Invoke listLoadBalancerPoolMembers() with a valid options model and verify the result
    Response<LoadBalancerPoolMemberCollection> response = vpcService.listLoadBalancerPoolMembers(listLoadBalancerPoolMembersOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerPoolMemberCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listLoadBalancerPoolMembersPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the listLoadBalancerPoolMembers operation with and without retries enabled
  @Test
  public void testListLoadBalancerPoolMembersWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListLoadBalancerPoolMembersWOptions();

    vpcService.disableRetries();
    testListLoadBalancerPoolMembersWOptions();
  }

  // Test the listLoadBalancerPoolMembers operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListLoadBalancerPoolMembersNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listLoadBalancerPoolMembers(null).execute();
  }

  // Test the createLoadBalancerPoolMember operation with a valid options model parameter
  @Test
  public void testCreateLoadBalancerPoolMemberWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"health\": \"faulted\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004/members/r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\", \"id\": \"r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\", \"port\": 80, \"provisioning_status\": \"active\", \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"id\": \"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"name\": \"my-instance\"}, \"weight\": 50}";
    String createLoadBalancerPoolMemberPath = "/load_balancers/testString/pools/testString/members";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById model
    LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById loadBalancerPoolMemberTargetPrototypeModel = new LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById.Builder()
      .id("0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0")
      .build();

    // Construct an instance of the CreateLoadBalancerPoolMemberOptions model
    CreateLoadBalancerPoolMemberOptions createLoadBalancerPoolMemberOptionsModel = new CreateLoadBalancerPoolMemberOptions.Builder()
      .loadBalancerId("testString")
      .poolId("testString")
      .port(Long.valueOf("80"))
      .target(loadBalancerPoolMemberTargetPrototypeModel)
      .weight(Long.valueOf("50"))
      .build();

    // Invoke createLoadBalancerPoolMember() with a valid options model and verify the result
    Response<LoadBalancerPoolMember> response = vpcService.createLoadBalancerPoolMember(createLoadBalancerPoolMemberOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerPoolMember responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createLoadBalancerPoolMemberPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createLoadBalancerPoolMember operation with and without retries enabled
  @Test
  public void testCreateLoadBalancerPoolMemberWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateLoadBalancerPoolMemberWOptions();

    vpcService.disableRetries();
    testCreateLoadBalancerPoolMemberWOptions();
  }

  // Test the createLoadBalancerPoolMember operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateLoadBalancerPoolMemberNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createLoadBalancerPoolMember(null).execute();
  }

  // Test the replaceLoadBalancerPoolMembers operation with a valid options model parameter
  @Test
  public void testReplaceLoadBalancerPoolMembersWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"members\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"health\": \"faulted\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004/members/r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\", \"id\": \"r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\", \"port\": 80, \"provisioning_status\": \"active\", \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"id\": \"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"name\": \"my-instance\"}, \"weight\": 50}]}";
    String replaceLoadBalancerPoolMembersPath = "/load_balancers/testString/pools/testString/members";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById model
    LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById loadBalancerPoolMemberTargetPrototypeModel = new LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById.Builder()
      .id("0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0")
      .build();

    // Construct an instance of the LoadBalancerPoolMemberPrototype model
    LoadBalancerPoolMemberPrototype loadBalancerPoolMemberPrototypeModel = new LoadBalancerPoolMemberPrototype.Builder()
      .port(Long.valueOf("80"))
      .target(loadBalancerPoolMemberTargetPrototypeModel)
      .weight(Long.valueOf("50"))
      .build();

    // Construct an instance of the ReplaceLoadBalancerPoolMembersOptions model
    ReplaceLoadBalancerPoolMembersOptions replaceLoadBalancerPoolMembersOptionsModel = new ReplaceLoadBalancerPoolMembersOptions.Builder()
      .loadBalancerId("testString")
      .poolId("testString")
      .members(java.util.Arrays.asList(loadBalancerPoolMemberPrototypeModel))
      .build();

    // Invoke replaceLoadBalancerPoolMembers() with a valid options model and verify the result
    Response<LoadBalancerPoolMemberCollection> response = vpcService.replaceLoadBalancerPoolMembers(replaceLoadBalancerPoolMembersOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerPoolMemberCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PUT");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, replaceLoadBalancerPoolMembersPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the replaceLoadBalancerPoolMembers operation with and without retries enabled
  @Test
  public void testReplaceLoadBalancerPoolMembersWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testReplaceLoadBalancerPoolMembersWOptions();

    vpcService.disableRetries();
    testReplaceLoadBalancerPoolMembersWOptions();
  }

  // Test the replaceLoadBalancerPoolMembers operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testReplaceLoadBalancerPoolMembersNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.replaceLoadBalancerPoolMembers(null).execute();
  }

  // Test the deleteLoadBalancerPoolMember operation with a valid options model parameter
  @Test
  public void testDeleteLoadBalancerPoolMemberWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteLoadBalancerPoolMemberPath = "/load_balancers/testString/pools/testString/members/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(202)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteLoadBalancerPoolMemberOptions model
    DeleteLoadBalancerPoolMemberOptions deleteLoadBalancerPoolMemberOptionsModel = new DeleteLoadBalancerPoolMemberOptions.Builder()
      .loadBalancerId("testString")
      .poolId("testString")
      .id("testString")
      .build();

    // Invoke deleteLoadBalancerPoolMember() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteLoadBalancerPoolMember(deleteLoadBalancerPoolMemberOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteLoadBalancerPoolMemberPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteLoadBalancerPoolMember operation with and without retries enabled
  @Test
  public void testDeleteLoadBalancerPoolMemberWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteLoadBalancerPoolMemberWOptions();

    vpcService.disableRetries();
    testDeleteLoadBalancerPoolMemberWOptions();
  }

  // Test the deleteLoadBalancerPoolMember operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteLoadBalancerPoolMemberNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteLoadBalancerPoolMember(null).execute();
  }

  // Test the getLoadBalancerPoolMember operation with a valid options model parameter
  @Test
  public void testGetLoadBalancerPoolMemberWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"health\": \"faulted\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004/members/r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\", \"id\": \"r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\", \"port\": 80, \"provisioning_status\": \"active\", \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"id\": \"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"name\": \"my-instance\"}, \"weight\": 50}";
    String getLoadBalancerPoolMemberPath = "/load_balancers/testString/pools/testString/members/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetLoadBalancerPoolMemberOptions model
    GetLoadBalancerPoolMemberOptions getLoadBalancerPoolMemberOptionsModel = new GetLoadBalancerPoolMemberOptions.Builder()
      .loadBalancerId("testString")
      .poolId("testString")
      .id("testString")
      .build();

    // Invoke getLoadBalancerPoolMember() with a valid options model and verify the result
    Response<LoadBalancerPoolMember> response = vpcService.getLoadBalancerPoolMember(getLoadBalancerPoolMemberOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerPoolMember responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getLoadBalancerPoolMemberPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getLoadBalancerPoolMember operation with and without retries enabled
  @Test
  public void testGetLoadBalancerPoolMemberWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetLoadBalancerPoolMemberWOptions();

    vpcService.disableRetries();
    testGetLoadBalancerPoolMemberWOptions();
  }

  // Test the getLoadBalancerPoolMember operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetLoadBalancerPoolMemberNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getLoadBalancerPoolMember(null).execute();
  }

  // Test the updateLoadBalancerPoolMember operation with a valid options model parameter
  @Test
  public void testUpdateLoadBalancerPoolMemberWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"health\": \"faulted\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/r006-70294e14-4e61-11e8-bcf4-0242ac110004/members/r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\", \"id\": \"r006-4a4b345f-cf6b-4326-8202-6d8229e9833a\", \"port\": 80, \"provisioning_status\": \"active\", \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south-1:a/aa2432b1fa4d4ace891e9b80fc104e34::instance:0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"id\": \"0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0\", \"name\": \"my-instance\"}, \"weight\": 50}";
    String updateLoadBalancerPoolMemberPath = "/load_balancers/testString/pools/testString/members/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById model
    LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById loadBalancerPoolMemberTargetPrototypeModel = new LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityById.Builder()
      .id("0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0")
      .build();

    // Construct an instance of the LoadBalancerPoolMemberPatch model
    LoadBalancerPoolMemberPatch loadBalancerPoolMemberPatchModel = new LoadBalancerPoolMemberPatch.Builder()
      .port(Long.valueOf("80"))
      .target(loadBalancerPoolMemberTargetPrototypeModel)
      .weight(Long.valueOf("99"))
      .build();
    Map<String, Object> loadBalancerPoolMemberPatchModelAsPatch = loadBalancerPoolMemberPatchModel.asPatch();

    // Construct an instance of the UpdateLoadBalancerPoolMemberOptions model
    UpdateLoadBalancerPoolMemberOptions updateLoadBalancerPoolMemberOptionsModel = new UpdateLoadBalancerPoolMemberOptions.Builder()
      .loadBalancerId("testString")
      .poolId("testString")
      .id("testString")
      .loadBalancerPoolMemberPatch(loadBalancerPoolMemberPatchModelAsPatch)
      .build();

    // Invoke updateLoadBalancerPoolMember() with a valid options model and verify the result
    Response<LoadBalancerPoolMember> response = vpcService.updateLoadBalancerPoolMember(updateLoadBalancerPoolMemberOptionsModel).execute();
    assertNotNull(response);
    LoadBalancerPoolMember responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateLoadBalancerPoolMemberPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateLoadBalancerPoolMember operation with and without retries enabled
  @Test
  public void testUpdateLoadBalancerPoolMemberWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateLoadBalancerPoolMemberWOptions();

    vpcService.disableRetries();
    testUpdateLoadBalancerPoolMemberWOptions();
  }

  // Test the updateLoadBalancerPoolMember operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateLoadBalancerPoolMemberNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateLoadBalancerPoolMember(null).execute();
  }

  // Test the listEndpointGateways operation with a valid options model parameter
  @Test
  public void testListEndpointGatewaysWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"endpoint_gateways\": [{\"allow_dns_resolution_binding\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"id\": \"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"ips\": [{\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}], \"lifecycle_reasons\": [{\"code\": \"dns_resolution_binding_pending\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-endpoint-gateway\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"endpoint_gateway\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"service_endpoint\": \"my-cloudant-instance.appdomain.cloud\", \"service_endpoints\": [\"my-cloudant-instance.appdomain.cloud\"], \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::private-path-service-gateway:r006-7268d425-59b7-48fd-9735-81a7271657d5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/private_path_service_gateways/r006-7268d425-59b7-48fd-9735-81a7271657d5\", \"id\": \"r006-7268d425-59b7-48fd-9735-81a7271657d5\", \"name\": \"my-private-path-service-gateway\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"private_path_service_gateway\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}], \"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listEndpointGatewaysPath = "/endpoint_gateways";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListEndpointGatewaysOptions model
    ListEndpointGatewaysOptions listEndpointGatewaysOptionsModel = new ListEndpointGatewaysOptions.Builder()
      .name("my-name")
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .lifecycleState(java.util.Arrays.asList("stable"))
      .vpcId("testString")
      .vpcCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .vpcName("my-vpc")
      .allowDnsResolutionBinding(true)
      .build();

    // Invoke listEndpointGateways() with a valid options model and verify the result
    Response<EndpointGatewayCollection> response = vpcService.listEndpointGateways(listEndpointGatewaysOptionsModel).execute();
    assertNotNull(response);
    EndpointGatewayCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listEndpointGatewaysPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("name"), "my-name");
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
    assertEquals(query.get("lifecycle_state"), RequestUtils.join(java.util.Arrays.asList("stable"), ","));
    assertEquals(query.get("vpc.id"), "testString");
    assertEquals(query.get("vpc.crn"), "crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b");
    assertEquals(query.get("vpc.name"), "my-vpc");
    assertEquals(Boolean.valueOf(query.get("allow_dns_resolution_binding")), Boolean.valueOf(true));
  }

  // Test the listEndpointGateways operation with and without retries enabled
  @Test
  public void testListEndpointGatewaysWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListEndpointGatewaysWOptions();

    vpcService.disableRetries();
    testListEndpointGatewaysWOptions();
  }

  // Test the listEndpointGateways operation using the EndpointGatewaysPager.getNext() method
  @Test
  public void testListEndpointGatewaysWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"endpoint_gateways\":[{\"allow_dns_resolution_binding\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"id\":\"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"ips\":[{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"}],\"lifecycle_reasons\":[{\"code\":\"dns_resolution_binding_pending\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"name\":\"my-endpoint-gateway\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"endpoint_gateway\",\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"service_endpoint\":\"my-cloudant-instance.appdomain.cloud\",\"service_endpoints\":[\"my-cloudant-instance.appdomain.cloud\"],\"target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::private-path-service-gateway:r006-7268d425-59b7-48fd-9735-81a7271657d5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/private_path_service_gateways/r006-7268d425-59b7-48fd-9735-81a7271657d5\",\"id\":\"r006-7268d425-59b7-48fd-9735-81a7271657d5\",\"name\":\"my-private-path-service-gateway\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"private_path_service_gateway\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"endpoint_gateways\":[{\"allow_dns_resolution_binding\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"id\":\"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"ips\":[{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"}],\"lifecycle_reasons\":[{\"code\":\"dns_resolution_binding_pending\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"name\":\"my-endpoint-gateway\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"endpoint_gateway\",\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"service_endpoint\":\"my-cloudant-instance.appdomain.cloud\",\"service_endpoints\":[\"my-cloudant-instance.appdomain.cloud\"],\"target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::private-path-service-gateway:r006-7268d425-59b7-48fd-9735-81a7271657d5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/private_path_service_gateways/r006-7268d425-59b7-48fd-9735-81a7271657d5\",\"id\":\"r006-7268d425-59b7-48fd-9735-81a7271657d5\",\"name\":\"my-private-path-service-gateway\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"private_path_service_gateway\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListEndpointGatewaysOptions listEndpointGatewaysOptions = new ListEndpointGatewaysOptions.Builder()
      .name("my-name")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .lifecycleState(java.util.Arrays.asList("stable"))
      .vpcId("testString")
      .vpcCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .vpcName("my-vpc")
      .allowDnsResolutionBinding(true)
      .build();

    List<EndpointGateway> allResults = new ArrayList<>();
    EndpointGatewaysPager pager = new EndpointGatewaysPager(vpcService, listEndpointGatewaysOptions);
    while (pager.hasNext()) {
      List<EndpointGateway> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listEndpointGateways operation using the EndpointGatewaysPager.getAll() method
  @Test
  public void testListEndpointGatewaysWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"endpoint_gateways\":[{\"allow_dns_resolution_binding\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"id\":\"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"ips\":[{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"}],\"lifecycle_reasons\":[{\"code\":\"dns_resolution_binding_pending\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"name\":\"my-endpoint-gateway\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"endpoint_gateway\",\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"service_endpoint\":\"my-cloudant-instance.appdomain.cloud\",\"service_endpoints\":[\"my-cloudant-instance.appdomain.cloud\"],\"target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::private-path-service-gateway:r006-7268d425-59b7-48fd-9735-81a7271657d5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/private_path_service_gateways/r006-7268d425-59b7-48fd-9735-81a7271657d5\",\"id\":\"r006-7268d425-59b7-48fd-9735-81a7271657d5\",\"name\":\"my-private-path-service-gateway\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"private_path_service_gateway\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"endpoint_gateways\":[{\"allow_dns_resolution_binding\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"health_state\":\"ok\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"id\":\"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"ips\":[{\"address\":\"192.168.3.4\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"name\":\"my-reserved-ip\",\"resource_type\":\"subnet_reserved_ip\"}],\"lifecycle_reasons\":[{\"code\":\"dns_resolution_binding_pending\",\"message\":\"The resource has been suspended. Contact IBM support with the CRN for next steps.\",\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}],\"lifecycle_state\":\"stable\",\"name\":\"my-endpoint-gateway\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"endpoint_gateway\",\"security_groups\":[{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"id\":\"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\",\"name\":\"my-security-group\"}],\"service_endpoint\":\"my-cloudant-instance.appdomain.cloud\",\"service_endpoints\":[\"my-cloudant-instance.appdomain.cloud\"],\"target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::private-path-service-gateway:r006-7268d425-59b7-48fd-9735-81a7271657d5\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/private_path_service_gateways/r006-7268d425-59b7-48fd-9735-81a7271657d5\",\"id\":\"r006-7268d425-59b7-48fd-9735-81a7271657d5\",\"name\":\"my-private-path-service-gateway\",\"remote\":{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"region\":{\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\",\"name\":\"us-south\"}},\"resource_type\":\"private_path_service_gateway\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListEndpointGatewaysOptions listEndpointGatewaysOptions = new ListEndpointGatewaysOptions.Builder()
      .name("my-name")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .lifecycleState(java.util.Arrays.asList("stable"))
      .vpcId("testString")
      .vpcCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .vpcName("my-vpc")
      .allowDnsResolutionBinding(true)
      .build();

    EndpointGatewaysPager pager = new EndpointGatewaysPager(vpcService, listEndpointGatewaysOptions);
    List<EndpointGateway> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createEndpointGateway operation with a valid options model parameter
  @Test
  public void testCreateEndpointGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"allow_dns_resolution_binding\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"id\": \"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"ips\": [{\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}], \"lifecycle_reasons\": [{\"code\": \"dns_resolution_binding_pending\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-endpoint-gateway\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"endpoint_gateway\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"service_endpoint\": \"my-cloudant-instance.appdomain.cloud\", \"service_endpoints\": [\"my-cloudant-instance.appdomain.cloud\"], \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::private-path-service-gateway:r006-7268d425-59b7-48fd-9735-81a7271657d5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/private_path_service_gateways/r006-7268d425-59b7-48fd-9735-81a7271657d5\", \"id\": \"r006-7268d425-59b7-48fd-9735-81a7271657d5\", \"name\": \"my-private-path-service-gateway\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"private_path_service_gateway\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String createEndpointGatewayPath = "/endpoint_gateways";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the EndpointGatewayTargetPrototypeEndpointGatewayTargetResourceTypeProviderInfrastructureServicePrototype model
    EndpointGatewayTargetPrototypeEndpointGatewayTargetResourceTypeProviderInfrastructureServicePrototype endpointGatewayTargetPrototypeModel = new EndpointGatewayTargetPrototypeEndpointGatewayTargetResourceTypeProviderInfrastructureServicePrototype.Builder()
      .name("ibm-ntp-server")
      .resourceType("provider_infrastructure_service")
      .build();

    // Construct an instance of the VPCIdentityById model
    VPCIdentityById vpcIdentityModel = new VPCIdentityById.Builder()
      .id("r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .build();

    // Construct an instance of the EndpointGatewayReservedIPReservedIPIdentityById model
    EndpointGatewayReservedIPReservedIPIdentityById endpointGatewayReservedIpModel = new EndpointGatewayReservedIPReservedIPIdentityById.Builder()
      .id("0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb")
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the SecurityGroupIdentityById model
    SecurityGroupIdentityById securityGroupIdentityModel = new SecurityGroupIdentityById.Builder()
      .id("r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271")
      .build();

    // Construct an instance of the CreateEndpointGatewayOptions model
    CreateEndpointGatewayOptions createEndpointGatewayOptionsModel = new CreateEndpointGatewayOptions.Builder()
      .target(endpointGatewayTargetPrototypeModel)
      .vpc(vpcIdentityModel)
      .allowDnsResolutionBinding(true)
      .ips(java.util.Arrays.asList(endpointGatewayReservedIpModel))
      .name("testString")
      .resourceGroup(resourceGroupIdentityModel)
      .securityGroups(java.util.Arrays.asList(securityGroupIdentityModel))
      .build();

    // Invoke createEndpointGateway() with a valid options model and verify the result
    Response<EndpointGateway> response = vpcService.createEndpointGateway(createEndpointGatewayOptionsModel).execute();
    assertNotNull(response);
    EndpointGateway responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createEndpointGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createEndpointGateway operation with and without retries enabled
  @Test
  public void testCreateEndpointGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateEndpointGatewayWOptions();

    vpcService.disableRetries();
    testCreateEndpointGatewayWOptions();
  }

  // Test the createEndpointGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateEndpointGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createEndpointGateway(null).execute();
  }

  // Test the listEndpointGatewayIps operation with a valid options model parameter
  @Test
  public void testListEndpointGatewayIpsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"ips\": [{\"address\": \"192.168.3.4\", \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"lifecycle_state\": \"stable\", \"name\": \"my-reserved-ip\", \"owner\": \"provider\", \"resource_type\": \"subnet_reserved_ip\", \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"id\": \"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"name\": \"my-endpoint-gateway\", \"resource_type\": \"endpoint_gateway\"}}], \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listEndpointGatewayIpsPath = "/endpoint_gateways/testString/ips";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListEndpointGatewayIpsOptions model
    ListEndpointGatewayIpsOptions listEndpointGatewayIpsOptionsModel = new ListEndpointGatewayIpsOptions.Builder()
      .endpointGatewayId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .sort("name")
      .build();

    // Invoke listEndpointGatewayIps() with a valid options model and verify the result
    Response<ReservedIPCollectionEndpointGatewayContext> response = vpcService.listEndpointGatewayIps(listEndpointGatewayIpsOptionsModel).execute();
    assertNotNull(response);
    ReservedIPCollectionEndpointGatewayContext responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listEndpointGatewayIpsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("sort"), "name");
  }

  // Test the listEndpointGatewayIps operation with and without retries enabled
  @Test
  public void testListEndpointGatewayIpsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListEndpointGatewayIpsWOptions();

    vpcService.disableRetries();
    testListEndpointGatewayIpsWOptions();
  }

  // Test the listEndpointGatewayIps operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListEndpointGatewayIpsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listEndpointGatewayIps(null).execute();
  }

  // Test the listEndpointGatewayIps operation using the EndpointGatewayIpsPager.getNext() method
  @Test
  public void testListEndpointGatewayIpsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"ips\":[{\"address\":\"192.168.3.4\",\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"lifecycle_state\":\"stable\",\"name\":\"my-reserved-ip\",\"owner\":\"provider\",\"resource_type\":\"subnet_reserved_ip\",\"target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"id\":\"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"name\":\"my-endpoint-gateway\",\"resource_type\":\"endpoint_gateway\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"ips\":[{\"address\":\"192.168.3.4\",\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"lifecycle_state\":\"stable\",\"name\":\"my-reserved-ip\",\"owner\":\"provider\",\"resource_type\":\"subnet_reserved_ip\",\"target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"id\":\"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"name\":\"my-endpoint-gateway\",\"resource_type\":\"endpoint_gateway\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListEndpointGatewayIpsOptions listEndpointGatewayIpsOptions = new ListEndpointGatewayIpsOptions.Builder()
      .endpointGatewayId("testString")
      .limit(Long.valueOf("10"))
      .sort("name")
      .build();

    List<ReservedIP> allResults = new ArrayList<>();
    EndpointGatewayIpsPager pager = new EndpointGatewayIpsPager(vpcService, listEndpointGatewayIpsOptions);
    while (pager.hasNext()) {
      List<ReservedIP> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listEndpointGatewayIps operation using the EndpointGatewayIpsPager.getAll() method
  @Test
  public void testListEndpointGatewayIpsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"ips\":[{\"address\":\"192.168.3.4\",\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"lifecycle_state\":\"stable\",\"name\":\"my-reserved-ip\",\"owner\":\"provider\",\"resource_type\":\"subnet_reserved_ip\",\"target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"id\":\"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"name\":\"my-endpoint-gateway\",\"resource_type\":\"endpoint_gateway\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"ips\":[{\"address\":\"192.168.3.4\",\"auto_delete\":false,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"id\":\"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\",\"lifecycle_state\":\"stable\",\"name\":\"my-reserved-ip\",\"owner\":\"provider\",\"resource_type\":\"subnet_reserved_ip\",\"target\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"id\":\"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\",\"name\":\"my-endpoint-gateway\",\"resource_type\":\"endpoint_gateway\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListEndpointGatewayIpsOptions listEndpointGatewayIpsOptions = new ListEndpointGatewayIpsOptions.Builder()
      .endpointGatewayId("testString")
      .limit(Long.valueOf("10"))
      .sort("name")
      .build();

    EndpointGatewayIpsPager pager = new EndpointGatewayIpsPager(vpcService, listEndpointGatewayIpsOptions);
    List<ReservedIP> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the removeEndpointGatewayIp operation with a valid options model parameter
  @Test
  public void testRemoveEndpointGatewayIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String removeEndpointGatewayIpPath = "/endpoint_gateways/testString/ips/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the RemoveEndpointGatewayIpOptions model
    RemoveEndpointGatewayIpOptions removeEndpointGatewayIpOptionsModel = new RemoveEndpointGatewayIpOptions.Builder()
      .endpointGatewayId("testString")
      .id("testString")
      .build();

    // Invoke removeEndpointGatewayIp() with a valid options model and verify the result
    Response<Void> response = vpcService.removeEndpointGatewayIp(removeEndpointGatewayIpOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, removeEndpointGatewayIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the removeEndpointGatewayIp operation with and without retries enabled
  @Test
  public void testRemoveEndpointGatewayIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testRemoveEndpointGatewayIpWOptions();

    vpcService.disableRetries();
    testRemoveEndpointGatewayIpWOptions();
  }

  // Test the removeEndpointGatewayIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testRemoveEndpointGatewayIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.removeEndpointGatewayIp(null).execute();
  }

  // Test the getEndpointGatewayIp operation with a valid options model parameter
  @Test
  public void testGetEndpointGatewayIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"192.168.3.4\", \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"lifecycle_state\": \"stable\", \"name\": \"my-reserved-ip\", \"owner\": \"provider\", \"resource_type\": \"subnet_reserved_ip\", \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"id\": \"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"name\": \"my-endpoint-gateway\", \"resource_type\": \"endpoint_gateway\"}}";
    String getEndpointGatewayIpPath = "/endpoint_gateways/testString/ips/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetEndpointGatewayIpOptions model
    GetEndpointGatewayIpOptions getEndpointGatewayIpOptionsModel = new GetEndpointGatewayIpOptions.Builder()
      .endpointGatewayId("testString")
      .id("testString")
      .build();

    // Invoke getEndpointGatewayIp() with a valid options model and verify the result
    Response<ReservedIP> response = vpcService.getEndpointGatewayIp(getEndpointGatewayIpOptionsModel).execute();
    assertNotNull(response);
    ReservedIP responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getEndpointGatewayIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getEndpointGatewayIp operation with and without retries enabled
  @Test
  public void testGetEndpointGatewayIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetEndpointGatewayIpWOptions();

    vpcService.disableRetries();
    testGetEndpointGatewayIpWOptions();
  }

  // Test the getEndpointGatewayIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetEndpointGatewayIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getEndpointGatewayIp(null).execute();
  }

  // Test the addEndpointGatewayIp operation with a valid options model parameter
  @Test
  public void testAddEndpointGatewayIpWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"address\": \"192.168.3.4\", \"auto_delete\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"lifecycle_state\": \"stable\", \"name\": \"my-reserved-ip\", \"owner\": \"provider\", \"resource_type\": \"subnet_reserved_ip\", \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"id\": \"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"name\": \"my-endpoint-gateway\", \"resource_type\": \"endpoint_gateway\"}}";
    String addEndpointGatewayIpPath = "/endpoint_gateways/testString/ips/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the AddEndpointGatewayIpOptions model
    AddEndpointGatewayIpOptions addEndpointGatewayIpOptionsModel = new AddEndpointGatewayIpOptions.Builder()
      .endpointGatewayId("testString")
      .id("testString")
      .build();

    // Invoke addEndpointGatewayIp() with a valid options model and verify the result
    Response<ReservedIP> response = vpcService.addEndpointGatewayIp(addEndpointGatewayIpOptionsModel).execute();
    assertNotNull(response);
    ReservedIP responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PUT");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, addEndpointGatewayIpPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the addEndpointGatewayIp operation with and without retries enabled
  @Test
  public void testAddEndpointGatewayIpWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testAddEndpointGatewayIpWOptions();

    vpcService.disableRetries();
    testAddEndpointGatewayIpWOptions();
  }

  // Test the addEndpointGatewayIp operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testAddEndpointGatewayIpNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.addEndpointGatewayIp(null).execute();
  }

  // Test the deleteEndpointGateway operation with a valid options model parameter
  @Test
  public void testDeleteEndpointGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteEndpointGatewayPath = "/endpoint_gateways/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteEndpointGatewayOptions model
    DeleteEndpointGatewayOptions deleteEndpointGatewayOptionsModel = new DeleteEndpointGatewayOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteEndpointGateway() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteEndpointGateway(deleteEndpointGatewayOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteEndpointGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteEndpointGateway operation with and without retries enabled
  @Test
  public void testDeleteEndpointGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteEndpointGatewayWOptions();

    vpcService.disableRetries();
    testDeleteEndpointGatewayWOptions();
  }

  // Test the deleteEndpointGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteEndpointGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteEndpointGateway(null).execute();
  }

  // Test the getEndpointGateway operation with a valid options model parameter
  @Test
  public void testGetEndpointGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"allow_dns_resolution_binding\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"id\": \"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"ips\": [{\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}], \"lifecycle_reasons\": [{\"code\": \"dns_resolution_binding_pending\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-endpoint-gateway\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"endpoint_gateway\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"service_endpoint\": \"my-cloudant-instance.appdomain.cloud\", \"service_endpoints\": [\"my-cloudant-instance.appdomain.cloud\"], \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::private-path-service-gateway:r006-7268d425-59b7-48fd-9735-81a7271657d5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/private_path_service_gateways/r006-7268d425-59b7-48fd-9735-81a7271657d5\", \"id\": \"r006-7268d425-59b7-48fd-9735-81a7271657d5\", \"name\": \"my-private-path-service-gateway\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"private_path_service_gateway\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String getEndpointGatewayPath = "/endpoint_gateways/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetEndpointGatewayOptions model
    GetEndpointGatewayOptions getEndpointGatewayOptionsModel = new GetEndpointGatewayOptions.Builder()
      .id("testString")
      .build();

    // Invoke getEndpointGateway() with a valid options model and verify the result
    Response<EndpointGateway> response = vpcService.getEndpointGateway(getEndpointGatewayOptionsModel).execute();
    assertNotNull(response);
    EndpointGateway responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getEndpointGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getEndpointGateway operation with and without retries enabled
  @Test
  public void testGetEndpointGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetEndpointGatewayWOptions();

    vpcService.disableRetries();
    testGetEndpointGatewayWOptions();
  }

  // Test the getEndpointGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetEndpointGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getEndpointGateway(null).execute();
  }

  // Test the updateEndpointGateway operation with a valid options model parameter
  @Test
  public void testUpdateEndpointGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"allow_dns_resolution_binding\": false, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::endpoint-gateway:r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"health_state\": \"ok\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"id\": \"r006-7610ebfb-f5dc-4d42-bc18-287d47f7a5b0\", \"ips\": [{\"address\": \"192.168.3.4\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/subnets/0717-bea6a632-5e13-42a4-b4b8-31dc877abfe4/reserved_ips/0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"id\": \"0717-6d353a0f-aeb1-4ae1-832e-1110d10981bb\", \"name\": \"my-reserved-ip\", \"resource_type\": \"subnet_reserved_ip\"}], \"lifecycle_reasons\": [{\"code\": \"dns_resolution_binding_pending\", \"message\": \"The resource has been suspended. Contact IBM support with the CRN for next steps.\", \"more_info\": \"https://cloud.ibm.com/apidocs/vpc#resource-suspension\"}], \"lifecycle_state\": \"stable\", \"name\": \"my-endpoint-gateway\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"endpoint_gateway\", \"security_groups\": [{\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::security-group:r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/security_groups/r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"id\": \"r006-be5df5ca-12a0-494b-907e-aa6ec2bfa271\", \"name\": \"my-security-group\"}], \"service_endpoint\": \"my-cloudant-instance.appdomain.cloud\", \"service_endpoints\": [\"my-cloudant-instance.appdomain.cloud\"], \"target\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::private-path-service-gateway:r006-7268d425-59b7-48fd-9735-81a7271657d5\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/private_path_service_gateways/r006-7268d425-59b7-48fd-9735-81a7271657d5\", \"id\": \"r006-7268d425-59b7-48fd-9735-81a7271657d5\", \"name\": \"my-private-path-service-gateway\", \"remote\": {\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"region\": {\"href\": \"https://us-south.iaas.cloud.ibm.com/v1/regions/us-south\", \"name\": \"us-south\"}}, \"resource_type\": \"private_path_service_gateway\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String updateEndpointGatewayPath = "/endpoint_gateways/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the EndpointGatewayPatch model
    EndpointGatewayPatch endpointGatewayPatchModel = new EndpointGatewayPatch.Builder()
      .allowDnsResolutionBinding(false)
      .name("my-endpoint-gateway")
      .build();
    Map<String, Object> endpointGatewayPatchModelAsPatch = endpointGatewayPatchModel.asPatch();

    // Construct an instance of the UpdateEndpointGatewayOptions model
    UpdateEndpointGatewayOptions updateEndpointGatewayOptionsModel = new UpdateEndpointGatewayOptions.Builder()
      .id("testString")
      .endpointGatewayPatch(endpointGatewayPatchModelAsPatch)
      .build();

    // Invoke updateEndpointGateway() with a valid options model and verify the result
    Response<EndpointGateway> response = vpcService.updateEndpointGateway(updateEndpointGatewayOptionsModel).execute();
    assertNotNull(response);
    EndpointGateway responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateEndpointGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateEndpointGateway operation with and without retries enabled
  @Test
  public void testUpdateEndpointGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateEndpointGatewayWOptions();

    vpcService.disableRetries();
    testUpdateEndpointGatewayWOptions();
  }

  // Test the updateEndpointGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateEndpointGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateEndpointGateway(null).execute();
  }

  // Test the listFlowLogCollectors operation with a valid options model parameter
  @Test
  public void testListFlowLogCollectorsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"flow_log_collectors\": [{\"active\": true, \"auto_delete\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::flow-log-collector:r006-ad0cded3-53a3-4d4a-9809-8c59b50d2b80\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/r006-ad0cded3-53a3-4d4a-9809-8c59b50d2b80\", \"id\": \"r006-ad0cded3-53a3-4d4a-9809-8c59b50d2b80\", \"lifecycle_state\": \"stable\", \"name\": \"my-flow-log-collector\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"storage_bucket\": {\"name\": \"bucket-27200-lwx4cfvcue\"}, \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-interface\", \"resource_type\": \"network_interface\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}], \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listFlowLogCollectorsPath = "/flow_log_collectors";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListFlowLogCollectorsOptions model
    ListFlowLogCollectorsOptions listFlowLogCollectorsOptionsModel = new ListFlowLogCollectorsOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("my-name")
      .vpcId("testString")
      .vpcCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .vpcName("my-vpc")
      .targetId("testString")
      .targetResourceType("testString")
      .build();

    // Invoke listFlowLogCollectors() with a valid options model and verify the result
    Response<FlowLogCollectorCollection> response = vpcService.listFlowLogCollectors(listFlowLogCollectorsOptionsModel).execute();
    assertNotNull(response);
    FlowLogCollectorCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listFlowLogCollectorsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
    assertEquals(query.get("name"), "my-name");
    assertEquals(query.get("vpc.id"), "testString");
    assertEquals(query.get("vpc.crn"), "crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b");
    assertEquals(query.get("vpc.name"), "my-vpc");
    assertEquals(query.get("target.id"), "testString");
    assertEquals(query.get("target.resource_type"), "testString");
  }

  // Test the listFlowLogCollectors operation with and without retries enabled
  @Test
  public void testListFlowLogCollectorsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListFlowLogCollectorsWOptions();

    vpcService.disableRetries();
    testListFlowLogCollectorsWOptions();
  }

  // Test the listFlowLogCollectors operation using the FlowLogCollectorsPager.getNext() method
  @Test
  public void testListFlowLogCollectorsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"flow_log_collectors\":[{\"active\":true,\"auto_delete\":true,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::flow-log-collector:r006-ad0cded3-53a3-4d4a-9809-8c59b50d2b80\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/r006-ad0cded3-53a3-4d4a-9809-8c59b50d2b80\",\"id\":\"r006-ad0cded3-53a3-4d4a-9809-8c59b50d2b80\",\"lifecycle_state\":\"stable\",\"name\":\"my-flow-log-collector\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"storage_bucket\":{\"name\":\"bucket-27200-lwx4cfvcue\"},\"target\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"id\":\"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"name\":\"my-instance-network-interface\",\"resource_type\":\"network_interface\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"flow_log_collectors\":[{\"active\":true,\"auto_delete\":true,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::flow-log-collector:r006-ad0cded3-53a3-4d4a-9809-8c59b50d2b80\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/r006-ad0cded3-53a3-4d4a-9809-8c59b50d2b80\",\"id\":\"r006-ad0cded3-53a3-4d4a-9809-8c59b50d2b80\",\"lifecycle_state\":\"stable\",\"name\":\"my-flow-log-collector\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"storage_bucket\":{\"name\":\"bucket-27200-lwx4cfvcue\"},\"target\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"id\":\"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"name\":\"my-instance-network-interface\",\"resource_type\":\"network_interface\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListFlowLogCollectorsOptions listFlowLogCollectorsOptions = new ListFlowLogCollectorsOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("my-name")
      .vpcId("testString")
      .vpcCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .vpcName("my-vpc")
      .targetId("testString")
      .targetResourceType("testString")
      .build();

    List<FlowLogCollector> allResults = new ArrayList<>();
    FlowLogCollectorsPager pager = new FlowLogCollectorsPager(vpcService, listFlowLogCollectorsOptions);
    while (pager.hasNext()) {
      List<FlowLogCollector> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listFlowLogCollectors operation using the FlowLogCollectorsPager.getAll() method
  @Test
  public void testListFlowLogCollectorsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"flow_log_collectors\":[{\"active\":true,\"auto_delete\":true,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::flow-log-collector:r006-ad0cded3-53a3-4d4a-9809-8c59b50d2b80\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/r006-ad0cded3-53a3-4d4a-9809-8c59b50d2b80\",\"id\":\"r006-ad0cded3-53a3-4d4a-9809-8c59b50d2b80\",\"lifecycle_state\":\"stable\",\"name\":\"my-flow-log-collector\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"storage_bucket\":{\"name\":\"bucket-27200-lwx4cfvcue\"},\"target\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"id\":\"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"name\":\"my-instance-network-interface\",\"resource_type\":\"network_interface\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"flow_log_collectors\":[{\"active\":true,\"auto_delete\":true,\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::flow-log-collector:r006-ad0cded3-53a3-4d4a-9809-8c59b50d2b80\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/r006-ad0cded3-53a3-4d4a-9809-8c59b50d2b80\",\"id\":\"r006-ad0cded3-53a3-4d4a-9809-8c59b50d2b80\",\"lifecycle_state\":\"stable\",\"name\":\"my-flow-log-collector\",\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"storage_bucket\":{\"name\":\"bucket-27200-lwx4cfvcue\"},\"target\":{\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"id\":\"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\",\"name\":\"my-instance-network-interface\",\"resource_type\":\"network_interface\"},\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"}}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListFlowLogCollectorsOptions listFlowLogCollectorsOptions = new ListFlowLogCollectorsOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .name("my-name")
      .vpcId("testString")
      .vpcCrn("crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b")
      .vpcName("my-vpc")
      .targetId("testString")
      .targetResourceType("testString")
      .build();

    FlowLogCollectorsPager pager = new FlowLogCollectorsPager(vpcService, listFlowLogCollectorsOptions);
    List<FlowLogCollector> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createFlowLogCollector operation with a valid options model parameter
  @Test
  public void testCreateFlowLogCollectorWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"active\": true, \"auto_delete\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::flow-log-collector:r006-ad0cded3-53a3-4d4a-9809-8c59b50d2b80\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/r006-ad0cded3-53a3-4d4a-9809-8c59b50d2b80\", \"id\": \"r006-ad0cded3-53a3-4d4a-9809-8c59b50d2b80\", \"lifecycle_state\": \"stable\", \"name\": \"my-flow-log-collector\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"storage_bucket\": {\"name\": \"bucket-27200-lwx4cfvcue\"}, \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-interface\", \"resource_type\": \"network_interface\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String createFlowLogCollectorPath = "/flow_log_collectors";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the LegacyCloudObjectStorageBucketIdentityCloudObjectStorageBucketIdentityByName model
    LegacyCloudObjectStorageBucketIdentityCloudObjectStorageBucketIdentityByName legacyCloudObjectStorageBucketIdentityModel = new LegacyCloudObjectStorageBucketIdentityCloudObjectStorageBucketIdentityByName.Builder()
      .name("bucket-27200-lwx4cfvcue")
      .build();

    // Construct an instance of the FlowLogCollectorTargetPrototypeNetworkInterfaceIdentityNetworkInterfaceIdentityById model
    FlowLogCollectorTargetPrototypeNetworkInterfaceIdentityNetworkInterfaceIdentityById flowLogCollectorTargetPrototypeModel = new FlowLogCollectorTargetPrototypeNetworkInterfaceIdentityNetworkInterfaceIdentityById.Builder()
      .id("0717-d54eb633-98ea-459d-aa00-6a8e780175a7")
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the CreateFlowLogCollectorOptions model
    CreateFlowLogCollectorOptions createFlowLogCollectorOptionsModel = new CreateFlowLogCollectorOptions.Builder()
      .storageBucket(legacyCloudObjectStorageBucketIdentityModel)
      .target(flowLogCollectorTargetPrototypeModel)
      .active(false)
      .name("my-flow-log-collector")
      .resourceGroup(resourceGroupIdentityModel)
      .build();

    // Invoke createFlowLogCollector() with a valid options model and verify the result
    Response<FlowLogCollector> response = vpcService.createFlowLogCollector(createFlowLogCollectorOptionsModel).execute();
    assertNotNull(response);
    FlowLogCollector responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createFlowLogCollectorPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createFlowLogCollector operation with and without retries enabled
  @Test
  public void testCreateFlowLogCollectorWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreateFlowLogCollectorWOptions();

    vpcService.disableRetries();
    testCreateFlowLogCollectorWOptions();
  }

  // Test the createFlowLogCollector operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreateFlowLogCollectorNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createFlowLogCollector(null).execute();
  }

  // Test the deleteFlowLogCollector operation with a valid options model parameter
  @Test
  public void testDeleteFlowLogCollectorWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deleteFlowLogCollectorPath = "/flow_log_collectors/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeleteFlowLogCollectorOptions model
    DeleteFlowLogCollectorOptions deleteFlowLogCollectorOptionsModel = new DeleteFlowLogCollectorOptions.Builder()
      .id("testString")
      .build();

    // Invoke deleteFlowLogCollector() with a valid options model and verify the result
    Response<Void> response = vpcService.deleteFlowLogCollector(deleteFlowLogCollectorOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deleteFlowLogCollectorPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deleteFlowLogCollector operation with and without retries enabled
  @Test
  public void testDeleteFlowLogCollectorWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeleteFlowLogCollectorWOptions();

    vpcService.disableRetries();
    testDeleteFlowLogCollectorWOptions();
  }

  // Test the deleteFlowLogCollector operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeleteFlowLogCollectorNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deleteFlowLogCollector(null).execute();
  }

  // Test the getFlowLogCollector operation with a valid options model parameter
  @Test
  public void testGetFlowLogCollectorWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"active\": true, \"auto_delete\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::flow-log-collector:r006-ad0cded3-53a3-4d4a-9809-8c59b50d2b80\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/r006-ad0cded3-53a3-4d4a-9809-8c59b50d2b80\", \"id\": \"r006-ad0cded3-53a3-4d4a-9809-8c59b50d2b80\", \"lifecycle_state\": \"stable\", \"name\": \"my-flow-log-collector\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"storage_bucket\": {\"name\": \"bucket-27200-lwx4cfvcue\"}, \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-interface\", \"resource_type\": \"network_interface\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String getFlowLogCollectorPath = "/flow_log_collectors/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetFlowLogCollectorOptions model
    GetFlowLogCollectorOptions getFlowLogCollectorOptionsModel = new GetFlowLogCollectorOptions.Builder()
      .id("testString")
      .build();

    // Invoke getFlowLogCollector() with a valid options model and verify the result
    Response<FlowLogCollector> response = vpcService.getFlowLogCollector(getFlowLogCollectorOptionsModel).execute();
    assertNotNull(response);
    FlowLogCollector responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getFlowLogCollectorPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getFlowLogCollector operation with and without retries enabled
  @Test
  public void testGetFlowLogCollectorWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetFlowLogCollectorWOptions();

    vpcService.disableRetries();
    testGetFlowLogCollectorWOptions();
  }

  // Test the getFlowLogCollector operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetFlowLogCollectorNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getFlowLogCollector(null).execute();
  }

  // Test the updateFlowLogCollector operation with a valid options model parameter
  @Test
  public void testUpdateFlowLogCollectorWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"active\": true, \"auto_delete\": true, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::flow-log-collector:r006-ad0cded3-53a3-4d4a-9809-8c59b50d2b80\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/r006-ad0cded3-53a3-4d4a-9809-8c59b50d2b80\", \"id\": \"r006-ad0cded3-53a3-4d4a-9809-8c59b50d2b80\", \"lifecycle_state\": \"stable\", \"name\": \"my-flow-log-collector\", \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"storage_bucket\": {\"name\": \"bucket-27200-lwx4cfvcue\"}, \"target\": {\"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/instances/0717_e21b7391-2ca2-4ab5-84a8-b92157a633b0/network_interfaces/0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"id\": \"0717-d54eb633-98ea-459d-aa00-6a8e780175a7\", \"name\": \"my-instance-network-interface\", \"resource_type\": \"network_interface\"}, \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}}";
    String updateFlowLogCollectorPath = "/flow_log_collectors/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the FlowLogCollectorPatch model
    FlowLogCollectorPatch flowLogCollectorPatchModel = new FlowLogCollectorPatch.Builder()
      .active(false)
      .name("my-flow-log-collector")
      .build();
    Map<String, Object> flowLogCollectorPatchModelAsPatch = flowLogCollectorPatchModel.asPatch();

    // Construct an instance of the UpdateFlowLogCollectorOptions model
    UpdateFlowLogCollectorOptions updateFlowLogCollectorOptionsModel = new UpdateFlowLogCollectorOptions.Builder()
      .id("testString")
      .flowLogCollectorPatch(flowLogCollectorPatchModelAsPatch)
      .build();

    // Invoke updateFlowLogCollector() with a valid options model and verify the result
    Response<FlowLogCollector> response = vpcService.updateFlowLogCollector(updateFlowLogCollectorOptionsModel).execute();
    assertNotNull(response);
    FlowLogCollector responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updateFlowLogCollectorPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updateFlowLogCollector operation with and without retries enabled
  @Test
  public void testUpdateFlowLogCollectorWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdateFlowLogCollectorWOptions();

    vpcService.disableRetries();
    testUpdateFlowLogCollectorWOptions();
  }

  // Test the updateFlowLogCollector operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdateFlowLogCollectorNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updateFlowLogCollector(null).execute();
  }

  // Test the listPrivatePathServiceGateways operation with a valid options model parameter
  @Test
  public void testListPrivatePathServiceGatewaysWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"private_path_service_gateways\": [{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::private-path-service-gateway:r006-7268d425-59b7-48fd-9735-81a7271657d5\", \"default_access_policy\": \"deny\", \"endpoint_gateway_binding_auto_delete\": true, \"endpoint_gateway_binding_auto_delete_timeout\": 1, \"endpoint_gateway_count\": 0, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/private_path_service_gateways/r006-7268d425-59b7-48fd-9735-81a7271657d5\", \"id\": \"r006-7268d425-59b7-48fd-9735-81a7271657d5\", \"lifecycle_state\": \"stable\", \"load_balancer\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::load-balancer:r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"id\": \"r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"name\": \"my-load-balancer\", \"resource_type\": \"load_balancer\"}, \"name\": \"my-private-path-service-gateway\", \"published\": false, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"private_path_service_gateway\", \"service_endpoints\": [\"*.example.com\"], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zonal_affinity\": false}], \"total_count\": 132}";
    String listPrivatePathServiceGatewaysPath = "/private_path_service_gateways";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListPrivatePathServiceGatewaysOptions model
    ListPrivatePathServiceGatewaysOptions listPrivatePathServiceGatewaysOptionsModel = new ListPrivatePathServiceGatewaysOptions.Builder()
      .start("testString")
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .build();

    // Invoke listPrivatePathServiceGateways() with a valid options model and verify the result
    Response<PrivatePathServiceGatewayCollection> response = vpcService.listPrivatePathServiceGateways(listPrivatePathServiceGatewaysOptionsModel).execute();
    assertNotNull(response);
    PrivatePathServiceGatewayCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listPrivatePathServiceGatewaysPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("resource_group.id"), "testString");
  }

  // Test the listPrivatePathServiceGateways operation with and without retries enabled
  @Test
  public void testListPrivatePathServiceGatewaysWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListPrivatePathServiceGatewaysWOptions();

    vpcService.disableRetries();
    testListPrivatePathServiceGatewaysWOptions();
  }

  // Test the listPrivatePathServiceGateways operation using the PrivatePathServiceGatewaysPager.getNext() method
  @Test
  public void testListPrivatePathServiceGatewaysWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"private_path_service_gateways\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::private-path-service-gateway:r006-7268d425-59b7-48fd-9735-81a7271657d5\",\"default_access_policy\":\"deny\",\"endpoint_gateway_binding_auto_delete\":true,\"endpoint_gateway_binding_auto_delete_timeout\":1,\"endpoint_gateway_count\":0,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/private_path_service_gateways/r006-7268d425-59b7-48fd-9735-81a7271657d5\",\"id\":\"r006-7268d425-59b7-48fd-9735-81a7271657d5\",\"lifecycle_state\":\"stable\",\"load_balancer\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::load-balancer:r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"id\":\"r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"name\":\"my-load-balancer\",\"resource_type\":\"load_balancer\"},\"name\":\"my-private-path-service-gateway\",\"published\":false,\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"private_path_service_gateway\",\"service_endpoints\":[\"*.example.com\"],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zonal_affinity\":false}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"private_path_service_gateways\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::private-path-service-gateway:r006-7268d425-59b7-48fd-9735-81a7271657d5\",\"default_access_policy\":\"deny\",\"endpoint_gateway_binding_auto_delete\":true,\"endpoint_gateway_binding_auto_delete_timeout\":1,\"endpoint_gateway_count\":0,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/private_path_service_gateways/r006-7268d425-59b7-48fd-9735-81a7271657d5\",\"id\":\"r006-7268d425-59b7-48fd-9735-81a7271657d5\",\"lifecycle_state\":\"stable\",\"load_balancer\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::load-balancer:r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"id\":\"r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"name\":\"my-load-balancer\",\"resource_type\":\"load_balancer\"},\"name\":\"my-private-path-service-gateway\",\"published\":false,\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"private_path_service_gateway\",\"service_endpoints\":[\"*.example.com\"],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zonal_affinity\":false}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListPrivatePathServiceGatewaysOptions listPrivatePathServiceGatewaysOptions = new ListPrivatePathServiceGatewaysOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .build();

    List<PrivatePathServiceGateway> allResults = new ArrayList<>();
    PrivatePathServiceGatewaysPager pager = new PrivatePathServiceGatewaysPager(vpcService, listPrivatePathServiceGatewaysOptions);
    while (pager.hasNext()) {
      List<PrivatePathServiceGateway> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listPrivatePathServiceGateways operation using the PrivatePathServiceGatewaysPager.getAll() method
  @Test
  public void testListPrivatePathServiceGatewaysWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"private_path_service_gateways\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::private-path-service-gateway:r006-7268d425-59b7-48fd-9735-81a7271657d5\",\"default_access_policy\":\"deny\",\"endpoint_gateway_binding_auto_delete\":true,\"endpoint_gateway_binding_auto_delete_timeout\":1,\"endpoint_gateway_count\":0,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/private_path_service_gateways/r006-7268d425-59b7-48fd-9735-81a7271657d5\",\"id\":\"r006-7268d425-59b7-48fd-9735-81a7271657d5\",\"lifecycle_state\":\"stable\",\"load_balancer\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::load-balancer:r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"id\":\"r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"name\":\"my-load-balancer\",\"resource_type\":\"load_balancer\"},\"name\":\"my-private-path-service-gateway\",\"published\":false,\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"private_path_service_gateway\",\"service_endpoints\":[\"*.example.com\"],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zonal_affinity\":false}],\"total_count\":2,\"limit\":1}";
    String mockResponsePage2 = "{\"private_path_service_gateways\":[{\"created_at\":\"2019-01-01T12:00:00.000Z\",\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::private-path-service-gateway:r006-7268d425-59b7-48fd-9735-81a7271657d5\",\"default_access_policy\":\"deny\",\"endpoint_gateway_binding_auto_delete\":true,\"endpoint_gateway_binding_auto_delete_timeout\":1,\"endpoint_gateway_count\":0,\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/private_path_service_gateways/r006-7268d425-59b7-48fd-9735-81a7271657d5\",\"id\":\"r006-7268d425-59b7-48fd-9735-81a7271657d5\",\"lifecycle_state\":\"stable\",\"load_balancer\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::load-balancer:r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"id\":\"r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\",\"name\":\"my-load-balancer\",\"resource_type\":\"load_balancer\"},\"name\":\"my-private-path-service-gateway\",\"published\":false,\"resource_group\":{\"href\":\"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\",\"id\":\"fee82deba12e4c0fb69c3b09d1f12345\",\"name\":\"my-resource-group\"},\"resource_type\":\"private_path_service_gateway\",\"service_endpoints\":[\"*.example.com\"],\"vpc\":{\"crn\":\"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"deleted\":{\"more_info\":\"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"},\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"id\":\"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\",\"name\":\"my-vpc\",\"resource_type\":\"vpc\"},\"zonal_affinity\":false}],\"total_count\":2,\"limit\":1}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListPrivatePathServiceGatewaysOptions listPrivatePathServiceGatewaysOptions = new ListPrivatePathServiceGatewaysOptions.Builder()
      .limit(Long.valueOf("10"))
      .resourceGroupId("testString")
      .build();

    PrivatePathServiceGatewaysPager pager = new PrivatePathServiceGatewaysPager(vpcService, listPrivatePathServiceGatewaysOptions);
    List<PrivatePathServiceGateway> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createPrivatePathServiceGateway operation with a valid options model parameter
  @Test
  public void testCreatePrivatePathServiceGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::private-path-service-gateway:r006-7268d425-59b7-48fd-9735-81a7271657d5\", \"default_access_policy\": \"deny\", \"endpoint_gateway_binding_auto_delete\": true, \"endpoint_gateway_binding_auto_delete_timeout\": 1, \"endpoint_gateway_count\": 0, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/private_path_service_gateways/r006-7268d425-59b7-48fd-9735-81a7271657d5\", \"id\": \"r006-7268d425-59b7-48fd-9735-81a7271657d5\", \"lifecycle_state\": \"stable\", \"load_balancer\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::load-balancer:r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"id\": \"r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"name\": \"my-load-balancer\", \"resource_type\": \"load_balancer\"}, \"name\": \"my-private-path-service-gateway\", \"published\": false, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"private_path_service_gateway\", \"service_endpoints\": [\"*.example.com\"], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zonal_affinity\": false}";
    String createPrivatePathServiceGatewayPath = "/private_path_service_gateways";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the LoadBalancerIdentityById model
    LoadBalancerIdentityById loadBalancerIdentityModel = new LoadBalancerIdentityById.Builder()
      .id("r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727")
      .build();

    // Construct an instance of the ResourceGroupIdentityById model
    ResourceGroupIdentityById resourceGroupIdentityModel = new ResourceGroupIdentityById.Builder()
      .id("fee82deba12e4c0fb69c3b09d1f12345")
      .build();

    // Construct an instance of the CreatePrivatePathServiceGatewayOptions model
    CreatePrivatePathServiceGatewayOptions createPrivatePathServiceGatewayOptionsModel = new CreatePrivatePathServiceGatewayOptions.Builder()
      .loadBalancer(loadBalancerIdentityModel)
      .serviceEndpoints(java.util.Arrays.asList("*.example.com"))
      .defaultAccessPolicy("deny")
      .name("my-private-path-service-gateway")
      .resourceGroup(resourceGroupIdentityModel)
      .zonalAffinity(false)
      .build();

    // Invoke createPrivatePathServiceGateway() with a valid options model and verify the result
    Response<PrivatePathServiceGateway> response = vpcService.createPrivatePathServiceGateway(createPrivatePathServiceGatewayOptionsModel).execute();
    assertNotNull(response);
    PrivatePathServiceGateway responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createPrivatePathServiceGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createPrivatePathServiceGateway operation with and without retries enabled
  @Test
  public void testCreatePrivatePathServiceGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreatePrivatePathServiceGatewayWOptions();

    vpcService.disableRetries();
    testCreatePrivatePathServiceGatewayWOptions();
  }

  // Test the createPrivatePathServiceGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreatePrivatePathServiceGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createPrivatePathServiceGateway(null).execute();
  }

  // Test the deletePrivatePathServiceGateway operation with a valid options model parameter
  @Test
  public void testDeletePrivatePathServiceGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deletePrivatePathServiceGatewayPath = "/private_path_service_gateways/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeletePrivatePathServiceGatewayOptions model
    DeletePrivatePathServiceGatewayOptions deletePrivatePathServiceGatewayOptionsModel = new DeletePrivatePathServiceGatewayOptions.Builder()
      .id("testString")
      .build();

    // Invoke deletePrivatePathServiceGateway() with a valid options model and verify the result
    Response<Void> response = vpcService.deletePrivatePathServiceGateway(deletePrivatePathServiceGatewayOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deletePrivatePathServiceGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deletePrivatePathServiceGateway operation with and without retries enabled
  @Test
  public void testDeletePrivatePathServiceGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeletePrivatePathServiceGatewayWOptions();

    vpcService.disableRetries();
    testDeletePrivatePathServiceGatewayWOptions();
  }

  // Test the deletePrivatePathServiceGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeletePrivatePathServiceGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deletePrivatePathServiceGateway(null).execute();
  }

  // Test the getPrivatePathServiceGateway operation with a valid options model parameter
  @Test
  public void testGetPrivatePathServiceGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::private-path-service-gateway:r006-7268d425-59b7-48fd-9735-81a7271657d5\", \"default_access_policy\": \"deny\", \"endpoint_gateway_binding_auto_delete\": true, \"endpoint_gateway_binding_auto_delete_timeout\": 1, \"endpoint_gateway_count\": 0, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/private_path_service_gateways/r006-7268d425-59b7-48fd-9735-81a7271657d5\", \"id\": \"r006-7268d425-59b7-48fd-9735-81a7271657d5\", \"lifecycle_state\": \"stable\", \"load_balancer\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::load-balancer:r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"id\": \"r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"name\": \"my-load-balancer\", \"resource_type\": \"load_balancer\"}, \"name\": \"my-private-path-service-gateway\", \"published\": false, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"private_path_service_gateway\", \"service_endpoints\": [\"*.example.com\"], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zonal_affinity\": false}";
    String getPrivatePathServiceGatewayPath = "/private_path_service_gateways/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetPrivatePathServiceGatewayOptions model
    GetPrivatePathServiceGatewayOptions getPrivatePathServiceGatewayOptionsModel = new GetPrivatePathServiceGatewayOptions.Builder()
      .id("testString")
      .build();

    // Invoke getPrivatePathServiceGateway() with a valid options model and verify the result
    Response<PrivatePathServiceGateway> response = vpcService.getPrivatePathServiceGateway(getPrivatePathServiceGatewayOptionsModel).execute();
    assertNotNull(response);
    PrivatePathServiceGateway responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getPrivatePathServiceGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getPrivatePathServiceGateway operation with and without retries enabled
  @Test
  public void testGetPrivatePathServiceGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetPrivatePathServiceGatewayWOptions();

    vpcService.disableRetries();
    testGetPrivatePathServiceGatewayWOptions();
  }

  // Test the getPrivatePathServiceGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetPrivatePathServiceGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getPrivatePathServiceGateway(null).execute();
  }

  // Test the updatePrivatePathServiceGateway operation with a valid options model parameter
  @Test
  public void testUpdatePrivatePathServiceGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"created_at\": \"2019-01-01T12:00:00.000Z\", \"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::private-path-service-gateway:r006-7268d425-59b7-48fd-9735-81a7271657d5\", \"default_access_policy\": \"deny\", \"endpoint_gateway_binding_auto_delete\": true, \"endpoint_gateway_binding_auto_delete_timeout\": 1, \"endpoint_gateway_count\": 0, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/private_path_service_gateways/r006-7268d425-59b7-48fd-9735-81a7271657d5\", \"id\": \"r006-7268d425-59b7-48fd-9735-81a7271657d5\", \"lifecycle_state\": \"stable\", \"load_balancer\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::load-balancer:r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/load_balancers/r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"id\": \"r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727\", \"name\": \"my-load-balancer\", \"resource_type\": \"load_balancer\"}, \"name\": \"my-private-path-service-gateway\", \"published\": false, \"resource_group\": {\"href\": \"https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345\", \"id\": \"fee82deba12e4c0fb69c3b09d1f12345\", \"name\": \"my-resource-group\"}, \"resource_type\": \"private_path_service_gateway\", \"service_endpoints\": [\"*.example.com\"], \"vpc\": {\"crn\": \"crn:v1:bluemix:public:is:us-south:a/aa2432b1fa4d4ace891e9b80fc104e34::vpc:r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"deleted\": {\"more_info\": \"https://cloud.ibm.com/apidocs/vpc#deleted-resources\"}, \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/vpcs/r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"id\": \"r006-4727d842-f94f-4a2d-824a-9bc9b02c523b\", \"name\": \"my-vpc\", \"resource_type\": \"vpc\"}, \"zonal_affinity\": false}";
    String updatePrivatePathServiceGatewayPath = "/private_path_service_gateways/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the LoadBalancerIdentityById model
    LoadBalancerIdentityById loadBalancerIdentityModel = new LoadBalancerIdentityById.Builder()
      .id("r006-dd754295-e9e0-4c9d-bf6c-58fbc59e5727")
      .build();

    // Construct an instance of the PrivatePathServiceGatewayPatch model
    PrivatePathServiceGatewayPatch privatePathServiceGatewayPatchModel = new PrivatePathServiceGatewayPatch.Builder()
      .defaultAccessPolicy("deny")
      .loadBalancer(loadBalancerIdentityModel)
      .name("my-private-path-service-gateway")
      .zonalAffinity(true)
      .build();
    Map<String, Object> privatePathServiceGatewayPatchModelAsPatch = privatePathServiceGatewayPatchModel.asPatch();

    // Construct an instance of the UpdatePrivatePathServiceGatewayOptions model
    UpdatePrivatePathServiceGatewayOptions updatePrivatePathServiceGatewayOptionsModel = new UpdatePrivatePathServiceGatewayOptions.Builder()
      .id("testString")
      .privatePathServiceGatewayPatch(privatePathServiceGatewayPatchModelAsPatch)
      .build();

    // Invoke updatePrivatePathServiceGateway() with a valid options model and verify the result
    Response<PrivatePathServiceGateway> response = vpcService.updatePrivatePathServiceGateway(updatePrivatePathServiceGatewayOptionsModel).execute();
    assertNotNull(response);
    PrivatePathServiceGateway responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updatePrivatePathServiceGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updatePrivatePathServiceGateway operation with and without retries enabled
  @Test
  public void testUpdatePrivatePathServiceGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdatePrivatePathServiceGatewayWOptions();

    vpcService.disableRetries();
    testUpdatePrivatePathServiceGatewayWOptions();
  }

  // Test the updatePrivatePathServiceGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdatePrivatePathServiceGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updatePrivatePathServiceGateway(null).execute();
  }

  // Test the listPrivatePathServiceGatewayAccountPolicies operation with a valid options model parameter
  @Test
  public void testListPrivatePathServiceGatewayAccountPoliciesWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"account_policies\": [{\"access_policy\": \"deny\", \"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/private_path_service_gateways/r006-7268d425-59b7-48fd-9735-81a7271657d5/account_policies/dd455384-b019-4242-9453-45fe68b18e4c\", \"id\": \"r006-7268d425-59b7-48fd-9735-81a7271657d5\", \"resource_type\": \"private_path_service_gateway_account_policy\"}], \"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listPrivatePathServiceGatewayAccountPoliciesPath = "/private_path_service_gateways/testString/account_policies";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListPrivatePathServiceGatewayAccountPoliciesOptions model
    ListPrivatePathServiceGatewayAccountPoliciesOptions listPrivatePathServiceGatewayAccountPoliciesOptionsModel = new ListPrivatePathServiceGatewayAccountPoliciesOptions.Builder()
      .privatePathServiceGatewayId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .accountId("bb1b52262f7441a586f49068482f1e60")
      .build();

    // Invoke listPrivatePathServiceGatewayAccountPolicies() with a valid options model and verify the result
    Response<PrivatePathServiceGatewayAccountPolicyCollection> response = vpcService.listPrivatePathServiceGatewayAccountPolicies(listPrivatePathServiceGatewayAccountPoliciesOptionsModel).execute();
    assertNotNull(response);
    PrivatePathServiceGatewayAccountPolicyCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listPrivatePathServiceGatewayAccountPoliciesPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("account.id"), "bb1b52262f7441a586f49068482f1e60");
  }

  // Test the listPrivatePathServiceGatewayAccountPolicies operation with and without retries enabled
  @Test
  public void testListPrivatePathServiceGatewayAccountPoliciesWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListPrivatePathServiceGatewayAccountPoliciesWOptions();

    vpcService.disableRetries();
    testListPrivatePathServiceGatewayAccountPoliciesWOptions();
  }

  // Test the listPrivatePathServiceGatewayAccountPolicies operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListPrivatePathServiceGatewayAccountPoliciesNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listPrivatePathServiceGatewayAccountPolicies(null).execute();
  }

  // Test the listPrivatePathServiceGatewayAccountPolicies operation using the PrivatePathServiceGatewayAccountPoliciesPager.getNext() method
  @Test
  public void testListPrivatePathServiceGatewayAccountPoliciesWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"account_policies\":[{\"access_policy\":\"deny\",\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/private_path_service_gateways/r006-7268d425-59b7-48fd-9735-81a7271657d5/account_policies/dd455384-b019-4242-9453-45fe68b18e4c\",\"id\":\"r006-7268d425-59b7-48fd-9735-81a7271657d5\",\"resource_type\":\"private_path_service_gateway_account_policy\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"account_policies\":[{\"access_policy\":\"deny\",\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/private_path_service_gateways/r006-7268d425-59b7-48fd-9735-81a7271657d5/account_policies/dd455384-b019-4242-9453-45fe68b18e4c\",\"id\":\"r006-7268d425-59b7-48fd-9735-81a7271657d5\",\"resource_type\":\"private_path_service_gateway_account_policy\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListPrivatePathServiceGatewayAccountPoliciesOptions listPrivatePathServiceGatewayAccountPoliciesOptions = new ListPrivatePathServiceGatewayAccountPoliciesOptions.Builder()
      .privatePathServiceGatewayId("testString")
      .limit(Long.valueOf("10"))
      .accountId("bb1b52262f7441a586f49068482f1e60")
      .build();

    List<PrivatePathServiceGatewayAccountPolicy> allResults = new ArrayList<>();
    PrivatePathServiceGatewayAccountPoliciesPager pager = new PrivatePathServiceGatewayAccountPoliciesPager(vpcService, listPrivatePathServiceGatewayAccountPoliciesOptions);
    while (pager.hasNext()) {
      List<PrivatePathServiceGatewayAccountPolicy> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listPrivatePathServiceGatewayAccountPolicies operation using the PrivatePathServiceGatewayAccountPoliciesPager.getAll() method
  @Test
  public void testListPrivatePathServiceGatewayAccountPoliciesWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"account_policies\":[{\"access_policy\":\"deny\",\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/private_path_service_gateways/r006-7268d425-59b7-48fd-9735-81a7271657d5/account_policies/dd455384-b019-4242-9453-45fe68b18e4c\",\"id\":\"r006-7268d425-59b7-48fd-9735-81a7271657d5\",\"resource_type\":\"private_path_service_gateway_account_policy\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"account_policies\":[{\"access_policy\":\"deny\",\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/private_path_service_gateways/r006-7268d425-59b7-48fd-9735-81a7271657d5/account_policies/dd455384-b019-4242-9453-45fe68b18e4c\",\"id\":\"r006-7268d425-59b7-48fd-9735-81a7271657d5\",\"resource_type\":\"private_path_service_gateway_account_policy\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListPrivatePathServiceGatewayAccountPoliciesOptions listPrivatePathServiceGatewayAccountPoliciesOptions = new ListPrivatePathServiceGatewayAccountPoliciesOptions.Builder()
      .privatePathServiceGatewayId("testString")
      .limit(Long.valueOf("10"))
      .accountId("bb1b52262f7441a586f49068482f1e60")
      .build();

    PrivatePathServiceGatewayAccountPoliciesPager pager = new PrivatePathServiceGatewayAccountPoliciesPager(vpcService, listPrivatePathServiceGatewayAccountPoliciesOptions);
    List<PrivatePathServiceGatewayAccountPolicy> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the createPrivatePathServiceGatewayAccountPolicy operation with a valid options model parameter
  @Test
  public void testCreatePrivatePathServiceGatewayAccountPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"access_policy\": \"deny\", \"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/private_path_service_gateways/r006-7268d425-59b7-48fd-9735-81a7271657d5/account_policies/dd455384-b019-4242-9453-45fe68b18e4c\", \"id\": \"r006-7268d425-59b7-48fd-9735-81a7271657d5\", \"resource_type\": \"private_path_service_gateway_account_policy\"}";
    String createPrivatePathServiceGatewayAccountPolicyPath = "/private_path_service_gateways/testString/account_policies";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(201)
      .setBody(mockResponseBody));

    // Construct an instance of the AccountIdentityById model
    AccountIdentityById accountIdentityModel = new AccountIdentityById.Builder()
      .id("bb1b52262f7441a586f49068482f1e60")
      .build();

    // Construct an instance of the CreatePrivatePathServiceGatewayAccountPolicyOptions model
    CreatePrivatePathServiceGatewayAccountPolicyOptions createPrivatePathServiceGatewayAccountPolicyOptionsModel = new CreatePrivatePathServiceGatewayAccountPolicyOptions.Builder()
      .privatePathServiceGatewayId("testString")
      .accessPolicy("deny")
      .account(accountIdentityModel)
      .build();

    // Invoke createPrivatePathServiceGatewayAccountPolicy() with a valid options model and verify the result
    Response<PrivatePathServiceGatewayAccountPolicy> response = vpcService.createPrivatePathServiceGatewayAccountPolicy(createPrivatePathServiceGatewayAccountPolicyOptionsModel).execute();
    assertNotNull(response);
    PrivatePathServiceGatewayAccountPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, createPrivatePathServiceGatewayAccountPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the createPrivatePathServiceGatewayAccountPolicy operation with and without retries enabled
  @Test
  public void testCreatePrivatePathServiceGatewayAccountPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testCreatePrivatePathServiceGatewayAccountPolicyWOptions();

    vpcService.disableRetries();
    testCreatePrivatePathServiceGatewayAccountPolicyWOptions();
  }

  // Test the createPrivatePathServiceGatewayAccountPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testCreatePrivatePathServiceGatewayAccountPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.createPrivatePathServiceGatewayAccountPolicy(null).execute();
  }

  // Test the deletePrivatePathServiceGatewayAccountPolicy operation with a valid options model parameter
  @Test
  public void testDeletePrivatePathServiceGatewayAccountPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String deletePrivatePathServiceGatewayAccountPolicyPath = "/private_path_service_gateways/testString/account_policies/testString";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DeletePrivatePathServiceGatewayAccountPolicyOptions model
    DeletePrivatePathServiceGatewayAccountPolicyOptions deletePrivatePathServiceGatewayAccountPolicyOptionsModel = new DeletePrivatePathServiceGatewayAccountPolicyOptions.Builder()
      .privatePathServiceGatewayId("testString")
      .id("testString")
      .build();

    // Invoke deletePrivatePathServiceGatewayAccountPolicy() with a valid options model and verify the result
    Response<Void> response = vpcService.deletePrivatePathServiceGatewayAccountPolicy(deletePrivatePathServiceGatewayAccountPolicyOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "DELETE");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, deletePrivatePathServiceGatewayAccountPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the deletePrivatePathServiceGatewayAccountPolicy operation with and without retries enabled
  @Test
  public void testDeletePrivatePathServiceGatewayAccountPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDeletePrivatePathServiceGatewayAccountPolicyWOptions();

    vpcService.disableRetries();
    testDeletePrivatePathServiceGatewayAccountPolicyWOptions();
  }

  // Test the deletePrivatePathServiceGatewayAccountPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDeletePrivatePathServiceGatewayAccountPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.deletePrivatePathServiceGatewayAccountPolicy(null).execute();
  }

  // Test the getPrivatePathServiceGatewayAccountPolicy operation with a valid options model parameter
  @Test
  public void testGetPrivatePathServiceGatewayAccountPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"access_policy\": \"deny\", \"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/private_path_service_gateways/r006-7268d425-59b7-48fd-9735-81a7271657d5/account_policies/dd455384-b019-4242-9453-45fe68b18e4c\", \"id\": \"r006-7268d425-59b7-48fd-9735-81a7271657d5\", \"resource_type\": \"private_path_service_gateway_account_policy\"}";
    String getPrivatePathServiceGatewayAccountPolicyPath = "/private_path_service_gateways/testString/account_policies/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetPrivatePathServiceGatewayAccountPolicyOptions model
    GetPrivatePathServiceGatewayAccountPolicyOptions getPrivatePathServiceGatewayAccountPolicyOptionsModel = new GetPrivatePathServiceGatewayAccountPolicyOptions.Builder()
      .privatePathServiceGatewayId("testString")
      .id("testString")
      .build();

    // Invoke getPrivatePathServiceGatewayAccountPolicy() with a valid options model and verify the result
    Response<PrivatePathServiceGatewayAccountPolicy> response = vpcService.getPrivatePathServiceGatewayAccountPolicy(getPrivatePathServiceGatewayAccountPolicyOptionsModel).execute();
    assertNotNull(response);
    PrivatePathServiceGatewayAccountPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getPrivatePathServiceGatewayAccountPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getPrivatePathServiceGatewayAccountPolicy operation with and without retries enabled
  @Test
  public void testGetPrivatePathServiceGatewayAccountPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetPrivatePathServiceGatewayAccountPolicyWOptions();

    vpcService.disableRetries();
    testGetPrivatePathServiceGatewayAccountPolicyWOptions();
  }

  // Test the getPrivatePathServiceGatewayAccountPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetPrivatePathServiceGatewayAccountPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getPrivatePathServiceGatewayAccountPolicy(null).execute();
  }

  // Test the updatePrivatePathServiceGatewayAccountPolicy operation with a valid options model parameter
  @Test
  public void testUpdatePrivatePathServiceGatewayAccountPolicyWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"access_policy\": \"deny\", \"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/private_path_service_gateways/r006-7268d425-59b7-48fd-9735-81a7271657d5/account_policies/dd455384-b019-4242-9453-45fe68b18e4c\", \"id\": \"r006-7268d425-59b7-48fd-9735-81a7271657d5\", \"resource_type\": \"private_path_service_gateway_account_policy\"}";
    String updatePrivatePathServiceGatewayAccountPolicyPath = "/private_path_service_gateways/testString/account_policies/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the PrivatePathServiceGatewayAccountPolicyPatch model
    PrivatePathServiceGatewayAccountPolicyPatch privatePathServiceGatewayAccountPolicyPatchModel = new PrivatePathServiceGatewayAccountPolicyPatch.Builder()
      .accessPolicy("review")
      .build();
    Map<String, Object> privatePathServiceGatewayAccountPolicyPatchModelAsPatch = privatePathServiceGatewayAccountPolicyPatchModel.asPatch();

    // Construct an instance of the UpdatePrivatePathServiceGatewayAccountPolicyOptions model
    UpdatePrivatePathServiceGatewayAccountPolicyOptions updatePrivatePathServiceGatewayAccountPolicyOptionsModel = new UpdatePrivatePathServiceGatewayAccountPolicyOptions.Builder()
      .privatePathServiceGatewayId("testString")
      .id("testString")
      .privatePathServiceGatewayAccountPolicyPatch(privatePathServiceGatewayAccountPolicyPatchModelAsPatch)
      .build();

    // Invoke updatePrivatePathServiceGatewayAccountPolicy() with a valid options model and verify the result
    Response<PrivatePathServiceGatewayAccountPolicy> response = vpcService.updatePrivatePathServiceGatewayAccountPolicy(updatePrivatePathServiceGatewayAccountPolicyOptionsModel).execute();
    assertNotNull(response);
    PrivatePathServiceGatewayAccountPolicy responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "PATCH");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, updatePrivatePathServiceGatewayAccountPolicyPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the updatePrivatePathServiceGatewayAccountPolicy operation with and without retries enabled
  @Test
  public void testUpdatePrivatePathServiceGatewayAccountPolicyWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUpdatePrivatePathServiceGatewayAccountPolicyWOptions();

    vpcService.disableRetries();
    testUpdatePrivatePathServiceGatewayAccountPolicyWOptions();
  }

  // Test the updatePrivatePathServiceGatewayAccountPolicy operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUpdatePrivatePathServiceGatewayAccountPolicyNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.updatePrivatePathServiceGatewayAccountPolicy(null).execute();
  }

  // Test the listPrivatePathServiceGatewayEndpointGatewayBindings operation with a valid options model parameter
  @Test
  public void testListPrivatePathServiceGatewayEndpointGatewayBindingsWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"endpoint_gateway_bindings\": [{\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"expiration_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/private_path_service_gateways/r006-7268d425-59b7-48fd-9735-81a7271657d5/endpoint_gateway_bindings/r006-7c30adc3-083d-46a1-a72c-d0ca8654a1d0\", \"id\": \"r006-7c30adc3-083d-46a1-a72c-d0ca8654a1d0\", \"lifecycle_state\": \"stable\", \"resource_type\": \"private_path_service_gateway_endpoint_gateway_binding\", \"status\": \"abandoned\"}], \"first\": {\"href\": \"href\"}, \"limit\": 20, \"next\": {\"href\": \"href\"}, \"total_count\": 132}";
    String listPrivatePathServiceGatewayEndpointGatewayBindingsPath = "/private_path_service_gateways/testString/endpoint_gateway_bindings";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the ListPrivatePathServiceGatewayEndpointGatewayBindingsOptions model
    ListPrivatePathServiceGatewayEndpointGatewayBindingsOptions listPrivatePathServiceGatewayEndpointGatewayBindingsOptionsModel = new ListPrivatePathServiceGatewayEndpointGatewayBindingsOptions.Builder()
      .privatePathServiceGatewayId("testString")
      .start("testString")
      .limit(Long.valueOf("10"))
      .status("abandoned")
      .accountId("bb1b52262f7441a586f49068482f1e60")
      .build();

    // Invoke listPrivatePathServiceGatewayEndpointGatewayBindings() with a valid options model and verify the result
    Response<PrivatePathServiceGatewayEndpointGatewayBindingCollection> response = vpcService.listPrivatePathServiceGatewayEndpointGatewayBindings(listPrivatePathServiceGatewayEndpointGatewayBindingsOptionsModel).execute();
    assertNotNull(response);
    PrivatePathServiceGatewayEndpointGatewayBindingCollection responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, listPrivatePathServiceGatewayEndpointGatewayBindingsPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
    assertEquals(query.get("start"), "testString");
    assertEquals(Long.valueOf(query.get("limit")), Long.valueOf("10"));
    assertEquals(query.get("status"), "abandoned");
    assertEquals(query.get("account.id"), "bb1b52262f7441a586f49068482f1e60");
  }

  // Test the listPrivatePathServiceGatewayEndpointGatewayBindings operation with and without retries enabled
  @Test
  public void testListPrivatePathServiceGatewayEndpointGatewayBindingsWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testListPrivatePathServiceGatewayEndpointGatewayBindingsWOptions();

    vpcService.disableRetries();
    testListPrivatePathServiceGatewayEndpointGatewayBindingsWOptions();
  }

  // Test the listPrivatePathServiceGatewayEndpointGatewayBindings operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testListPrivatePathServiceGatewayEndpointGatewayBindingsNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.listPrivatePathServiceGatewayEndpointGatewayBindings(null).execute();
  }

  // Test the listPrivatePathServiceGatewayEndpointGatewayBindings operation using the PrivatePathServiceGatewayEndpointGatewayBindingsPager.getNext() method
  @Test
  public void testListPrivatePathServiceGatewayEndpointGatewayBindingsWithPagerGetNext() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"endpoint_gateway_bindings\":[{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"expiration_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/private_path_service_gateways/r006-7268d425-59b7-48fd-9735-81a7271657d5/endpoint_gateway_bindings/r006-7c30adc3-083d-46a1-a72c-d0ca8654a1d0\",\"id\":\"r006-7c30adc3-083d-46a1-a72c-d0ca8654a1d0\",\"lifecycle_state\":\"stable\",\"resource_type\":\"private_path_service_gateway_endpoint_gateway_binding\",\"status\":\"abandoned\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"endpoint_gateway_bindings\":[{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"expiration_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/private_path_service_gateways/r006-7268d425-59b7-48fd-9735-81a7271657d5/endpoint_gateway_bindings/r006-7c30adc3-083d-46a1-a72c-d0ca8654a1d0\",\"id\":\"r006-7c30adc3-083d-46a1-a72c-d0ca8654a1d0\",\"lifecycle_state\":\"stable\",\"resource_type\":\"private_path_service_gateway_endpoint_gateway_binding\",\"status\":\"abandoned\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListPrivatePathServiceGatewayEndpointGatewayBindingsOptions listPrivatePathServiceGatewayEndpointGatewayBindingsOptions = new ListPrivatePathServiceGatewayEndpointGatewayBindingsOptions.Builder()
      .privatePathServiceGatewayId("testString")
      .limit(Long.valueOf("10"))
      .status("abandoned")
      .accountId("bb1b52262f7441a586f49068482f1e60")
      .build();

    List<PrivatePathServiceGatewayEndpointGatewayBinding> allResults = new ArrayList<>();
    PrivatePathServiceGatewayEndpointGatewayBindingsPager pager = new PrivatePathServiceGatewayEndpointGatewayBindingsPager(vpcService, listPrivatePathServiceGatewayEndpointGatewayBindingsOptions);
    while (pager.hasNext()) {
      List<PrivatePathServiceGatewayEndpointGatewayBinding> nextPage = pager.getNext();
      assertNotNull(nextPage);
      allResults.addAll(nextPage);
    }
    assertEquals(allResults.size(), 2);
  }
  
  // Test the listPrivatePathServiceGatewayEndpointGatewayBindings operation using the PrivatePathServiceGatewayEndpointGatewayBindingsPager.getAll() method
  @Test
  public void testListPrivatePathServiceGatewayEndpointGatewayBindingsWithPagerGetAll() throws Throwable {
    // Set up the two-page mock response.
    String mockResponsePage1 = "{\"next\":{\"href\":\"https://myhost.com/somePath?start=1\"},\"total_count\":2,\"limit\":1,\"endpoint_gateway_bindings\":[{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"expiration_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/private_path_service_gateways/r006-7268d425-59b7-48fd-9735-81a7271657d5/endpoint_gateway_bindings/r006-7c30adc3-083d-46a1-a72c-d0ca8654a1d0\",\"id\":\"r006-7c30adc3-083d-46a1-a72c-d0ca8654a1d0\",\"lifecycle_state\":\"stable\",\"resource_type\":\"private_path_service_gateway_endpoint_gateway_binding\",\"status\":\"abandoned\"}]}";
    String mockResponsePage2 = "{\"total_count\":2,\"limit\":1,\"endpoint_gateway_bindings\":[{\"account\":{\"id\":\"bb1b52262f7441a586f49068482f1e60\",\"resource_type\":\"account\"},\"created_at\":\"2019-01-01T12:00:00.000Z\",\"expiration_at\":\"2019-01-01T12:00:00.000Z\",\"href\":\"https://us-south.iaas.cloud.ibm.com/v1/private_path_service_gateways/r006-7268d425-59b7-48fd-9735-81a7271657d5/endpoint_gateway_bindings/r006-7c30adc3-083d-46a1-a72c-d0ca8654a1d0\",\"id\":\"r006-7c30adc3-083d-46a1-a72c-d0ca8654a1d0\",\"lifecycle_state\":\"stable\",\"resource_type\":\"private_path_service_gateway_endpoint_gateway_binding\",\"status\":\"abandoned\"}]}";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage1));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponsePage2));
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(400)
      .setBody("{\"message\": \"No more results available!\"}"));

    ListPrivatePathServiceGatewayEndpointGatewayBindingsOptions listPrivatePathServiceGatewayEndpointGatewayBindingsOptions = new ListPrivatePathServiceGatewayEndpointGatewayBindingsOptions.Builder()
      .privatePathServiceGatewayId("testString")
      .limit(Long.valueOf("10"))
      .status("abandoned")
      .accountId("bb1b52262f7441a586f49068482f1e60")
      .build();

    PrivatePathServiceGatewayEndpointGatewayBindingsPager pager = new PrivatePathServiceGatewayEndpointGatewayBindingsPager(vpcService, listPrivatePathServiceGatewayEndpointGatewayBindingsOptions);
    List<PrivatePathServiceGatewayEndpointGatewayBinding> allResults = pager.getAll();
    assertNotNull(allResults);
    assertEquals(allResults.size(), 2);
  }
  
  // Test the getPrivatePathServiceGatewayEndpointGatewayBinding operation with a valid options model parameter
  @Test
  public void testGetPrivatePathServiceGatewayEndpointGatewayBindingWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "{\"account\": {\"id\": \"bb1b52262f7441a586f49068482f1e60\", \"resource_type\": \"account\"}, \"created_at\": \"2019-01-01T12:00:00.000Z\", \"expiration_at\": \"2019-01-01T12:00:00.000Z\", \"href\": \"https://us-south.iaas.cloud.ibm.com/v1/private_path_service_gateways/r006-7268d425-59b7-48fd-9735-81a7271657d5/endpoint_gateway_bindings/r006-7c30adc3-083d-46a1-a72c-d0ca8654a1d0\", \"id\": \"r006-7c30adc3-083d-46a1-a72c-d0ca8654a1d0\", \"lifecycle_state\": \"stable\", \"resource_type\": \"private_path_service_gateway_endpoint_gateway_binding\", \"status\": \"abandoned\"}";
    String getPrivatePathServiceGatewayEndpointGatewayBindingPath = "/private_path_service_gateways/testString/endpoint_gateway_bindings/testString";
    server.enqueue(new MockResponse()
      .setHeader("Content-type", "application/json")
      .setResponseCode(200)
      .setBody(mockResponseBody));

    // Construct an instance of the GetPrivatePathServiceGatewayEndpointGatewayBindingOptions model
    GetPrivatePathServiceGatewayEndpointGatewayBindingOptions getPrivatePathServiceGatewayEndpointGatewayBindingOptionsModel = new GetPrivatePathServiceGatewayEndpointGatewayBindingOptions.Builder()
      .privatePathServiceGatewayId("testString")
      .id("testString")
      .build();

    // Invoke getPrivatePathServiceGatewayEndpointGatewayBinding() with a valid options model and verify the result
    Response<PrivatePathServiceGatewayEndpointGatewayBinding> response = vpcService.getPrivatePathServiceGatewayEndpointGatewayBinding(getPrivatePathServiceGatewayEndpointGatewayBindingOptionsModel).execute();
    assertNotNull(response);
    PrivatePathServiceGatewayEndpointGatewayBinding responseObj = response.getResult();
    assertNotNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "GET");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, getPrivatePathServiceGatewayEndpointGatewayBindingPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the getPrivatePathServiceGatewayEndpointGatewayBinding operation with and without retries enabled
  @Test
  public void testGetPrivatePathServiceGatewayEndpointGatewayBindingWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testGetPrivatePathServiceGatewayEndpointGatewayBindingWOptions();

    vpcService.disableRetries();
    testGetPrivatePathServiceGatewayEndpointGatewayBindingWOptions();
  }

  // Test the getPrivatePathServiceGatewayEndpointGatewayBinding operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testGetPrivatePathServiceGatewayEndpointGatewayBindingNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.getPrivatePathServiceGatewayEndpointGatewayBinding(null).execute();
  }

  // Test the denyPrivatePathServiceGatewayEndpointGatewayBinding operation with a valid options model parameter
  @Test
  public void testDenyPrivatePathServiceGatewayEndpointGatewayBindingWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String denyPrivatePathServiceGatewayEndpointGatewayBindingPath = "/private_path_service_gateways/testString/endpoint_gateway_bindings/testString/deny";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the DenyPrivatePathServiceGatewayEndpointGatewayBindingOptions model
    DenyPrivatePathServiceGatewayEndpointGatewayBindingOptions denyPrivatePathServiceGatewayEndpointGatewayBindingOptionsModel = new DenyPrivatePathServiceGatewayEndpointGatewayBindingOptions.Builder()
      .privatePathServiceGatewayId("testString")
      .id("testString")
      .setAccountPolicy(true)
      .build();

    // Invoke denyPrivatePathServiceGatewayEndpointGatewayBinding() with a valid options model and verify the result
    Response<Void> response = vpcService.denyPrivatePathServiceGatewayEndpointGatewayBinding(denyPrivatePathServiceGatewayEndpointGatewayBindingOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, denyPrivatePathServiceGatewayEndpointGatewayBindingPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the denyPrivatePathServiceGatewayEndpointGatewayBinding operation with and without retries enabled
  @Test
  public void testDenyPrivatePathServiceGatewayEndpointGatewayBindingWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testDenyPrivatePathServiceGatewayEndpointGatewayBindingWOptions();

    vpcService.disableRetries();
    testDenyPrivatePathServiceGatewayEndpointGatewayBindingWOptions();
  }

  // Test the denyPrivatePathServiceGatewayEndpointGatewayBinding operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testDenyPrivatePathServiceGatewayEndpointGatewayBindingNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.denyPrivatePathServiceGatewayEndpointGatewayBinding(null).execute();
  }

  // Test the permitPrivatePathServiceGatewayEndpointGatewayBinding operation with a valid options model parameter
  @Test
  public void testPermitPrivatePathServiceGatewayEndpointGatewayBindingWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String permitPrivatePathServiceGatewayEndpointGatewayBindingPath = "/private_path_service_gateways/testString/endpoint_gateway_bindings/testString/permit";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the PermitPrivatePathServiceGatewayEndpointGatewayBindingOptions model
    PermitPrivatePathServiceGatewayEndpointGatewayBindingOptions permitPrivatePathServiceGatewayEndpointGatewayBindingOptionsModel = new PermitPrivatePathServiceGatewayEndpointGatewayBindingOptions.Builder()
      .privatePathServiceGatewayId("testString")
      .id("testString")
      .setAccountPolicy(true)
      .build();

    // Invoke permitPrivatePathServiceGatewayEndpointGatewayBinding() with a valid options model and verify the result
    Response<Void> response = vpcService.permitPrivatePathServiceGatewayEndpointGatewayBinding(permitPrivatePathServiceGatewayEndpointGatewayBindingOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, permitPrivatePathServiceGatewayEndpointGatewayBindingPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the permitPrivatePathServiceGatewayEndpointGatewayBinding operation with and without retries enabled
  @Test
  public void testPermitPrivatePathServiceGatewayEndpointGatewayBindingWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testPermitPrivatePathServiceGatewayEndpointGatewayBindingWOptions();

    vpcService.disableRetries();
    testPermitPrivatePathServiceGatewayEndpointGatewayBindingWOptions();
  }

  // Test the permitPrivatePathServiceGatewayEndpointGatewayBinding operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testPermitPrivatePathServiceGatewayEndpointGatewayBindingNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.permitPrivatePathServiceGatewayEndpointGatewayBinding(null).execute();
  }

  // Test the publishPrivatePathServiceGateway operation with a valid options model parameter
  @Test
  public void testPublishPrivatePathServiceGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String publishPrivatePathServiceGatewayPath = "/private_path_service_gateways/testString/publish";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the PublishPrivatePathServiceGatewayOptions model
    PublishPrivatePathServiceGatewayOptions publishPrivatePathServiceGatewayOptionsModel = new PublishPrivatePathServiceGatewayOptions.Builder()
      .privatePathServiceGatewayId("testString")
      .build();

    // Invoke publishPrivatePathServiceGateway() with a valid options model and verify the result
    Response<Void> response = vpcService.publishPrivatePathServiceGateway(publishPrivatePathServiceGatewayOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, publishPrivatePathServiceGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the publishPrivatePathServiceGateway operation with and without retries enabled
  @Test
  public void testPublishPrivatePathServiceGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testPublishPrivatePathServiceGatewayWOptions();

    vpcService.disableRetries();
    testPublishPrivatePathServiceGatewayWOptions();
  }

  // Test the publishPrivatePathServiceGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testPublishPrivatePathServiceGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.publishPrivatePathServiceGateway(null).execute();
  }

  // Test the revokeAccountForPrivatePathServiceGateway operation with a valid options model parameter
  @Test
  public void testRevokeAccountForPrivatePathServiceGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String revokeAccountForPrivatePathServiceGatewayPath = "/private_path_service_gateways/testString/revoke_account";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the AccountIdentityById model
    AccountIdentityById accountIdentityModel = new AccountIdentityById.Builder()
      .id("bb1b52262f7441a586f49068482f1e60")
      .build();

    // Construct an instance of the RevokeAccountForPrivatePathServiceGatewayOptions model
    RevokeAccountForPrivatePathServiceGatewayOptions revokeAccountForPrivatePathServiceGatewayOptionsModel = new RevokeAccountForPrivatePathServiceGatewayOptions.Builder()
      .privatePathServiceGatewayId("testString")
      .account(accountIdentityModel)
      .build();

    // Invoke revokeAccountForPrivatePathServiceGateway() with a valid options model and verify the result
    Response<Void> response = vpcService.revokeAccountForPrivatePathServiceGateway(revokeAccountForPrivatePathServiceGatewayOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, revokeAccountForPrivatePathServiceGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the revokeAccountForPrivatePathServiceGateway operation with and without retries enabled
  @Test
  public void testRevokeAccountForPrivatePathServiceGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testRevokeAccountForPrivatePathServiceGatewayWOptions();

    vpcService.disableRetries();
    testRevokeAccountForPrivatePathServiceGatewayWOptions();
  }

  // Test the revokeAccountForPrivatePathServiceGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testRevokeAccountForPrivatePathServiceGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.revokeAccountForPrivatePathServiceGateway(null).execute();
  }

  // Test the unpublishPrivatePathServiceGateway operation with a valid options model parameter
  @Test
  public void testUnpublishPrivatePathServiceGatewayWOptions() throws Throwable {
    // Register a mock response
    String mockResponseBody = "";
    String unpublishPrivatePathServiceGatewayPath = "/private_path_service_gateways/testString/unpublish";
    server.enqueue(new MockResponse()
      .setResponseCode(204)
      .setBody(mockResponseBody));

    // Construct an instance of the UnpublishPrivatePathServiceGatewayOptions model
    UnpublishPrivatePathServiceGatewayOptions unpublishPrivatePathServiceGatewayOptionsModel = new UnpublishPrivatePathServiceGatewayOptions.Builder()
      .privatePathServiceGatewayId("testString")
      .build();

    // Invoke unpublishPrivatePathServiceGateway() with a valid options model and verify the result
    Response<Void> response = vpcService.unpublishPrivatePathServiceGateway(unpublishPrivatePathServiceGatewayOptionsModel).execute();
    assertNotNull(response);
    Void responseObj = response.getResult();
    assertNull(responseObj);

    // Verify the contents of the request sent to the mock server
    RecordedRequest request = server.takeRequest();
    assertNotNull(request);
    assertEquals(request.getMethod(), "POST");
    // Verify request path
    String parsedPath = TestUtilities.parseReqPath(request);
    assertEquals(parsedPath, unpublishPrivatePathServiceGatewayPath);
    // Verify query params
    Map<String, String> query = TestUtilities.parseQueryString(request);
    assertNotNull(query);
    assertEquals(query.get("version"), "2025-07-08");
    assertEquals(Long.valueOf(query.get("generation")), Long.valueOf("2"));
  }

  // Test the unpublishPrivatePathServiceGateway operation with and without retries enabled
  @Test
  public void testUnpublishPrivatePathServiceGatewayWRetries() throws Throwable {
    vpcService.enableRetries(4, 30);
    testUnpublishPrivatePathServiceGatewayWOptions();

    vpcService.disableRetries();
    testUnpublishPrivatePathServiceGatewayWOptions();
  }

  // Test the unpublishPrivatePathServiceGateway operation with a null options model (negative test)
  @Test(expectedExceptions = IllegalArgumentException.class)
  public void testUnpublishPrivatePathServiceGatewayNoOptions() throws Throwable {
    server.enqueue(new MockResponse());
    vpcService.unpublishPrivatePathServiceGateway(null).execute();
  }

  // Perform setup needed before each test method
  @BeforeMethod
  public void beforeEachTest() {
    // Start the mock server.
    try {
      server = new MockWebServer();
      server.start();
    } catch (IOException err) {
      fail("Failed to instantiate mock web server");
    }

    // Construct an instance of the service
    constructClientService();
  }

  // Perform tear down after each test method
  @AfterMethod
  public void afterEachTest() throws IOException {
    server.shutdown();
    vpcService = null;
  }

  // Constructs an instance of the service to be used by the tests
  public void constructClientService() {
    System.setProperty("TESTSERVICE_AUTH_TYPE", "noAuth");
    final String serviceName = "testService";

    vpcService = Vpc.newInstance(serviceName);
    String url = server.url("/").toString();
    vpcService.setServiceUrl(url);
  }
}